{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105",
    "id": 2708279020,
    "node_id": "PR_kwDOABII586hbQ7s",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33105",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33105.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33105.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/5f95665e243268a93bd16af73fc69c5274ea788b",
    "number": 33105,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "validation: detect witness stripping without re-running Script checks",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Since it was introduced in 4eb515574e1012bc8ea5dafc3042dcdf4c766f26 (#18044), the detection of a stripped witness relies on running the Script checks 3 times. In the worst case, this consists in running Script validation for every single input 3 times.\r\n\r\nDetection of a stripped witness is necessary because in this case wtxid==txid, and the transaction's wtxid must not be added to the reject filter or it could allow a malicious peer to interfere with txid-based orphan resolution as used in 1p1c package relay.\r\n\r\nHowever it is not necessary to run Script validation to detect a stripped witness (much less so doing it 3 times in a row). There are 3 types of witness program: defined program types (Taproot, P2WPKH and P2WSH), undefined types, and the Pay-to-anchor carve-out.\r\n\r\nFor defined program types, Script validation with an empty witness will always fail (by consensus). For undefined program types, Script validation is always going to fail regardless of the witness (by standardness). For P2A, an empty witness is never going to lead to a failure.\r\n\r\nTherefore it holds that we can always detect a stripped witness without re-running Script validation. However this might lead to more \"false positives\" (cases where we return witness stripping for an otherwise invalid transaction) than the existing implementation. For instance a transaction with one P2PKH input with an invalid signature and one P2WPKH input with its witness stripped. The existing implementation would treat it as consensus invalid while the implementation in this PR would always consider it witness stripped.\r\n\r\nh/t AJ: this essentially implements a variant of https://github.com/bitcoin/bitcoin/pull/33066#issuecomment-3135258539.",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "created_at": "2025-07-30T20:13:44Z",
    "updated_at": "2025-08-07T20:26:40Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "7d57489815b8afcccec4e40f806be10fddde05b1",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "nervana21",
        "id": 205626986,
        "node_id": "U_kgDODEGeag",
        "avatar_url": "https://avatars.githubusercontent.com/u/205626986?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nervana21",
        "html_url": "https://github.com/nervana21",
        "followers_url": "https://api.github.com/users/nervana21/followers",
        "following_url": "https://api.github.com/users/nervana21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nervana21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nervana21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nervana21/subscriptions",
        "organizations_url": "https://api.github.com/users/nervana21/orgs",
        "repos_url": "https://api.github.com/users/nervana21/repos",
        "events_url": "https://api.github.com/users/nervana21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nervana21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "darosior:2507_early_witstrip_detection",
      "ref": "2507_early_witstrip_detection",
      "sha": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 168868367,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjg4NjgzNjc=",
        "name": "bitcoin",
        "full_name": "darosior/bitcoin",
        "owner": {
          "login": "darosior",
          "id": 22457751,
          "node_id": "MDQ6VXNlcjIyNDU3NzUx",
          "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/darosior",
          "html_url": "https://github.com/darosior",
          "followers_url": "https://api.github.com/users/darosior/followers",
          "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
          "organizations_url": "https://api.github.com/users/darosior/orgs",
          "repos_url": "https://api.github.com/users/darosior/repos",
          "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/darosior/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/darosior/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/darosior/bitcoin",
        "archive_url": "https://api.github.com/repos/darosior/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/darosior/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/darosior/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/darosior/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/darosior/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/darosior/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/darosior/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/darosior/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/darosior/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/darosior/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/darosior/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/darosior/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/darosior/bitcoin/events",
        "forks_url": "https://api.github.com/repos/darosior/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/darosior/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/darosior/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/darosior/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/darosior/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/darosior/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/darosior/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/darosior/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/darosior/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/darosior/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/darosior/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/darosior/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/darosior/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/darosior/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/darosior/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/darosior/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:darosior/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/darosior/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/darosior/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/darosior/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/darosior/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/darosior/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/darosior/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/darosior/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/darosior/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/darosior/bitcoin/hooks",
        "svn_url": "https://github.com/darosior/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 270753,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-07T20:25:21Z",
        "created_at": "2019-02-02T19:20:27Z",
        "updated_at": "2024-11-20T13:45:57Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "2bb06bcaf284d3522db5411890c20ba1a587703e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37616,
        "stargazers_count": 84918,
        "watchers_count": 84918,
        "size": 290947,
        "default_branch": "master",
        "open_issues_count": 748,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-07T13:53:30Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-08-07T20:14:50Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 195,
    "deletions": 7,
    "changed_files": 5,
    "commits": 3,
    "review_comments": 35,
    "comments": 13
  },
  "events": [
    {
      "event": "labeled",
      "id": 18906869640,
      "node_id": "LE_lADOABII587DZzRzzwAAAARm7--I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18906869640",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T20:13:47Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 3137685212,
      "node_id": "IC_kwDOABII5867BUbc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3137685212",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T20:13:49Z",
      "updated_at": "2025-08-07T20:25:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33105.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [glozow](https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3080155389), [sipa](https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3161082300) |\n| Approach ACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3073725534) |\n| Stale ACK | [achow101](https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3141419839), [nervana21](https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3143760463), [Crypt-iQ](https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3097524181) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32317](https://github.com/bitcoin/bitcoin/pull/32317) (kernel: Separate UTXO set access from validation functions by TheCharlatan)\n* [#31682](https://github.com/bitcoin/bitcoin/pull/31682) ([IBD] specialize CheckBlock's input & coinbase checks by l0rinc)\n* [#28676](https://github.com/bitcoin/bitcoin/pull/28676) (Cluster mempool implementation by sdaftuar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3137685212",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "reviewed",
      "id": 3073725534,
      "node_id": "PRR_kwDOABII5863NVRe",
      "url": null,
      "actor": null,
      "commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3073725534",
      "submitted_at": "2025-07-31T01:23:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
    },
    {
      "event": "reviewed",
      "id": 3075514947,
      "node_id": "PRR_kwDOABII5863UKJD",
      "url": null,
      "actor": null,
      "commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3075514947",
      "submitted_at": "2025-07-31T13:46:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
    },
    {
      "event": "reviewed",
      "id": 3075715872,
      "node_id": "PRR_kwDOABII5863U7Mg",
      "url": null,
      "actor": null,
      "commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "nervana21",
        "id": 205626986,
        "node_id": "U_kgDODEGeag",
        "avatar_url": "https://avatars.githubusercontent.com/u/205626986?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nervana21",
        "html_url": "https://github.com/nervana21",
        "followers_url": "https://api.github.com/users/nervana21/followers",
        "following_url": "https://api.github.com/users/nervana21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nervana21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nervana21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nervana21/subscriptions",
        "organizations_url": "https://api.github.com/users/nervana21/orgs",
        "repos_url": "https://api.github.com/users/nervana21/repos",
        "events_url": "https://api.github.com/users/nervana21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nervana21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3075715872",
      "submitted_at": "2025-07-31T14:37:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
    },
    {
      "event": "commented",
      "id": 3141419839,
      "node_id": "IC_kwDOABII5867PkM_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3141419839",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T21:39:52Z",
      "updated_at": "2025-07-31T21:39:52Z",
      "author_association": "MEMBER",
      "body": "ACK 0e22a1401c7edee8946f404dd0deb59a94231340",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3141419839",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "review_requested",
      "id": 18927272027,
      "node_id": "RRE_lADOABII587DZzRzzwAAAARoJ0Bb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18927272027",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T21:39:56Z",
      "requested_reviewer": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3143760463,
      "node_id": "IC_kwDOABII5867YfpP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3143760463",
      "actor": {
        "login": "nervana21",
        "id": 205626986,
        "node_id": "U_kgDODEGeag",
        "avatar_url": "https://avatars.githubusercontent.com/u/205626986?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nervana21",
        "html_url": "https://github.com/nervana21",
        "followers_url": "https://api.github.com/users/nervana21/followers",
        "following_url": "https://api.github.com/users/nervana21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nervana21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nervana21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nervana21/subscriptions",
        "organizations_url": "https://api.github.com/users/nervana21/orgs",
        "repos_url": "https://api.github.com/users/nervana21/repos",
        "events_url": "https://api.github.com/users/nervana21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nervana21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T08:46:44Z",
      "updated_at": "2025-08-01T08:46:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK 0e22a14\r\n\r\nAfter understanding the larger context of this PR, I thoroughly reviewed all code. I also ran the updated tests locally and modified them such that they all passed and failed in the expected manner.",
      "user": {
        "login": "nervana21",
        "id": 205626986,
        "node_id": "U_kgDODEGeag",
        "avatar_url": "https://avatars.githubusercontent.com/u/205626986?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nervana21",
        "html_url": "https://github.com/nervana21",
        "followers_url": "https://api.github.com/users/nervana21/followers",
        "following_url": "https://api.github.com/users/nervana21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nervana21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nervana21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nervana21/subscriptions",
        "organizations_url": "https://api.github.com/users/nervana21/orgs",
        "repos_url": "https://api.github.com/users/nervana21/repos",
        "events_url": "https://api.github.com/users/nervana21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nervana21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3143760463",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "reviewed",
      "id": 3080155389,
      "node_id": "PRR_kwDOABII5863l3D9",
      "url": null,
      "actor": null,
      "commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "approach ACK - I'm not super confident in my script knowledge but I can't think of why you couldn't detect witness stripped this way.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3080155389",
      "submitted_at": "2025-08-01T18:37:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
    },
    {
      "event": "commented",
      "id": 3148912384,
      "node_id": "IC_kwDOABII5867sJcA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3148912384",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-04T02:03:45Z",
      "updated_at": "2025-08-04T02:28:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm a little out of my depth and it is getting late so might be off-base, but reviewing this PR I think it's a slight behavior change in what we see as witness-stripped? P2SH-P2WSH are not caught by `IsWitnessProgram` in this PR, but they are caught as witness-stripped in master. I checked by running the test_p2sh_witness subtest in p2p_segwit.py and printing if witness-stripped was detected. I didn't test P2SH-P2WPKH. Not sure if it matters, figured I'd point it out.",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3148912384",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "commented",
      "id": 3149108432,
      "node_id": "IC_kwDOABII5867s5TQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3149108432",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-04T04:42:54Z",
      "updated_at": "2025-08-04T04:42:54Z",
      "author_association": "MEMBER",
      "body": "Good catch.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3149108432",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViMDczMjA5ZGI5ZWZkYmMyYzk0YmMxZjUzNWEyN2VjNmIyMGQ5NTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb073209db9efdbc2c94bc1f535a27ec6b20d954",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/eb073209db9efdbc2c94bc1f535a27ec6b20d954",
      "tree": {
        "sha": "dd7e47f0f1c5875d23ec8f26f425b8252dde2609",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd7e47f0f1c5875d23ec8f26f425b8252dde2609"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91058877ff7842564d98d13465132ae497ae3997",
          "sha": "91058877ff7842564d98d13465132ae497ae3997",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/91058877ff7842564d98d13465132ae497ae3997"
        }
      ],
      "message": "qa: test witness stripping in p2p_segwit\n\nA stripped witness is detected as a special case in mempool acceptance to make sure we do not add\nthe wtxid (which is =txid since witness is stripped) to the reject filter. This is because it may\ninterfere with 1p1c parent relay which currently uses orphan reconciliation (and originally it was\nuntil wtxid-relay was widely adopted on the network.\n\nThis commit adds a test for this special case in the p2p_segwit function test, both when spending\na native segwit output and when spending a p2sh-wrapped segwit output.\n\nThanks to Eugene Siegel for pointing out the p2sh-wrapped detection did not have test coverage by\nfinding a bug in a related patch of mine.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-08-04T18:13:04Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-08-04T18:06:27Z"
      },
      "sha": "eb073209db9efdbc2c94bc1f535a27ec6b20d954"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18976250418,
      "node_id": "HRFPE_lADOABII587DZzRzzwAAAARrEpoy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18976250418",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1d112ff3e0ab74e4f22d50cd1eccb7380a603243",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/1d112ff3e0ab74e4f22d50cd1eccb7380a603243",
      "created_at": "2025-08-04T18:23:29Z"
    },
    {
      "event": "commented",
      "id": 3151900931,
      "node_id": "IC_kwDOABII58673jED",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3151900931",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-04T18:23:39Z",
      "updated_at": "2025-08-04T18:23:39Z",
      "author_association": "MEMBER",
      "body": "I fixed the bug @Crypt-iQ found (thanks!) and added a functional test that explicitly tests for witness-stripping detection for both native and p2sh-wrapped outputs. This test would have failed without the fix. In addition, i made the segwit-spend detection into its own helper function for which i added a unit test to sanity check detection against all defined output types.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3151900931",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "mentioned",
      "id": 18976252853,
      "node_id": "MEE_lADOABII587DZzRzzwAAAARrEqO1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18976252853",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-04T18:23:40Z"
    },
    {
      "event": "subscribed",
      "id": 18976252872,
      "node_id": "SE_lADOABII587DZzRzzwAAAARrEqPI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18976252872",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-04T18:23:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18976297213,
      "node_id": "HRFPE_lADOABII587DZzRzzwAAAARrE1D9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18976297213",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a6bb6b7f9c666df9bf7816a77230dfde79aa059e",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/a6bb6b7f9c666df9bf7816a77230dfde79aa059e",
      "created_at": "2025-08-04T18:26:46Z"
    },
    {
      "event": "reviewed",
      "id": 3085368470,
      "node_id": "PRR_kwDOABII58635vyW",
      "url": null,
      "actor": null,
      "commit_id": "a6bb6b7f9c666df9bf7816a77230dfde79aa059e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3085368470",
      "submitted_at": "2025-08-04T18:47:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
    },
    {
      "event": "reviewed",
      "id": 3086024186,
      "node_id": "PRR_kwDOABII58638P36",
      "url": null,
      "actor": null,
      "commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3086024186",
      "submitted_at": "2025-08-04T22:57:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
    },
    {
      "event": "commented",
      "id": 3152986009,
      "node_id": "IC_kwDOABII58677r-Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3152986009",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T01:40:05Z",
      "updated_at": "2025-08-05T01:40:05Z",
      "author_association": "MEMBER",
      "body": "Why would this case ever occur? Seems like a lot of code to handle an unexpected path. And would-be DoS attackers can defeat it with a dummy witness anyway, right?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3152986009",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "commented",
      "id": 3155344377,
      "node_id": "IC_kwDOABII5868Erv5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3155344377",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T13:55:34Z",
      "updated_at": "2025-08-05T13:55:34Z",
      "author_association": "MEMBER",
      "body": "> Why would this case ever occur?\r\n\r\nMost likely never because we have the detection. If we didn't, someone may try to exploit this case to hinder propagation of 1p1c packages (see OP).\r\n\r\n> Seems like a lot of code to handle an unexpected path.\r\n\r\nYeah. Note however this is *replacing* expensive code. I think it's always fair to question adding more code, but i hope in this instance it is pretty clear that replacing the expensive code by an inexpensive, albeit slightly more verbose, one is worth it. Note also 80% of code added in this PR is tests, some for currently-untested behaviour.\r\n\r\n> And would-be DoS attackers can defeat it with a dummy witness anyway, right?\r\n\r\nI think you are confusing the witness-stripping detection, which we do for \"censorship resistance\", with the rationale for this PR which is \"DoS resistance\" (by making said detection a lot cheaper).",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3155344377",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18998392524,
      "node_id": "HRFPE_lADOABII587DZzRzzwAAAARsZHbM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18998392524",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "370770fb361fdb745cfa7bb9abc7ee4a7833b83b",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/370770fb361fdb745cfa7bb9abc7ee4a7833b83b",
      "created_at": "2025-08-05T19:25:55Z"
    },
    {
      "event": "commented",
      "id": 3156334619,
      "node_id": "IC_kwDOABII5868Idgb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3156334619",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T19:29:59Z",
      "updated_at": "2025-08-05T19:29:59Z",
      "author_association": "MEMBER",
      "body": "I changed the call site for `SpendsNonAnchorWitnessProg` to be where we detect witness stripping today. Besides being a smaller diff this minimizes the potential for behaviour changes. Note this PR still slightly changes behaviour (see last commit's message and https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2254632919).",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3156334619",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "renamed",
      "id": 18998463594,
      "node_id": "RTE_lADOABII587DZzRzzwAAAARsZYxq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18998463594",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T19:30:52Z",
      "rename": {
        "from": "validation: detect witness stripping early on",
        "to": "validation: detect witness stripping without re-running Script checks"
      }
    },
    {
      "event": "commented",
      "id": 3156720697,
      "node_id": "IC_kwDOABII5868J7w5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3156720697",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T21:34:32Z",
      "updated_at": "2025-08-05T21:34:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Replying out of thread to not derail the thread conversation.\r\n\r\n> This would make sure we don't weaken any existing standardness or consensus error into a witness-stripped one.\r\n\r\nIn current master, these are the consensus errors (I think?) that can be returned as witness-stripped:\r\n- SCRIPT_ERR_WITNESS_MALLEATED (changes txid)\r\n- SCRIPT_ERR_WITNESS_MALLEATED_P2SH (changes txid)\r\n- SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH (for P2WPKH, not the case for P2WSH)\r\n- SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH\r\n\r\nThe other errors require a witness and would fail the `CheckInputScripts` logic early. I might be misunderstanding the comment / being a bit pedantic and maybe you're referring to not adding even more errors that can be converted into witness-stripped?",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3156720697",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "commented",
      "id": 3161082300,
      "node_id": "IC_kwDOABII5868akm8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3161082300",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T18:02:47Z",
      "updated_at": "2025-08-06T18:02:47Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3161082300",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "commented",
      "id": 3161593678,
      "node_id": "IC_kwDOABII5868chdO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3161593678",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T21:00:37Z",
      "updated_at": "2025-08-06T21:01:11Z",
      "author_association": "MEMBER",
      "body": "> maybe you're referring to not adding even more errors that can be converted into witness-stripped?\r\n\r\nYes this is what i meant. There are cases today where we would return WITNESS_STRIPPED for an otherwise invalid transaction (such as it could only be made valid by changing its txid, and we are missing the opportunity of adding its txid to the reject filter). This PR adds more such cases. This is minimized in the latest iteration (https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3156334619) by leaving the witness detection be at the same site as today, since an early witness-stripped detection may overlook even more ways in which the transaction is invalid (for instance too many sigops).",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3161593678",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "reviewed",
      "id": 3097524181,
      "node_id": "PRR_kwDOABII5864oHfV",
      "url": null,
      "actor": null,
      "commit_id": "370770fb361fdb745cfa7bb9abc7ee4a7833b83b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 370770fb361fdb745cfa7bb9abc7ee4a7833b83b modulo commit message change and test comment fix",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#pullrequestreview-3097524181",
      "submitted_at": "2025-08-07T15:00:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
    },
    {
      "event": "review_requested",
      "id": 19037666976,
      "node_id": "RRE_lADOABII587DZzRzzwAAAARuu76g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19037666976",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T15:00:31Z",
      "requested_reviewer": {
        "login": "nervana21",
        "id": 205626986,
        "node_id": "U_kgDODEGeag",
        "avatar_url": "https://avatars.githubusercontent.com/u/205626986?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nervana21",
        "html_url": "https://github.com/nervana21",
        "followers_url": "https://api.github.com/users/nervana21/followers",
        "following_url": "https://api.github.com/users/nervana21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nervana21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nervana21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nervana21/subscriptions",
        "organizations_url": "https://api.github.com/users/nervana21/orgs",
        "repos_url": "https://api.github.com/users/nervana21/repos",
        "events_url": "https://api.github.com/users/nervana21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nervana21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19037667496,
      "node_id": "RRE_lADOABII587DZzRzzwAAAARuu8Co",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19037667496",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T15:00:33Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19037667855,
      "node_id": "RRE_lADOABII587DZzRzzwAAAARuu8IP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19037667855",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T15:00:34Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19037668249,
      "node_id": "RRE_lADOABII587DZzRzzwAAAARuu8OZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19037668249",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T15:00:35Z",
      "requested_reviewer": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcxNGM5MTYwY2Q0NjZjNzIzMWI5MGI0ZWYyNjAyZTk5MjE2MThmZTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/714c9160cd466c7231b90b4ef2602e9921618fe0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/714c9160cd466c7231b90b4ef2602e9921618fe0",
      "tree": {
        "sha": "945c67bcaa925d2fe097a09e1f48bf9a21d5a6f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/945c67bcaa925d2fe097a09e1f48bf9a21d5a6f3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb073209db9efdbc2c94bc1f535a27ec6b20d954",
          "sha": "eb073209db9efdbc2c94bc1f535a27ec6b20d954",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/eb073209db9efdbc2c94bc1f535a27ec6b20d954"
        }
      ],
      "message": "policy: introduce a helper to detect whether a transaction spends Segwit outputs\n\nWe will use this helper in later commits to detect witness stripping without having\nto execute every input Script three times in a row.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-08-07T19:11:58Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-08-04T17:11:33Z"
      },
      "sha": "714c9160cd466c7231b90b4ef2602e9921618fe0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVmOTU2NjVlMjQzMjY4YTkzYmQxNmFmNzNmYzY5YzUyNzRlYTc4OGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f95665e243268a93bd16af73fc69c5274ea788b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5f95665e243268a93bd16af73fc69c5274ea788b",
      "tree": {
        "sha": "b8de5a3664cb39ef4f40aad817a0d4170c27a715",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8de5a3664cb39ef4f40aad817a0d4170c27a715"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/714c9160cd466c7231b90b4ef2602e9921618fe0",
          "sha": "714c9160cd466c7231b90b4ef2602e9921618fe0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/714c9160cd466c7231b90b4ef2602e9921618fe0"
        }
      ],
      "message": "validation: detect witness stripping without re-running Script checks\n\nSince it was introduced in 4eb515574e1012bc8ea5dafc3042dcdf4c766f26 (#18044), the detection of a\nstripped witness relies on running the Script checks 3 times. In the worst case, this consists in\nrunning Script validation 3 times for every single input.\n\nDetection of a stripped witness is necessary because in this case wtxid==txid, and the transaction's\nwtxid must not be added to the reject filter or it could allow a malicious peer to interfere with\ntxid-based orphan resolution as used in 1p1c package relay.\n\nHowever it is not necessary to run Script validation to detect a stripped witness (much less so\ndoing it 3 times in a row). There are 3 types of witness program: defined program types (Taproot,\nP2WPKH, P2WSH), undefined types, and the Pay-to-anchor carve-out.\n\nFor defined program types, Script validation with an empty witness will always fail (by consensus).\nFor undefined program types, Script validation is always going to fail regardless of the witness (by\nstandardness). For P2A, an empty witness is never going to lead to a failure.\n\nTherefore it holds that we can always detect a stripped witness without re-running Script validation.\nHowever this might lead to more \"false positives\" (cases where we return witness stripping for an\notherwise invalid transaction) than the existing implementation. For instance a transaction with one\nP2PKH input with an invalid signature and one P2WPKH input with its witness stripped. The existing\nimplementation would treat it as consensus invalid while the implementation in this commit would\nalways consider it witness stripped.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-08-07T19:12:01Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-07-30T19:56:57Z"
      },
      "sha": "5f95665e243268a93bd16af73fc69c5274ea788b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19043027743,
      "node_id": "HRFPE_lADOABII587DZzRzzwAAAARvDYsf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19043027743",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/5f95665e243268a93bd16af73fc69c5274ea788b",
      "created_at": "2025-08-07T20:25:23Z"
    },
    {
      "event": "commented",
      "id": 3165605860,
      "node_id": "IC_kwDOABII5868r0_k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3165605860",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T20:26:40Z",
      "updated_at": "2025-08-07T20:26:40Z",
      "author_association": "MEMBER",
      "body": "Corrected commit message and OP as per @Crypt-iQ's [point](https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2260386539).",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#issuecomment-3165605860",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33105"
    },
    {
      "event": "mentioned",
      "id": 19043044224,
      "node_id": "MEE_lADOABII587DZzRzzwAAAARvDcuA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19043044224",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T20:26:42Z"
    },
    {
      "event": "subscribed",
      "id": 19043044240,
      "node_id": "SE_lADOABII587DZzRzzwAAAARvDcuQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19043044240",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T20:26:42Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244141585",
      "pull_request_review_id": 3073725534,
      "id": 2244141585,
      "node_id": "PRRC_kwDOABII586FwuIR",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't this check also be gated by `m_opts.require_standard` ? I guess that could be done in #29843 presuming this is merged first.",
      "created_at": "2025-07-31T01:13:28Z",
      "updated_at": "2025-07-31T01:23:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2244141585",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244141585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 909,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244144979",
      "pull_request_review_id": 3073725534,
      "id": 2244144979,
      "node_id": "PRRC_kwDOABII586Fwu9T",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.\n+        int version;\n+        std::vector<uint8_t> program;\n+        for (const auto& txin: tx.vin) {\n+            const auto& prev_spk{m_view.AccessCoin(txin.prevout).out.scriptPubKey};\n+            if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe put this logic in policy.h and call `if (RequiresNonEmptyWitness(prev_spk))` or `if (RequiresNonEmptyWitness(tx))`?",
      "created_at": "2025-07-31T01:17:49Z",
      "updated_at": "2025-07-31T01:23:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2244144979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244144979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245380170",
      "pull_request_review_id": 3075411239,
      "id": 2245380170,
      "node_id": "PRRC_kwDOABII586F1chK",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2244141585,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I considered it and decided against because 1) whether to add the txid to the reject filter seems unrelated to standardness (and surprising that `-acceptnonstdtxn=1` would now break 1p1c in the adversarial case) and 2) a failure here means the witness is invalid by consensus, #29843 would already not allow it today on master.",
      "created_at": "2025-07-31T13:19:08Z",
      "updated_at": "2025-07-31T13:19:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2245380170",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245380170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 909,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245449707",
      "pull_request_review_id": 3075509933,
      "id": 2245449707,
      "node_id": "PRRC_kwDOABII586F1tfr",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.\n+        int version;\n+        std::vector<uint8_t> program;\n+        for (const auto& txin: tx.vin) {\n+            const auto& prev_spk{m_view.AccessCoin(txin.prevout).out.scriptPubKey};\n+            if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2244144979,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this would be a bit confusing because it would need to return `true` for undefined program types, whereas we don't know yet if this type will require a witness or not (presumably yes, but hey). I also think it's brief enough to not warrant its own function. Happy to change it, but it seems cleaner this way.",
      "created_at": "2025-07-31T13:45:19Z",
      "updated_at": "2025-08-04T13:21:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2245449707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245449707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245453045",
      "pull_request_review_id": 3075514947,
      "id": 2245453045,
      "node_id": "PRRC_kwDOABII586F1uT1",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 1,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "self nit: if i retouch, 0e22a1401c7edee8946f404dd0deb59a94231340's message is missing a word at the end of the second sentence.",
      "created_at": "2025-07-31T13:46:42Z",
      "updated_at": "2025-07-31T13:46:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2245453045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245453045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 902,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245589620",
      "pull_request_review_id": 3075715872,
      "id": 2245589620,
      "node_id": "PRRC_kwDOABII586F2Pp0",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": null,
      "user": {
        "login": "nervana21",
        "id": 205626986,
        "node_id": "U_kgDODEGeag",
        "avatar_url": "https://avatars.githubusercontent.com/u/205626986?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nervana21",
        "html_url": "https://github.com/nervana21",
        "followers_url": "https://api.github.com/users/nervana21/followers",
        "following_url": "https://api.github.com/users/nervana21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nervana21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nervana21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nervana21/subscriptions",
        "organizations_url": "https://api.github.com/users/nervana21/orgs",
        "repos_url": "https://api.github.com/users/nervana21/repos",
        "events_url": "https://api.github.com/users/nervana21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nervana21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Small nit. This comment could be updated now that we're checking for both `nonstandard` and `stripped` witnesses\r\n\r\n```suggestion\r\n    // Check for witness-related policy violations.\r\n```",
      "created_at": "2025-07-31T14:37:15Z",
      "updated_at": "2025-07-31T14:37:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2245589620",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245589620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 904,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2247057170",
      "pull_request_review_id": 3077863439,
      "id": 2247057170,
      "node_id": "PRRC_kwDOABII586F718S",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.\n+        int version;\n+        std::vector<uint8_t> program;\n+        for (const auto& txin: tx.vin) {\n+            const auto& prev_spk{m_view.AccessCoin(txin.prevout).out.scriptPubKey};\n+            if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2244144979,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think that's fine -- if `require_standard` is true, then undefined program types will have already given an INPUTS_NOT_STANDARD response; if it's not true and #29843 has been merged, then we'll accept any witness including a null witness for undefined program types, so `RequiresNonEmptyWitness` should return false for them. That can change to true when they're defined in a soft-fork, but that's soft-fork behaviour, so should be fine.\r\n\r\nBut worrying about it in 29843 rather than here seems best.",
      "created_at": "2025-08-01T06:20:10Z",
      "updated_at": "2025-08-01T06:20:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2247057170",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2247057170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2247327447",
      "pull_request_review_id": 3078250820,
      "id": 2247327447,
      "node_id": "PRRC_kwDOABII586F837X",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.\n+        int version;\n+        std::vector<uint8_t> program;\n+        for (const auto& txin: tx.vin) {\n+            const auto& prev_spk{m_view.AccessCoin(txin.prevout).out.scriptPubKey};\n+            if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2244144979,
      "user": {
        "login": "nervana21",
        "id": 205626986,
        "node_id": "U_kgDODEGeag",
        "avatar_url": "https://avatars.githubusercontent.com/u/205626986?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nervana21",
        "html_url": "https://github.com/nervana21",
        "followers_url": "https://api.github.com/users/nervana21/followers",
        "following_url": "https://api.github.com/users/nervana21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nervana21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nervana21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nervana21/subscriptions",
        "organizations_url": "https://api.github.com/users/nervana21/orgs",
        "repos_url": "https://api.github.com/users/nervana21/repos",
        "events_url": "https://api.github.com/users/nervana21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nervana21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I followed ajtowns suggestion and moved the logic to `policy.h` as defined in the patch below. Instead of `RequiresNonEmptyWitness`, the function is named `IsNonAnchorWitnessProgram`. This way, returning `true` for undefined program types that are non-P2A witness programs still makes sense.\r\n<details>\r\n<summary>Expand patch</summary>\r\n\r\n```diff \r\ndiff --git a/src/policy/policy.cpp b/src/policy/policy.cpp\r\nindex 48f2a6a744..2b03a404a9 100644\r\n--- a/src/policy/policy.cpp\r\n+++ b/src/policy/policy.cpp\r\n@@ -96,6 +96,14 @@ bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType)\r\n     return true;\r\n }\r\n \r\n+bool IsNonAnchorWitnessProgram(const CScript& scriptPubKey)\r\n+{\r\n+    int version;\r\n+    std::vector<uint8_t> program;\r\n+    return scriptPubKey.IsWitnessProgram(version, program) &&\r\n+           !scriptPubKey.IsPayToAnchor(version, program);\r\n+}\r\n+\r\n bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_datacarrier_bytes, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason)\r\n {\r\n     if (tx.version > TX_MAX_STANDARD_VERSION || tx.version < 1) {\r\ndiff --git a/src/policy/policy.h b/src/policy/policy.h\r\nindex f9a18561bc..f3982bfa9f 100644\r\n--- a/src/policy/policy.h\r\n+++ b/src/policy/policy.h\r\n@@ -139,6 +139,23 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFee);\r\n \r\n bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType);\r\n \r\n+/**\r\n+ * Check if the script is a witness program that is not P2A (Pay-to-Anchor).\r\n+ *\r\n+ * All standard Segwit programs but P2A require a non-empty witness.\r\n+ * Detect if it is spending a non-P2A Segwit program with no witness.\r\n+ * We specifically detect the case of stripped witness because in this\r\n+ * case wtxid==txid and adding the wtxid to the reject filter upon Script\r\n+ * validation failure could allow a malicious peer to interfere with orphan\r\n+ * parent resolution (which is necessarily done by txid) as used in 1p1c\r\n+ * package relay. For more details see this brief historical summary:\r\n+ * https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.\r\n+ *\r\n+ * @param[in] scriptPubKey The script to check.\r\n+ * @return True if the script is a witness program that is not P2A.\r\n+ */\r\n+bool IsNonAnchorWitnessProgram(const CScript& scriptPubKey);\r\n+\r\n /** Get the vout index numbers of all dust outputs */\r\n std::vector<uint32_t> GetDust(const CTransaction& tx, CFeeRate dust_relay_rate);\r\n \r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex ac4eac45e9..9813f1553e 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -901,22 +901,16 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\r\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\r\n     }\r\n \r\n-    // Check for non-standard witnesses.\r\n+    // Check for witness-related policy violations.\r\n     if (tx.HasWitness()) {\r\n         if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\r\n             return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\r\n         }\r\n     } else {\r\n-        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\r\n-        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\r\n-        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\r\n-        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\r\n-        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.\r\n-        int version;\r\n-        std::vector<uint8_t> program;\r\n+        // Check if any input is spending a witness output without providing a witness\r\n         for (const auto& txin: tx.vin) {\r\n             const auto& prev_spk{m_view.AccessCoin(txin.prevout).out.scriptPubKey};\r\n-            if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\r\n+            if (IsNonAnchorWitnessProgram(prev_spk)) {\r\n                 return state.Invalid(TxValidationResult::TX_WITNESS_STRIPPED, \"bad-witness-stripped\");\r\n             }\r\n         }\r\n\r\n```\r\n</details>\r\n\r\nPlease feel free to use if helpful — or disregard if not :)",
      "created_at": "2025-08-01T08:34:31Z",
      "updated_at": "2025-08-01T08:34:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2247327447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2247327447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248582026",
      "pull_request_review_id": 3080155389,
      "id": 2248582026,
      "node_id": "PRRC_kwDOABII586GBqOK",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think this comment belongs here. It has too many details about net_processing logic that shouldn't really be mentioned in validation / are already covered in the code that does rejection caching.\r\n```suggestion\r\n        // Detect a missing witness so that p2p code can handle rejection caching appropriately.\r\n```",
      "created_at": "2025-08-01T18:17:12Z",
      "updated_at": "2025-08-01T18:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2248582026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248582026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": 910,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252176492",
      "pull_request_review_id": 3085180596,
      "id": 2252176492,
      "node_id": "PRRC_kwDOABII586GPXxs",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2248582026,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.\r\n\r\nI somewhat disagree that this is already covered though, the rationale given in txdownloadman refers to an outdated reason (wtxid relay) rather than the contemporary reason for `WITNESS_STRIPPED`'s existence (1p1c through orphan resolution). But improvements to existing code documentation can be done separately.",
      "created_at": "2025-08-04T17:28:53Z",
      "updated_at": "2025-08-04T17:28:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252176492",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252176492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": 910,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252275892",
      "pull_request_review_id": 3085324003,
      "id": 2252275892,
      "node_id": "PRRC_kwDOABII586GPwC0",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.\n+        int version;\n+        std::vector<uint8_t> program;\n+        for (const auto& txin: tx.vin) {\n+            const auto& prev_spk{m_view.AccessCoin(txin.prevout).out.scriptPubKey};\n+            if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2244144979,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The latest version now uses a `SpendsNonAnchorWitnessProg` helper in policy.h.",
      "created_at": "2025-08-04T18:23:13Z",
      "updated_at": "2025-08-04T18:23:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252275892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252275892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252276108",
      "pull_request_review_id": 3085324263,
      "id": 2252276108,
      "node_id": "PRRC_kwDOABII586GPwGM",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 1,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2245453045,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-08-04T18:23:19Z",
      "updated_at": "2025-08-04T18:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252276108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252276108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 902,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252276375",
      "pull_request_review_id": 3085324612,
      "id": 2252276375,
      "node_id": "PRRC_kwDOABII586GPwKX",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2245589620,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken.",
      "created_at": "2025-08-04T18:23:29Z",
      "updated_at": "2025-08-04T18:23:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252276375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252276375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 904,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252309272",
      "pull_request_review_id": 3085368470,
      "id": 2252309272,
      "node_id": "PRRC_kwDOABII586GP4MY",
      "diff_hunk": "@@ -693,6 +693,12 @@ def test_p2sh_witness(self):\n                 expected_msgs=[spend_tx.txid_hex, 'was not accepted: mandatory-script-verify-flag-failed (Witness program was passed an empty witness)']):\n             test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n+        # The transaction was detected as witness stripped above and not added to the reject",
      "path": "test/functional/p2p_segwit.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "eb073209db9efdbc2c94bc1f535a27ec6b20d954",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Transactions received through RPC aren't checked against the reject filter, so I think this comment can be confusing",
      "created_at": "2025-08-04T18:41:47Z",
      "updated_at": "2025-08-04T18:47:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252309272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252309272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 696,
      "original_line": 696,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252317643",
      "pull_request_review_id": 3085368470,
      "id": 2252317643,
      "node_id": "PRRC_kwDOABII586GP6PL",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is it right to return false early? You need to check all inputs, no?",
      "created_at": "2025-08-04T18:46:45Z",
      "updated_at": "2025-08-04T18:47:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252317643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252317643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252329056",
      "pull_request_review_id": 3085396616,
      "id": 2252329056,
      "node_id": "PRRC_kwDOABII586GP9Bg",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It might be a good idea to have the unit tests cover transactions with multiple input types",
      "created_at": "2025-08-04T18:53:03Z",
      "updated_at": "2025-08-04T18:53:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252329056",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252329056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252378427",
      "pull_request_review_id": 3085466755,
      "id": 2252378427,
      "node_id": "PRRC_kwDOABII586GQJE7",
      "diff_hunk": "@@ -693,6 +693,12 @@ def test_p2sh_witness(self):\n                 expected_msgs=[spend_tx.txid_hex, 'was not accepted: mandatory-script-verify-flag-failed (Witness program was passed an empty witness)']):\n             test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n+        # The transaction was detected as witness stripped above and not added to the reject",
      "path": "test/functional/p2p_segwit.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "eb073209db9efdbc2c94bc1f535a27ec6b20d954",
      "in_reply_to_id": 2252309272,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How is this related to RPC?",
      "created_at": "2025-08-04T19:15:40Z",
      "updated_at": "2025-08-04T19:15:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252378427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252378427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 696,
      "original_line": 696,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252384313",
      "pull_request_review_id": 3085474171,
      "id": 2252384313,
      "node_id": "PRRC_kwDOABII586GQKg5",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Is it right to return false early? You need to check all inputs, no?\r\n\r\nIt is intentional to conserve behaviour. Currently we check scripts sequentially from first input to last. If input N is consensus-invalid and input N+1 is witness stripped we will return a consensus-invalid error. In my opinion it would be better to `continue` here but i think it's better to not change behaviour in this PR.\r\n\r\n> It might be a good idea to have the unit tests cover transactions with multiple input types\r\n\r\nI can add a case which illustrates what i just described above.",
      "created_at": "2025-08-04T19:19:19Z",
      "updated_at": "2025-08-04T19:19:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252384313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252384313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252385326",
      "pull_request_review_id": 3085475445,
      "id": 2252385326,
      "node_id": "PRRC_kwDOABII586GQKwu",
      "diff_hunk": "@@ -693,6 +693,12 @@ def test_p2sh_witness(self):\n                 expected_msgs=[spend_tx.txid_hex, 'was not accepted: mandatory-script-verify-flag-failed (Witness program was passed an empty witness)']):\n             test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n+        # The transaction was detected as witness stripped above and not added to the reject",
      "path": "test/functional/p2p_segwit.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "eb073209db9efdbc2c94bc1f535a27ec6b20d954",
      "in_reply_to_id": 2252309272,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh woops, I thought these were being submitted through RPC because of the err strings. Nevermind.",
      "created_at": "2025-08-04T19:19:57Z",
      "updated_at": "2025-08-04T19:19:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252385326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252385326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 696,
      "original_line": 696,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252427850",
      "pull_request_review_id": 3085531899,
      "id": 2252427850,
      "node_id": "PRRC_kwDOABII586GQVJK",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh I see. I would prefer returning witness-stripped in that scenario. It feels like this function returns a not-quite-accurate result in order to accommodate a different function that must run after it to catch a different error... a bit brittle.",
      "created_at": "2025-08-04T19:44:02Z",
      "updated_at": "2025-08-04T19:44:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252427850",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252427850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252433061",
      "pull_request_review_id": 3085538292,
      "id": 2252433061,
      "node_id": "PRRC_kwDOABII586GQWal",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2248582026,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We still support txid relay, so I don't think code implementing it is outdated.",
      "created_at": "2025-08-04T19:47:10Z",
      "updated_at": "2025-08-04T19:47:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252433061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252433061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": 910,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252446293",
      "pull_request_review_id": 3085554274,
      "id": 2252446293,
      "node_id": "PRRC_kwDOABII586GQZpV",
      "diff_hunk": "@@ -902,8 +902,24 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    if (tx.HasWitness()) {\n+        if (m_pool.m_opts.require_standard && !IsWitnessStandard(tx, m_view)) {\n+            return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+        }\n+    } else {\n+        // All standard Segwit programs but P2A require a non-empty witness. Detect if it is spending a non-P2A Segwit\n+        // program with no witness. We specifically detect the case of stripped witness because in this case wtxid==txid\n+        // and adding the wtxid to the reject filter upon Script validation failure could allow a malicious peer to\n+        // interfere with orphan parent resolution (which is necessarily done by txid) as used in 1p1c package relay. For\n+        // more details see this brief historical summary: https://github.com/bitcoin/bitcoin/pull/32379#issuecomment-2985252920.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "0e22a1401c7edee8946f404dd0deb59a94231340",
      "in_reply_to_id": 2248582026,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I am not saying code implementing txid relay is outdated, that seems unrelated.",
      "created_at": "2025-08-04T19:55:00Z",
      "updated_at": "2025-08-04T19:55:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252446293",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252446293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": 910,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252747448",
      "pull_request_review_id": 3086024186,
      "id": 2252747448,
      "node_id": "PRRC_kwDOABII586GRjK4",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;\n+            }\n+            // P2SH-wrapped Taproot programs are invalid by consensus. P2SH-wrapped Anchor program is non-standard.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": null,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think P2SH-wrapped taproot programs are non-standard according to BIP341 text (says they remain unencumbered) and [here](https://github.com/bitcoin/bitcoin/blob/d1b583181dcc31613cd586d63329cb4c4a586972/src/script/interpreter.cpp#L1949)?",
      "created_at": "2025-08-04T22:57:22Z",
      "updated_at": "2025-08-04T22:57:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252747448",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252747448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252854451",
      "pull_request_review_id": 3086169832,
      "id": 2252854451,
      "node_id": "PRRC_kwDOABII586GR9Sz",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't this mimic `VerifyScript` more closely? ie:\r\n\r\n * check the scriptSig is push-only\r\n * check the redeemScript matches the hash in the p2sh prev_spk\r\n * check the scriptSig doesn't push other things on the stack (ie `stack.size() == 1`)\r\n\r\nAll those are permanent errors for the txid (fixing them requires changing the scriptSig which changes the txid), so the rejection would be valid to cache.\r\n\r\n> Currently we check scripts sequentially from first input to last. If input N is consensus-invalid and input N+1 is witness stripped we will return a consensus-invalid error.\r\n\r\nI don't think that's the right idea? We call:\r\n\r\n 1. `CheckInputScripts(tx, scriptVerifyFlags)`\r\n 2. if that fails, and we have no witness, we check `CheckInputScripts(tx, scriptVerifyFlags - WITNESS,CLEANSTACK)` succeeds\r\n 3. if it does, we check `CheckInputScripts(tx, scriptVerifyFlags - CLEANSTACK) fails\r\n 4. if so, we return `WITNESS_STRIPPED`\r\n\r\nBut each of these consider every input; so consensus failures outside of witness validation will fail at step 2, so we'll return the error from step 1.\r\n\r\nBecause this PR returns witness stripped results earlier, we should expect to get different results than the current code; eg, for a tx without witness data, where the first input is a p2wpkh spend and the second input is a p2sh script with a bad redeemScript, currently I think we'll see a script-verification-error due to the first input, while after this patch I'd expect to see a witness stripped error.",
      "created_at": "2025-08-05T00:43:04Z",
      "updated_at": "2025-08-05T00:43:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2252854451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252854451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254398401",
      "pull_request_review_id": 3088364307,
      "id": 2254398401,
      "node_id": "PRRC_kwDOABII586GX2PB",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I would prefer returning witness-stripped in that scenario.\r\n\r\nSure, ok. That's my preference as well, so if people agree i'll do that then. EDIT: actually this cannot happen as it would have failed first in `AreInputsStandard` (and then in `IsWitnessStandard`). So i think it's fine to just use `continue` and that won't be a change in behaviour. \r\n\r\n> Shouldn't this mimic VerifyScript more closely?\r\n\r\nPushonly is already checked before in `IsStandardTx()`. Checking the redeemscript hash and clean stack make sense. But so would checking every other standardness / consensus rule first. In fact i think your point hints that we should instead check for this after every other check.\r\n\r\nWhat do you (both) think of changing the call site for `SpendsNonAnchorWitnessProg` to after encountering a Script failure (i.e. where it is already done today through more script checks)? This would make sure we don't weaken any existing standardness or consensus error into a witness-stripped one.\r\n\r\n> I don't think that's the right idea?\r\n\r\nI don't see how what you describe differs from what i said.\r\n\r\n> Because this PR returns witness stripped results earlier, we should expect to get different results than the current code\r\n\r\nYeah. I think it's better to go with the minimal amount of change for now and move the Segwit-spend detection to after we encounter a Script failure, i.e. where it is today.",
      "created_at": "2025-08-05T13:43:55Z",
      "updated_at": "2025-08-05T14:43:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2254398401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254398401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254614655",
      "pull_request_review_id": 3088667475,
      "id": 2254614655,
      "node_id": "PRRC_kwDOABII586GYrB_",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;\n+            }\n+            // P2SH-wrapped Taproot programs are invalid by consensus. P2SH-wrapped Anchor program is non-standard.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252747448,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right, i should have double checked. Fixed in upcoming push, thanks.",
      "created_at": "2025-08-05T14:56:53Z",
      "updated_at": "2025-08-05T14:56:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2254614655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254614655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254632919",
      "pull_request_review_id": 3088692938,
      "id": 2254632919,
      "node_id": "PRRC_kwDOABII586GYvfX",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changing the call site to where we currently perform detection in master is not going to avoid all behaviour changes. Short of checking all consensus rules for all other inputs preceding the one that failed the check, we can't guarantee that we won't return a false-positive witness-stripped error. For instance if we receive a transaction with two inputs, the first a legacy P2PKH, the second a Segwit P2WPKH, then if the transaction comes in without witness but also fails the signature check for the P2PKH input we would currently (in master) return the consensus error and this PR would (in any reasonable shape) return a witness-stripped error. If we don't want behaviour changes here we should do #33066 instead.",
      "created_at": "2025-08-05T15:03:32Z",
      "updated_at": "2025-08-05T15:03:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2254632919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254632919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255158075",
      "pull_request_review_id": 3089448767,
      "id": 2255158075,
      "node_id": "PRRC_kwDOABII586Gavs7",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I updated the `return false` to `continue` because it makes more sense and is actually not a change in behaviour (see edit in https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2254398401).\r\n\r\nI did not add the check to `return false` if redeem script mismatches, or `EvalScript` doesn't result in a clean stack. This is because those would be confusing to have in a function checking if inputs are Segwit while only partially reducing the change in behaviour (see https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2254632919). Because we won't be able to detect all consensus errors in other inputs, i don't think we should add detection for only a few of those in a seemingly-unrelated helper function.",
      "created_at": "2025-08-05T19:30:02Z",
      "updated_at": "2025-08-05T19:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2255158075",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255158075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255161296",
      "pull_request_review_id": 3089453138,
      "id": 2255161296,
      "node_id": "PRRC_kwDOABII586GawfQ",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The logic when we see \"WITNESS_STRIPPED\" is \"this peer sent us garbage, that we have to ignore\" -- to me, it's better to spend as little CPU as possible on garbage, so that means we should detect WITNESS_STRIPPED as soon and as cheaply as possible, then just ignore the tx. If we could have drawn some useful conclusions from the garbage (eg \"INPUTS_NOT_STANDARD\" or any other policy/consensus failure that different witness data couldn't fix), that's fine, but probably not at the cost of doing much extra processing -- caching the error will only help if we had another misbehaving peer wanting to send the same invalid tx.\r\n\r\n> In fact i think your point hints that we should instead check for this after every other check.\r\n\r\nSo I think my point is the opposite -- we should check for witness stripped early, and not bother very much with doing the other checks even if they're easy. Just identify that the node's giving us garbage asap and move on.",
      "created_at": "2025-08-05T19:31:56Z",
      "updated_at": "2025-08-05T19:31:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2255161296",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255161296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2257229087",
      "pull_request_review_id": 3092676671,
      "id": 2257229087,
      "node_id": "PRRC_kwDOABII586GipUf",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> So I think my point is the opposite -- we should check for witness stripped early, and not bother very much with doing the other checks even if they're easy.\r\n\r\nI agree.\r\n\r\nI double-checked and the current code does not change behavior.\r\n\r\nThe early check in an earlier iteration of this PR changed behavior in two ways:\r\n- consensus-invalid for non-witness reasons could be converted to witness-stripped, but this does not matter as they are consensus-invalid and a malicious peer can't interfere with honest relay.\r\n- a tx that is TX_RECONSIDERABLE that a peer relayed without the witness was reported as TX_RECONSIDERABLE. With the early check, the tx is instead (correctly imo) reported as WITNESS_STRIPPED. I also think this does not matter in practice. See [comment](https://github.com/bitcoin/bitcoin/pull/33066#discussion_r2251819585).",
      "created_at": "2025-08-06T13:47:48Z",
      "updated_at": "2025-08-06T13:49:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2257229087",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2257229087"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258302488",
      "pull_request_review_id": 3094287127,
      "id": 2258302488,
      "node_id": "PRRC_kwDOABII586GmvYY",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we can cheaply detect this txid refers to an always-invalid transaction and cache it, that seems like a win. It might be fine to cache even less such errors, but i'd rather this was done separately. There is already enough happening in this PR 14 days from the feature freeze.\r\n\r\n> I double-checked and the current code does not change behavior.\r\n\r\nIt does, as far as i can tell. An example is given in OP / last commit's message. \"For instance a transaction with one P2PKH input with an invalid signature and one P2WPKH input with its witness stripped. The existing implementation would treat it as witness stripped if the P2WPKH input appears first, and consensus invalid if it appears second. The implementation in this commit would always consider it witness stripped.\"\r\n\r\nThat's why i say above there is already enough happening in this PR, i'd like to minimize the number of non-obvious behaviour changes.",
      "created_at": "2025-08-06T21:07:04Z",
      "updated_at": "2025-08-06T21:24:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2258302488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258302488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260386539",
      "pull_request_review_id": 3097234284,
      "id": 2260386539,
      "node_id": "PRRC_kwDOABII586GusLr",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It does, as far as i can tell.\r\n\r\nOh ok, that was not obvious to me. I think the OP / last commit message needs to be modified: \"The existing implementation would treat it as witness stripped if the P2WPKH input appears first, and consensus invalid if it appears second.\" is not true. \r\n\r\nI tested this in master and both orders of inputs give consensus invalid, this PR gives witness-stripped in both orders. If the P2WPKH input appears first, the first `CheckInputScripts` will fail with a consensus error since `SCRIPT_VERIFY_WITNESS` is on. Then, the second `CheckInputScripts` will fail due to the invalid signature for the P2PKH input. This will skip the third `CheckInputScripts` and return the consensus invalid error from the first `CheckInputScripts`.",
      "created_at": "2025-08-07T13:44:24Z",
      "updated_at": "2025-08-07T14:00:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2260386539",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260386539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260436877",
      "pull_request_review_id": 3097313722,
      "id": 2260436877,
      "node_id": "PRRC_kwDOABII586Gu4eN",
      "diff_hunk": "@@ -337,6 +337,43 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool SpendsNonAnchorWitnessProg(const CTransaction& tx, const CCoinsViewCache& prevouts)\n+{\n+    if (tx.IsCoinBase()) {\n+        return false;\n+    }\n+\n+    int version;\n+    std::vector<uint8_t> program;\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_spk{prevouts.AccessCoin(txin.prevout).out.scriptPubKey};\n+\n+        // Note this includes not-yet-defined witness programs.\n+        if (prev_spk.IsWitnessProgram(version, program) && !prev_spk.IsPayToAnchor(version, program)) {\n+            return true;\n+        }\n+\n+        // For P2SH extract the redeem script and check if it spends a non-Taproot witness program. Note\n+        // this is fine to call EvalScript (as done in AreInputsStandard/IsWitnessStandard) because this\n+        // function is only ever called after IsStandardTx, which checks the scriptsig is pushonly.\n+        if (prev_spk.IsPayToScriptHash()) {\n+            // If EvalScript fails or results in an empty stack, the transaction is invalid by consensus.\n+            std::vector <std::vector<uint8_t>> stack;\n+            if (!EvalScript(stack, txin.scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker{}, SigVersion::BASE)\n+                || stack.empty()) {\n+                return false;",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "9230de64dc8434dce311d3f1c1b6ba8cea04742e",
      "in_reply_to_id": 2252317643,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I tested this in master and both orders of inputs give consensus invalid\r\n\r\nAh, yes, right! Thank you for testing, will modify the commit message / OP.",
      "created_at": "2025-08-07T14:01:47Z",
      "updated_at": "2025-08-07T14:01:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2260436877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260436877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260577684",
      "pull_request_review_id": 3097524181,
      "id": 2260577684,
      "node_id": "PRRC_kwDOABII586Gva2U",
      "diff_hunk": "@@ -1149,4 +1149,143 @@ BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n     BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n }\n \n+/** Sanity check the return value of SpendsNonAnchorWitnessProg for various output types. */\n+BOOST_AUTO_TEST_CASE(spends_witness_prog)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    const CPubKey pubkey{key.GetPubKey()};\n+    CMutableTransaction tx_create{}, tx_spend{};\n+    tx_create.vout.emplace_back(0, CScript{});\n+    tx_spend.vin.emplace_back(Txid{}, 0);\n+\n+    // CNoDestination, PubKeyDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash,\n+    // WitnessV1Taproot, PayToAnchor, WitnessUnknown.\n+    static_assert(std::variant_size_v<CTxDestination> == 9);\n+\n+    // Go through all defined output types and sanity check SpendsNonAnchorWitnessProg.\n+\n+    // P2PK\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(PubKeyDestination{pubkey});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(!::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // P2PKH\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(PKHash{pubkey});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(!::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // P2SH\n+    auto redeem_script{CScript{} << OP_1 << OP_CHECKSIG};\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(ScriptHash{redeem_script});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    tx_spend.vin[0].scriptSig = CScript{} << OP_0 << ToByteVector(redeem_script);\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(!::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+    tx_spend.vin[0].scriptSig.clear();\n+\n+    // native P2WSH\n+    const auto witness_script{CScript{} << OP_12 << OP_HASH160 << OP_DUP << OP_EQUAL};\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash{witness_script});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // P2SH-wrapped P2WSH\n+    redeem_script = tx_create.vout[0].scriptPubKey;\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(ScriptHash(redeem_script));\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    tx_spend.vin[0].scriptSig = CScript{} << ToByteVector(redeem_script);\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+    tx_spend.vin[0].scriptSig.clear();\n+    BOOST_CHECK(!::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // native P2WPKH\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(WitnessV0KeyHash{pubkey});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // P2SH-wrapped P2WSH",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "38727a290048320643a215802894fc6bc5275cd4",
      "in_reply_to_id": null,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should be \"P2SH-wrapped P2WPKH\"",
      "created_at": "2025-08-07T14:52:51Z",
      "updated_at": "2025-08-07T15:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2260577684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260577684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261326385",
      "pull_request_review_id": 3098620193,
      "id": 2261326385,
      "node_id": "PRRC_kwDOABII586GyRox",
      "diff_hunk": "@@ -1149,4 +1149,143 @@ BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n     BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n }\n \n+/** Sanity check the return value of SpendsNonAnchorWitnessProg for various output types. */\n+BOOST_AUTO_TEST_CASE(spends_witness_prog)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    const CPubKey pubkey{key.GetPubKey()};\n+    CMutableTransaction tx_create{}, tx_spend{};\n+    tx_create.vout.emplace_back(0, CScript{});\n+    tx_spend.vin.emplace_back(Txid{}, 0);\n+\n+    // CNoDestination, PubKeyDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash,\n+    // WitnessV1Taproot, PayToAnchor, WitnessUnknown.\n+    static_assert(std::variant_size_v<CTxDestination> == 9);\n+\n+    // Go through all defined output types and sanity check SpendsNonAnchorWitnessProg.\n+\n+    // P2PK\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(PubKeyDestination{pubkey});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(!::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // P2PKH\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(PKHash{pubkey});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(!::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // P2SH\n+    auto redeem_script{CScript{} << OP_1 << OP_CHECKSIG};\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(ScriptHash{redeem_script});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    tx_spend.vin[0].scriptSig = CScript{} << OP_0 << ToByteVector(redeem_script);\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(!::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+    tx_spend.vin[0].scriptSig.clear();\n+\n+    // native P2WSH\n+    const auto witness_script{CScript{} << OP_12 << OP_HASH160 << OP_DUP << OP_EQUAL};\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash{witness_script});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // P2SH-wrapped P2WSH\n+    redeem_script = tx_create.vout[0].scriptPubKey;\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(ScriptHash(redeem_script));\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    tx_spend.vin[0].scriptSig = CScript{} << ToByteVector(redeem_script);\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+    tx_spend.vin[0].scriptSig.clear();\n+    BOOST_CHECK(!::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // native P2WPKH\n+    tx_create.vout[0].scriptPubKey = GetScriptForDestination(WitnessV0KeyHash{pubkey});\n+    tx_spend.vin[0].prevout.hash = tx_create.GetHash();\n+    AddCoins(coins, CTransaction{tx_create}, 0, false);\n+    BOOST_CHECK(::SpendsNonAnchorWitnessProg(CTransaction{tx_spend}, coins));\n+\n+    // P2SH-wrapped P2WSH",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "5f95665e243268a93bd16af73fc69c5274ea788b",
      "original_commit_id": "38727a290048320643a215802894fc6bc5275cd4",
      "in_reply_to_id": 2260577684,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, done.",
      "created_at": "2025-08-07T20:24:40Z",
      "updated_at": "2025-08-07T20:24:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33105#discussion_r2261326385",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261326385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1214,
      "side": "RIGHT"
    }
  ]
}