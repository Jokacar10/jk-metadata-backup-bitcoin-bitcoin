{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011",
    "id": 2677902759,
    "node_id": "PR_kwDOABII586fnY2n",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33011",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33011.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33011.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/31ef2b6a16b8447cf843acba66d7d02efdedcefe",
    "number": 33011,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "log: rate limiting followups",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Followups to #32604.\r\n\r\nThe only behavior change is that prefixing with `[*]` is done to all logs (regardless of `should_ratelimit`) per https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195710943. This does not need a release note as the release notes were already a bit vague as pointed out in the comment.",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/72",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72/labels",
      "id": 12172984,
      "node_id": "MI_kwDOABII584Aub64",
      "number": 72,
      "state": "open",
      "title": "30.0",
      "description": "",
      "creator": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 11,
      "closed_issues": 41,
      "created_at": "2025-01-15T19:21:36Z",
      "updated_at": "2025-08-01T14:45:25Z"
    },
    "created_at": "2025-07-18T18:00:57Z",
    "updated_at": "2025-08-02T09:59:41Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "d347f4c0bb029e96f53a868ee029a0e16b5d9776",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "Crypt-iQ:32604_followup_07152025",
      "ref": "32604_followup_07152025",
      "sha": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 79155174,
        "node_id": "MDEwOlJlcG9zaXRvcnk3OTE1NTE3NA==",
        "name": "bitcoin",
        "full_name": "Crypt-iQ/bitcoin",
        "owner": {
          "login": "Crypt-iQ",
          "id": 15145615,
          "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
          "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Crypt-iQ",
          "html_url": "https://github.com/Crypt-iQ",
          "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
          "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
          "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
          "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
          "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Crypt-iQ/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Crypt-iQ/bitcoin",
        "archive_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Crypt-iQ/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Crypt-iQ/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Crypt-iQ/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/hooks",
        "svn_url": "https://github.com/Crypt-iQ/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 260359,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-01T22:02:11Z",
        "created_at": "2017-01-16T20:09:01Z",
        "updated_at": "2025-07-28T14:17:58Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "75ed673193c5b53b1f4b734e38237f6875bb30b2",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37602,
        "stargazers_count": 84854,
        "watchers_count": 84854,
        "size": 290069,
        "default_branch": "master",
        "open_issues_count": 752,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-01T15:06:44Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-08-02T09:45:59Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 228,
    "deletions": 210,
    "changed_files": 7,
    "commits": 11,
    "review_comments": 25,
    "comments": 10
  },
  "events": [
    {
      "event": "labeled",
      "id": 18705122224,
      "node_id": "LE_lADOABII587BWvuGzwAAAARa6YOw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18705122224",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-18T18:01:01Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 3090251611,
      "node_id": "IC_kwDOABII5864MX9b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3090251611",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-18T18:01:03Z",
      "updated_at": "2025-07-31T21:57:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33011.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3127754875) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo over LogPrintf [WIP, NOMERGE, DRAFT] by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3090251611",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "commented",
      "id": 3090274955,
      "node_id": "IC_kwDOABII5864MdqL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3090274955",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-18T18:11:10Z",
      "updated_at": "2025-07-28T14:30:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Addressed in this PR:\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188529752\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163341392\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163349298\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2182919153\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2185313756\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188155450\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188156156\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188158176\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188159134\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188161714\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188231409\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188285962\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188544998\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188548959\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2194330070\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195710943\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188644325\r\n\r\nNot addressed:\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115869345\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188158709\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188237233\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188643445\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188651877\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188652258\r\n- https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3054117201\r\n\r\nWon't address:\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188225785\r\n  - Not convinced recursion is bad in this case.\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2194621936\r\n  - Removed `BOOST_CHECK_THROW` and `BOOST_CHECK_NO_THROW`, so no longer relevant.\r\n- https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188256330\r\n  - Overly verbose test is now cleaned up a fair bit\r\n",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3090274955",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "labeled",
      "id": 18706251434,
      "node_id": "LE_lADOABII587BWvuGzwAAAARa-r6q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18706251434",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-18T19:24:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3090499446,
      "node_id": "IC_kwDOABII5864NUd2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3090499446",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-18T19:24:17Z",
      "updated_at": "2025-07-18T19:24:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `previous releases, depends DEBUG`: https://github.com/bitcoin/bitcoin/runs/46279969042</sub>\n<sub>LLM reason (✨ experimental): Build error due to incomplete type in std::pair's second member caused by missing full definition of BCLog::LogRateLimiter::Stats.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3090499446",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18709353385,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARbKhOp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18709353385",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e76466af75bf92ad7113e209b31a08c1c04ccf08",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/e76466af75bf92ad7113e209b31a08c1c04ccf08",
      "created_at": "2025-07-19T02:22:52Z"
    },
    {
      "event": "unlabeled",
      "id": 18709589758,
      "node_id": "UNLE_lADOABII587BWvuGzwAAAARbLa7-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18709589758",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-19T03:28:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18730976105,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARcdANp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18730976105",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "created_at": "2025-07-21T14:54:13Z"
    },
    {
      "event": "ready_for_review",
      "id": 18734297218,
      "node_id": "RFRE_lADOABII587BWvuGzwAAAARcprCC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18734297218",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T18:02:30Z"
    },
    {
      "event": "commented",
      "id": 3107517948,
      "node_id": "IC_kwDOABII5865OPX8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3107517948",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T11:55:42Z",
      "updated_at": "2025-07-23T11:55:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "cc @stickies-v @l0rinc",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3107517948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "mentioned",
      "id": 18772626609,
      "node_id": "MEE_lADOABII587BWvuGzwAAAARe74yx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18772626609",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T11:55:44Z"
    },
    {
      "event": "subscribed",
      "id": 18772626632,
      "node_id": "SE_lADOABII587BWvuGzwAAAARe74zI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18772626632",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T11:55:44Z"
    },
    {
      "event": "mentioned",
      "id": 18772626655,
      "node_id": "MEE_lADOABII587BWvuGzwAAAARe74zf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18772626655",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T11:55:44Z"
    },
    {
      "event": "subscribed",
      "id": 18772626678,
      "node_id": "SE_lADOABII587BWvuGzwAAAARe74z2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18772626678",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T11:55:44Z"
    },
    {
      "event": "reviewed",
      "id": 3046739749,
      "node_id": "PRR_kwDOABII5861mY8l",
      "url": null,
      "actor": null,
      "commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "code lgtm 8aa2726f1cfbc1e4267a796cb000c4eeae5910f5 - but would like to see if we can make improvements on the [`m_limiter` lifetime guarantees](https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2226684372), and on the [`logging_filesize_rate_limit` tests](https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2226805223). Both are not essential, but I think it could make sense to include them here.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#pullrequestreview-3046739749",
      "submitted_at": "2025-07-23T22:12:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
    },
    {
      "event": "milestoned",
      "id": 18783601899,
      "node_id": "MIE_lADOABII587BWvuGzwAAAARflwTr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18783601899",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T22:19:05Z",
      "milestone": {
        "title": "30.0"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYxNmJjMjJmMTMxMTMyYjkyMzllZjM2MmRjYThjNmJjZTAwMGE1Mzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/616bc22f131132b9239ef362dca8c6bce000a539",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/616bc22f131132b9239ef362dca8c6bce000a539",
      "tree": {
        "sha": "f541909bdb3b4016859dae486c8235a2b426f095",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f541909bdb3b4016859dae486c8235a2b426f095"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a97ff466d320cb388f9487a4a3c71068c07a234",
          "sha": "2a97ff466d320cb388f9487a4a3c71068c07a234",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2a97ff466d320cb388f9487a4a3c71068c07a234"
        }
      ],
      "message": "test: remove noexcept(false) comment in ~DebugLogHelper",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-28T14:17:04Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-18T13:27:50Z"
      },
      "sha": "616bc22f131132b9239ef362dca8c6bce000a539"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI4ZTkyZmIzZDQxMzdmOTFmZTZhNTQ4Mjk4NjdmYzU0MzU3ZGE2NDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8e92fb3d4137f91fe6a54829867fc54357da648",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b8e92fb3d4137f91fe6a54829867fc54357da648",
      "tree": {
        "sha": "dd0f5c28e563fc1ade6889a1c2e014c8a9627ff9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd0f5c28e563fc1ade6889a1c2e014c8a9627ff9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/616bc22f131132b9239ef362dca8c6bce000a539",
          "sha": "616bc22f131132b9239ef362dca8c6bce000a539",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/616bc22f131132b9239ef362dca8c6bce000a539"
        }
      ],
      "message": "log: avoid double hashing in SourceLocationHasher\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-28T14:17:04Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-25T20:39:33Z"
      },
      "sha": "b8e92fb3d4137f91fe6a54829867fc54357da648"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVmNzBiYzgwZGYwNmNhODVkNDRlODIwMWQ0N2U3MDg2ZTk3MWZkZWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f70bc80df06ca85d44e8201d47e7086e971fdea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5f70bc80df06ca85d44e8201d47e7086e971fdea",
      "tree": {
        "sha": "9cbc2b23f6c1aa7af507f4e8643cbfefae538aa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cbc2b23f6c1aa7af507f4e8643cbfefae538aa7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8e92fb3d4137f91fe6a54829867fc54357da648",
          "sha": "b8e92fb3d4137f91fe6a54829867fc54357da648",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b8e92fb3d4137f91fe6a54829867fc54357da648"
        }
      ],
      "message": "log: remove const qualifier from arguments in LogPrintFormatInternal\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-28T14:17:04Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-18T13:43:43Z"
      },
      "sha": "5f70bc80df06ca85d44e8201d47e7086e971fdea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgzMTlhMTM0Njg0ZGYyMjQwMDU3YTVlOGFmYWE2YWU0NDFmYjhhNTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8319a134684df2240057a5e8afaa6ae441fb8a58",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8319a134684df2240057a5e8afaa6ae441fb8a58",
      "tree": {
        "sha": "76b7016bf6cede68d0e98ccefcd4b27b0ab299e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76b7016bf6cede68d0e98ccefcd4b27b0ab299e9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f70bc80df06ca85d44e8201d47e7086e971fdea",
          "sha": "5f70bc80df06ca85d44e8201d47e7086e971fdea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5f70bc80df06ca85d44e8201d47e7086e971fdea"
        }
      ],
      "message": "log: clarify RATELIMIT_MAX_BYTES comment, use RATELIMIT_WINDOW\n\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-28T14:17:04Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-18T14:04:35Z"
      },
      "sha": "8319a134684df2240057a5e8afaa6ae441fb8a58"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA3MTZmMGE2OWYzN2Q2MTFlYWQ0NTllYWRmMzVhOGM2NzBlNTExZjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0716f0a69f37d611ead459eadf35a8c670e511f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0716f0a69f37d611ead459eadf35a8c670e511f4",
      "tree": {
        "sha": "f26e99f5d01f63d65b92f2d5f884207a8eeaa1bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f26e99f5d01f63d65b92f2d5f884207a8eeaa1bf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8319a134684df2240057a5e8afaa6ae441fb8a58",
          "sha": "8319a134684df2240057a5e8afaa6ae441fb8a58",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8319a134684df2240057a5e8afaa6ae441fb8a58"
        }
      ],
      "message": "log: change LogLimitStats to struct LogRateLimiter::Stats\n\nClean up the noisy LogLimitStats and remove references to the time\nwindow.\n\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-28T14:17:04Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-18T14:18:59Z"
      },
      "sha": "0716f0a69f37d611ead459eadf35a8c670e511f4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUwNWNhZjk3Y2NmODgwNzNlNzcwMjcyNDdiNTFmMTZiMjFhNDQ3OWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/505caf97ccf88073e77027247b51f16b21a4479f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/505caf97ccf88073e77027247b51f16b21a4479f",
      "tree": {
        "sha": "53f11277f6c49d862acd9e382c53769bd15ca857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53f11277f6c49d862acd9e382c53769bd15ca857"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0716f0a69f37d611ead459eadf35a8c670e511f4",
          "sha": "0716f0a69f37d611ead459eadf35a8c670e511f4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0716f0a69f37d611ead459eadf35a8c670e511f4"
        }
      ],
      "message": "log: clean up LogPrintStr_ and Reset, prefix all logs with \"[*]\" when there are suppressions\n\nIn LogPrintStr_:\n- remove an unnecessary BCLog since we are in the BCLog namespace.\n- remove an unnecessary \\n when rate limiting is triggered since\n  FormatLogStrInPlace will add it.\n- move the ratelimit bool into an else if block.\n- prefix all log lines with [*] when suppressions exist. Previously this\n  was only done if should_ratelimit was true.\n\nIn Reset:\n- remove an unnecessary \\n since FormatLogStrInPlace will add it.\n- Change Level::Info to Level::Warning.",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-28T14:17:04Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-18T14:39:45Z"
      },
      "sha": "505caf97ccf88073e77027247b51f16b21a4479f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY1YzgwNzI3NTdlNThmOWNhZDExOThkZGQ4ZTQwM2Q2NTZiYjY4ZTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65c8072757e58f9cad1198ddd8e403d656bb68e2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/65c8072757e58f9cad1198ddd8e403d656bb68e2",
      "tree": {
        "sha": "368fe6fcf379bee52a3cc99ab9663e9a75a49a75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/368fe6fcf379bee52a3cc99ab9663e9a75a49a75"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/505caf97ccf88073e77027247b51f16b21a4479f",
          "sha": "505caf97ccf88073e77027247b51f16b21a4479f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/505caf97ccf88073e77027247b51f16b21a4479f"
        }
      ],
      "message": "log: make m_limiter a shared_ptr\n\nThis allows us to safely and explicitly manage the dual dependency\non the limiter: one for the Logger, and one for the CScheduler.",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-28T14:17:04Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2025-07-23T21:06:37Z"
      },
      "sha": "65c8072757e58f9cad1198ddd8e403d656bb68e2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY5OWRkNDgxNTk4ZTVmZDVhOWY0YzYzMmNmYWU1MjNlYjMxOGYyMTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/699dd481598e5fd5a9f4c632cfae523eb318f210",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/699dd481598e5fd5a9f4c632cfae523eb318f210",
      "tree": {
        "sha": "9d506a593aacaf9a506fa1d9c0bd910b22e94545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d506a593aacaf9a506fa1d9c0bd910b22e94545"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65c8072757e58f9cad1198ddd8e403d656bb68e2",
          "sha": "65c8072757e58f9cad1198ddd8e403d656bb68e2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/65c8072757e58f9cad1198ddd8e403d656bb68e2"
        }
      ],
      "message": "test: add ReadDebugLogLines helper function\n\nDeduplicates repeated usage of the same functionality.",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-28T14:17:04Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2025-07-23T21:29:01Z"
      },
      "sha": "699dd481598e5fd5a9f4c632cfae523eb318f210"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18857584655,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARj_-gP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18857584655",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1c34f689fb9a0d425e8f4d87ab70c895d48b5057",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/1c34f689fb9a0d425e8f4d87ab70c895d48b5057",
      "created_at": "2025-07-28T14:25:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18858881066,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARkE7Aq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18858881066",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "526403df23a2db781709e4494da3a9f79284531d",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/526403df23a2db781709e4494da3a9f79284531d",
      "created_at": "2025-07-28T15:24:11Z"
    },
    {
      "event": "labeled",
      "id": 18858882577,
      "node_id": "LE_lADOABII587BWvuGzwAAAARkE7YR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18858882577",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T15:24:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3127745345,
      "node_id": "IC_kwDOABII5866bZtB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3127745345",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T15:24:17Z",
      "updated_at": "2025-07-28T15:24:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `MSan, depends`: https://github.com/bitcoin/bitcoin/runs/46865525511</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a macro name conflict where DEBUG is redefined as 1, causing syntax errors during compilation.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3127745345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "commented",
      "id": 3127754875,
      "node_id": "IC_kwDOABII5866bcB7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3127754875",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T15:26:21Z",
      "updated_at": "2025-07-28T15:26:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3127754875",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "commented",
      "id": 3129226672,
      "node_id": "IC_kwDOABII5866hDWw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3129226672",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T19:58:48Z",
      "updated_at": "2025-07-28T21:01:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "The latest push 526403df23a2db781709e4494da3a9f79284531d:\r\n- makes `m_limiter` a `std::shared_ptr`\r\n- adds a commit to remove double-hashing in `SourceLocationHasher` (b8e92fb3d4137f91fe6a54829867fc54357da648)\r\n- changes `logging_filesize_rate_limit` to dedupe logic and explicitly check for certain rate-limiting logs\r\n\r\nThe CI is [failing](https://api.cirrus-ci.com/v1/task/6153650155814912/logs/ci.log) with `DEBUG_LOCKCONTENTION` as `ReadDebugLogLines` is matching against a log from the scheduler having lock contention. Will investigate.",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3129226672",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18885490116,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARlqbXE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18885490116",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d434155db5f9c34b8ab3e19038d824d161b34195",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/d434155db5f9c34b8ab3e19038d824d161b34195",
      "created_at": "2025-07-29T19:41:53Z"
    },
    {
      "event": "unlabeled",
      "id": 18889681193,
      "node_id": "UNLE_lADOABII587BWvuGzwAAAARl6akp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18889681193",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T01:36:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3136494016,
      "node_id": "IC_kwDOABII58668xnA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3136494016",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T14:01:52Z",
      "updated_at": "2025-07-30T14:01:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "Latest push 526403df23a2db781709e4494da3a9f79284531d -> d434155db5f9c34b8ab3e19038d824d161b34195 modifies `logging_filesize_rate_limit` to scan `ReadDebugLogLines` for the `[warning] Restarting logging` string in one place. This is hacky and is needed to make the CI pass when `DEBUG_LOCKCONTENTION` is specified.\r\n\r\nThe failure happens because:\r\n- `Reset` is in the task queue of the scheduler\r\n- `MockForwardAndSync` calls `MockForward`\r\n- `Reset` will be called and will schedule another `Reset`. This will lock `newTaskMutex`.\r\n- The `scheduleFromNow` call in `MockForwardAndSync` will lock `newTaskMutex`.\r\n\r\nIf there's lock contention here, it will trigger the failure. The logs will look like:\r\n```\r\n[14:38:33.794] [*] [warning] Excessive logging detected from test/logging_tests.cpp:392 (void logging_tests::(anonymous namespace)::LogFromLocation(Location, const std::string &)): >1048576 bytes logged during the last time window of 20s. Suppressing logging to disk from this source location until time window resets. Console logging unaffected. Last log entry.\r\n[14:38:33.794] [*] a\r\n[14:38:33.794] [*] b\r\n[14:38:33.794] [*] c\r\n[14:38:33.794] [lock] Enter: lock contention newTaskMutex, scheduler.cpp:74 started\r\n[14:38:33.794] [warning] Restarting logging from test/logging_tests.cpp:392 (void logging_tests::(anonymous namespace)::LogFromLocation(Location, const std::string &)): 4 bytes were dropped during the last 20s.\r\n[14:38:33.794] [lock] Enter: lock contention newTaskMutex, scheduler.cpp:74 completed (10μs)\r\n[14:38:33.794] [lock] Enter: lock contention newTaskMutex, scheduler.cpp:74 started\r\n[14:38:33.794] [lock] Enter: lock contention newTaskMutex, scheduler.cpp:74 completed (36μs)\r\n[14:38:33.794] test/logging_tests.cpp(469): \u001b[1;31;49merror: in \"logging_tests/logging_filesize_rate_limit\": check ReadDebugLogLines().back().starts_with(\"[warning] Restarting logging\") has failed\u001b[0;39;49m\r\n```",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3136494016",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "reviewed",
      "id": 3075050903,
      "node_id": "PRR_kwDOABII5863SY2X",
      "url": null,
      "actor": null,
      "commit_id": "d434155db5f9c34b8ab3e19038d824d161b34195",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#pullrequestreview-3075050903",
      "submitted_at": "2025-07-31T11:39:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18922144567,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARn2QM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18922144567",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f57496e064f888b21f1b5bbf8a5086798d6e4653",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/f57496e064f888b21f1b5bbf8a5086798d6e4653",
      "created_at": "2025-07-31T15:31:36Z"
    },
    {
      "event": "commented",
      "id": 3140442210,
      "node_id": "IC_kwDOABII5867L1hi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3140442210",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T15:38:47Z",
      "updated_at": "2025-07-31T15:38:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Latest push d434155db5f9c34b8ab3e19038d824d161b34195 -> f57496e:\r\n- ensures the category mask does not leak across tests\r\n- modifies `logging_filesize_rate_limit` to disable `BCLog::LogFlags::LOCK` if `DEBUG_LOCKCONTENTION` is defined\r\n\r\nThis gets rid of the test flake without hacking around `ReadDebugLogLines`.",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3140442210",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18923146570,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARn6E1K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18923146570",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1324f8196b0a46b4eef113e29f68238d42ffb26d",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/1324f8196b0a46b4eef113e29f68238d42ffb26d",
      "created_at": "2025-07-31T16:30:51Z"
    },
    {
      "event": "labeled",
      "id": 18924030027,
      "node_id": "LE_lADOABII587BWvuGzwAAAARn9chL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18924030027",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T17:29:29Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3140799440,
      "node_id": "IC_kwDOABII5867NMvQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3140799440",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T17:29:32Z",
      "updated_at": "2025-07-31T17:29:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `MSan, depends`: https://github.com/bitcoin/bitcoin/runs/47136399385</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by the \"logging_tests\" test failing during execution.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3140799440",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33011"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY4YjIxODQxOGU4ZTcxNmUyMTBlZTI0N2UxNDMxNzJmNmVmNGZjOTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8b218418e8e716e210ee247e143172f6ef4fc93",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f8b218418e8e716e210ee247e143172f6ef4fc93",
      "tree": {
        "sha": "658594bd8bfa0b6373ba2ed9614aec2642e6d394",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/658594bd8bfa0b6373ba2ed9614aec2642e6d394"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/699dd481598e5fd5a9f4c632cfae523eb318f210",
          "sha": "699dd481598e5fd5a9f4c632cfae523eb318f210",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/699dd481598e5fd5a9f4c632cfae523eb318f210"
        }
      ],
      "message": "test: don't leak log category mask across tests\n\nThis ensures log tests behave consistently when other tests modify\nthe log category mask.",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-31T18:06:03Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2025-07-31T11:18:06Z"
      },
      "sha": "f8b218418e8e716e210ee247e143172f6ef4fc93"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18924548805,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARn_bLF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18924548805",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "71de55a003286e980d77cfa9f02617788a825e9c",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/71de55a003286e980d77cfa9f02617788a825e9c",
      "created_at": "2025-07-31T18:06:54Z"
    },
    {
      "event": "reviewed",
      "id": 3076776415,
      "node_id": "PRR_kwDOABII5863Y-Hf",
      "url": null,
      "actor": null,
      "commit_id": "71de55a003286e980d77cfa9f02617788a825e9c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#pullrequestreview-3076776415",
      "submitted_at": "2025-07-31T20:41:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
    },
    {
      "event": "unlabeled",
      "id": 18933435395,
      "node_id": "UNLE_lADOABII587BWvuGzwAAAARohUwD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18933435395",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T07:17:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViMzMzMTA0ZWZkOTFiNWNkOTk0YjE5MzdjZDRmODFiOGRkOGM4NTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb333104efd91b5cd994b1937cd4f81b8dd8c851",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/eb333104efd91b5cd994b1937cd4f81b8dd8c851",
      "tree": {
        "sha": "ee0365de16be406eae1d2ba4d8ef4386c8e123fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee0365de16be406eae1d2ba4d8ef4386c8e123fe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8b218418e8e716e210ee247e143172f6ef4fc93",
          "sha": "f8b218418e8e716e210ee247e143172f6ef4fc93",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f8b218418e8e716e210ee247e143172f6ef4fc93"
        }
      ],
      "message": "test: logging_filesize_rate_limit improvements\n\n- Add helper functions and structs to improve readability and\n  reusability of test code\n- Make tests more specific by comparing all produced log lines with\n  expected log lines instead of relying on approximations or proxies.",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-08-01T15:37:48Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2025-07-23T21:30:07Z"
      },
      "sha": "eb333104efd91b5cd994b1937cd4f81b8dd8c851"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18942263844,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARpDAIk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18942263844",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f4df659561becae37de515546126972cac4f5b1e",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/f4df659561becae37de515546126972cac4f5b1e",
      "created_at": "2025-08-01T15:39:23Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxZWYyYjZhMTZiODQ0N2NmODQzYWNiYTY2ZDdkMDJlZmRlZGNlZmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "tree": {
        "sha": "8481f10191968f8e2312936a2c3b642ed94a1134",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8481f10191968f8e2312936a2c3b642ed94a1134"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb333104efd91b5cd994b1937cd4f81b8dd8c851",
          "sha": "eb333104efd91b5cd994b1937cd4f81b8dd8c851",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/eb333104efd91b5cd994b1937cd4f81b8dd8c851"
        }
      ],
      "message": "config: add DEBUG_ONLY -disableratelimitlogging\n\nUse -disableratelimitlogging by default in functional tests.",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-08-01T22:01:17Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-08-01T15:13:10Z"
      },
      "sha": "31ef2b6a16b8447cf843acba66d7d02efdedcefe"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18947525050,
      "node_id": "HRFPE_lADOABII587BWvuGzwAAAARpXEm6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18947525050",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "created_at": "2025-08-01T22:02:12Z"
    },
    {
      "event": "labeled",
      "id": 18948724048,
      "node_id": "LE_lADOABII587BWvuGzwAAAARpbpVQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18948724048",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-02T01:39:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3080978563,
      "node_id": "PRR_kwDOABII5863pACD",
      "url": null,
      "actor": null,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#pullrequestreview-3080978563",
      "submitted_at": "2025-08-02T09:59:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225128347",
      "pull_request_review_id": 3046739749,
      "id": 2225128347,
      "node_id": "PRRC_kwDOABII586EoMOb",
      "diff_hunk": "@@ -104,46 +104,30 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n-    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes per source location that can be logged within the specified time-window",
      "path": "src/logging.h",
      "position": null,
      "original_position": 5,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit on 35585c54b57bbb05bfc4de63880c1767931e3696: more consistent parameterise both:\r\n\r\n<details>\r\n<summary>git diff on d0b3a80b7f</summary>\r\n\r\n```diff\r\ndiff --git a/src/init.cpp b/src/init.cpp\r\nindex 63244c802e..863b2e088e 100644\r\n--- a/src/init.cpp\r\n+++ b/src/init.cpp\r\n@@ -1382,7 +1382,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\r\n     LogInstance().SetRateLimiting(std::make_unique<BCLog::LogRateLimiter>(\r\n         [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); },\r\n         BCLog::RATELIMIT_MAX_BYTES,\r\n-        1h));\r\n+        BCLog::RATELIMIT_WINDOW));\r\n \r\n     assert(!node.validation_signals);\r\n     node.validation_signals = std::make_unique<ValidationSignals>(std::make_unique<SerialTaskRunner>(scheduler));\r\ndiff --git a/src/logging.h b/src/logging.h\r\nindex 5437d73c78..a2cbbf51f7 100644\r\n--- a/src/logging.h\r\n+++ b/src/logging.h\r\n@@ -104,7 +104,8 @@ namespace BCLog {\r\n     };\r\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\r\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\r\n-    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes per source location that can be logged within the specified time-window\r\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes per source location that can be logged within the RATELIMIT_WINDOW\r\n+    constexpr auto RATELIMIT_WINDOW{1h}; // time window after which log ratelimit stats are reset\r\n \r\n     //! Fixed window rate limiter for logging.\r\n     class LogRateLimiter\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2025-07-23T10:42:48Z",
      "updated_at": "2025-07-23T22:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2225128347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225128347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225156552",
      "pull_request_review_id": 3046739749,
      "id": 2225156552,
      "node_id": "PRRC_kwDOABII586EoTHI",
      "diff_hunk": "@@ -307,13 +307,15 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n     CScheduler scheduler{};\n     scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n     uint64_t max_bytes{1024};\n-    auto reset_window{1min};\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    std::chrono::minutes reset_window{1};\n+    BCLog::LogRateLimiter::SchedulerFunction sched_func{[&scheduler](std::function<void()> func, std::chrono::milliseconds window) {\n+        scheduler.scheduleEvery(std::move(func), window);\n+    }};\n     BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n \n     using Status = BCLog::LogRateLimiter::Status;\n-    auto source_loc_1{std::source_location::current()};\n-    auto source_loc_2{std::source_location::current()};\n+    std::source_location source_loc_1{std::source_location::current()};\n+    std::source_location source_loc_2{std::source_location::current()};",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `auto` can sometimes make things less readable, but I think in all of these changes that's not the case. Repeating types (e.g. `std::source_location source_loc_1{std::source_location::current()}` is just overly verbose imo), and for the others the name/literal is already explanatory. For `sched_func`, I think the logic is now drowned in rather unimportant type definitions. I think this addresses [this comment](https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188256330), but I personally don't think there's anything wrong with mixing `auto` and explicit types, we should use whichever is most appropriate at each time imo.",
      "created_at": "2025-07-23T10:55:15Z",
      "updated_at": "2025-07-23T22:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2225156552",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225156552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": 310,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225171353",
      "pull_request_review_id": 3046739749,
      "id": 2225171353,
      "node_id": "PRRC_kwDOABII586EoWuZ",
      "diff_hunk": "@@ -348,122 +350,137 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    FIRST,",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: using descriptive names might make more sense, e.g. `INFO_1`, `INFO_2`, `DEBUG`, `INFO_NOLIMIT`",
      "created_at": "2025-07-23T11:00:48Z",
      "updated_at": "2025-07-23T22:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2225171353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225171353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225184386",
      "pull_request_review_id": 3046739749,
      "id": 2225184386,
      "node_id": "PRRC_kwDOABII586EoZ6C",
      "diff_hunk": "@@ -348,122 +350,137 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    FIRST,\n+    SECOND,\n+    THIRD,\n+    FOURTH,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::FIRST:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::SECOND:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::THIRD:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::FOURTH:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n-{\n+void LogFromLocationAndExpect(Location location, const std::string& message, const std::string& expect) {\n     ASSERT_DEBUG_LOG(expect);\n     LogFromLocation(location, message);\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    bool prev_log_timestamps{LogInstance().m_log_timestamps};\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    bool prev_log_sourcelocations{LogInstance().m_log_sourcelocations};\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    bool prev_log_threadnames{LogInstance().m_log_threadnames};\n     LogInstance().m_log_threadnames = false;\n \n+    int64_t line_length{1023};",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I find setting `line_length{1024}` and documenting the subtraction more straightforward:\r\n\r\n<details>\r\n<summary>git diff on d0b3a80b7f</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex 81c0bacba0..245940f284 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -414,11 +414,10 @@ BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n     bool prev_log_threadnames{LogInstance().m_log_threadnames};\r\n     LogInstance().m_log_threadnames = false;\r\n \r\n-    int64_t line_length{1023};\r\n+    int64_t line_length{1024};\r\n     int64_t num_lines{1024};\r\n \r\n-    // Add 1 to line_length because of newline.\r\n-    int64_t bytes_quota{(line_length + 1) * num_lines};\r\n+    int64_t bytes_quota{line_length * num_lines};\r\n \r\n     std::chrono::seconds time_window{20};\r\n \r\n@@ -430,7 +429,7 @@ BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n     std::unique_ptr<BCLog::LogRateLimiter> limiter{std::make_unique<BCLog::LogRateLimiter>(sched_func, bytes_quota, time_window)};\r\n     LogInstance().SetRateLimiting(std::move(limiter));\r\n \r\n-    std::string log_message(line_length, 'a');\r\n+    std::string log_message(line_length - 1, 'a'); // subtract one for newline\r\n \r\n     std::string utf8_path{LogInstance().m_file_path.utf8string()};\r\n     const char* log_path{utf8_path.c_str()};\r\n\r\n```\r\n</details>\r\n\r\nAlso, constants could be marked as such. Diff including the previous suggestion:\r\n\r\n<details>\r\n<summary>git diff on d0b3a80b7f</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex 81c0bacba0..62c92287dd 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -407,20 +407,17 @@ void LogFromLocationAndExpect(Location location, const std::string& message, con\r\n \r\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n {\r\n-    bool prev_log_timestamps{LogInstance().m_log_timestamps};\r\n+    const bool prev_log_timestamps{LogInstance().m_log_timestamps};\r\n     LogInstance().m_log_timestamps = false;\r\n-    bool prev_log_sourcelocations{LogInstance().m_log_sourcelocations};\r\n+    const bool prev_log_sourcelocations{LogInstance().m_log_sourcelocations};\r\n     LogInstance().m_log_sourcelocations = false;\r\n-    bool prev_log_threadnames{LogInstance().m_log_threadnames};\r\n+    const bool prev_log_threadnames{LogInstance().m_log_threadnames};\r\n     LogInstance().m_log_threadnames = false;\r\n \r\n-    int64_t line_length{1023};\r\n-    int64_t num_lines{1024};\r\n-\r\n-    // Add 1 to line_length because of newline.\r\n-    int64_t bytes_quota{(line_length + 1) * num_lines};\r\n-\r\n-    std::chrono::seconds time_window{20};\r\n+    constexpr int64_t line_length{1024};\r\n+    constexpr int64_t num_lines{1024};\r\n+    constexpr int64_t bytes_quota{line_length * num_lines};\r\n+    constexpr std::chrono::seconds time_window{20};\r\n \r\n     CScheduler scheduler{};\r\n     scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\r\n@@ -430,9 +427,8 @@ BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n     std::unique_ptr<BCLog::LogRateLimiter> limiter{std::make_unique<BCLog::LogRateLimiter>(sched_func, bytes_quota, time_window)};\r\n     LogInstance().SetRateLimiting(std::move(limiter));\r\n \r\n-    std::string log_message(line_length, 'a');\r\n-\r\n-    std::string utf8_path{LogInstance().m_file_path.utf8string()};\r\n+    const std::string log_message(line_length - 1, 'a'); // subtract one for newline\r\n+    const std::string utf8_path{LogInstance().m_file_path.utf8string()};\r\n     const char* log_path{utf8_path.c_str()};\r\n \r\n     // Use GetFileSize because fs::file_size may require a flush to be accurate.\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2025-07-23T11:05:10Z",
      "updated_at": "2025-07-23T22:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2225184386",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225184386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225276727",
      "pull_request_review_id": 3046739749,
      "id": 2225276727,
      "node_id": "PRRC_kwDOABII586Eowc3",
      "diff_hunk": "@@ -348,122 +350,137 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    FIRST,\n+    SECOND,\n+    THIRD,\n+    FOURTH,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::FIRST:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::SECOND:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::THIRD:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::FOURTH:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n-{\n+void LogFromLocationAndExpect(Location location, const std::string& message, const std::string& expect) {\n     ASSERT_DEBUG_LOG(expect);\n     LogFromLocation(location, message);\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    bool prev_log_timestamps{LogInstance().m_log_timestamps};\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    bool prev_log_sourcelocations{LogInstance().m_log_sourcelocations};\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    bool prev_log_threadnames{LogInstance().m_log_threadnames};\n     LogInstance().m_log_threadnames = false;\n \n+    int64_t line_length{1023};\n+    int64_t num_lines{1024};\n+\n+    // Add 1 to line_length because of newline.\n+    int64_t bytes_quota{(line_length + 1) * num_lines};\n+\n+    std::chrono::seconds time_window{20};\n+\n     CScheduler scheduler{};\n     scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n-    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    BCLog::LogRateLimiter::SchedulerFunction sched_func{[&scheduler](std::function<void()> func, std::chrono::milliseconds window) {\n+        scheduler.scheduleEvery(std::move(func), window);\n+    }};\n+    std::unique_ptr<BCLog::LogRateLimiter> limiter{std::make_unique<BCLog::LogRateLimiter>(sched_func, bytes_quota, time_window)};\n     LogInstance().SetRateLimiting(std::move(limiter));\n \n-    // Log 1024-character lines (1023 plus newline) to make the math simple.\n-    std::string log_message(1023, 'a');\n+    std::string log_message(line_length, 'a');\n \n     std::string utf8_path{LogInstance().m_file_path.utf8string()};\n     const char* log_path{utf8_path.c_str()};\n \n     // Use GetFileSize because fs::file_size may require a flush to be accurate.\n     std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n \n-    // Logging 1 MiB should be allowed.\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n+    for (int64_t i{0}; i < num_lines; ++i) {\n+        LogFromLocation(Location::FIRST, log_message);\n     }\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n-\n-    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+    LogFromLocationAndExpect(Location::FIRST, log_message, \"Excessive logging detected\");\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n-    }\n+    LogFromLocation(Location::FIRST, log_message);\n+    BOOST_CHECK_EQUAL(log_file_size, GetFileSize(log_path));\n \n-    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+    log_file_size = GetFileSize(log_path);\n+    LogFromLocation(Location::SECOND, log_message);\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n     {\n         ASSERT_DEBUG_LOG(\"Restarting logging\");\n         MockForwardAndSync(scheduler, 1min);",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 192,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: use variable\r\n```suggestion\r\n        MockForwardAndSync(scheduler, time_window);\r\n```",
      "created_at": "2025-07-23T11:37:25Z",
      "updated_at": "2025-07-23T22:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2225276727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225276727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225484458",
      "pull_request_review_id": 3046739749,
      "id": 2225484458,
      "node_id": "PRRC_kwDOABII586EpjKq",
      "diff_hunk": "@@ -348,122 +350,137 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    FIRST,\n+    SECOND,\n+    THIRD,\n+    FOURTH,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::FIRST:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::SECOND:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::THIRD:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::FOURTH:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n-{\n+void LogFromLocationAndExpect(Location location, const std::string& message, const std::string& expect) {\n     ASSERT_DEBUG_LOG(expect);\n     LogFromLocation(location, message);\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    bool prev_log_timestamps{LogInstance().m_log_timestamps};\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    bool prev_log_sourcelocations{LogInstance().m_log_sourcelocations};\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    bool prev_log_threadnames{LogInstance().m_log_threadnames};\n     LogInstance().m_log_threadnames = false;\n \n+    int64_t line_length{1023};\n+    int64_t num_lines{1024};\n+\n+    // Add 1 to line_length because of newline.\n+    int64_t bytes_quota{(line_length + 1) * num_lines};\n+\n+    std::chrono::seconds time_window{20};\n+\n     CScheduler scheduler{};\n     scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n-    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    BCLog::LogRateLimiter::SchedulerFunction sched_func{[&scheduler](std::function<void()> func, std::chrono::milliseconds window) {\n+        scheduler.scheduleEvery(std::move(func), window);\n+    }};\n+    std::unique_ptr<BCLog::LogRateLimiter> limiter{std::make_unique<BCLog::LogRateLimiter>(sched_func, bytes_quota, time_window)};\n     LogInstance().SetRateLimiting(std::move(limiter));\n \n-    // Log 1024-character lines (1023 plus newline) to make the math simple.\n-    std::string log_message(1023, 'a');\n+    std::string log_message(line_length, 'a');\n \n     std::string utf8_path{LogInstance().m_file_path.utf8string()};\n     const char* log_path{utf8_path.c_str()};\n \n     // Use GetFileSize because fs::file_size may require a flush to be accurate.\n     std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n \n-    // Logging 1 MiB should be allowed.\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n+    for (int64_t i{0}; i < num_lines; ++i) {\n+        LogFromLocation(Location::FIRST, log_message);\n     }\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n-\n-    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+    LogFromLocationAndExpect(Location::FIRST, log_message, \"Excessive logging detected\");\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n-    }\n+    LogFromLocation(Location::FIRST, log_message);\n+    BOOST_CHECK_EQUAL(log_file_size, GetFileSize(log_path));\n \n-    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+    log_file_size = GetFileSize(log_path);\n+    LogFromLocation(Location::SECOND, log_message);\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n     {\n         ASSERT_DEBUG_LOG(\"Restarting logging\");\n         MockForwardAndSync(scheduler, 1min);\n     }\n-\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n-\n-    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n-    // without limit.\n-    log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n+\n+    // Check that Location::THIRD and Location::FOURTH are exempt from rate limiting.\n+    for (Location location : {Location::THIRD, Location::FOURTH}) {\n+        log_file_size = GetFileSize(log_path);\n+        for (int64_t i{0}; i < num_lines; ++i) {\n+            LogFromLocation(location, log_message);\n+        }\n+        BOOST_CHECK(log_file_size < GetFileSize(log_path));\n+\n+        // Another log statement would normally trigger the rate limit and prevent any further logs.\n+        log_file_size = GetFileSize(log_path);\n+        LogFromLocation(location, log_message);\n+        BOOST_CHECK(log_file_size < GetFileSize(log_path));\n+\n+        // Check that the rate limit is bypassed and the file size increases.\n+        log_file_size = GetFileSize(log_path);\n+        LogFromLocation(location, log_message);\n+        BOOST_CHECK(log_file_size < GetFileSize(log_path));\n     }\n \n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n-\n-    log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    }\n-\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");\n-\n     LogInstance().m_log_timestamps = prev_log_timestamps;\n     LogInstance().m_log_sourcelocations = prev_log_sourcelocations;\n     LogInstance().m_log_threadnames = prev_log_threadnames;",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 236,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note: this is already handled by the `LogSetup` fixture, so I think we can remove this logic here.\r\n\r\nOn that note: I think `LogSetup` could benefit from explicitly setting `LogInstance().SetRateLimiting(nullptr);` in both its constructor and destructor?",
      "created_at": "2025-07-23T12:45:40Z",
      "updated_at": "2025-07-23T22:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2225484458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2225484458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": 484,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 486,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226684372",
      "pull_request_review_id": 3046739749,
      "id": 2226684372,
      "node_id": "PRRC_kwDOABII586EuIHU",
      "diff_hunk": "@@ -154,7 +138,7 @@ namespace BCLog {\n          *                          reset_window interval.\n          * @param max_bytes         Maximum number of bytes that can be logged for each source\n          *                          location.\n-         * @param reset_window      Time window after which the byte counters are reset.\n+         * @param reset_window      Time window after which the stats are reset.\n          */\n         LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);",
      "path": "src/logging.h",
      "position": null,
      "original_position": 71,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There are some lifetime concerns wrt `scheduler_func`, that are okay in our current codebase, but make the contract perhaps more fragile than it needs to be. Specifically: `Logger` has a `std::unique_ptr<LogRateLimiter> m_limiter` member. The node's scheduler holds [a reference](https://github.com/bitcoin/bitcoin/blob/eb137184482cea8a2a7cdfcd3c73ec6ae5fdd0d6/src/logging.cpp#L379) to the limiter. This means that the limiter may not be destroyed before the scheduler is stopped. In our current code, this is fine, because the logger is a [static global](https://github.com/bitcoin/bitcoin/blob/eb137184482cea8a2a7cdfcd3c73ec6ae5fdd0d6/src/logging.cpp#L43), so it can never be destroyed before the node is shutdown (which stops the scheduler).\r\n\r\nI ran into this dependency while reviewing / drafting my suggestion on #32604 when I was writing the test code, when I realized that writing an RAII struct (as now e.g. implemented [here](https://github.com/stickies-v/bitcoin/commit/8aa2726f1cfbc1e4267a796cb000c4eeae5910f5#diff-8c9b223f6f7e311ef2a0585813c17e4cc78119d39ef9956431164336e9158832R285-R287)) for the limiter was not really possible using the `std::unique_ptr` approach. I kept it as-is because the non-test code was fine, and I didn't want to overcomplicate things, but perhaps this follow-up is a good place to at least reconsider this.\r\n\r\nConceptually, I think it makes sense to make `m_limiter` a `std::shared_ptr` since it has two users: the thing that uses it to consume logs (in our case `Logger`), and the thing that uses it to reset stats (in our case `CScheduler`). With a shared pointer, we can safely and explicitly manage these dependencies without introducing coupling between the logger and the scheduler.\r\n\r\nAfter playing around with it, it turns out the implementation is actually rather straightforward:\r\n\r\n<details>\r\n<summary>git diff on d0b3a80b7f</summary>\r\n\r\n```diff\r\ndiff --git a/src/init.cpp b/src/init.cpp\r\nindex 63244c802e..75db37397c 100644\r\n--- a/src/init.cpp\r\n+++ b/src/init.cpp\r\n@@ -1379,7 +1379,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\r\n         }\r\n     }, std::chrono::minutes{5});\r\n \r\n-    LogInstance().SetRateLimiting(std::make_unique<BCLog::LogRateLimiter>(\r\n+    LogInstance().SetRateLimiting(BCLog::LogRateLimiter::Create(\r\n         [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); },\r\n         BCLog::RATELIMIT_MAX_BYTES,\r\n         1h));\r\ndiff --git a/src/logging.cpp b/src/logging.cpp\r\nindex e2c27ec54d..3d42bd9bc8 100644\r\n--- a/src/logging.cpp\r\n+++ b/src/logging.cpp\r\n@@ -371,12 +371,21 @@ static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\r\n            memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\r\n }\r\n \r\n-BCLog::LogRateLimiter::LogRateLimiter(\r\n-    SchedulerFunction scheduler_func,\r\n-    uint64_t max_bytes,\r\n-    std::chrono::seconds reset_window) : m_max_bytes{max_bytes}, m_reset_window{reset_window}\r\n+BCLog::LogRateLimiter::LogRateLimiter(uint64_t max_bytes, std::chrono::seconds reset_window)\r\n+    : m_max_bytes{max_bytes}, m_reset_window{reset_window} {}\r\n+\r\n+std::shared_ptr<BCLog::LogRateLimiter> BCLog::LogRateLimiter::Create(\r\n+    SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window)\r\n {\r\n-    scheduler_func([this] { Reset(); }, reset_window);\r\n+    auto limiter{std::shared_ptr<LogRateLimiter>(new LogRateLimiter(max_bytes, reset_window))};\r\n+    std::weak_ptr<LogRateLimiter> weak_limiter{limiter};\r\n+    scheduler_func([weak_limiter] {\r\n+        if (auto shared_limiter{weak_limiter.lock()}) {\r\n+            shared_limiter->Reset();\r\n+        }\r\n+    },\r\n+                   limiter->m_reset_window);\r\n+    return limiter;\r\n }\r\n \r\n BCLog::LogRateLimiter::Status BCLog::LogRateLimiter::Consume(\r\ndiff --git a/src/logging.h b/src/logging.h\r\nindex 5437d73c78..12905f1e47 100644\r\n--- a/src/logging.h\r\n+++ b/src/logging.h\r\n@@ -18,6 +18,7 @@\r\n #include <cstring>\r\n #include <functional>\r\n #include <list>\r\n+#include <memory>\r\n #include <mutex>\r\n #include <source_location>\r\n #include <string>\r\n@@ -107,7 +108,7 @@ namespace BCLog {\r\n     constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes per source location that can be logged within the specified time-window\r\n \r\n     //! Fixed window rate limiter for logging.\r\n-    class LogRateLimiter\r\n+    class LogRateLimiter : public std::enable_shared_from_this<LogRateLimiter>\r\n     {\r\n     public:\r\n         //! Keeps track of an individual source location and how many available bytes are left for logging from it.\r\n@@ -129,6 +130,7 @@ namespace BCLog {\r\n         std::unordered_map<std::source_location, Stats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\r\n         //! Whether any log locations are suppressed. Cached view on m_source_locations for performance reasons.\r\n         std::atomic<bool> m_suppression_active{false};\r\n+        LogRateLimiter(uint64_t max_bytes, std::chrono::seconds reset_window);\r\n \r\n     public:\r\n         using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\r\n@@ -140,7 +142,10 @@ namespace BCLog {\r\n          *                          location.\r\n          * @param reset_window      Time window after which the stats are reset.\r\n          */\r\n-        LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);\r\n+        static std::shared_ptr<LogRateLimiter> Create(\r\n+            SchedulerFunction scheduler_func,\r\n+            uint64_t max_bytes,\r\n+            std::chrono::seconds reset_window);\r\n         //! Maximum number of bytes logged per location per window.\r\n         const uint64_t m_max_bytes;\r\n         //! Interval after which the window is reset.\r\n@@ -160,6 +165,8 @@ namespace BCLog {\r\n         void Reset() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n         //! Returns true if any log locations are currently being suppressed.\r\n         bool SuppressionsActive() const { return m_suppression_active; }\r\n+        //! The function that is used to schedule the reset window.\r\n+        SchedulerFunction m_scheduler_func;\r\n     };\r\n \r\n     class Logger\r\n@@ -185,7 +192,7 @@ namespace BCLog {\r\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\r\n \r\n         //! Manages the rate limiting of each log location.\r\n-        std::unique_ptr<LogRateLimiter> m_limiter GUARDED_BY(m_cs);\r\n+        std::shared_ptr<LogRateLimiter> m_limiter GUARDED_BY(m_cs);\r\n \r\n         //! Category-specific log level. Overrides `m_log_level`.\r\n         std::unordered_map<LogFlags, Level> m_category_log_levels GUARDED_BY(m_cs);\r\n@@ -254,7 +261,7 @@ namespace BCLog {\r\n         /** Only for testing */\r\n         void DisconnectTestLogger() EXCLUSIVE_LOCKS_REQUIRED(!m_cs);\r\n \r\n-        void SetRateLimiting(std::unique_ptr<LogRateLimiter>&& limiter) EXCLUSIVE_LOCKS_REQUIRED(!m_cs)\r\n+        void SetRateLimiting(std::shared_ptr<LogRateLimiter> limiter) EXCLUSIVE_LOCKS_REQUIRED(!m_cs)\r\n         {\r\n             StdLockGuard scoped_lock(m_cs);\r\n             m_limiter = std::move(limiter);\r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex 81c0bacba0..ea0297367d 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -311,7 +311,8 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\r\n     BCLog::LogRateLimiter::SchedulerFunction sched_func{[&scheduler](std::function<void()> func, std::chrono::milliseconds window) {\r\n         scheduler.scheduleEvery(std::move(func), window);\r\n     }};\r\n-    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\r\n+    auto limiter_{BCLog::LogRateLimiter::Create(sched_func, max_bytes, reset_window)};\r\n+    auto& limiter{*limiter_};\r\n \r\n     using Status = BCLog::LogRateLimiter::Status;\r\n     std::source_location source_loc_1{std::source_location::current()};\r\n@@ -427,8 +428,7 @@ BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n     BCLog::LogRateLimiter::SchedulerFunction sched_func{[&scheduler](std::function<void()> func, std::chrono::milliseconds window) {\r\n         scheduler.scheduleEvery(std::move(func), window);\r\n     }};\r\n-    std::unique_ptr<BCLog::LogRateLimiter> limiter{std::make_unique<BCLog::LogRateLimiter>(sched_func, bytes_quota, time_window)};\r\n-    LogInstance().SetRateLimiting(std::move(limiter));\r\n+    LogInstance().SetRateLimiting(BCLog::LogRateLimiter::Create(sched_func, bytes_quota, time_window));\r\n \r\n     std::string log_message(line_length, 'a');\r\n \r\n\r\n```\r\n</details>\r\n\r\n\r\nWhat do you think?",
      "created_at": "2025-07-23T21:03:24Z",
      "updated_at": "2025-07-23T22:21:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2226684372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226684372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226805223",
      "pull_request_review_id": 3046739749,
      "id": 2226805223,
      "node_id": "PRRC_kwDOABII586Eulnn",
      "diff_hunk": "",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The test has definitely improved in both functionality and readability, but I find it's still quite clunky (e.g. lots of repeated code) and unspecific (e.g. using any increase in filesize as measurement, not accurately checking the (non) existence of certain log statements most of the time), so I dove into a little rabbit hole today to see what my ideal test would look like, and I think it'd be close to something like this: https://github.com/stickies-v/bitcoin/commit/e55c03bf7954122fd0a23bfb60599d19be507877. The main conceptual difference is that I added a separate function that quite exhaustively compares all the attributes of all the produced on-disk log output with its expected values. Most of the code changes then accommodates that / reduces duplication.\r\n\r\nIt has two helper commits (one already mentioned in another comment), and it also incorporates a bunch of the changes I've left in smaller comments on this PR. What do you think?\r\n",
      "created_at": "2025-07-23T22:03:47Z",
      "updated_at": "2025-07-23T22:30:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2226805223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226805223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231703938",
      "pull_request_review_id": 3056334820,
      "id": 2231703938,
      "node_id": "PRRC_kwDOABII586FBRmC",
      "diff_hunk": "",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2226805223,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is better, will implement.",
      "created_at": "2025-07-25T17:48:56Z",
      "updated_at": "2025-07-25T17:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2231703938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231703938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231710505",
      "pull_request_review_id": 3056344538,
      "id": 2231710505,
      "node_id": "PRRC_kwDOABII586FBTMp",
      "diff_hunk": "@@ -154,7 +138,7 @@ namespace BCLog {\n          *                          reset_window interval.\n          * @param max_bytes         Maximum number of bytes that can be logged for each source\n          *                          location.\n-         * @param reset_window      Time window after which the byte counters are reset.\n+         * @param reset_window      Time window after which the stats are reset.\n          */\n         LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);",
      "path": "src/logging.h",
      "position": null,
      "original_position": 71,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2226684372,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will implement, the `ScopedScheduler` is better imo and `std::shared_ptr` makes more sense over `std::unique_ptr`.\r\n\r\n> With a shared pointer, we can safely and explicitly manage these dependencies without introducing coupling between the logger and the scheduler.\r\n\r\nI think there will always be coupling between the two since `Reset` may call `LogPrintLevel_`?",
      "created_at": "2025-07-25T17:52:45Z",
      "updated_at": "2025-07-25T17:52:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2231710505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231710505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237712566",
      "pull_request_review_id": 3064411089,
      "id": 2237712566,
      "node_id": "PRRC_kwDOABII586FYMi2",
      "diff_hunk": "@@ -104,46 +104,30 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n-    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes per source location that can be logged within the specified time-window",
      "path": "src/logging.h",
      "position": null,
      "original_position": 5,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2225128347,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in 8319a134684df2240057a5e8afaa6ae441fb8a58",
      "created_at": "2025-07-28T19:47:12Z",
      "updated_at": "2025-07-28T19:47:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2237712566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237712566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237714115",
      "pull_request_review_id": 3064413264,
      "id": 2237714115,
      "node_id": "PRRC_kwDOABII586FYM7D",
      "diff_hunk": "@@ -307,13 +307,15 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n     CScheduler scheduler{};\n     scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n     uint64_t max_bytes{1024};\n-    auto reset_window{1min};\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    std::chrono::minutes reset_window{1};\n+    BCLog::LogRateLimiter::SchedulerFunction sched_func{[&scheduler](std::function<void()> func, std::chrono::milliseconds window) {\n+        scheduler.scheduleEvery(std::move(func), window);\n+    }};\n     BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n \n     using Status = BCLog::LogRateLimiter::Status;\n-    auto source_loc_1{std::source_location::current()};\n-    auto source_loc_2{std::source_location::current()};\n+    std::source_location source_loc_1{std::source_location::current()};\n+    std::source_location source_loc_2{std::source_location::current()};",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2225156552,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in 526403df23a2db781709e4494da3a9f79284531d",
      "created_at": "2025-07-28T19:47:48Z",
      "updated_at": "2025-07-28T19:47:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2237714115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237714115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": 310,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237715936",
      "pull_request_review_id": 3064415797,
      "id": 2237715936,
      "node_id": "PRRC_kwDOABII586FYNXg",
      "diff_hunk": "@@ -348,122 +350,137 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    FIRST,",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2225171353,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in 526403df23a2db781709e4494da3a9f79284531d, renamed `DEBUG` to `DEBUG_LOG` since the former is a macro",
      "created_at": "2025-07-28T19:48:30Z",
      "updated_at": "2025-07-28T19:48:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2237715936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237715936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237716554",
      "pull_request_review_id": 3064416680,
      "id": 2237716554,
      "node_id": "PRRC_kwDOABII586FYNhK",
      "diff_hunk": "@@ -348,122 +350,137 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    FIRST,\n+    SECOND,\n+    THIRD,\n+    FOURTH,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::FIRST:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::SECOND:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::THIRD:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::FOURTH:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n-{\n+void LogFromLocationAndExpect(Location location, const std::string& message, const std::string& expect) {\n     ASSERT_DEBUG_LOG(expect);\n     LogFromLocation(location, message);\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    bool prev_log_timestamps{LogInstance().m_log_timestamps};\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    bool prev_log_sourcelocations{LogInstance().m_log_sourcelocations};\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    bool prev_log_threadnames{LogInstance().m_log_threadnames};\n     LogInstance().m_log_threadnames = false;\n \n+    int64_t line_length{1023};",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2225184386,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in 526403df23a2db781709e4494da3a9f79284531d",
      "created_at": "2025-07-28T19:48:46Z",
      "updated_at": "2025-07-28T19:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2237716554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237716554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237717014",
      "pull_request_review_id": 3064417260,
      "id": 2237717014,
      "node_id": "PRRC_kwDOABII586FYNoW",
      "diff_hunk": "@@ -348,122 +350,137 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    FIRST,\n+    SECOND,\n+    THIRD,\n+    FOURTH,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::FIRST:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::SECOND:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::THIRD:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::FOURTH:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n-{\n+void LogFromLocationAndExpect(Location location, const std::string& message, const std::string& expect) {\n     ASSERT_DEBUG_LOG(expect);\n     LogFromLocation(location, message);\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    bool prev_log_timestamps{LogInstance().m_log_timestamps};\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    bool prev_log_sourcelocations{LogInstance().m_log_sourcelocations};\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    bool prev_log_threadnames{LogInstance().m_log_threadnames};\n     LogInstance().m_log_threadnames = false;\n \n+    int64_t line_length{1023};\n+    int64_t num_lines{1024};\n+\n+    // Add 1 to line_length because of newline.\n+    int64_t bytes_quota{(line_length + 1) * num_lines};\n+\n+    std::chrono::seconds time_window{20};\n+\n     CScheduler scheduler{};\n     scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n-    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    BCLog::LogRateLimiter::SchedulerFunction sched_func{[&scheduler](std::function<void()> func, std::chrono::milliseconds window) {\n+        scheduler.scheduleEvery(std::move(func), window);\n+    }};\n+    std::unique_ptr<BCLog::LogRateLimiter> limiter{std::make_unique<BCLog::LogRateLimiter>(sched_func, bytes_quota, time_window)};\n     LogInstance().SetRateLimiting(std::move(limiter));\n \n-    // Log 1024-character lines (1023 plus newline) to make the math simple.\n-    std::string log_message(1023, 'a');\n+    std::string log_message(line_length, 'a');\n \n     std::string utf8_path{LogInstance().m_file_path.utf8string()};\n     const char* log_path{utf8_path.c_str()};\n \n     // Use GetFileSize because fs::file_size may require a flush to be accurate.\n     std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n \n-    // Logging 1 MiB should be allowed.\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n+    for (int64_t i{0}; i < num_lines; ++i) {\n+        LogFromLocation(Location::FIRST, log_message);\n     }\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n-\n-    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+    LogFromLocationAndExpect(Location::FIRST, log_message, \"Excessive logging detected\");\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n-    }\n+    LogFromLocation(Location::FIRST, log_message);\n+    BOOST_CHECK_EQUAL(log_file_size, GetFileSize(log_path));\n \n-    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+    log_file_size = GetFileSize(log_path);\n+    LogFromLocation(Location::SECOND, log_message);\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n     {\n         ASSERT_DEBUG_LOG(\"Restarting logging\");\n         MockForwardAndSync(scheduler, 1min);",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 192,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2225276727,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in 526403df23a2db781709e4494da3a9f79284531d",
      "created_at": "2025-07-28T19:48:58Z",
      "updated_at": "2025-07-28T19:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2237717014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237717014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237718141",
      "pull_request_review_id": 3064418866,
      "id": 2237718141,
      "node_id": "PRRC_kwDOABII586FYN59",
      "diff_hunk": "@@ -348,122 +350,137 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    FIRST,\n+    SECOND,\n+    THIRD,\n+    FOURTH,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::FIRST:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::SECOND:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::THIRD:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::FOURTH:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n-{\n+void LogFromLocationAndExpect(Location location, const std::string& message, const std::string& expect) {\n     ASSERT_DEBUG_LOG(expect);\n     LogFromLocation(location, message);\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    bool prev_log_timestamps{LogInstance().m_log_timestamps};\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    bool prev_log_sourcelocations{LogInstance().m_log_sourcelocations};\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    bool prev_log_threadnames{LogInstance().m_log_threadnames};\n     LogInstance().m_log_threadnames = false;\n \n+    int64_t line_length{1023};\n+    int64_t num_lines{1024};\n+\n+    // Add 1 to line_length because of newline.\n+    int64_t bytes_quota{(line_length + 1) * num_lines};\n+\n+    std::chrono::seconds time_window{20};\n+\n     CScheduler scheduler{};\n     scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n-    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    BCLog::LogRateLimiter::SchedulerFunction sched_func{[&scheduler](std::function<void()> func, std::chrono::milliseconds window) {\n+        scheduler.scheduleEvery(std::move(func), window);\n+    }};\n+    std::unique_ptr<BCLog::LogRateLimiter> limiter{std::make_unique<BCLog::LogRateLimiter>(sched_func, bytes_quota, time_window)};\n     LogInstance().SetRateLimiting(std::move(limiter));\n \n-    // Log 1024-character lines (1023 plus newline) to make the math simple.\n-    std::string log_message(1023, 'a');\n+    std::string log_message(line_length, 'a');\n \n     std::string utf8_path{LogInstance().m_file_path.utf8string()};\n     const char* log_path{utf8_path.c_str()};\n \n     // Use GetFileSize because fs::file_size may require a flush to be accurate.\n     std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n \n-    // Logging 1 MiB should be allowed.\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n+    for (int64_t i{0}; i < num_lines; ++i) {\n+        LogFromLocation(Location::FIRST, log_message);\n     }\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n-\n-    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+    LogFromLocationAndExpect(Location::FIRST, log_message, \"Excessive logging detected\");\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n-    }\n+    LogFromLocation(Location::FIRST, log_message);\n+    BOOST_CHECK_EQUAL(log_file_size, GetFileSize(log_path));\n \n-    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+    log_file_size = GetFileSize(log_path);\n+    LogFromLocation(Location::SECOND, log_message);\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n \n     log_file_size = GetFileSize(log_path);\n     {\n         ASSERT_DEBUG_LOG(\"Restarting logging\");\n         MockForwardAndSync(scheduler, 1min);\n     }\n-\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n-\n-    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n-    // without limit.\n-    log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK(log_file_size < GetFileSize(log_path));\n+\n+    // Check that Location::THIRD and Location::FOURTH are exempt from rate limiting.\n+    for (Location location : {Location::THIRD, Location::FOURTH}) {\n+        log_file_size = GetFileSize(log_path);\n+        for (int64_t i{0}; i < num_lines; ++i) {\n+            LogFromLocation(location, log_message);\n+        }\n+        BOOST_CHECK(log_file_size < GetFileSize(log_path));\n+\n+        // Another log statement would normally trigger the rate limit and prevent any further logs.\n+        log_file_size = GetFileSize(log_path);\n+        LogFromLocation(location, log_message);\n+        BOOST_CHECK(log_file_size < GetFileSize(log_path));\n+\n+        // Check that the rate limit is bypassed and the file size increases.\n+        log_file_size = GetFileSize(log_path);\n+        LogFromLocation(location, log_message);\n+        BOOST_CHECK(log_file_size < GetFileSize(log_path));\n     }\n \n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n-\n-    log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    }\n-\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");\n-\n     LogInstance().m_log_timestamps = prev_log_timestamps;\n     LogInstance().m_log_sourcelocations = prev_log_sourcelocations;\n     LogInstance().m_log_threadnames = prev_log_threadnames;",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 236,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2225484458,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in 526403df23a2db781709e4494da3a9f79284531d",
      "created_at": "2025-07-28T19:49:25Z",
      "updated_at": "2025-07-28T19:49:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2237718141",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237718141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": 484,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 486,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237719250",
      "pull_request_review_id": 3064420540,
      "id": 2237719250,
      "node_id": "PRRC_kwDOABII586FYOLS",
      "diff_hunk": "@@ -154,7 +138,7 @@ namespace BCLog {\n          *                          reset_window interval.\n          * @param max_bytes         Maximum number of bytes that can be logged for each source\n          *                          location.\n-         * @param reset_window      Time window after which the byte counters are reset.\n+         * @param reset_window      Time window after which the stats are reset.\n          */\n         LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);",
      "path": "src/logging.h",
      "position": null,
      "original_position": 71,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2226684372,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in 65c8072757e58f9cad1198ddd8e403d656bb68e2",
      "created_at": "2025-07-28T19:49:52Z",
      "updated_at": "2025-07-28T19:49:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2237719250",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237719250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237727363",
      "pull_request_review_id": 3064431876,
      "id": 2237727363,
      "node_id": "PRRC_kwDOABII586FYQKD",
      "diff_hunk": "",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "original_commit_id": "d0b3a80b7f6f8b26ed4069378961a76b53a21cbc",
      "in_reply_to_id": 2226805223,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Implemented in 526403df23a2db781709e4494da3a9f79284531d, but I think there is a CI failure now.",
      "created_at": "2025-07-28T19:53:07Z",
      "updated_at": "2025-07-28T19:53:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2237727363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237727363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245140841",
      "pull_request_review_id": 3075050903,
      "id": 2245140841,
      "node_id": "PRRC_kwDOABII586F0iFp",
      "diff_hunk": "@@ -337,138 +348,138 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n     BOOST_CHECK(limiter.SuppressionsActive());\n \n     // After reset_window time has passed, all suppressions should be cleared.\n-    MockForwardAndSync(scheduler, reset_window);\n+    scheduler.MockForwardAndSync(reset_window);\n \n     BOOST_CHECK(!limiter.SuppressionsActive());\n     BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n     BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n-\n-    scheduler.stop();\n }\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    INFO_1,\n+    INFO_2,\n+    DEBUG_LOG,\n+    INFO_NOLIMIT,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::INFO_1:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::INFO_2:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::DEBUG_LOG:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::INFO_NOLIMIT:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+/**\n+ * For a given `location` and `message`, ensure that the on-disk debug log behaviour resembles what\n+ * we'd expect it to be for `status` and `suppressions_active`.\n+ */\n+void TestLogFromLocation(Location location, const std::string& message,\n+                         BCLog::LogRateLimiter::Status status, bool suppressions_active,\n+                         std::source_location source = std::source_location::current())\n {\n-    ASSERT_DEBUG_LOG(expect);\n+    using Status = BCLog::LogRateLimiter::Status;\n+    if (!suppressions_active) assert(status == Status::UNSUPPRESSED); // developer error\n+\n+    std::ofstream ofs(LogInstance().m_file_path, std::ios::out | std::ios::trunc); // clear debug log\n     LogFromLocation(location, message);\n+    auto log_lines{ReadDebugLogLines()};\n+\n+    BOOST_TEST_CONTEXT(\"TestLogFromLocation failed from \" << source.file_name() << \":\" << source.line())\n+    {\n+        if (status == Status::STILL_SUPPRESSED) {\n+            BOOST_CHECK_EQUAL(log_lines.size(), 0);\n+            return;\n+        }\n+\n+        if (status == Status::NEWLY_SUPPRESSED) {\n+            BOOST_REQUIRE_EQUAL(log_lines.size(), 2);\n+            BOOST_CHECK(log_lines[0].starts_with(\"[*] [warning] Excessive logging detected\"));\n+            log_lines.erase(log_lines.begin());\n+        }\n+        BOOST_REQUIRE_EQUAL(log_lines.size(), 1);\n+        auto& payload{log_lines.back()};\n+        BOOST_CHECK_EQUAL(suppressions_active, payload.starts_with(\"[*]\"));\n+        BOOST_CHECK(payload.ends_with(message));\n+    }\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    using Status = BCLog::LogRateLimiter::Status;\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n     LogInstance().m_log_threadnames = false;\n \n-    CScheduler scheduler{};\n-    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n-    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n-    LogInstance().SetRateLimiting(std::move(limiter));\n-\n-    // Log 1024-character lines (1023 plus newline) to make the math simple.\n-    std::string log_message(1023, 'a');\n-\n-    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n-    const char* log_path{utf8_path.c_str()};\n-\n-    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n-    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+    constexpr int64_t line_length{1024};\n+    constexpr int64_t num_lines{1024};\n+    constexpr int64_t bytes_quota{line_length * num_lines};\n+    constexpr auto time_window{20s};\n \n-    // Logging 1 MiB should be allowed.\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n-    }\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n-\n-    log_file_size = GetFileSize(log_path);\n+    ScopedScheduler scheduler{};\n+    auto limiter{scheduler.GetLimiter(bytes_quota, time_window)};\n+    LogInstance().SetRateLimiting(limiter);\n \n-    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+    const std::string log_message(line_length - 1, 'a'); // subtract one for newline\n \n-    log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n+    for (int i = 0; i < num_lines; ++i) {\n+        TestLogFromLocation(Location::INFO_1, log_message, Status::UNSUPPRESSED, /*suppressions_active=*/false);\n     }\n-\n-    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n-\n-    log_file_size = GetFileSize(log_path);\n+    TestLogFromLocation(Location::INFO_1, \"a\", Status::NEWLY_SUPPRESSED, /*suppressions_active=*/true);\n+    TestLogFromLocation(Location::INFO_1, \"b\", Status::STILL_SUPPRESSED, /*suppressions_active=*/true);\n+    TestLogFromLocation(Location::INFO_2, \"c\", Status::UNSUPPRESSED, /*suppressions_active=*/true);\n     {\n-        ASSERT_DEBUG_LOG(\"Restarting logging\");\n-        MockForwardAndSync(scheduler, 1min);\n+        scheduler.MockForwardAndSync(time_window);\n+        auto log_lines{ReadDebugLogLines()};\n+        auto restart_pred = [](std::string& s) { return s.starts_with(\"[warning] Restarting logging\"); };\n+        BOOST_CHECK(std::any_of(log_lines.begin(), log_lines.end(), restart_pred));",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 354,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d434155db5f9c34b8ab3e19038d824d161b34195",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Re https://github.com/bitcoin/bitcoin/pull/33011#issuecomment-3136494016:\r\n\r\nNice find re the lock contention. I was able to hit this from other locations in the test too on my machine. As you suggested offline, I think the best fix is to disable the LOCK category for this test. It might be helpful to first add a commit to prevent leaking categories across tests (e.g. https://github.com/stickies-v/bitcoin/commit/3d96ff75f161419654b14a7e9fd884e52aec26c4), and then the below diff should work?\r\n\r\n<details>\r\n<summary>git diff on 3d96ff75f1</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex 919222f5f8..df00d2e570 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -451,6 +451,12 @@ BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n     LogInstance().m_log_sourcelocations = false;\r\n     LogInstance().m_log_threadnames = false;\r\n \r\n+// This test's scheduler schedules new tasks on 2 threads, potentially causing (non-circular)\r\n+// lock contentions. Disable those logs so we can maintain a tight accounting.\r\n+#ifdef DEBUG_LOCKCONTENTION\r\n+    LogInstance().DisableCategory(BCLog::LogFlags::LOCK);\r\n+#endif\r\n+\r\n     constexpr int64_t line_length{1024};\r\n     constexpr int64_t num_lines{1024};\r\n     constexpr int64_t bytes_quota{line_length * num_lines};\r\n@@ -470,9 +476,7 @@ BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n     TestLogFromLocation(Location::INFO_2, \"c\", Status::UNSUPPRESSED, /*suppressions_active=*/true);\r\n     {\r\n         scheduler.MockForwardAndSync(time_window);\r\n-        auto log_lines{ReadDebugLogLines()};\r\n-        auto restart_pred = [](std::string& s) { return s.starts_with(\"[warning] Restarting logging\"); };\r\n-        BOOST_CHECK(std::any_of(log_lines.begin(), log_lines.end(), restart_pred));\r\n+        BOOST_CHECK(ReadDebugLogLines().back().starts_with(\"[warning] Restarting logging\"));\r\n     }\r\n     // Check that logging from previously suppressed location is unsuppressed again.\r\n     TestLogFromLocation(Location::INFO_1, log_message, Status::UNSUPPRESSED, /*suppressions_active=*/false);\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2025-07-31T11:39:21Z",
      "updated_at": "2025-07-31T11:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2245140841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245140841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": 470,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245259646",
      "pull_request_review_id": 3075217072,
      "id": 2245259646,
      "node_id": "PRRC_kwDOABII586F0_F-",
      "diff_hunk": "@@ -337,138 +348,138 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n     BOOST_CHECK(limiter.SuppressionsActive());\n \n     // After reset_window time has passed, all suppressions should be cleared.\n-    MockForwardAndSync(scheduler, reset_window);\n+    scheduler.MockForwardAndSync(reset_window);\n \n     BOOST_CHECK(!limiter.SuppressionsActive());\n     BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n     BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n-\n-    scheduler.stop();\n }\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    INFO_1,\n+    INFO_2,\n+    DEBUG_LOG,\n+    INFO_NOLIMIT,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::INFO_1:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::INFO_2:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::DEBUG_LOG:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::INFO_NOLIMIT:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+/**\n+ * For a given `location` and `message`, ensure that the on-disk debug log behaviour resembles what\n+ * we'd expect it to be for `status` and `suppressions_active`.\n+ */\n+void TestLogFromLocation(Location location, const std::string& message,\n+                         BCLog::LogRateLimiter::Status status, bool suppressions_active,\n+                         std::source_location source = std::source_location::current())\n {\n-    ASSERT_DEBUG_LOG(expect);\n+    using Status = BCLog::LogRateLimiter::Status;\n+    if (!suppressions_active) assert(status == Status::UNSUPPRESSED); // developer error\n+\n+    std::ofstream ofs(LogInstance().m_file_path, std::ios::out | std::ios::trunc); // clear debug log\n     LogFromLocation(location, message);\n+    auto log_lines{ReadDebugLogLines()};\n+\n+    BOOST_TEST_CONTEXT(\"TestLogFromLocation failed from \" << source.file_name() << \":\" << source.line())\n+    {\n+        if (status == Status::STILL_SUPPRESSED) {\n+            BOOST_CHECK_EQUAL(log_lines.size(), 0);\n+            return;\n+        }\n+\n+        if (status == Status::NEWLY_SUPPRESSED) {\n+            BOOST_REQUIRE_EQUAL(log_lines.size(), 2);\n+            BOOST_CHECK(log_lines[0].starts_with(\"[*] [warning] Excessive logging detected\"));\n+            log_lines.erase(log_lines.begin());\n+        }\n+        BOOST_REQUIRE_EQUAL(log_lines.size(), 1);\n+        auto& payload{log_lines.back()};\n+        BOOST_CHECK_EQUAL(suppressions_active, payload.starts_with(\"[*]\"));\n+        BOOST_CHECK(payload.ends_with(message));\n+    }\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    using Status = BCLog::LogRateLimiter::Status;\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n     LogInstance().m_log_threadnames = false;\n \n-    CScheduler scheduler{};\n-    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n-    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n-    LogInstance().SetRateLimiting(std::move(limiter));\n-\n-    // Log 1024-character lines (1023 plus newline) to make the math simple.\n-    std::string log_message(1023, 'a');\n-\n-    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n-    const char* log_path{utf8_path.c_str()};\n-\n-    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n-    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+    constexpr int64_t line_length{1024};\n+    constexpr int64_t num_lines{1024};\n+    constexpr int64_t bytes_quota{line_length * num_lines};\n+    constexpr auto time_window{20s};\n \n-    // Logging 1 MiB should be allowed.\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n-    }\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n-\n-    log_file_size = GetFileSize(log_path);\n+    ScopedScheduler scheduler{};\n+    auto limiter{scheduler.GetLimiter(bytes_quota, time_window)};\n+    LogInstance().SetRateLimiting(limiter);\n \n-    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+    const std::string log_message(line_length - 1, 'a'); // subtract one for newline\n \n-    log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n+    for (int i = 0; i < num_lines; ++i) {\n+        TestLogFromLocation(Location::INFO_1, log_message, Status::UNSUPPRESSED, /*suppressions_active=*/false);\n     }\n-\n-    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n-\n-    log_file_size = GetFileSize(log_path);\n+    TestLogFromLocation(Location::INFO_1, \"a\", Status::NEWLY_SUPPRESSED, /*suppressions_active=*/true);\n+    TestLogFromLocation(Location::INFO_1, \"b\", Status::STILL_SUPPRESSED, /*suppressions_active=*/true);\n+    TestLogFromLocation(Location::INFO_2, \"c\", Status::UNSUPPRESSED, /*suppressions_active=*/true);\n     {\n-        ASSERT_DEBUG_LOG(\"Restarting logging\");\n-        MockForwardAndSync(scheduler, 1min);\n+        scheduler.MockForwardAndSync(time_window);\n+        auto log_lines{ReadDebugLogLines()};\n+        auto restart_pred = [](std::string& s) { return s.starts_with(\"[warning] Restarting logging\"); };\n+        BOOST_CHECK(std::any_of(log_lines.begin(), log_lines.end(), restart_pred));",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 354,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d434155db5f9c34b8ab3e19038d824d161b34195",
      "in_reply_to_id": 2245140841,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yup, I had also hit the lock contention logging issue in other parts of the test. I ran the suggested diff 100 times without any error. Will add.",
      "created_at": "2025-07-31T12:35:16Z",
      "updated_at": "2025-07-31T12:35:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2245259646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245259646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": 470,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245743993",
      "pull_request_review_id": 3075949037,
      "id": 2245743993,
      "node_id": "PRRC_kwDOABII586F21V5",
      "diff_hunk": "@@ -337,138 +348,138 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n     BOOST_CHECK(limiter.SuppressionsActive());\n \n     // After reset_window time has passed, all suppressions should be cleared.\n-    MockForwardAndSync(scheduler, reset_window);\n+    scheduler.MockForwardAndSync(reset_window);\n \n     BOOST_CHECK(!limiter.SuppressionsActive());\n     BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n     BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n-\n-    scheduler.stop();\n }\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    INFO_1,\n+    INFO_2,\n+    DEBUG_LOG,\n+    INFO_NOLIMIT,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::INFO_1:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::INFO_2:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::DEBUG_LOG:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::INFO_NOLIMIT:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+/**\n+ * For a given `location` and `message`, ensure that the on-disk debug log behaviour resembles what\n+ * we'd expect it to be for `status` and `suppressions_active`.\n+ */\n+void TestLogFromLocation(Location location, const std::string& message,\n+                         BCLog::LogRateLimiter::Status status, bool suppressions_active,\n+                         std::source_location source = std::source_location::current())\n {\n-    ASSERT_DEBUG_LOG(expect);\n+    using Status = BCLog::LogRateLimiter::Status;\n+    if (!suppressions_active) assert(status == Status::UNSUPPRESSED); // developer error\n+\n+    std::ofstream ofs(LogInstance().m_file_path, std::ios::out | std::ios::trunc); // clear debug log\n     LogFromLocation(location, message);\n+    auto log_lines{ReadDebugLogLines()};\n+\n+    BOOST_TEST_CONTEXT(\"TestLogFromLocation failed from \" << source.file_name() << \":\" << source.line())\n+    {\n+        if (status == Status::STILL_SUPPRESSED) {\n+            BOOST_CHECK_EQUAL(log_lines.size(), 0);\n+            return;\n+        }\n+\n+        if (status == Status::NEWLY_SUPPRESSED) {\n+            BOOST_REQUIRE_EQUAL(log_lines.size(), 2);\n+            BOOST_CHECK(log_lines[0].starts_with(\"[*] [warning] Excessive logging detected\"));\n+            log_lines.erase(log_lines.begin());\n+        }\n+        BOOST_REQUIRE_EQUAL(log_lines.size(), 1);\n+        auto& payload{log_lines.back()};\n+        BOOST_CHECK_EQUAL(suppressions_active, payload.starts_with(\"[*]\"));\n+        BOOST_CHECK(payload.ends_with(message));\n+    }\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    using Status = BCLog::LogRateLimiter::Status;\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n     LogInstance().m_log_threadnames = false;\n \n-    CScheduler scheduler{};\n-    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n-    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n-    LogInstance().SetRateLimiting(std::move(limiter));\n-\n-    // Log 1024-character lines (1023 plus newline) to make the math simple.\n-    std::string log_message(1023, 'a');\n-\n-    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n-    const char* log_path{utf8_path.c_str()};\n-\n-    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n-    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+    constexpr int64_t line_length{1024};\n+    constexpr int64_t num_lines{1024};\n+    constexpr int64_t bytes_quota{line_length * num_lines};\n+    constexpr auto time_window{20s};\n \n-    // Logging 1 MiB should be allowed.\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n-    }\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n-\n-    log_file_size = GetFileSize(log_path);\n+    ScopedScheduler scheduler{};\n+    auto limiter{scheduler.GetLimiter(bytes_quota, time_window)};\n+    LogInstance().SetRateLimiting(limiter);\n \n-    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+    const std::string log_message(line_length - 1, 'a'); // subtract one for newline\n \n-    log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n+    for (int i = 0; i < num_lines; ++i) {\n+        TestLogFromLocation(Location::INFO_1, log_message, Status::UNSUPPRESSED, /*suppressions_active=*/false);\n     }\n-\n-    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n-\n-    log_file_size = GetFileSize(log_path);\n+    TestLogFromLocation(Location::INFO_1, \"a\", Status::NEWLY_SUPPRESSED, /*suppressions_active=*/true);\n+    TestLogFromLocation(Location::INFO_1, \"b\", Status::STILL_SUPPRESSED, /*suppressions_active=*/true);\n+    TestLogFromLocation(Location::INFO_2, \"c\", Status::UNSUPPRESSED, /*suppressions_active=*/true);\n     {\n-        ASSERT_DEBUG_LOG(\"Restarting logging\");\n-        MockForwardAndSync(scheduler, 1min);\n+        scheduler.MockForwardAndSync(time_window);\n+        auto log_lines{ReadDebugLogLines()};\n+        auto restart_pred = [](std::string& s) { return s.starts_with(\"[warning] Restarting logging\"); };\n+        BOOST_CHECK(std::any_of(log_lines.begin(), log_lines.end(), restart_pred));",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 354,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d434155db5f9c34b8ab3e19038d824d161b34195",
      "in_reply_to_id": 2245140841,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in latest push. Only modification to https://github.com/stickies-v/bitcoin/commit/3d96ff75f161419654b14a7e9fd884e52aec26c4 was that I removed the `LogInstance().EnableCategory(BCLog::LogFlags::NONE);` line.",
      "created_at": "2025-07-31T15:38:02Z",
      "updated_at": "2025-07-31T15:38:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2245743993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245743993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": 470,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245830190",
      "pull_request_review_id": 3076081616,
      "id": 2245830190,
      "node_id": "PRRC_kwDOABII586F3KYu",
      "diff_hunk": "@@ -337,138 +348,138 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n     BOOST_CHECK(limiter.SuppressionsActive());\n \n     // After reset_window time has passed, all suppressions should be cleared.\n-    MockForwardAndSync(scheduler, reset_window);\n+    scheduler.MockForwardAndSync(reset_window);\n \n     BOOST_CHECK(!limiter.SuppressionsActive());\n     BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n     BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n-\n-    scheduler.stop();\n }\n \n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n {\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+    BCLog::LogRateLimiter::Stats stats(BCLog::RATELIMIT_MAX_BYTES);\n \n-    // Check that counter gets initialized correctly.\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    // Check that stats gets initialized correctly.\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    const uint64_t MESSAGE_SIZE{512 * 1024};\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    const uint64_t MESSAGE_SIZE{BCLog::RATELIMIT_MAX_BYTES / 2};\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{0});\n \n-    // Consuming more bytes after already having consumed 1MB should fail.\n-    BOOST_CHECK(!counter.Consume(500));\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+    // Consuming more bytes after already having consumed RATELIMIT_MAX_BYTES should fail.\n+    BOOST_CHECK(!stats.Consume(500));\n+    BOOST_CHECK_EQUAL(stats.available_bytes, uint64_t{0});\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    INFO_1,\n+    INFO_2,\n+    DEBUG_LOG,\n+    INFO_NOLIMIT,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::INFO_1:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::INFO_2:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::DEBUG_LOG:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::INFO_NOLIMIT:\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\n+        return;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+/**\n+ * For a given `location` and `message`, ensure that the on-disk debug log behaviour resembles what\n+ * we'd expect it to be for `status` and `suppressions_active`.\n+ */\n+void TestLogFromLocation(Location location, const std::string& message,\n+                         BCLog::LogRateLimiter::Status status, bool suppressions_active,\n+                         std::source_location source = std::source_location::current())\n {\n-    ASSERT_DEBUG_LOG(expect);\n+    using Status = BCLog::LogRateLimiter::Status;\n+    if (!suppressions_active) assert(status == Status::UNSUPPRESSED); // developer error\n+\n+    std::ofstream ofs(LogInstance().m_file_path, std::ios::out | std::ios::trunc); // clear debug log\n     LogFromLocation(location, message);\n+    auto log_lines{ReadDebugLogLines()};\n+\n+    BOOST_TEST_CONTEXT(\"TestLogFromLocation failed from \" << source.file_name() << \":\" << source.line())\n+    {\n+        if (status == Status::STILL_SUPPRESSED) {\n+            BOOST_CHECK_EQUAL(log_lines.size(), 0);\n+            return;\n+        }\n+\n+        if (status == Status::NEWLY_SUPPRESSED) {\n+            BOOST_REQUIRE_EQUAL(log_lines.size(), 2);\n+            BOOST_CHECK(log_lines[0].starts_with(\"[*] [warning] Excessive logging detected\"));\n+            log_lines.erase(log_lines.begin());\n+        }\n+        BOOST_REQUIRE_EQUAL(log_lines.size(), 1);\n+        auto& payload{log_lines.back()};\n+        BOOST_CHECK_EQUAL(suppressions_active, payload.starts_with(\"[*]\"));\n+        BOOST_CHECK(payload.ends_with(message));\n+    }\n }\n \n+} // namespace\n+\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n {\n-    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    using Status = BCLog::LogRateLimiter::Status;\n     LogInstance().m_log_timestamps = false;\n-    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n     LogInstance().m_log_sourcelocations = false;\n-    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n     LogInstance().m_log_threadnames = false;\n \n-    CScheduler scheduler{};\n-    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n-    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n-    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n-    LogInstance().SetRateLimiting(std::move(limiter));\n-\n-    // Log 1024-character lines (1023 plus newline) to make the math simple.\n-    std::string log_message(1023, 'a');\n-\n-    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n-    const char* log_path{utf8_path.c_str()};\n-\n-    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n-    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+    constexpr int64_t line_length{1024};\n+    constexpr int64_t num_lines{1024};\n+    constexpr int64_t bytes_quota{line_length * num_lines};\n+    constexpr auto time_window{20s};\n \n-    // Logging 1 MiB should be allowed.\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n-    }\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n-\n-    log_file_size = GetFileSize(log_path);\n+    ScopedScheduler scheduler{};\n+    auto limiter{scheduler.GetLimiter(bytes_quota, time_window)};\n+    LogInstance().SetRateLimiting(limiter);\n \n-    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+    const std::string log_message(line_length - 1, 'a'); // subtract one for newline\n \n-    log_file_size = GetFileSize(log_path);\n-    for (int i = 0; i < 1024; ++i) {\n-        LogFromLocation(0, log_message);\n+    for (int i = 0; i < num_lines; ++i) {\n+        TestLogFromLocation(Location::INFO_1, log_message, Status::UNSUPPRESSED, /*suppressions_active=*/false);\n     }\n-\n-    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n-\n-    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n-    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n-\n-    log_file_size = GetFileSize(log_path);\n+    TestLogFromLocation(Location::INFO_1, \"a\", Status::NEWLY_SUPPRESSED, /*suppressions_active=*/true);\n+    TestLogFromLocation(Location::INFO_1, \"b\", Status::STILL_SUPPRESSED, /*suppressions_active=*/true);\n+    TestLogFromLocation(Location::INFO_2, \"c\", Status::UNSUPPRESSED, /*suppressions_active=*/true);\n     {\n-        ASSERT_DEBUG_LOG(\"Restarting logging\");\n-        MockForwardAndSync(scheduler, 1min);\n+        scheduler.MockForwardAndSync(time_window);\n+        auto log_lines{ReadDebugLogLines()};\n+        auto restart_pred = [](std::string& s) { return s.starts_with(\"[warning] Restarting logging\"); };\n+        BOOST_CHECK(std::any_of(log_lines.begin(), log_lines.end(), restart_pred));",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 354,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "d434155db5f9c34b8ab3e19038d824d161b34195",
      "in_reply_to_id": 2245140841,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah sorry that should've been `LogInstance().DisableCategory(BCLog::LogFlags::ALL);`. I still think that's worth keeping, so we can always assume `LogTest` starts without any categories (as is default)?",
      "created_at": "2025-07-31T16:16:35Z",
      "updated_at": "2025-07-31T16:16:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2245830190",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2245830190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": 470,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2246301270",
      "pull_request_review_id": 3076776415,
      "id": 2246301270,
      "node_id": "PRRC_kwDOABII586F49ZW",
      "diff_hunk": "@@ -367,106 +382,113 @@ BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n     BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    INFO_1,\n+    INFO_2,\n+    DEBUG_LOG,\n+    INFO_NOLIMIT,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::INFO_1:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::INFO_2:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::DEBUG_LOG:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::INFO_NOLIMIT:",
      "path": "src/test/logging_tests.cpp",
      "position": 276,
      "original_position": 105,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "71de55a003286e980d77cfa9f02617788a825e9c",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(source location is unrelated, just wanted to get into thread mode)\r\nI wanted to add something to this [this thread](https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115526293).\r\n\r\nI didn't review the original PR, but I would appreciate an `-ratelimitlogging` option for the sake of testing, undocumented / `DEBUG_ONLY` would be fine for me:\r\n- already now, multiple functional tests hit the limit (`feature_taproot.py`, `p2p_headers_sync_with_minchainwork.py`, `wallet_avoidreuse.py`, `wallet_taproot.py`). Having suppressed logs could make it harder to debug these in case of Errors.\r\nRate logging could also be unset by default by the functional tests.\r\n- In tests, you can do things more often that are assumed to be rare on mainnet and therefore are logged unconditionally: e.g. create long chains on regtest with [this log](https://github.com/bitcoin/bitcoin/blob/aef2dbb402763e49fadc37dc75dff87ff3a5c6b0/src/node/miner.cpp#L174). Sometimes you want to keep logs for these.\r\n- This can also make printf-debugging bothersome for devs testing something (e.g. IBD with feature X and extra logging for it), who would need to use some workaround such as long, annoying `LogPrintLevel_ / should_ratelimit=false` statements or a category, which will also log other additional stuff.",
      "created_at": "2025-07-31T20:20:21Z",
      "updated_at": "2025-07-31T20:41:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2246301270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2246301270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 405,
      "original_line": 405,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2246449498",
      "pull_request_review_id": 3076988945,
      "id": 2246449498,
      "node_id": "PRRC_kwDOABII586F5hla",
      "diff_hunk": "@@ -367,106 +382,113 @@ BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n     BOOST_CHECK_EQUAL(stats.dropped_bytes, uint64_t{500});\n }\n \n-void LogFromLocation(int location, std::string message)\n-{\n+namespace {\n+\n+enum class Location {\n+    INFO_1,\n+    INFO_2,\n+    DEBUG_LOG,\n+    INFO_NOLIMIT,\n+};\n+\n+void LogFromLocation(Location location, const std::string& message) {\n     switch (location) {\n-    case 0:\n+    case Location::INFO_1:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 1:\n+        return;\n+    case Location::INFO_2:\n         LogInfo(\"%s\\n\", message);\n-        break;\n-    case 2:\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    case 3:\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n-        break;\n-    }\n+        return;\n+    case Location::DEBUG_LOG:\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\n+        return;\n+    case Location::INFO_NOLIMIT:",
      "path": "src/test/logging_tests.cpp",
      "position": 276,
      "original_position": 105,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "71de55a003286e980d77cfa9f02617788a825e9c",
      "in_reply_to_id": 2246301270,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh, I did not know functional tests were hitting the limit. I will add an option to disable the rate limiting.",
      "created_at": "2025-07-31T21:46:47Z",
      "updated_at": "2025-07-31T21:46:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2246449498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2246449498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 405,
      "original_line": 405,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2249189479",
      "pull_request_review_id": 3080978563,
      "id": 2249189479,
      "node_id": "PRRC_kwDOABII586GD-hn",
      "diff_hunk": "@@ -117,6 +117,7 @@ def __init__(self, i, datadir_path, *, chain, rpchost, timewait, timeout_factor,\n             \"-debugexclude=leveldb\",\n             \"-debugexclude=rand\",\n             \"-uacomment=testnode%d\" % i,  # required for subversion uniqueness across peers\n+            \"-disableratelimitlogging\",",
      "path": "test/functional/test_framework/test_node.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "original_commit_id": "31ef2b6a16b8447cf843acba66d7d02efdedcefe",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this has to be guarded, see e.g. the `logthreadnames` below",
      "created_at": "2025-08-02T09:59:40Z",
      "updated_at": "2025-08-02T09:59:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33011#discussion_r2249189479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2249189479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33011"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    }
  ]
}