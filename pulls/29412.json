{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412",
    "id": 1718068294,
    "node_id": "PR_kwDOABII585mZ6RG",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29412",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29412.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29412.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
    "number": 29412,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "p2p: Don't process mutated blocks",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR proposes to check for mutated blocks early as a defense-in-depth mitigation against attacks leveraging mutated blocks.\r\n\r\nWe introduce `IsBlockMutated` which catches all known forms of block malleation and use it to do an early mutation check whenever we receive a `block` message.\r\n\r\nWe have observed attacks that abused mutated blocks in the past, which could have been prevented by simply not processing mutated blocks (e.g. https://github.com/bitcoin/bitcoin/pull/27608 for which a regression test is included in this PR).",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/61",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61/labels",
      "id": 9334188,
      "node_id": "MI_kwDOABII584Ajm2s",
      "number": 61,
      "state": "closed",
      "title": "27.0",
      "description": "",
      "creator": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 0,
      "closed_issues": 69,
      "created_at": "2023-04-27T08:01:57Z",
      "updated_at": "2024-04-16T08:33:17Z",
      "closed_at": "2024-04-16T08:33:17Z"
    },
    "created_at": "2024-02-08T17:18:35Z",
    "updated_at": "2025-02-09T11:26:57Z",
    "closed_at": "2024-02-28T22:55:05Z",
    "mergeable_state": "unknown",
    "merged_at": "2024-02-28T22:55:05Z",
    "merged_by": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "2649e655b9203d6d08cb1a26fa4846f2c403b297",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "dergoegge:2024-01-mut-blocks",
      "ref": "2024-01-mut-blocks",
      "sha": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 315023492,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMTUwMjM0OTI=",
        "name": "bitcoin",
        "full_name": "dergoegge/bitcoin",
        "owner": {
          "login": "dergoegge",
          "id": 8077169,
          "node_id": "MDQ6VXNlcjgwNzcxNjk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dergoegge",
          "html_url": "https://github.com/dergoegge",
          "followers_url": "https://api.github.com/users/dergoegge/followers",
          "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
          "organizations_url": "https://api.github.com/users/dergoegge/orgs",
          "repos_url": "https://api.github.com/users/dergoegge/repos",
          "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dergoegge/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/dergoegge/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/dergoegge/bitcoin",
        "archive_url": "https://api.github.com/repos/dergoegge/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dergoegge/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dergoegge/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dergoegge/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dergoegge/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dergoegge/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dergoegge/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dergoegge/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dergoegge/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dergoegge/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/dergoegge/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/dergoegge/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/dergoegge/bitcoin/events",
        "forks_url": "https://api.github.com/repos/dergoegge/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/dergoegge/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dergoegge/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dergoegge/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dergoegge/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/dergoegge/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dergoegge/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dergoegge/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dergoegge/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dergoegge/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dergoegge/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/dergoegge/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/dergoegge/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dergoegge/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dergoegge/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dergoegge/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:dergoegge/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/dergoegge/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/dergoegge/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dergoegge/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/dergoegge/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/dergoegge/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/dergoegge/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/dergoegge/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dergoegge/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/dergoegge/bitcoin/hooks",
        "svn_url": "https://github.com/dergoegge/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 259216,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-14T15:44:00Z",
        "created_at": "2020-11-22T11:41:30Z",
        "updated_at": "2024-10-11T10:26:46Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6a7ed5e2374bfea943742595c76da8f2d25061f6",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36694,
        "stargazers_count": 81891,
        "watchers_count": 81891,
        "size": 275268,
        "default_branch": "master",
        "open_issues_count": 702,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-07T16:30:31Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-02-09T11:59:50Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 449,
    "deletions": 41,
    "changed_files": 8,
    "commits": 9,
    "review_comments": 73,
    "comments": 25
  },
  "events": [
    {
      "event": "commented",
      "id": 1934588826,
      "node_id": "IC_kwDOABII585zT3ua",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1934588826",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-08T17:18:38Z",
      "updated_at": "2024-02-28T22:44:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29412).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1903705230), [fjahr](https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1903723993), [sr-gi](https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1907126112), [achow101](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1970044833) |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1935947181), [epiccurious](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936033190), [instagibbs](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936047945), [glozow](https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1873261879), [naumenkogs](https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1958901201) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1934588826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "labeled",
      "id": 11748986593,
      "node_id": "LE_lADOABII585-s54JzwAAAAK8S07h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11748986593",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-08T17:18:40Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11749729623,
      "node_id": "HRFPE_lADOABII585-s54JzwAAAAK8VqVX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11749729623",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "commit_url": "https://api.github.com/repos/dergoegge/bitcoin/commits/d028bb12abb041870413a3437865547cff2df653",
      "created_at": "2024-02-08T18:22:06Z"
    },
    {
      "event": "labeled",
      "id": 11749730402,
      "node_id": "LE_lADOABII585-s54JzwAAAAK8Vqhi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11749730402",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-08T18:22:11Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1934698387,
      "node_id": "IC_kwDOABII585zUSeT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1934698387",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-08T18:22:12Z",
      "updated_at": "2024-02-08T18:22:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/21374346056</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1934698387",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "unlabeled",
      "id": 11750778861,
      "node_id": "UNLE_lADOABII585-s54JzwAAAAK8Zqft",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11750778861",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-08T20:08:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1935287441,
      "node_id": "IC_kwDOABII585zWiSR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935287441",
      "actor": {
        "login": "epiccurious",
        "id": 109078515,
        "node_id": "U_kgDOBoBn8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/109078515?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epiccurious",
        "html_url": "https://github.com/epiccurious",
        "followers_url": "https://api.github.com/users/epiccurious/followers",
        "following_url": "https://api.github.com/users/epiccurious/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/epiccurious/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/epiccurious/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/epiccurious/subscriptions",
        "organizations_url": "https://api.github.com/users/epiccurious/orgs",
        "repos_url": "https://api.github.com/users/epiccurious/repos",
        "events_url": "https://api.github.com/users/epiccurious/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/epiccurious/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T03:38:10Z",
      "updated_at": "2024-02-09T03:38:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "How do you define a mutated block? What are the known forms of mutated blocks?",
      "user": {
        "login": "epiccurious",
        "id": 109078515,
        "node_id": "U_kgDOBoBn8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/109078515?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epiccurious",
        "html_url": "https://github.com/epiccurious",
        "followers_url": "https://api.github.com/users/epiccurious/followers",
        "following_url": "https://api.github.com/users/epiccurious/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/epiccurious/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/epiccurious/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/epiccurious/subscriptions",
        "organizations_url": "https://api.github.com/users/epiccurious/orgs",
        "repos_url": "https://api.github.com/users/epiccurious/repos",
        "events_url": "https://api.github.com/users/epiccurious/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/epiccurious/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1935287441",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1935643125,
      "node_id": "IC_kwDOABII585zX5H1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935643125",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T10:05:00Z",
      "updated_at": "2024-02-09T10:05:00Z",
      "author_association": "MEMBER",
      "body": "> How do you define a mutated block? What are the known forms of mutated blocks?\r\n\r\nLooking at `IsBlockMutated` in this PR should provide the answers for these questions, but to recap:\r\n\r\n* When we receive a block it contains a header and a list of transactions. The header contains a merkle root hash (`CBlock::hashMerkleRoot`) which should commit to the list of transactions but [if it doesn't the block is considered mutated](https://github.com/bitcoin/bitcoin/blob/b2b2b1e9e415c3b5f74d517eaebfc2073cef5175/src/validation.cpp#L3660-L3671).\r\n* The coinbase transaction (post segwit) contains a commitment (very similar to the merkle root in the header) to the witness data in a block. [If that commitment does not actually commit to the witnesses that were received, the block is considered mutated](https://github.com/bitcoin/bitcoin/blob/b2b2b1e9e415c3b5f74d517eaebfc2073cef5175/src/validation.cpp#L3861-L3896).\r\n* Our merkle root algorithm has several flaws which allow for further malleation, see [here](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf) for a great overview.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1935643125",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1935947181,
      "node_id": "IC_kwDOABII585zZDWt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935947181",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T13:36:26Z",
      "updated_at": "2024-02-09T13:36:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1935947181",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1936033190,
      "node_id": "IC_kwDOABII585zZYWm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936033190",
      "actor": {
        "login": "epiccurious",
        "id": 109078515,
        "node_id": "U_kgDOBoBn8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/109078515?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epiccurious",
        "html_url": "https://github.com/epiccurious",
        "followers_url": "https://api.github.com/users/epiccurious/followers",
        "following_url": "https://api.github.com/users/epiccurious/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/epiccurious/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/epiccurious/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/epiccurious/subscriptions",
        "organizations_url": "https://api.github.com/users/epiccurious/orgs",
        "repos_url": "https://api.github.com/users/epiccurious/repos",
        "events_url": "https://api.github.com/users/epiccurious/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/epiccurious/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T14:28:28Z",
      "updated_at": "2024-02-09T14:28:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.",
      "user": {
        "login": "epiccurious",
        "id": 109078515,
        "node_id": "U_kgDOBoBn8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/109078515?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epiccurious",
        "html_url": "https://github.com/epiccurious",
        "followers_url": "https://api.github.com/users/epiccurious/followers",
        "following_url": "https://api.github.com/users/epiccurious/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/epiccurious/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/epiccurious/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/epiccurious/subscriptions",
        "organizations_url": "https://api.github.com/users/epiccurious/orgs",
        "repos_url": "https://api.github.com/users/epiccurious/repos",
        "events_url": "https://api.github.com/users/epiccurious/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/epiccurious/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936033190",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1936047945,
      "node_id": "IC_kwDOABII585zZb9J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936047945",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T14:37:47Z",
      "updated_at": "2024-02-09T14:37:47Z",
      "author_association": "MEMBER",
      "body": "concept ACK\r\n\r\nmight be good to recap why it was only added in BLOCK processing but not other `ProcessBlocks`: In every other case we already don't punish the sender of compact blocks for failing these higher level checks, while full blocks allow for punishment.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936047945",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1936203492,
      "node_id": "IC_kwDOABII585zaB7k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936203492",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T16:12:43Z",
      "updated_at": "2024-02-09T16:12:43Z",
      "author_association": "MEMBER",
      "body": "> might be good to recap why it was only added in BLOCK processing but not other ProcessBlocks: In every other case we already don't punish the sender of compact blocks for failing these higher level checks, while full blocks allow for punishment.\r\n\r\nWe call `ProcessBlock` when we receive a `block` message (handled in this PR) or as the result of a compact block reconstruction. Compact blocks are relayed before full validation occurs, therefore we don't punish peers for sending us invalid blocks through compact block relay. Block mutation might also occur randomly during compact bock relay due to short-id collisions, which is another reason not to punish.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1936203492",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "reviewed",
      "id": 1872786752,
      "node_id": "PRR_kwDOABII585voHVA",
      "url": null,
      "actor": null,
      "commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1872786752",
      "submitted_at": "2024-02-09T16:31:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "reviewed",
      "id": 1873071547,
      "node_id": "PRR_kwDOABII585vpM27",
      "url": null,
      "actor": null,
      "commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1873071547",
      "submitted_at": "2024-02-09T20:28:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "reviewed",
      "id": 1873261879,
      "node_id": "PRR_kwDOABII585vp7U3",
      "url": null,
      "actor": null,
      "commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "concept ACK, I agree with the approach of catching and dropping these earlier rather than later",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1873261879",
      "submitted_at": "2024-02-09T22:01:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "commented",
      "id": 1954024203,
      "node_id": "IC_kwDOABII5850eAsL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1954024203",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-20T11:32:39Z",
      "updated_at": "2024-02-20T11:32:39Z",
      "author_association": "MEMBER",
      "body": "I would like to see this in v27, can we add it to the milestone?",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1954024203",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "milestoned",
      "id": 11860705790,
      "node_id": "MIE_lADOABII585-s54JzwAAAALC9AH-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11860705790",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-20T11:55:52Z",
      "milestone": {
        "title": "27.0"
      }
    },
    {
      "event": "reviewed",
      "id": 1890525477,
      "node_id": "PRR_kwDOABII585wryEl",
      "url": null,
      "actor": null,
      "commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1890525477",
      "submitted_at": "2024-02-20T14:08:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "reviewed",
      "id": 1890785562,
      "node_id": "PRR_kwDOABII585wsxka",
      "url": null,
      "actor": null,
      "commit_id": "a74c3972bf8d0fa51e8f9672422bc34945b66ca7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1890785562",
      "submitted_at": "2024-02-20T15:41:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "reviewed",
      "id": 1891184515,
      "node_id": "PRR_kwDOABII585wuS-D",
      "url": null,
      "actor": null,
      "commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\n\"`CBlock::GetHash()` is a foot-gun without a prior mutation check\", I hadn't felt this strongly about but I get it. I think it makes sense to rename it. I have drafted it here: https://github.com/fjahr/bitcoin/commit/8e11e9c9ec9d52b2c5c04a33f33da0b22ae5e28b If it sounds valuable I will open a PR.\r\n\r\n",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1891184515",
      "submitted_at": "2024-02-20T22:26:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "commented",
      "id": 1958901201,
      "node_id": "IC_kwDOABII5850wnXR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1958901201",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-22T08:05:09Z",
      "updated_at": "2024-02-22T08:05:09Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Looking forward to addressing already pending comments, then i review.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1958901201",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11890095049,
      "node_id": "HRFPE_lADOABII585-s54JzwAAAALEtHPJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11890095049",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "commit_url": "https://api.github.com/repos/dergoegge/bitcoin/commits/0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "created_at": "2024-02-22T11:54:47Z"
    },
    {
      "event": "reviewed",
      "id": 1896027563,
      "node_id": "PRR_kwDOABII585xAxWr",
      "url": null,
      "actor": null,
      "commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1896027563",
      "submitted_at": "2024-02-22T14:40:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "reviewed",
      "id": 1896406510,
      "node_id": "PRR_kwDOABII585xCN3u",
      "url": null,
      "actor": null,
      "commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1896406510",
      "submitted_at": "2024-02-22T17:30:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "commented",
      "id": 1961033803,
      "node_id": "IC_kwDOABII58504wBL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1961033803",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-23T09:58:35Z",
      "updated_at": "2024-02-23T09:58:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm running this PR on my mainnet monitoring infrastructure as I was looking at the currently broadcast mutated blocks (`bad-witness-nonce-size`) in detail anyway. Can report back in a few days (currently, I receive only 1 or 2 per week). ",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1961033803",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1961310819,
      "node_id": "IC_kwDOABII58505zpj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1961310819",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-23T13:15:59Z",
      "updated_at": "2024-02-23T13:15:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Received two `bad-witness-nonce-size` blocks from a mining pools custom client shortly after my last comment. In both cases I my node had reconstructed a cmpctblock two seconds before the mutated block arrived. In this case, the block is \"mutated\" because the coinbase witness is empty. That's probably a bug on the mining pool side. I have the IPs of the pool clients as noban-peers, so I didn't actually see them getting disconnected. \r\n\r\n```\r\n2024-02-23T10:33:55Z [msghand] [blockencodings.cpp:217] [FillBlock] [cmpctblock] Successfully reconstructed block 000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb with 1 txn prefilled, 2936 txn from mempool (incl at least 5 from extra pool) and 45 txn requested\r\n2024-02-23T10:33:55Z [msghand] [validationinterface.cpp:273] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb\r\n2024-02-23T10:33:55Z [msghand] [validationinterface.cpp:267] [BlockChecked] [validation] BlockChecked: block hash=000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb state=Valid\r\n2024-02-23T10:33:55Z [msghand] [validationinterface.cpp:243] [MempoolTransactionsRemovedForBlock] [validation] Enqueuing MempoolTransactionsRemovedForBlock: block height=831673 txs removed=2931\r\n2024-02-23T10:33:55Z [msghand] [validation.cpp:2738] [UpdateTipLog] UpdateTip: new best=000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb height=831673 version=0x2bc70000 log2_work=94.750438 tx=968653267 date='2024-02-23T10:33:34Z' progress=1.000000 cache=87.0MiB(713889txo)\r\n\r\n...\r\n\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:3396] [ProcessMessage] [net] received: block (1519889 bytes) peer=153\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:4728] [ProcessMessage] [net] received block 000000000000000000017f8957106aae020ce65f69f3ee189559d97fc0f974bb peer=153\r\n2024-02-23T10:33:57Z [msghand] [validation.cpp:3862] [IsBlockMutated] [validation] IsBlockMutated: bad-witness-nonce-size, CheckWitnessCommitment : invalid witness reserved value size\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:4734] [ProcessMessage] [net] Received mutated block from peer=153\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:1791] [Misbehaving] [net] Misbehaving: peer=153 (0 -> 100) DISCOURAGE THRESHOLD EXCEEDED: mutated block\r\n2024-02-23T10:33:57Z [msghand] [net_processing.cpp:5037] [MaybeDiscourageAndDisconnect] Warning: not punishing noban peer 153!\r\n```\r\n\r\n\r\n```\r\n2024-02-23T11:17:32Z [msghand] [blockencodings.cpp:217] [FillBlock] [cmpctblock] Successfully reconstructed block 0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 with 1 txn prefilled, 1024 txn from mempool (incl at least 0 from extra pool) and 5 txn requested\r\n2024-02-23T11:17:32Z [msghand] [validationinterface.cpp:273] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659\r\n2024-02-23T11:17:32Z [msghand] [validationinterface.cpp:267] [BlockChecked] [validation] BlockChecked: block hash=0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 state=Valid\r\n2024-02-23T11:17:32Z [msghand] [net.cpp:3784] [PushMessage] [net] sending sendcmpct (9 bytes) peer=117\r\n2024-02-23T11:17:32Z [msghand] [validationinterface.cpp:243] [MempoolTransactionsRemovedForBlock] [validation] Enqueuing MempoolTransactionsRemovedForBlock: block height=831677 txs removed=1024\r\n2024-02-23T11:17:32Z [msghand] [validation.cpp:2738] [UpdateTipLog] UpdateTip: new best=0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 height=831677 version=0x2fffe000 log2_work=94.750499 tx=968663963 date='2024-02-23T11:17:27Z' progress=1.000000 cache=78.7MiB(689008txo)\r\n\r\n...\r\n\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:3396] [ProcessMessage] [net] received: block (1509042 bytes) peer=20\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:4728] [ProcessMessage] [net] received block 0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 peer=20\r\n2024-02-23T11:17:34Z [msghand] [validation.cpp:3862] [IsBlockMutated] [validation] IsBlockMutated: bad-witness-nonce-size, CheckWitnessCommitment : invalid witness reserved value size\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:4734] [ProcessMessage] [net] Received mutated block from peer=20\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:1791] [Misbehaving] [net] Misbehaving: peer=20 (0 -> 100) DISCOURAGE THRESHOLD EXCEEDED: mutated block\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:5037] [MaybeDiscourageAndDisconnect] Warning: not punishing noban peer 20!\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:3396] [ProcessMessage] [net] received: getdata (37 bytes) peer=20\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:3998] [ProcessMessage] [net] received getdata (1 invsz) peer=20\r\n2024-02-23T11:17:34Z [msghand] [net_processing.cpp:4001] [ProcessMessage] [net] received getdata for: witness-block 0000000000000000000345e15958b691f5079b84a6d5a3f959a8d84ee7989659 peer=20\r\n2024-02-23T11:17:34Z [msghand] [net.cpp:3784] [PushMessage] [net] sending block (1509078 bytes) peer=20\r\n```\r\n\r\n\r\n\r\n\r\n",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1961310819",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "reviewed",
      "id": 1898055488,
      "node_id": "PRR_kwDOABII585xIgdA",
      "url": null,
      "actor": null,
      "commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left some initial nits/questions\r\n\r\n0f356b0b2fb23aef96ed7396890aa36410aa1d59 💬\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: 0f356b0b2fb23aef96ed7396890aa36410aa1d59 💬\r\nkBfK9UKECARIswfAVfqnH6nAuO9mA7Tcad0J1J6aCTeTkHT4VK7z3GpY/0Wz6H0SeVaxH2Thgu3Qvz87+QF6CA==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1898055488",
      "submitted_at": "2024-02-23T13:49:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11906982732,
      "node_id": "HRFPE_lADOABII585-s54JzwAAAALFtiNM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11906982732",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8c18b708b9362ced44095571e35695be399d7272",
      "commit_url": "https://api.github.com/repos/dergoegge/bitcoin/commits/8c18b708b9362ced44095571e35695be399d7272",
      "created_at": "2024-02-23T18:36:11Z"
    },
    {
      "event": "reviewed",
      "id": 1898738155,
      "node_id": "PRR_kwDOABII585xLHHr",
      "url": null,
      "actor": null,
      "commit_id": "8c18b708b9362ced44095571e35695be399d7272",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1898738155",
      "submitted_at": "2024-02-23T19:24:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11907674891,
      "node_id": "HRFPE_lADOABII585-s54JzwAAAALFwLML",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11907674891",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "commit_url": "https://api.github.com/repos/dergoegge/bitcoin/commits/79e62b01d13b300f629574f1349c3b63a36f2b74",
      "created_at": "2024-02-23T19:59:00Z"
    },
    {
      "event": "commented",
      "id": 1963861575,
      "node_id": "IC_kwDOABII5851DiZH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1963861575",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T11:00:16Z",
      "updated_at": "2024-02-26T11:00:16Z",
      "author_association": "MEMBER",
      "body": "I believe I addressed all comments, this is ready for further review",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1963861575",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "reviewed",
      "id": 1900524442,
      "node_id": "PRR_kwDOABII585xR7Oa",
      "url": null,
      "actor": null,
      "commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Left two nits, feel free to ignore.\r\n\r\n79e62b01d13b300f629574f1349c3b63a36f2b7 🔄\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: 79e62b01d13b300f629574f1349c3b63a36f2b7 🔄\r\nZzIHVQLTyxW9SBChtAlHaJQkND07+MygNA3HHp0nOTcsKGrdGqDY4WOTeUOQGUXO9AojSXrkpgGVRnV2aTfiDw==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1900524442",
      "submitted_at": "2024-02-26T11:21:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "reviewed",
      "id": 1901215671,
      "node_id": "PRR_kwDOABII585xUj-3",
      "url": null,
      "actor": null,
      "commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left some more feedback\r\n\r\n\r\nACK 79e62b01d13b300f629574f1349c3b63a36f2b 🍚\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: ACK 79e62b01d13b300f629574f1349c3b63a36f2b 🍚\r\n2j503nYgXHtf8lxG+JzbLQsNuYaMcWAIenTx9ArAO/hqVxN41C+nl8EYMiHfteDJZX7JGr2ebPMczOKonNLPDg==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1901215671",
      "submitted_at": "2024-02-26T16:30:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "review_requested",
      "id": 11924112028,
      "node_id": "RRE_lADOABII585-s54JzwAAAALGu4Kc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11924112028",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T16:30:55Z",
      "requested_reviewer": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 11924112173,
      "node_id": "RRE_lADOABII585-s54JzwAAAALGu4Mt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11924112173",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T16:30:56Z",
      "requested_reviewer": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 11924112375,
      "node_id": "RRE_lADOABII585-s54JzwAAAALGu4P3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11924112375",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T16:30:56Z",
      "requested_reviewer": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 11924112537,
      "node_id": "RRE_lADOABII585-s54JzwAAAALGu4SZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11924112537",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T16:30:57Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 11924112706,
      "node_id": "RRE_lADOABII585-s54JzwAAAALGu4VC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11924112706",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T16:30:58Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 11924112845,
      "node_id": "RRE_lADOABII585-s54JzwAAAALGu4XN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11924112845",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T16:30:58Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 1902021477,
      "node_id": "PRR_kwDOABII585xXotl",
      "url": null,
      "actor": null,
      "commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1902021477",
      "submitted_at": "2024-02-26T22:07:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "review_requested",
      "id": 11928247372,
      "node_id": "RRE_lADOABII585-s54JzwAAAALG-pxM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11928247372",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T22:07:57Z",
      "requested_reviewer": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk1YmRkYjkzMGFhNzJlZGQ0MGZkZmY1MmNmNDQ3MjAyOTk1YjBkY2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95bddb930aa72edd40fdff52cf447202995b0dce",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/95bddb930aa72edd40fdff52cf447202995b0dce",
      "tree": {
        "sha": "5c773d02c9a8697c87fab3f9a89edcef48c3bac0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c773d02c9a8697c87fab3f9a89edcef48c3bac0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0471aee5077fef81a0e2e032f3c16bdc948a70f2",
          "sha": "0471aee5077fef81a0e2e032f3c16bdc948a70f2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0471aee5077fef81a0e2e032f3c16bdc948a70f2"
        }
      ],
      "message": "[validation] Isolate merkle root checks",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:17:32Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-01-19T11:49:48Z"
      },
      "sha": "95bddb930aa72edd40fdff52cf447202995b0dce"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU3NjY5ZTEzNDNhZWM0Mjk4ZmQzMGQ1Mzk4NDc5NjNlNmZhNTYxOWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7669e1343aec4298fd30d539847963e6fa5619c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e7669e1343aec4298fd30d539847963e6fa5619c",
      "tree": {
        "sha": "91748c744d452c1f4abc61b1bc10e510f0d97995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91748c744d452c1f4abc61b1bc10e510f0d97995"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95bddb930aa72edd40fdff52cf447202995b0dce",
          "sha": "95bddb930aa72edd40fdff52cf447202995b0dce",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/95bddb930aa72edd40fdff52cf447202995b0dce"
        }
      ],
      "message": "[refactor] Cleanup merkle root checks",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:19:14Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-22T11:27:49Z"
      },
      "sha": "e7669e1343aec4298fd30d539847963e6fa5619c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY2YWJjZTFkOTgxMTVlNDFmMzk0YmM0ZjRmNTIzNDE5NjBkZGM4Mzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66abce1d98115e41f394bc4f4f52341960ddc839",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/66abce1d98115e41f394bc4f4f52341960ddc839",
      "tree": {
        "sha": "80611efddb649953aee260eadb441e7acbfe11a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80611efddb649953aee260eadb441e7acbfe11a7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7669e1343aec4298fd30d539847963e6fa5619c",
          "sha": "e7669e1343aec4298fd30d539847963e6fa5619c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e7669e1343aec4298fd30d539847963e6fa5619c"
        }
      ],
      "message": "[validation] Introduce IsBlockMutated",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:19:15Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-01-19T15:09:28Z"
      },
      "sha": "66abce1d98115e41f394bc4f4f52341960ddc839"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJkODQ5NWUwODAwZjUzMzI3NDhjZDUwZWFhZDgwMWZmNzc2NzFiYmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d8495e0800f5332748cd50eaad801ff77671bba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8495e0800f5332748cd50eaad801ff77671bba",
      "tree": {
        "sha": "4b8db78f40cde45d9080a37dfd62c6f7365e3e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b8db78f40cde45d9080a37dfd62c6f7365e3e1e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66abce1d98115e41f394bc4f4f52341960ddc839",
          "sha": "66abce1d98115e41f394bc4f4f52341960ddc839",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/66abce1d98115e41f394bc4f4f52341960ddc839"
        }
      ],
      "message": "[validation] Merkle root malleation should be caught by IsBlockMutated",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:19:15Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-06T17:07:48Z"
      },
      "sha": "2d8495e0800f5332748cd50eaad801ff77671bba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ5MjU3YzAzMDQ4MjhhMTg1YzI3M2ZjYjk5NzQyYzU0YmJlZjBjOGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49257c0304828a185c273fcb99742c54bbef0c8e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/49257c0304828a185c273fcb99742c54bbef0c8e",
      "tree": {
        "sha": "3ef73740943a30c34e01a3ab95cea8ef93e9d86c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ef73740943a30c34e01a3ab95cea8ef93e9d86c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d8495e0800f5332748cd50eaad801ff77671bba",
          "sha": "2d8495e0800f5332748cd50eaad801ff77671bba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8495e0800f5332748cd50eaad801ff77671bba"
        }
      ],
      "message": "[net processing] Don't process mutated blocks\n\nWe preemptively perform a block mutation check before further processing\na block message (similar to early sanity checks on other messsage\ntypes). The main reasons for this change are as follows:\n\n- `CBlock::GetHash()` is a foot-gun without a prior mutation check, as\n  the hash returned only commits to the header but not to the actual\n  transactions (`CBlock::vtx`) contained in the block.\n- We have observed attacks that abused mutated blocks in the past, which\n  could have been prevented by simply not processing mutated blocks\n  (e.g. https://github.com/bitcoin/bitcoin/pull/27608).",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:19:15Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-01-19T15:25:01Z"
      },
      "sha": "49257c0304828a185c273fcb99742c54bbef0c8e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDViZjRmNWJhMzJkYTQ2MjdmMTUyYjU0ZDI2NmRmOWIyYWE5MzA0NTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bf4f5ba32da4627f152b54d266df9b2aa930457",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf4f5ba32da4627f152b54d266df9b2aa930457",
      "tree": {
        "sha": "fc264d947948ac3251169a7357260683376c054c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc264d947948ac3251169a7357260683376c054c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49257c0304828a185c273fcb99742c54bbef0c8e",
          "sha": "49257c0304828a185c273fcb99742c54bbef0c8e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/49257c0304828a185c273fcb99742c54bbef0c8e"
        }
      ],
      "message": "[test] Add regression test for #27608",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:19:15Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-02T16:16:55Z"
      },
      "sha": "5bf4f5ba32da4627f152b54d266df9b2aa930457"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlYzZiYmViOGQyN2QzMTY0N2QxNDMzY2NiODdiMzYyZjZkODFmOTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ec6bbeb8d27d31647d1433ccb87b362f6d81f90",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec6bbeb8d27d31647d1433ccb87b362f6d81f90",
      "tree": {
        "sha": "c7e3a084274b9e13e0d68bd0e0f72d43b357c5f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7e3a084274b9e13e0d68bd0e0f72d43b357c5f9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bf4f5ba32da4627f152b54d266df9b2aa930457",
          "sha": "5bf4f5ba32da4627f152b54d266df9b2aa930457",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf4f5ba32da4627f152b54d266df9b2aa930457"
        }
      ],
      "message": "[validation] Cache merkle root and witness commitment checks\n\nSlight performance improvement by avoiding duplicate work.",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:19:15Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-06T10:07:18Z"
      },
      "sha": "1ec6bbeb8d27d31647d1433ccb87b362f6d81f90"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlZDJjOTgyOTcwMDA1NDUyNjE1NjI5NzU1MmJiNDcyMzA0MDYwOTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ed2c9829700054526156297552bb47230406098",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1ed2c9829700054526156297552bb47230406098",
      "tree": {
        "sha": "4a24483131dc76e2b3213ca1442617a366f12711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a24483131dc76e2b3213ca1442617a366f12711"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ec6bbeb8d27d31647d1433ccb87b362f6d81f90",
          "sha": "1ec6bbeb8d27d31647d1433ccb87b362f6d81f90",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec6bbeb8d27d31647d1433ccb87b362f6d81f90"
        }
      ],
      "message": "Add transaction_identifier::size to allow Span conversion",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:19:15Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T11:57:26Z"
      },
      "sha": "1ed2c9829700054526156297552bb47230406098"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ4MDg3YWRjN2ViZDRlYTA1ZGQzODQzZTVhOTJlODExNWZkN2JiY2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "tree": {
        "sha": "8a71d6b9e47c1bcc34105d0e533f14baf320a6b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a71d6b9e47c1bcc34105d0e533f14baf320a6b8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ed2c9829700054526156297552bb47230406098",
          "sha": "1ed2c9829700054526156297552bb47230406098",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1ed2c9829700054526156297552bb47230406098"
        }
      ],
      "message": "[test] IsBlockMutated unit tests",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-27T14:19:15Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2024-02-23T15:50:36Z"
      },
      "sha": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11937292863,
      "node_id": "HRFPE_lADOABII585-s54JzwAAAALHhKI_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11937292863",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "commit_url": "https://api.github.com/repos/dergoegge/bitcoin/commits/d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "created_at": "2024-02-27T14:25:14Z"
    },
    {
      "event": "reviewed",
      "id": 1903705230,
      "node_id": "PRR_kwDOABII585xeDyO",
      "url": null,
      "actor": null,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc 🏄\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: ACK d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc 🏄\r\nesXLEJ35qEFyBqeZMSV1JGBnrcJMG5Ami/zV9HPyRQ4Mt5cCWqd8NEkCTySeEOUSf2ngcBWvQdPLp33JU8IaDQ==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1903705230",
      "submitted_at": "2024-02-27T14:40:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "reviewed",
      "id": 1903723993,
      "node_id": "PRR_kwDOABII585xeIXZ",
      "url": null,
      "actor": null,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1903723993",
      "submitted_at": "2024-02-27T15:58:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "labeled",
      "id": 11939750616,
      "node_id": "LE_lADOABII585-s54JzwAAAALHqiLY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11939750616",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T16:41:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 11939936684,
      "node_id": "UNLE_lADOABII585-s54JzwAAAALHrPms",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11939936684",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T16:49:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1907126112,
      "node_id": "PRR_kwDOABII585xrG9g",
      "url": null,
      "actor": null,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK https://github.com/bitcoin/bitcoin/commit/d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc\r\n\r\nJust left a single comment on the newly added unit test",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1907126112",
      "submitted_at": "2024-02-28T19:59:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "commented",
      "id": 1970044833,
      "node_id": "IC_kwDOABII5851bH-h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1970044833",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T22:44:00Z",
      "updated_at": "2024-02-28T22:44:00Z",
      "author_association": "MEMBER",
      "body": "ACK d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1970044833",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "merged",
      "id": 11958488620,
      "node_id": "ME_lADOABII585-s54JzwAAAALIyA4s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11958488620",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2649e655b9203d6d08cb1a26fa4846f2c403b297",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2649e655b9203d6d08cb1a26fa4846f2c403b297",
      "created_at": "2024-02-28T22:55:05Z"
    },
    {
      "event": "closed",
      "id": 11958488662,
      "node_id": "CE_lADOABII585-s54JzwAAAALIyA5W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11958488662",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T22:55:06Z"
    },
    {
      "event": "reviewed",
      "id": 1908615751,
      "node_id": "PRR_kwDOABII585xwypH",
      "url": null,
      "actor": null,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Post merge review... I still have to look at the last 4 commits, but want to make sure I'm not misunderstanding something.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1908615751",
      "submitted_at": "2024-02-29T12:35:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "commented",
      "id": 1971109097,
      "node_id": "IC_kwDOABII5851fLzp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1971109097",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T13:11:09Z",
      "updated_at": "2024-02-29T13:11:09Z",
      "author_association": "MEMBER",
      "body": "Hint for anyone trying to test 5bf4f5ba32da4627f152b54d266df9b2aa930457: uncomment this bit in `RemoveBlockRequest`.\r\n\r\n```cpp\r\nif (from_peer && *from_peer != node_id) {\r\n  range.first++;\r\n  continue;\r\n}\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1971109097",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "reviewed",
      "id": 1908840329,
      "node_id": "PRR_kwDOABII585xxpeJ",
      "url": null,
      "actor": null,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#pullrequestreview-1908840329",
      "submitted_at": "2024-02-29T13:17:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
    },
    {
      "event": "commented",
      "id": 1971206525,
      "node_id": "IC_kwDOABII5851fjl9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1971206525",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T14:00:09Z",
      "updated_at": "2024-02-29T14:00:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "nit: previously, we were quite loud logging an `ERROR` when receiving a valid-PoW mutated block we didn't know about. Now, it's only visible in the debug log when `net` debug-logging is turned on. As it's quite an expensive mistake to mine and broadcast a mutated block with valid PoW on mainnet, it could make sense to continue logging new, valid-PoW blocks as `ERROR`s to make these cases easier to debug.",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1971206525",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "referenced",
      "id": 11967309441,
      "node_id": "REFE_lADOABII585-s54JzwAAAALJTqaB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11967309441",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6ee3997d03e456655e3c44abf1e15270c423ed41",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/6ee3997d03e456655e3c44abf1e15270c423ed41",
      "created_at": "2024-02-29T15:00:13Z"
    },
    {
      "event": "commented",
      "id": 1971504151,
      "node_id": "IC_kwDOABII5851gsQX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1971504151",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T16:27:48Z",
      "updated_at": "2024-02-29T16:27:48Z",
      "author_association": "MEMBER",
      "body": "@0xB10C I'd consider that a bit of a regression if not fixed since the new-valid-pow logging has been quite helpful to diagnose issues. Want to open a PR for that?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1971504151",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "mentioned",
      "id": 11968521868,
      "node_id": "MEE_lADOABII585-s54JzwAAAALJYSaM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11968521868",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T16:27:50Z"
    },
    {
      "event": "subscribed",
      "id": 11968521885,
      "node_id": "SE_lADOABII585-s54JzwAAAALJYSad",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11968521885",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T16:27:50Z"
    },
    {
      "event": "commented",
      "id": 1971533806,
      "node_id": "IC_kwDOABII5851gzfu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1971533806",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T16:42:05Z",
      "updated_at": "2024-02-29T16:42:05Z",
      "author_association": "MEMBER",
      "body": "> As it's quite an expensive mistake to mine and broadcast a mutated block with valid PoW on mainnet\r\n\r\nYes it is a expensive mistake to mine a block and then only broadcast a mutated version of it. But it is actually really cheap to produce mutated blocks if you have a fully valid one (e.g. by adding one transaction to the block), so logging under the category is better.\r\n\r\n> I'd consider that a bit of a regression if not fixed since the new-valid-pow logging has been quite helpful to diagnose issues. Want to open a PR for that?\r\n\r\nI think you misunderstood Timo's comment. Timo was talking about error logging from mutation checks and I'm not quite sure what you are referring to with \"new-valid-pow\" logging.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1971533806",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1971540440,
      "node_id": "IC_kwDOABII5851g1HY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1971540440",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T16:45:20Z",
      "updated_at": "2024-02-29T16:48:01Z",
      "author_association": "MEMBER",
      "body": "> I think you misunderstood Timo's comment. Timo was talking about error logging from mutation checks and I'm not quite sure what you are referring to with \"new-valid-pow\" logging.\r\n\r\nAttempted rephrasing of \"when receiving a valid-PoW mutated block we didn't know about\" as a subset of cases we're interested in? We may be talking past eachother.\r\n\r\nedit: let me investigate if what I'm saying makes sense and get back with a concrete suggestion if so",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1971540440",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "referenced",
      "id": 11970654656,
      "node_id": "REFE_lADOABII585-s54JzwAAAALJgbHA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11970654656",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9057598605b8685adfd43db85f2fc96bf7c0d5a5",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9057598605b8685adfd43db85f2fc96bf7c0d5a5",
      "created_at": "2024-02-29T19:37:52Z"
    },
    {
      "event": "commented",
      "id": 1972057773,
      "node_id": "IC_kwDOABII5851izat",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1972057773",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T22:11:58Z",
      "updated_at": "2024-02-29T22:11:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > As it's quite an expensive mistake to mine and broadcast a mutated block with valid PoW on mainnet\r\n> \r\n> Yes it is a expensive mistake to mine a block and then only broadcast a mutated version of it. But it is actually really cheap to produce mutated blocks if you have a fully valid one (e.g. by adding one transaction to the block), so logging under the category is better.\r\n\r\nI agree that we don't want to log **all** mutated blocks we receive. I'm specifically talking about logging valid-PoW, but mutated blocks with header hashes that we haven't seen before. These are expensive to produce. I think @instagibbs's interpretation of my comment is correct.\r\n\r\nAs an example: Currently, there is a mining pool that broadcasts newly found, mutated blocks due to a bug in their mining pool software. Their (Bitcoin Core) nodes also relay these blocks as compact blocks. Before this PR, we'd log the following to the debug.log when we received the mutated block directly from the pool's broken P2P clients before we received it as a compact block. When we received the compact block first, we didn't process the mutated blocks from the pool broken P2P client as we were already aware of the non-mutated block. With this PR, we don't log anything about mutated blocks by default. To be able to detect cases like these, it might be worth having something like this (untested): https://github.com/0xB10C/bitcoin/commit/54922dacb4aa066bf9bcbfbbad4e5d16420d5b6e\r\n\r\n```\r\n# debug.log on receiving a mutated block before this PR\r\nERROR: AcceptBlock: bad-witness-nonce-size, ContextualCheckBlock : invalid witness reserved value size\r\nERROR: ProcessNewBlock: AcceptBlock FAILED (bad-witness-nonce-size, ContextualCheckBlock : invalid witness reserved value size)\r\n``` \r\n\r\n",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1972057773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "mentioned",
      "id": 11972054517,
      "node_id": "MEE_lADOABII585-s54JzwAAAALJlw31",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11972054517",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T22:12:00Z"
    },
    {
      "event": "subscribed",
      "id": 11972054540,
      "node_id": "SE_lADOABII585-s54JzwAAAALJlw4M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11972054540",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T22:12:00Z"
    },
    {
      "event": "commented",
      "id": 1972837712,
      "node_id": "IC_kwDOABII5851lx1Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1972837712",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-01T09:34:27Z",
      "updated_at": "2024-03-01T09:34:27Z",
      "author_association": "MEMBER",
      "body": "> it might be worth having something like this (untested): [0xB10C@54922da](https://github.com/0xB10C/bitcoin/commit/54922dacb4aa066bf9bcbfbbad4e5d16420d5b6e)\r\n\r\nSeems like accepting the header would be required? Otherwise someone could use a past stale block to fill a peer's storage via the log in a loop?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1972837712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1973618816,
      "node_id": "IC_kwDOABII5851owiA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1973618816",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-01T17:43:45Z",
      "updated_at": "2024-03-01T17:43:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > it might be worth having something like this (untested): [0xB10C@54922da](https://github.com/0xB10C/bitcoin/commit/54922dacb4aa066bf9bcbfbbad4e5d16420d5b6e)\r\n> \r\n> Seems like accepting the header would be required? Otherwise someone could use a past stale block to fill a peer's storage via the log in a loop?\r\n\r\nAgree that we should do something like this. Since we disconnect after each mutated block, the attack frequency is somewhat limited. This attack was also possible before this PR (but is now prevented).",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1973618816",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "referenced",
      "id": 11996515732,
      "node_id": "REFE_lADOABII585-s54JzwAAAALLDE2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11996515732",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e60804f121196de37484c77a3f03654be22ddfc0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60804f121196de37484c77a3f03654be22ddfc0",
      "created_at": "2024-03-04T10:09:54Z"
    },
    {
      "event": "referenced",
      "id": 12012121200,
      "node_id": "REFE_lADOABII585-s54JzwAAAALL-mxw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12012121200",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "97a1d0a45959a29464ae73087c7a0adcdebd5a61",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/97a1d0a45959a29464ae73087c7a0adcdebd5a61",
      "created_at": "2024-03-05T10:58:29Z"
    },
    {
      "event": "referenced",
      "id": 12012121234,
      "node_id": "REFE_lADOABII585-s54JzwAAAALL-myS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12012121234",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "076c67c3aae424e58863dde3bc37cedecc496935",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/076c67c3aae424e58863dde3bc37cedecc496935",
      "created_at": "2024-03-05T10:58:29Z"
    },
    {
      "event": "referenced",
      "id": 12012121258,
      "node_id": "REFE_lADOABII585-s54JzwAAAALL-myq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12012121258",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aff368fa817b065d99729186d304fff02f6e527b",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/aff368fa817b065d99729186d304fff02f6e527b",
      "created_at": "2024-03-05T10:58:30Z"
    },
    {
      "event": "referenced",
      "id": 12012121303,
      "node_id": "REFE_lADOABII585-s54JzwAAAALL-mzX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12012121303",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "50c0b61a9d562240d5fe4bd79324b0c0e79caa5c",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/50c0b61a9d562240d5fe4bd79324b0c0e79caa5c",
      "created_at": "2024-03-05T10:58:30Z"
    },
    {
      "event": "referenced",
      "id": 12012121366,
      "node_id": "REFE_lADOABII585-s54JzwAAAALL-m0W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12012121366",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "24736350e932799c66c999470fa3837e25576fc7",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/24736350e932799c66c999470fa3837e25576fc7",
      "created_at": "2024-03-05T10:58:30Z"
    },
    {
      "event": "referenced",
      "id": 12012121430,
      "node_id": "REFE_lADOABII585-s54JzwAAAALL-m1W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12012121430",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0c5c5962cbfdfd532cebc6706d5b838488b89d53",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/0c5c5962cbfdfd532cebc6706d5b838488b89d53",
      "created_at": "2024-03-05T10:58:30Z"
    },
    {
      "event": "referenced",
      "id": 12012121466,
      "node_id": "REFE_lADOABII585-s54JzwAAAALL-m16",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12012121466",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8141498f3ad3ae9c42c32346ee73dc7f29e72cb5",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/8141498f3ad3ae9c42c32346ee73dc7f29e72cb5",
      "created_at": "2024-03-05T10:58:30Z"
    },
    {
      "event": "referenced",
      "id": 12012121517,
      "node_id": "REFE_lADOABII585-s54JzwAAAALL-m2t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12012121517",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0535c253fe71ae9d875827cafed41a8889f4a702",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/0535c253fe71ae9d875827cafed41a8889f4a702",
      "created_at": "2024-03-05T10:58:30Z"
    },
    {
      "event": "commented",
      "id": 1978496731,
      "node_id": "IC_kwDOABII58517Xbb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1978496731",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T10:59:46Z",
      "updated_at": "2024-03-05T10:59:46Z",
      "author_association": "MEMBER",
      "body": "Backported for 26.x in #29509",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1978496731",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "commented",
      "id": 1978849369,
      "node_id": "IC_kwDOABII58518thZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1978849369",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T14:06:07Z",
      "updated_at": "2024-03-05T14:06:07Z",
      "author_association": "MEMBER",
      "body": "@achow101 can you add it to #29531 as well? (i think Gloria's 26.x version should be cleanly fit on top of 25.x)",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1978849369",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "mentioned",
      "id": 12014440206,
      "node_id": "MEE_lADOABII585-s54JzwAAAALMHc8O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12014440206",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T14:06:11Z"
    },
    {
      "event": "subscribed",
      "id": 12014440233,
      "node_id": "SE_lADOABII585-s54JzwAAAALMHc8p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12014440233",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T14:06:11Z"
    },
    {
      "event": "referenced",
      "id": 12017251807,
      "node_id": "REFE_lADOABII585-s54JzwAAAALMSLXf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12017251807",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4f5baac6ca46435ed7546e1577f9f6120aae5355",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/4f5baac6ca46435ed7546e1577f9f6120aae5355",
      "created_at": "2024-03-05T17:18:27Z"
    },
    {
      "event": "referenced",
      "id": 12017251833,
      "node_id": "REFE_lADOABII585-s54JzwAAAALMSLX5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12017251833",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8804c368f5b5745ae4e7bcbc60bae36658d7e2c4",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/8804c368f5b5745ae4e7bcbc60bae36658d7e2c4",
      "created_at": "2024-03-05T17:18:28Z"
    },
    {
      "event": "referenced",
      "id": 12017251851,
      "node_id": "REFE_lADOABII585-s54JzwAAAALMSLYL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12017251851",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "098f07dc8d79f1bf55441e23b98d609e425d7d16",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/098f07dc8d79f1bf55441e23b98d609e425d7d16",
      "created_at": "2024-03-05T17:18:28Z"
    },
    {
      "event": "referenced",
      "id": 12017251890,
      "node_id": "REFE_lADOABII585-s54JzwAAAALMSLYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12017251890",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8cc4b24c74ecf7a3c3d2853fe8ecb474eb77284c",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/8cc4b24c74ecf7a3c3d2853fe8ecb474eb77284c",
      "created_at": "2024-03-05T17:18:28Z"
    },
    {
      "event": "referenced",
      "id": 12017251932,
      "node_id": "REFE_lADOABII585-s54JzwAAAALMSLZc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12017251932",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "de97ecf14f2bd8cc42e8703ac028251ecd8e42d9",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/de97ecf14f2bd8cc42e8703ac028251ecd8e42d9",
      "created_at": "2024-03-05T17:18:28Z"
    },
    {
      "event": "referenced",
      "id": 12017251956,
      "node_id": "REFE_lADOABII585-s54JzwAAAALMSLZ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12017251956",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0667441a7b34dde79fe0ecfc0cddc3314fa05f63",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0667441a7b34dde79fe0ecfc0cddc3314fa05f63",
      "created_at": "2024-03-05T17:18:28Z"
    },
    {
      "event": "referenced",
      "id": 12017251975,
      "node_id": "REFE_lADOABII585-s54JzwAAAALMSLaH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12017251975",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3eaaafa225c489405d71d0de1daff8b403e60ef7",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/3eaaafa225c489405d71d0de1daff8b403e60ef7",
      "created_at": "2024-03-05T17:18:28Z"
    },
    {
      "event": "commented",
      "id": 1979264983,
      "node_id": "IC_kwDOABII5851-S_X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1979264983",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-05T17:19:04Z",
      "updated_at": "2024-03-05T17:19:04Z",
      "author_association": "MEMBER",
      "body": "Backported to 25.x in #29531",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1979264983",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29412"
    },
    {
      "event": "referenced",
      "id": 12070942186,
      "node_id": "REFE_lADOABII585-s54JzwAAAALPe_Xq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12070942186",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c33e83a53a863e55413bee2893716b93165bf656",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c33e83a53a863e55413bee2893716b93165bf656",
      "created_at": "2024-03-11T09:55:24Z"
    },
    {
      "event": "referenced",
      "id": 12096721092,
      "node_id": "REFE_lADOABII585-s54JzwAAAALRBVDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12096721092",
      "actor": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3be8dac705105741902d2d23356c55bf30ce09f3",
      "commit_url": "https://api.github.com/repos/kevkevinpal/bitcoin/commits/3be8dac705105741902d2d23356c55bf30ce09f3",
      "created_at": "2024-03-13T01:46:55Z"
    },
    {
      "event": "referenced",
      "id": 12096723853,
      "node_id": "REFE_lADOABII585-s54JzwAAAALRBVuN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12096723853",
      "actor": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "78d7d9860037b88396131df08e767a194b50cc70",
      "commit_url": "https://api.github.com/repos/kevkevinpal/bitcoin/commits/78d7d9860037b88396131df08e767a194b50cc70",
      "created_at": "2024-03-13T01:47:08Z"
    },
    {
      "event": "referenced",
      "id": 12215890601,
      "node_id": "REFE_lADOABII585-s54JzwAAAALYH7Kp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12215890601",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d5bad0d2d16c2ddd6bfaeccbca2a31a30227ba2c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5bad0d2d16c2ddd6bfaeccbca2a31a30227ba2c",
      "created_at": "2024-03-22T13:40:13Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484551682",
      "pull_request_review_id": 1872786752,
      "id": 1484551682,
      "node_id": "PRRC_kwDOABII585YfHYC",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,",
      "path": "src/net_processing.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should we be checking PoW first before doing potentially a lot of hashing?",
      "created_at": "2024-02-09T16:31:56Z",
      "updated_at": "2024-02-09T16:31:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484551682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484551682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4724,
      "original_line": 4724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484725603",
      "pull_request_review_id": 1873071547,
      "id": 1484725603,
      "node_id": "PRRC_kwDOABII585Yfx1j",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).\n+        return std::any_of(block.vtx.begin(), block.vtx.end(),\n+                           [](auto& tx) { return GetSerializeSize(TX_NO_WITNESS(tx)) == 64; });\n+    } else {\n+        // Theoretically it is still possible for a block with a 64 byte\n+        // coinbase transaction to be mutated but we neglect that possibility\n+        // here as it requires at least 224 bits of work.\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        if (valid_opt.has_value() && !valid_opt.value()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same as for `ContextualCheckBlock`, this can be simplified to:\r\n\r\n```cpp\r\nif (valid_opt.value_or(true)) {\r\n```",
      "created_at": "2024-02-09T19:31:43Z",
      "updated_at": "2024-02-09T20:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484725603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484725603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3842,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484728486",
      "pull_request_review_id": 1873071547,
      "id": 1484728486,
      "node_id": "PRRC_kwDOABII585Yfyim",
      "diff_hunk": "@@ -3868,22 +3918,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "a74c3972bf8d0fa51e8f9672422bc34945b66ca7",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We should be able to simplify this as:\r\n\r\n```cpp\r\nif (!valid_opt.value_or(true)) return false;\r\n```",
      "created_at": "2024-02-09T19:35:22Z",
      "updated_at": "2024-02-09T20:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484728486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484728486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484744076",
      "pull_request_review_id": 1873071547,
      "id": 1484744076,
      "node_id": "PRRC_kwDOABII585Yf2WM",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,",
      "path": "src/net_processing.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "in_reply_to_id": 1484551682,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Basically performing `CheckBlockHeader` here too?\r\n\r\nThat sounds reasonable to me, and the outcome is the same IIRC: `Misbehaving(*peer, 100, ...`\r\n\r\nAlso, this is cheap enough that it may not matter if we do it again later (?), so we may not even need to cache it (correct me if I'm wrong)",
      "created_at": "2024-02-09T19:52:49Z",
      "updated_at": "2024-02-09T20:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484744076",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484744076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4724,
      "original_line": 4724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484773525",
      "pull_request_review_id": 1873071547,
      "id": 1484773525,
      "node_id": "PRRC_kwDOABII585Yf9iV",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)\n+\n+        # Block at height 101 should be the only one in flight from peer 0\n+        peer_info_prior_to_attack = self.nodes[0].getpeerinfo()\n+        assert_equal(peer_info_prior_to_attack[0]['id'], 0)\n+        assert_equal([101], peer_info_prior_to_attack[0][\"inflight\"])\n+\n+        # Attempt to clear the honest relayer's download request by sending the\n+        # mutated block (as the attacker).\n+        attacker.send_message(msg_block(mutated_block))",
      "path": "test/functional/p2p_mutated_blocks.py",
      "position": null,
      "original_position": 78,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "5f27c9be7acf82f1630802645d3b910baf39fa90",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It may be good to assert the debug log for the specific disconnection reason:\r\n\r\n```suggestion\r\nwith self.nodes[0].assert_debug_log(expected_msgs=[\"bad-txnmrklroot, hashMerkleRoot mismatch\"]):\r\n    attacker.send_message(msg_block(mutated_block))\r\n```",
      "created_at": "2024-02-09T20:27:16Z",
      "updated_at": "2024-02-09T20:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484773525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484773525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484789046",
      "pull_request_review_id": 1873173422,
      "id": 1484789046,
      "node_id": "PRRC_kwDOABII585YgBU2",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,",
      "path": "src/net_processing.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "in_reply_to_id": 1484551682,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok this doesn't seem to matter: we do this hashing even for already-known blocks we get sent unilaterally, and `MAX_PROTOCOL_MESSAGE_LENGTH` bounds the size of hashing to something reasonable, and we ban the peer anyways.",
      "created_at": "2024-02-09T20:47:39Z",
      "updated_at": "2024-02-09T20:50:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1484789046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1484789046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4724,
      "original_line": 4724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486013425",
      "pull_request_review_id": 1874970504,
      "id": 1486013425,
      "node_id": "PRRC_kwDOABII585YksPx",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).\n+        return std::any_of(block.vtx.begin(), block.vtx.end(),\n+                           [](auto& tx) { return GetSerializeSize(TX_NO_WITNESS(tx)) == 64; });\n+    } else {\n+        // Theoretically it is still possible for a block with a 64 byte\n+        // coinbase transaction to be mutated but we neglect that possibility\n+        // here as it requires at least 224 bits of work.\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        if (valid_opt.has_value() && !valid_opt.value()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": 1484725603,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure if that is simpler though. Yes it's less code but harder to read/understand imo (e.g. you forgot the `!` in your suggestion).\r\n\r\nI'm actually not a fan of my `std::optional<bool>` choice, so I might try to change that.",
      "created_at": "2024-02-12T10:49:35Z",
      "updated_at": "2024-02-12T10:49:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1486013425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486013425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3842,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486199775",
      "pull_request_review_id": 1875269841,
      "id": 1486199775,
      "node_id": "PRRC_kwDOABII585YlZvf",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).\n+        return std::any_of(block.vtx.begin(), block.vtx.end(),\n+                           [](auto& tx) { return GetSerializeSize(TX_NO_WITNESS(tx)) == 64; });\n+    } else {\n+        // Theoretically it is still possible for a block with a 64 byte\n+        // coinbase transaction to be mutated but we neglect that possibility\n+        // here as it requires at least 224 bits of work.\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        if (valid_opt.has_value() && !valid_opt.value()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": 1484725603,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I may be used to the pattern due to rustlang, but I have no strong opinions about it",
      "created_at": "2024-02-12T13:44:43Z",
      "updated_at": "2024-02-12T13:44:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1486199775",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486199775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3842,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495884531",
      "pull_request_review_id": 1890525477,
      "id": 1495884531,
      "node_id": "PRRC_kwDOABII585ZKWLz",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "path": "src/validation.cpp",
      "position": 120,
      "original_position": 12,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since this \"in case of non-coinbase first transaction, treat existence of 64-byte transaction as malleation\" is new behavior, would it make sense to move it to a separate commit at the end of the PR? (A clearer comment would also be helpful, because I briefly thought this was a consensus change before it was pointed out to be it only triggers in case the block would already be invalid).",
      "created_at": "2024-02-20T14:08:57Z",
      "updated_at": "2024-02-20T14:08:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1495884531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495884531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3841,
      "original_line": 3841,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495954173",
      "pull_request_review_id": 1890636850,
      "id": 1495954173,
      "node_id": "PRRC_kwDOABII585ZKnL9",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "path": "src/validation.cpp",
      "position": 120,
      "original_position": 12,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": 1495884531,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I also had the same misconception the first time I reviewed.",
      "created_at": "2024-02-20T14:50:09Z",
      "updated_at": "2024-02-20T14:50:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1495954173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495954173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3841,
      "original_line": 3841,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496051696",
      "pull_request_review_id": 1890785562,
      "id": 1496051696,
      "node_id": "PRRC_kwDOABII585ZK-_w",
      "diff_hunk": "@@ -3639,6 +3639,65 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");",
      "path": "src/validation.cpp",
      "position": 24,
      "original_position": 22,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "a74c3972bf8d0fa51e8f9672422bc34945b66ca7",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a74c3972bf8d0fa51e8f9672422bc34945b66ca7: It would be easier to review if style changes were separate from move-only changes? Otherwise, options such as `--color-moved=dimmed-zebra  --color-moved-ws=ignore-all-space` can not be used.\r\n\r\nAlso, renaming tokens in a block of code will break the parity check used to find the introduction of the code block (https://git-scm.com/docs/git-log#Documentation/git-log.txt--Sltstringgt). So it may be easier to track the history, if the renames were done in a separate commit, at least for me. ",
      "created_at": "2024-02-20T15:41:34Z",
      "updated_at": "2024-02-20T15:41:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496051696",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496051696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3662,
      "original_line": 3662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496312078",
      "pull_request_review_id": 1891184515,
      "id": 1496312078,
      "node_id": "PRRC_kwDOABII585ZL-kO",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given the recent changes around the mailing list could also name what's behind this link? So in case it disappears people know what to search for. I know they promised to keep the links but who knows...",
      "created_at": "2024-02-20T18:27:49Z",
      "updated_at": "2024-02-20T22:26:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496312078",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496312078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3821,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496365733",
      "pull_request_review_id": 1891184515,
      "id": 1496365733,
      "node_id": "PRRC_kwDOABII585ZMLql",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "path": "src/validation.cpp",
      "position": 120,
      "original_position": 12,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": 1495884531,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It would also be a little bit easier to reason about if when `block.vtx.empty()` is true then we just `return false;` because in that case `std::any_of` will always return false.",
      "created_at": "2024-02-20T19:16:50Z",
      "updated_at": "2024-02-20T22:26:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1496365733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496365733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3841,
      "original_line": 3841,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130243",
      "pull_request_review_id": 1895668014,
      "id": 1499130243,
      "node_id": "PRRC_kwDOABII585ZWumD",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "path": "src/validation.cpp",
      "position": 120,
      "original_position": 12,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": 1495884531,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Split into separate commit and expanded on the comment.",
      "created_at": "2024-02-22T11:55:14Z",
      "updated_at": "2024-02-22T11:55:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3841,
      "original_line": 3841,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130527",
      "pull_request_review_id": 1895668485,
      "id": 1499130527,
      "node_id": "PRRC_kwDOABII585ZWuqf",
      "diff_hunk": "@@ -3639,6 +3639,65 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");",
      "path": "src/validation.cpp",
      "position": 24,
      "original_position": 22,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "a74c3972bf8d0fa51e8f9672422bc34945b66ca7",
      "in_reply_to_id": 1496051696,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Split the refactoring into a separate commit.",
      "created_at": "2024-02-22T11:55:30Z",
      "updated_at": "2024-02-22T11:55:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3662,
      "original_line": 3662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130753",
      "pull_request_review_id": 1895668845,
      "id": 1499130753,
      "node_id": "PRRC_kwDOABII585ZWuuB",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        // Consider the block mutated if any transaction is 64 bytes in size\n+        // (see 3.1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190225/a27d8837/attachment-0001.pdf).",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": 1496312078,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-02-22T11:55:42Z",
      "updated_at": "2024-02-22T11:55:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499130753",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499130753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3821,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499351311",
      "pull_request_review_id": 1896027563,
      "id": 1499351311,
      "node_id": "PRRC_kwDOABII585ZXkkP",
      "diff_hunk": "@@ -145,4 +147,31 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // tx1: ff204bd0000000000000\n+    // tx2: 8ae53c92000000000000\n+    // 64 byte tx of the form h(tx1)||h(tx2), tx3:\n+    // cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\n+\n+    CMutableTransaction tx1;\n+    BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+    CMutableTransaction tx2;\n+    BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+    CMutableTransaction tx3;\n+    BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Asserting the stripped serialized size right after is nice for self-documentation/correctness of test, and maybe another case of a witness tx which witness size is not 64?",
      "created_at": "2024-02-22T14:38:17Z",
      "updated_at": "2024-02-22T14:40:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499351311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499351311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499355541",
      "pull_request_review_id": 1896027563,
      "id": 1499355541,
      "node_id": "PRRC_kwDOABII585ZXlmV",
      "diff_hunk": "@@ -3758,6 +3814,40 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)",
      "path": "src/validation.cpp",
      "position": 112,
      "original_position": 96,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "have you thought about having this function return an optional error string so unit tests can check expected failure reason?",
      "created_at": "2024-02-22T14:40:52Z",
      "updated_at": "2024-02-22T14:40:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499355541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499355541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3833,
      "original_line": 3833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499592647",
      "pull_request_review_id": 1896406510,
      "id": 1499592647,
      "node_id": "PRRC_kwDOABII585ZYffH",
      "diff_hunk": "@@ -3642,34 +3642,54 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n {\n     bool mutated;\n-    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-    if (block.hashMerkleRoot != hashMerkleRoot2)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n \n     // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n     // of transactions in a block without affecting the merkle root of a block,\n     // while still invalidating it.\n-    if (mutated)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n \n     return true;\n }\n \n static std::optional<bool> CheckWitnessCommitment(const CBlock& block, BlockValidationState& state)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n-    if (commitpos != NO_WITNESS_COMMITMENT) {\n-        bool malleated = false;\n-        uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+\n+    bool has_witness_commitment{commitpos != NO_WITNESS_COMMITMENT};",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "c84db8d60e87eabc1e4f88ef05bf06fbf4db6f02",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit c84db8d60e87eabc1e4f88ef05bf06fbf4db6f02\r\n\r\n```suggestion\r\n    const bool has_witness_commitment{commitpos != NO_WITNESS_COMMITMENT};\r\n```",
      "created_at": "2024-02-22T17:12:05Z",
      "updated_at": "2024-02-22T17:30:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499592647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499592647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3670,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499595618",
      "pull_request_review_id": 1896406510,
      "id": 1499595618,
      "node_id": "PRRC_kwDOABII585ZYgNi",
      "diff_hunk": "@@ -3808,6 +3808,29 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "c62eea853e5c5f390d58c5ad9c0ac9a688465abc",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit c62eea853e5c5f390d58c5ad9c0ac9a688465abc\r\n```suggestion\r\n        const auto valid_opt{CheckWitnessCommitment(block, state)};\r\n```\r\n",
      "created_at": "2024-02-22T17:14:27Z",
      "updated_at": "2024-02-22T17:30:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499595618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499595618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3824,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499598937",
      "pull_request_review_id": 1896406510,
      "id": 1499598937,
      "node_id": "PRRC_kwDOABII585ZYhBZ",
      "diff_hunk": "@@ -3639,6 +3639,45 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != hashMerkleRoot2)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+\n+    return true;\n+}\n+\n+static std::optional<bool> CheckWitnessCommitment(const CBlock& block, BlockValidationState& state)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "cb2437307e6861e0957899345b6e9b93716c383a",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "cb2437307e6861e0957899345b6e9b93716c383a\r\nMaybe add comment explaining what the tristate return result means? e.g. \"bool indicating the witness commitment is correct (state is populated if any error occurs), or std::nullopt if there is no witness commitment to be checked\"",
      "created_at": "2024-02-22T17:17:04Z",
      "updated_at": "2024-02-22T17:30:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499598937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499598937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3658,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499599724",
      "pull_request_review_id": 1896417728,
      "id": 1499599724,
      "node_id": "PRRC_kwDOABII585ZYhNs",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)\n+\n+        # Block at height 101 should be the only one in flight from peer 0\n+        peer_info_prior_to_attack = self.nodes[0].getpeerinfo()\n+        assert_equal(peer_info_prior_to_attack[0]['id'], 0)\n+        assert_equal([101], peer_info_prior_to_attack[0][\"inflight\"])\n+\n+        # Attempt to clear the honest relayer's download request by sending the\n+        # mutated block (as the attacker).\n+        attacker.send_message(msg_block(mutated_block))",
      "path": "test/functional/p2p_mutated_blocks.py",
      "position": null,
      "original_position": 78,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "5f27c9be7acf82f1630802645d3b910baf39fa90",
      "in_reply_to_id": 1484773525,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@dergoegge have you considered this?",
      "created_at": "2024-02-22T17:17:41Z",
      "updated_at": "2024-02-22T17:17:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499599724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499599724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499609287",
      "pull_request_review_id": 1896406510,
      "id": 1499609287,
      "node_id": "PRRC_kwDOABII585ZYjjH",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])",
      "path": "test/functional/p2p_mutated_blocks.py",
      "position": null,
      "original_position": 46,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "e2d1eb2e2001c31b43154df47ab5be215a26774f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e2d1eb2e2001c31b43154df47ab5be215a26774f\r\n\r\nthis is the same thing as\r\n```suggestion\r\n        tx = self.wallet.create_self_transfer()[\"tx\"]\r\n```",
      "created_at": "2024-02-22T17:25:09Z",
      "updated_at": "2024-02-22T17:30:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499609287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499609287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499613815",
      "pull_request_review_id": 1896406510,
      "id": 1499613815,
      "node_id": "PRRC_kwDOABII585ZYkp3",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)",
      "path": "test/functional/p2p_mutated_blocks.py",
      "position": 68,
      "original_position": 69,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "e2d1eb2e2001c31b43154df47ab5be215a26774f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in e2d1eb2e2001c31b43154df47ab5be215a26774f\r\ndoes this need a `with p2p_lock`?",
      "created_at": "2024-02-22T17:28:55Z",
      "updated_at": "2024-02-22T17:30:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499613815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499613815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628300",
      "pull_request_review_id": 1898055488,
      "id": 1500628300,
      "node_id": "PRRC_kwDOABII585ZccVM",
      "diff_hunk": "@@ -3808,6 +3808,29 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "c62eea853e5c5f390d58c5ad9c0ac9a688465abc",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: (Same below) c62eea853e5c5f390d58c5ad9c0ac9a688465abc:\r\n\r\nInstead of logging `IsBlockMutated` twice when function logging is enabled, it would be better to just use your own words to write something meaningful. For example, `\"Block mutated: %s\\n\", state.ToString());`.  ",
      "created_at": "2024-02-23T12:59:22Z",
      "updated_at": "2024-02-23T13:49:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500628300",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3815,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628488",
      "pull_request_review_id": 1898055488,
      "id": 1500628488,
      "node_id": "PRRC_kwDOABII585ZccYI",
      "diff_hunk": "@@ -3808,6 +3808,29 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    if (check_witness_root) {\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        if (valid_opt.has_value() && !valid_opt.value()) {\n+            LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "c62eea853e5c5f390d58c5ad9c0ac9a688465abc",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same",
      "created_at": "2024-02-23T12:59:31Z",
      "updated_at": "2024-02-23T13:49:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500628488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500628488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500664679",
      "pull_request_review_id": 1898055488,
      "id": 1500664679,
      "node_id": "PRRC_kwDOABII585ZclNn",
      "diff_hunk": "@@ -3758,6 +3814,40 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)",
      "path": "src/validation.cpp",
      "position": 112,
      "original_position": 96,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "in_reply_to_id": 1499355541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(reply to https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1499355541)\r\n\r\nnote: unit tests may use the `ASSERT_DEBUG_LOG`, as an alternative.",
      "created_at": "2024-02-23T13:25:37Z",
      "updated_at": "2024-02-23T13:50:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500664679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500664679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3833,
      "original_line": 3833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500674548",
      "pull_request_review_id": 1898128960,
      "id": 1500674548,
      "node_id": "PRRC_kwDOABII585Zcnn0",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)",
      "path": "test/functional/p2p_mutated_blocks.py",
      "position": 68,
      "original_position": 69,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "e2d1eb2e2001c31b43154df47ab5be215a26774f",
      "in_reply_to_id": 1499613815,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does it? None of the other `wait_for_*` helpers require it.",
      "created_at": "2024-02-23T13:33:57Z",
      "updated_at": "2024-02-23T13:33:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500674548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500674548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500675560",
      "pull_request_review_id": 1898055488,
      "id": 1500675560,
      "node_id": "PRRC_kwDOABII585Zcn3o",
      "diff_hunk": "@@ -3868,22 +3898,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;\n     }\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "cb2437307e6861e0957899345b6e9b93716c383a",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in cb2437307e6861e0957899345b6e9b93716c383a: Why not move this check into `CheckWitnessCommitment` as well? This would also fix the \"tristate\" `std::optional<bool>` complexity. It seems on point to consider added witness to a block that has no witness commitment as a violation of the commitment and thus a mutation?",
      "created_at": "2024-02-23T13:34:45Z",
      "updated_at": "2024-02-23T13:49:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500675560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500675560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500925855",
      "pull_request_review_id": 1898536166,
      "id": 1500925855,
      "node_id": "PRRC_kwDOABII585Zdk-f",
      "diff_hunk": "@@ -3868,22 +3898,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;\n     }\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "cb2437307e6861e0957899345b6e9b93716c383a",
      "in_reply_to_id": 1500675560,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Great catch! The \"no witnesses allowed for blocks that don't commit to witnesses\" rule needs to at the very least also be in `IsBlockMutated`.\r\n\r\nI'm not sure if moving it to `CheckWitnessCommitment` is the right place because it needs to be checked even if segwit has not yet activated.",
      "created_at": "2024-02-23T16:46:46Z",
      "updated_at": "2024-02-23T16:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500925855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500925855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500929903",
      "pull_request_review_id": 1898542476,
      "id": 1500929903,
      "node_id": "PRRC_kwDOABII585Zdl9v",
      "diff_hunk": "@@ -3868,22 +3898,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;\n     }\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "cb2437307e6861e0957899345b6e9b93716c383a",
      "in_reply_to_id": 1500675560,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I'm not sure if moving it to `CheckWitnessCommitment` is the right place because it needs to be checked even if segwit has not yet activated.\r\n\r\nI was thinking that `CheckWitnessCommitment` would wrap all of it, and you'd pass the segwit bool to it for the code block that would be run conditionally?",
      "created_at": "2024-02-23T16:50:24Z",
      "updated_at": "2024-02-23T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500929903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1500929903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038143",
      "pull_request_review_id": 1898716555,
      "id": 1501038143,
      "node_id": "PRRC_kwDOABII585ZeAY_",
      "diff_hunk": "@@ -3868,22 +3898,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_SEGWIT)) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != NO_WITNESS_COMMITMENT) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n-            // The malleation check is ignored; as the transaction tree itself\n-            // already does not permit it, it is impossible to trigger in the\n-            // witness tree.\n-            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n-            }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n-            }\n-            fHaveWitness = true;\n-        }\n+        const auto valid_opt = CheckWitnessCommitment(block, state);\n+        fHaveWitness = valid_opt.has_value();\n+        if (fHaveWitness && !valid_opt.value()) return false;\n     }\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "cb2437307e6861e0957899345b6e9b93716c383a",
      "in_reply_to_id": 1500675560,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-02-23T18:36:23Z",
      "updated_at": "2024-02-23T18:36:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501038143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038885",
      "pull_request_review_id": 1898718070,
      "id": 1501038885,
      "node_id": "PRRC_kwDOABII585ZeAkl",
      "diff_hunk": "@@ -3639,6 +3639,45 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != hashMerkleRoot2)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+\n+    return true;\n+}\n+\n+static std::optional<bool> CheckWitnessCommitment(const CBlock& block, BlockValidationState& state)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "cb2437307e6861e0957899345b6e9b93716c383a",
      "in_reply_to_id": 1499598937,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The tristate no longer exists, see https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1500675560",
      "created_at": "2024-02-23T18:37:18Z",
      "updated_at": "2024-02-23T18:37:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501038885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501038885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3658,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041492",
      "pull_request_review_id": 1898720516,
      "id": 1501041492,
      "node_id": "PRRC_kwDOABII585ZeBNU",
      "diff_hunk": "@@ -3758,6 +3814,40 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)",
      "path": "src/validation.cpp",
      "position": 112,
      "original_position": 96,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "in_reply_to_id": 1499355541,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> have you thought about having this function return an optional error string so unit tests can check expected failure reason?\r\n\r\nI'm considering returning the mutation type but I will not be asserting logs...",
      "created_at": "2024-02-23T18:38:55Z",
      "updated_at": "2024-02-23T18:38:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501041492",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3833,
      "original_line": 3833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041586",
      "pull_request_review_id": 1898720663,
      "id": 1501041586,
      "node_id": "PRRC_kwDOABII585ZeBOy",
      "diff_hunk": "@@ -145,4 +147,31 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // tx1: ff204bd0000000000000\n+    // tx2: 8ae53c92000000000000\n+    // 64 byte tx of the form h(tx1)||h(tx2), tx3:\n+    // cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\n+\n+    CMutableTransaction tx1;\n+    BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+    CMutableTransaction tx2;\n+    BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+    CMutableTransaction tx3;\n+    BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "0f356b0b2fb23aef96ed7396890aa36410aa1d59",
      "in_reply_to_id": 1499351311,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-02-23T18:39:02Z",
      "updated_at": "2024-02-23T18:39:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501041586",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501041586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501042394",
      "pull_request_review_id": 1898721912,
      "id": 1501042394,
      "node_id": "PRRC_kwDOABII585ZeBba",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = tx_from_hex(self.wallet.create_self_transfer()[\"hex\"])\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)\n+\n+        # Block at height 101 should be the only one in flight from peer 0\n+        peer_info_prior_to_attack = self.nodes[0].getpeerinfo()\n+        assert_equal(peer_info_prior_to_attack[0]['id'], 0)\n+        assert_equal([101], peer_info_prior_to_attack[0][\"inflight\"])\n+\n+        # Attempt to clear the honest relayer's download request by sending the\n+        # mutated block (as the attacker).\n+        attacker.send_message(msg_block(mutated_block))",
      "path": "test/functional/p2p_mutated_blocks.py",
      "position": null,
      "original_position": 78,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "5f27c9be7acf82f1630802645d3b910baf39fa90",
      "in_reply_to_id": 1484773525,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added the assertion, even though I really don't like asserting logs",
      "created_at": "2024-02-23T18:39:56Z",
      "updated_at": "2024-02-23T18:39:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501042394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501042394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501052508",
      "pull_request_review_id": 1898738155,
      "id": 1501052508,
      "node_id": "PRRC_kwDOABII585ZeD5c",
      "diff_hunk": "@@ -145,4 +150,188 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transactions.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+    }\n+\n+    {\n+        // Test merkle root malleation\n+\n+        // Pseudo code to mine transactions tx{1,2,3}:\n+        //\n+        // ```\n+        // loop {\n+        //   tx1 = random_tx()\n+        //   tx2 = random_tx()\n+        //   tx3 = deserialize_tx(txid(tx1) || txid(tx2));\n+        //   if serialized_size_without_witness(tx3) == 64 {\n+        //     print(hex(tx3))\n+        //     break\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // The `random_tx` function used to mine the txs below simply created\n+        // empty transactions with a random version field.\n+        CMutableTransaction tx1;\n+        BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx2;\n+        BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx3;\n+        BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        {\n+            // Verify that doubla_sha256(txid1||txid2) == txid3\n+            HashWriter hasher;\n+            hasher.write({tx1.GetHash().data(), 32});\n+            hasher.write({tx2.GetHash().data(), 32});\n+            assert(hasher.GetHash() == tx3.GetHash());\n+            // Verify that tx3 is 64 bytes in size (with out witness).\n+            assert(GetSerializeSize(TX_NO_WITNESS(tx3)) == 64);\n+        }\n+\n+        CBlock block;\n+        block.vtx.push_back(MakeTransactionRef(tx1));\n+        block.vtx.push_back(MakeTransactionRef(tx2));\n+        uint256 merkle_root = block.hashMerkleRoot = BlockMerkleRoot(block);\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Mutate the block by replacing the two transactions with one 64-byte\n+        // transaction that serializes into the concatenation of the txids of\n+        // the transactions in the unmutated block.\n+        block.vtx.clear();\n+        block.vtx.push_back(MakeTransactionRef(tx3));",
      "path": "src/test/validation_tests.cpp",
      "position": 173,
      "original_position": 147,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "8c18b708b9362ced44095571e35695be399d7272",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        block.vtx.push_back(MakeTransactionRef(tx3));\r\n        BOOST_CHECK(!block.vtx.back()->IsCoinBase());\r\n```",
      "created_at": "2024-02-23T18:51:14Z",
      "updated_at": "2024-02-23T19:24:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501052508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501052508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501057392",
      "pull_request_review_id": 1898738155,
      "id": 1501057392,
      "node_id": "PRRC_kwDOABII585ZeFFw",
      "diff_hunk": "@@ -145,4 +150,188 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transactions.",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 92,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "8c18b708b9362ced44095571e35695be399d7272",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        // match the double sha256 of the concatenation of the two transaction hashes.\r\n```",
      "created_at": "2024-02-23T18:57:09Z",
      "updated_at": "2024-02-23T19:24:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501057392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501057392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501069738",
      "pull_request_review_id": 1898738155,
      "id": 1501069738,
      "node_id": "PRRC_kwDOABII585ZeIGq",
      "diff_hunk": "@@ -145,4 +150,188 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));",
      "path": "src/test/validation_tests.cpp",
      "position": 89,
      "original_position": 89,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "8c18b708b9362ced44095571e35695be399d7272",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be good to check we don't flag valid 64-byte coinbases as mutated in the function",
      "created_at": "2024-02-23T19:09:25Z",
      "updated_at": "2024-02-23T19:24:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501069738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501069738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 220,
      "original_line": 220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501074722",
      "pull_request_review_id": 1898738155,
      "id": 1501074722,
      "node_id": "PRRC_kwDOABII585ZeJUi",
      "diff_hunk": "@@ -3639,6 +3639,83 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    if (block.m_checked_merkle_root) return true;\n+\n+    bool mutated;\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n+\n+    block.m_checked_merkle_root = true;\n+    return true;\n+}\n+\n+static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n+{\n+    bool has_witness_commitment{false};\n+\n+    if (expect_witness_commitment) {\n+        if (block.m_checked_witness_commitment) return true;\n+\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        has_witness_commitment = commitpos != NO_WITNESS_COMMITMENT;\n+        if (has_witness_commitment) {\n+            assert(!block.vtx.empty() && !block.vtx[0]->vin.empty());\n+            const auto& witness_stack{block.vtx[0]->vin[0].scriptWitness.stack};\n+\n+            if (witness_stack.size() != 1 || witness_stack[0].size() != 32) {\n+                return state.Invalid(\n+                    /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+                    /*reject_reason=*/\"bad-witness-nonce-size\",\n+                    /*debug_message=*/strprintf(\"%s : invalid witness reserved value size\", __func__));\n+            }\n+\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.",
      "path": "src/validation.cpp",
      "position": 56,
      "original_position": 53,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "8c18b708b9362ced44095571e35695be399d7272",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "future work nit: the mutated arg is never non-`nullptr` and has no test coverage it seems.\r\n",
      "created_at": "2024-02-23T19:14:59Z",
      "updated_at": "2024-02-23T19:24:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501074722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501074722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3694,
      "original_line": 3694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501113502",
      "pull_request_review_id": 1898841976,
      "id": 1501113502,
      "node_id": "PRRC_kwDOABII585ZeSye",
      "diff_hunk": "@@ -145,4 +150,188 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));",
      "path": "src/test/validation_tests.cpp",
      "position": 89,
      "original_position": 89,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "8c18b708b9362ced44095571e35695be399d7272",
      "in_reply_to_id": 1501069738,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-02-23T19:59:39Z",
      "updated_at": "2024-02-23T19:59:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1501113502",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501113502"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 220,
      "original_line": 220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502309643",
      "pull_request_review_id": 1900394221,
      "id": 1502309643,
      "node_id": "PRRC_kwDOABII585Zi20L",
      "diff_hunk": "@@ -3639,6 +3639,83 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    if (block.m_checked_merkle_root) return true;\n+\n+    bool mutated;\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n+\n+    block.m_checked_merkle_root = true;\n+    return true;\n+}\n+\n+static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n+{\n+    bool has_witness_commitment{false};\n+\n+    if (expect_witness_commitment) {\n+        if (block.m_checked_witness_commitment) return true;\n+\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        has_witness_commitment = commitpos != NO_WITNESS_COMMITMENT;\n+        if (has_witness_commitment) {\n+            assert(!block.vtx.empty() && !block.vtx[0]->vin.empty());\n+            const auto& witness_stack{block.vtx[0]->vin[0].scriptWitness.stack};\n+\n+            if (witness_stack.size() != 1 || witness_stack[0].size() != 32) {\n+                return state.Invalid(\n+                    /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+                    /*reject_reason=*/\"bad-witness-nonce-size\",\n+                    /*debug_message=*/strprintf(\"%s : invalid witness reserved value size\", __func__));\n+            }\n+\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.",
      "path": "src/validation.cpp",
      "position": 56,
      "original_position": 53,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "8c18b708b9362ced44095571e35695be399d7272",
      "in_reply_to_id": 1501074722,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> future work nit: the mutated arg is never non-nullptr and has no test coverage it seems.\r\n\r\n\r\nI presume the reason is that it can't be mutated and all callers are expected to pass `nullptr`? Seems fine to remove the arg, but should be fine either way.",
      "created_at": "2024-02-26T09:45:14Z",
      "updated_at": "2024-02-26T09:45:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502309643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502309643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3694,
      "original_line": 3694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502393217",
      "pull_request_review_id": 1900524442,
      "id": 1502393217,
      "node_id": "PRRC_kwDOABII585ZjLOB",
      "diff_hunk": "@@ -3639,6 +3639,59 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != hashMerkleRoot2)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+\n+    return true;\n+}\n+\n+static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n+{\n+    bool fHaveWitness{false};\n+\n+    if (expect_witness_commitment) {\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        fHaveWitness = commitpos != NO_WITNESS_COMMITMENT;\n+        if (fHaveWitness) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n+            }\n+            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n+            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n+            }\n+\n+            return true;",
      "path": "src/validation.cpp",
      "position": 68,
      "original_position": 41,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "6cae77ae78bcd9d651b6eaf174982ffdcbc165cb",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: 6cae77ae78bcd9d651b6eaf174982ffdcbc165cb. Not sure about the early-return in case the bool is set to true, and below the check of the bool. May be better to remove either the early return, or remove the bool (and keep the if check as `if (commitpos != NO_WITNESS_COMMITMENT) {`?",
      "created_at": "2024-02-26T10:40:46Z",
      "updated_at": "2024-02-26T11:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502393217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502393217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3706,
      "original_line": 3706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502418947",
      "pull_request_review_id": 1900524442,
      "id": 1502418947,
      "node_id": "PRRC_kwDOABII585ZjRgD",
      "diff_hunk": "@@ -3642,46 +3642,64 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n {\n     bool mutated;\n-    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-    if (block.hashMerkleRoot != hashMerkleRoot2)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n \n     // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n     // of transactions in a block without affecting the merkle root of a block,\n     // while still invalidating it.\n-    if (mutated)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n \n     return true;\n }\n \n static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n {\n-    bool fHaveWitness{false};\n+    bool has_witness_commitment{false};\n \n     if (expect_witness_commitment) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n-        fHaveWitness = commitpos != NO_WITNESS_COMMITMENT;\n-        if (fHaveWitness) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+        has_witness_commitment = commitpos != NO_WITNESS_COMMITMENT;\n+        if (has_witness_commitment) {\n+            assert(!block.vtx.empty() && !block.vtx[0]->vin.empty());",
      "path": "src/validation.cpp",
      "position": 44,
      "original_position": 43,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "aa08aa523d02ee89f2223381de78b35cf31fa6b6",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "aa08aa523d02ee89f2223381de78b35cf31fa6b6: Maybe document the precondition? Otherwise, this could result in a remote triggered crash, if a caller forgets to check the vin size?",
      "created_at": "2024-02-26T10:57:27Z",
      "updated_at": "2024-02-26T11:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502418947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502418947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3682,
      "original_line": 3682,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502821184",
      "pull_request_review_id": 1901215671,
      "id": 1502821184,
      "node_id": "PRRC_kwDOABII585ZkztA",
      "diff_hunk": "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "follow-up, or separate 1-line commit:\r\n\r\n```diff\r\ndiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp\r\nindex fd2ef47b92..dbe2815991 100644\r\n--- a/src/test/validation_tests.cpp\r\n+++ b/src/test/validation_tests.cpp\r\n@@ -223,8 +223,8 @@ BOOST_AUTO_TEST_CASE(block_malleation)\r\n         block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\r\n         BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\r\n         HashWriter hasher;\r\n-        hasher.write({block.vtx[0]->GetHash().data(), 32});\r\n-        hasher.write({block.vtx[1]->GetHash().data(), 32});\r\n+        hasher.write(block.vtx[0]->GetHash());\r\n+        hasher.write(block.vtx[1]->GetHash());\r\n         block.hashMerkleRoot = hasher.GetHash();\r\n         BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\r\n \r\ndiff --git a/src/util/transaction_identifier.h b/src/util/transaction_identifier.h\r\nindex 89e10dee01..d4a0ede25a 100644\r\n--- a/src/util/transaction_identifier.h\r\n+++ b/src/util/transaction_identifier.h\r\n@@ -44,6 +44,7 @@ public:\r\n     constexpr void SetNull() { m_wrapped.SetNull(); }\r\n     std::string GetHex() const { return m_wrapped.GetHex(); }\r\n     std::string ToString() const { return m_wrapped.ToString(); }\r\n+    static constexpr auto size() { return decltype(m_wrapped)::size(); }\r\n     constexpr const std::byte* data() const { return reinterpret_cast<const std::byte*>(m_wrapped.data()); }\r\n     constexpr const std::byte* begin() const { return reinterpret_cast<const std::byte*>(m_wrapped.begin()); }\r\n     constexpr const std::byte* end() const { return reinterpret_cast<const std::byte*>(m_wrapped.end()); }\r\n",
      "created_at": "2024-02-26T15:37:27Z",
      "updated_at": "2024-02-26T16:30:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502821184",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502821184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502829764",
      "pull_request_review_id": 1901215671,
      "id": 1502829764,
      "node_id": "PRRC_kwDOABII585Zk1zE",
      "diff_hunk": "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Blocks with 64-byte coinbase transactions are not considered mutated\n+        block.vtx.clear();\n+        {\n+            CMutableTransaction mtx;\n+            mtx.vin.resize(1);\n+            mtx.vout.resize(1);\n+            mtx.vout[0].scriptPubKey.resize(4);\n+            block.vtx.push_back(MakeTransactionRef(mtx));\n+            block.hashMerkleRoot = block.vtx.back()->GetHash();\n+            assert(block.vtx.back()->IsCoinBase());\n+            assert(GetSerializeSize(TX_NO_WITNESS(block.vtx.back())) == 64);\n+        }\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+    }\n+\n+    {\n+        // Test merkle root malleation\n+\n+        // Pseudo code to mine transactions tx{1,2,3}:\n+        //\n+        // ```\n+        // loop {\n+        //   tx1 = random_tx()\n+        //   tx2 = random_tx()\n+        //   tx3 = deserialize_tx(txid(tx1) || txid(tx2));\n+        //   if serialized_size_without_witness(tx3) == 64 {\n+        //     print(hex(tx3))\n+        //     break\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // The `random_tx` function used to mine the txs below simply created\n+        // empty transactions with a random version field.\n+        CMutableTransaction tx1;\n+        BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx2;\n+        BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx3;\n+        BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        {\n+            // Verify that doubla_sha256(txid1||txid2) == txid3\n+            HashWriter hasher;\n+            hasher.write({tx1.GetHash().data(), 32});\n+            hasher.write({tx2.GetHash().data(), 32});",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "same",
      "created_at": "2024-02-26T15:42:59Z",
      "updated_at": "2024-02-26T16:30:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502829764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502829764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 277,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502830830",
      "pull_request_review_id": 1901215671,
      "id": 1502830830,
      "node_id": "PRRC_kwDOABII585Zk2Du",
      "diff_hunk": "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Blocks with 64-byte coinbase transactions are not considered mutated\n+        block.vtx.clear();\n+        {\n+            CMutableTransaction mtx;\n+            mtx.vin.resize(1);\n+            mtx.vout.resize(1);\n+            mtx.vout[0].scriptPubKey.resize(4);\n+            block.vtx.push_back(MakeTransactionRef(mtx));\n+            block.hashMerkleRoot = block.vtx.back()->GetHash();\n+            assert(block.vtx.back()->IsCoinBase());\n+            assert(GetSerializeSize(TX_NO_WITNESS(block.vtx.back())) == 64);\n+        }\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+    }\n+\n+    {\n+        // Test merkle root malleation\n+\n+        // Pseudo code to mine transactions tx{1,2,3}:\n+        //\n+        // ```\n+        // loop {\n+        //   tx1 = random_tx()\n+        //   tx2 = random_tx()\n+        //   tx3 = deserialize_tx(txid(tx1) || txid(tx2));\n+        //   if serialized_size_without_witness(tx3) == 64 {\n+        //     print(hex(tx3))\n+        //     break\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // The `random_tx` function used to mine the txs below simply created\n+        // empty transactions with a random version field.\n+        CMutableTransaction tx1;\n+        BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx2;\n+        BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx3;\n+        BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        {\n+            // Verify that doubla_sha256(txid1||txid2) == txid3\n+            HashWriter hasher;\n+            hasher.write({tx1.GetHash().data(), 32});\n+            hasher.write({tx2.GetHash().data(), 32});\n+            assert(hasher.GetHash() == tx3.GetHash());\n+            // Verify that tx3 is 64 bytes in size (with out witness).",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `s/with out/without/g`",
      "created_at": "2024-02-26T15:43:42Z",
      "updated_at": "2024-02-26T16:30:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502830830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502830830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502948694",
      "pull_request_review_id": 1901215671,
      "id": 1502948694,
      "node_id": "PRRC_kwDOABII585ZlS1W",
      "diff_hunk": "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+",
      "path": "src/test/validation_tests.cpp",
      "position": 101,
      "original_position": 83,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is the test covering is_mutated for duplicate tree nodes? I think not. Suggestion:\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp\r\nindex dbe2815991..8ad32eb195 100644\r\n--- a/src/test/validation_tests.cpp\r\n+++ b/src/test/validation_tests.cpp\r\n@@ -228,6 +228,17 @@ BOOST_AUTO_TEST_CASE(block_malleation)\r\n         block.hashMerkleRoot = hasher.GetHash();\r\n         BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\r\n \r\n+        // Block with two transactions is mutated if any node is duplicate.\r\n+        {\r\n+            block.vtx[1] = block.vtx[0];\r\n+            BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\r\n+            HashWriter hasher;\r\n+            hasher.write(block.vtx[0]->GetHash());\r\n+            hasher.write(block.vtx[1]->GetHash());\r\n+            block.hashMerkleRoot = hasher.GetHash();\r\n+            BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\r\n+        }\r\n+\r\n         // Blocks with 64-byte coinbase transactions are not considered mutated\r\n         block.vtx.clear();\r\n         {\r\n",
      "created_at": "2024-02-26T16:28:19Z",
      "updated_at": "2024-02-26T16:30:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502948694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502948694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 232,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503305240",
      "pull_request_review_id": 1902021477,
      "id": 1503305240,
      "node_id": "PRRC_kwDOABII585Zmp4Y",
      "diff_hunk": "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Blocks with 64-byte coinbase transactions are not considered mutated\n+        block.vtx.clear();\n+        {\n+            CMutableTransaction mtx;\n+            mtx.vin.resize(1);\n+            mtx.vout.resize(1);\n+            mtx.vout[0].scriptPubKey.resize(4);\n+            block.vtx.push_back(MakeTransactionRef(mtx));\n+            block.hashMerkleRoot = block.vtx.back()->GetHash();\n+            assert(block.vtx.back()->IsCoinBase());\n+            assert(GetSerializeSize(TX_NO_WITNESS(block.vtx.back())) == 64);\n+        }\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+    }\n+\n+    {\n+        // Test merkle root malleation\n+\n+        // Pseudo code to mine transactions tx{1,2,3}:\n+        //\n+        // ```\n+        // loop {\n+        //   tx1 = random_tx()\n+        //   tx2 = random_tx()\n+        //   tx3 = deserialize_tx(txid(tx1) || txid(tx2));\n+        //   if serialized_size_without_witness(tx3) == 64 {\n+        //     print(hex(tx3))\n+        //     break\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // The `random_tx` function used to mine the txs below simply created\n+        // empty transactions with a random version field.\n+        CMutableTransaction tx1;\n+        BOOST_CHECK(DecodeHexTx(tx1, \"ff204bd0000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx2;\n+        BOOST_CHECK(DecodeHexTx(tx2, \"8ae53c92000000000000\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        CMutableTransaction tx3;\n+        BOOST_CHECK(DecodeHexTx(tx3, \"cdaf22d00002c6a7f848f8ae4d30054e61dcf3303d6fe01d282163341f06feecc10032b3160fcab87bdfe3ecfb769206ef2d991b92f8a268e423a6ef4d485f06\", /*try_no_witness=*/true, /*try_witness=*/false));\n+        {\n+            // Verify that doubla_sha256(txid1||txid2) == txid3",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "doubla",
      "created_at": "2024-02-26T21:12:07Z",
      "updated_at": "2024-02-26T22:07:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503305240",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503305240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503310220",
      "pull_request_review_id": 1902021477,
      "id": 1503310220,
      "node_id": "PRRC_kwDOABII585ZmrGM",
      "diff_hunk": "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Emtpy",
      "created_at": "2024-02-26T21:16:23Z",
      "updated_at": "2024-02-26T22:07:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503310220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503310220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503345647",
      "pull_request_review_id": 1902021477,
      "id": 1503345647,
      "node_id": "PRRC_kwDOABII585Zmzvv",
      "diff_hunk": "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "path": "src/validation.cpp",
      "position": 67,
      "original_position": 30,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There is another `return true;` case at the bottom of the function where you would need to set this as well.",
      "created_at": "2024-02-26T21:49:31Z",
      "updated_at": "2024-02-26T22:07:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503345647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503345647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3705,
      "original_line": 3705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503769394",
      "pull_request_review_id": 1902737282,
      "id": 1503769394,
      "node_id": "PRRC_kwDOABII585ZobMy",
      "diff_hunk": "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "path": "src/validation.cpp",
      "position": 67,
      "original_position": 30,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "in_reply_to_id": 1503345647,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> There is another return true; case at the bottom of the function where you would need to set this as well.\r\n\r\nNo. This would allow a race where an block, not attached to the chain, is submitted, thus leading to the segwit deployment being assumed disabled, due to the previous block being nullptr. However, cs_main isn't taken for the whole time, so the previous block could be supplied in the meantime, leading the code to incorrectly think this check was already done, when it was not.",
      "created_at": "2024-02-27T07:42:06Z",
      "updated_at": "2024-02-27T07:42:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503769394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503769394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3705,
      "original_line": 3705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504223283",
      "pull_request_review_id": 1903490465,
      "id": 1504223283,
      "node_id": "PRRC_kwDOABII585ZqKAz",
      "diff_hunk": "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "path": "src/validation.cpp",
      "position": 67,
      "original_position": 30,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "in_reply_to_id": 1503345647,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This case should be documented then.",
      "created_at": "2024-02-27T13:20:09Z",
      "updated_at": "2024-02-27T13:20:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504223283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504223283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3705,
      "original_line": 3705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504324995",
      "pull_request_review_id": 1903663601,
      "id": 1504324995,
      "node_id": "PRRC_kwDOABII585Zqi2D",
      "diff_hunk": "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "in_reply_to_id": 1502821184,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added an extra commit and patched the tests",
      "created_at": "2024-02-27T14:25:27Z",
      "updated_at": "2024-02-27T14:25:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504324995",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504324995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504325373",
      "pull_request_review_id": 1903664247,
      "id": 1504325373,
      "node_id": "PRRC_kwDOABII585Zqi79",
      "diff_hunk": "@@ -150,4 +150,204 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Emtpy block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write({block.vtx[0]->GetHash().data(), 32});\n+        hasher.write({block.vtx[1]->GetHash().data(), 32});\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+",
      "path": "src/test/validation_tests.cpp",
      "position": 101,
      "original_position": 83,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "79e62b01d13b300f629574f1349c3b63a36f2b74",
      "in_reply_to_id": 1502948694,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added",
      "created_at": "2024-02-27T14:25:43Z",
      "updated_at": "2024-02-27T14:25:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504325373",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504325373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 232,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504330700",
      "pull_request_review_id": 1903673032,
      "id": 1504330700,
      "node_id": "PRRC_kwDOABII585ZqkPM",
      "diff_hunk": "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "path": "src/validation.cpp",
      "position": 67,
      "original_position": 30,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "in_reply_to_id": 1503345647,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I wasn't even thinking of any race but what marco says seems plausible. The cache is only supposed to cache the potentially expensive witness commitment check, which is why I limited its scope to the `expect_witness_commitment` branch.\r\n\r\nI think the name is documentation enough but feel free to suggest a comment I can paste in.",
      "created_at": "2024-02-27T14:29:04Z",
      "updated_at": "2024-02-27T14:29:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504330700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504330700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3705,
      "original_line": 3705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331037",
      "pull_request_review_id": 1903673626,
      "id": 1504331037,
      "node_id": "PRRC_kwDOABII585ZqkUd",
      "diff_hunk": "@@ -3639,6 +3639,59 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n     return true;\n }\n \n+static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n+{\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != hashMerkleRoot2)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    if (mutated)\n+        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+\n+    return true;\n+}\n+\n+static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n+{\n+    bool fHaveWitness{false};\n+\n+    if (expect_witness_commitment) {\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        fHaveWitness = commitpos != NO_WITNESS_COMMITMENT;\n+        if (fHaveWitness) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n+            }\n+            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n+            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n+            }\n+\n+            return true;",
      "path": "src/validation.cpp",
      "position": 68,
      "original_position": 41,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "6cae77ae78bcd9d651b6eaf174982ffdcbc165cb",
      "in_reply_to_id": 1502393217,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed the bool",
      "created_at": "2024-02-27T14:29:17Z",
      "updated_at": "2024-02-27T14:29:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504331037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3706,
      "original_line": 3706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331273",
      "pull_request_review_id": 1903674024,
      "id": 1504331273,
      "node_id": "PRRC_kwDOABII585ZqkYJ",
      "diff_hunk": "@@ -3642,46 +3642,64 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n {\n     bool mutated;\n-    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-    if (block.hashMerkleRoot != hashMerkleRoot2)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n \n     // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n     // of transactions in a block without affecting the merkle root of a block,\n     // while still invalidating it.\n-    if (mutated)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n \n     return true;\n }\n \n static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_commitment, BlockValidationState& state)\n {\n-    bool fHaveWitness{false};\n+    bool has_witness_commitment{false};\n \n     if (expect_witness_commitment) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n-        fHaveWitness = commitpos != NO_WITNESS_COMMITMENT;\n-        if (fHaveWitness) {\n-            bool malleated = false;\n-            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+        has_witness_commitment = commitpos != NO_WITNESS_COMMITMENT;\n+        if (has_witness_commitment) {\n+            assert(!block.vtx.empty() && !block.vtx[0]->vin.empty());",
      "path": "src/validation.cpp",
      "position": 44,
      "original_position": 43,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "aa08aa523d02ee89f2223381de78b35cf31fa6b6",
      "in_reply_to_id": 1502418947,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment",
      "created_at": "2024-02-27T14:29:27Z",
      "updated_at": "2024-02-27T14:29:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504331273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504331273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3682,
      "original_line": 3682,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504361762",
      "pull_request_review_id": 1903723993,
      "id": 1504361762,
      "node_id": "PRRC_kwDOABII585Zqr0i",
      "diff_hunk": "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "path": "src/validation.cpp",
      "position": 67,
      "original_position": 30,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "in_reply_to_id": 1503345647,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If that race didn't exist I would have argued that, if we are caching, why not cache everything even if the unexpected-witness case is cheaper. But it's ok for now, I will think about it some more and might suggest a comment in a follow-up.",
      "created_at": "2024-02-27T14:47:16Z",
      "updated_at": "2024-02-27T15:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1504361762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504361762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3705,
      "original_line": 3705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506490281",
      "pull_request_review_id": 1907126112,
      "id": 1506490281,
      "node_id": "PRRC_kwDOABII585Zyzep",
      "diff_hunk": "@@ -150,4 +150,215 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Empty block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write(block.vtx[0]->GetHash());\n+        hasher.write(block.vtx[1]->GetHash());\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if any node is duplicate.\n+        {\n+            block.vtx[1] = block.vtx[0];\n+            BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));",
      "path": "src/test/validation_tests.cpp",
      "position": 87,
      "original_position": 87,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't get the point of this first check. `block.hashMerkleRoot` still contains the previous value (where tx0 and tx1 were different), so this is failing because the root computed by `IsBlockMutated` and the value of `block.hashMerkleRoot` differ, which is unrelated.",
      "created_at": "2024-02-28T19:40:35Z",
      "updated_at": "2024-02-29T14:42:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1506490281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506490281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 236,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507190398",
      "pull_request_review_id": 1908249776,
      "id": 1507190398,
      "node_id": "PRRC_kwDOABII585Z1eZ-",
      "diff_hunk": "@@ -150,4 +150,215 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\n     BOOST_CHECK_EQUAL(out110_2.nChainTx, 111U);\n }\n \n+BOOST_AUTO_TEST_CASE(block_malleation)\n+{\n+    // Test utilities that calls `IsBlockMutated` and then clears the validity\n+    // cache flags on `CBlock`.\n+    auto is_mutated = [](CBlock& block, bool check_witness_root) {\n+        bool mutated{IsBlockMutated(block, check_witness_root)};\n+        block.fChecked = false;\n+        block.m_checked_witness_commitment = false;\n+        block.m_checked_merkle_root = false;\n+        return mutated;\n+    };\n+    auto is_not_mutated = [&is_mutated](CBlock& block, bool check_witness_root) {\n+        return !is_mutated(block, check_witness_root);\n+    };\n+\n+    // Test utilities to create coinbase transactions and insert witness\n+    // commitments.\n+    //\n+    // Note: this will not include the witness stack by default to avoid\n+    // triggering the \"no witnesses allowed for blocks that don't commit to\n+    // witnesses\" rule when testing other malleation vectors.\n+    auto create_coinbase_tx = [](bool include_witness = false) {\n+        CMutableTransaction coinbase;\n+        coinbase.vin.resize(1);\n+        if (include_witness) {\n+            coinbase.vin[0].scriptWitness.stack.resize(1);\n+            coinbase.vin[0].scriptWitness.stack[0] = std::vector<unsigned char>(32, 0x00);\n+        }\n+\n+        coinbase.vout.resize(1);\n+        coinbase.vout[0].scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        coinbase.vout[0].scriptPubKey[0] = OP_RETURN;\n+        coinbase.vout[0].scriptPubKey[1] = 0x24;\n+        coinbase.vout[0].scriptPubKey[2] = 0xaa;\n+        coinbase.vout[0].scriptPubKey[3] = 0x21;\n+        coinbase.vout[0].scriptPubKey[4] = 0xa9;\n+        coinbase.vout[0].scriptPubKey[5] = 0xed;\n+\n+        auto tx = MakeTransactionRef(coinbase);\n+        assert(tx->IsCoinBase());\n+        return tx;\n+    };\n+    auto insert_witness_commitment = [](CBlock& block, uint256 commitment) {\n+        assert(!block.vtx.empty() && block.vtx[0]->IsCoinBase() && !block.vtx[0]->vout.empty());\n+\n+        CMutableTransaction mtx{*block.vtx[0]};\n+        CHash256().Write(commitment).Write(std::vector<unsigned char>(32, 0x00)).Finalize(commitment);\n+        memcpy(&mtx.vout[0].scriptPubKey[6], commitment.begin(), 32);\n+        block.vtx[0] = MakeTransactionRef(mtx);\n+    };\n+\n+    {\n+        CBlock block;\n+\n+        // Empty block is expected to have merkle root of 0x0.\n+        BOOST_CHECK(block.vtx.empty());\n+        block.hashMerkleRoot = uint256{1};\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = uint256{};\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with a single coinbase tx is mutated if the merkle root is not\n+        // equal to the coinbase tx's hash.\n+        block.vtx.push_back(create_coinbase_tx());\n+        BOOST_CHECK(block.vtx[0]->GetHash() != block.hashMerkleRoot);\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        block.hashMerkleRoot = block.vtx[0]->GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if the merkle root does not\n+        // match the double sha256 of the concatenation of the two transaction\n+        // hashes.\n+        block.vtx.push_back(MakeTransactionRef(CMutableTransaction{}));\n+        BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));\n+        HashWriter hasher;\n+        hasher.write(block.vtx[0]->GetHash());\n+        hasher.write(block.vtx[1]->GetHash());\n+        block.hashMerkleRoot = hasher.GetHash();\n+        BOOST_CHECK(is_not_mutated(block, /*check_witness_root=*/false));\n+\n+        // Block with two transactions is mutated if any node is duplicate.\n+        {\n+            block.vtx[1] = block.vtx[0];\n+            BOOST_CHECK(is_mutated(block, /*check_witness_root=*/false));",
      "path": "src/test/validation_tests.cpp",
      "position": 87,
      "original_position": 87,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "in_reply_to_id": 1506490281,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Correct. That's my typo and this line can be removed. See https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1502948694",
      "created_at": "2024-02-29T08:26:52Z",
      "updated_at": "2024-02-29T08:26:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1507190398",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507190398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 236,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507419793",
      "pull_request_review_id": 1908615751,
      "id": 1507419793,
      "node_id": "PRRC_kwDOABII585Z2WaR",
      "diff_hunk": "@@ -3642,35 +3642,59 @@ static bool CheckBlockHeader(const CBlockHeader& block, BlockValidationState& st\n static bool CheckMerkleRoot(const CBlock& block, BlockValidationState& state)\n {\n     bool mutated;\n-    uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-    if (block.hashMerkleRoot != hashMerkleRoot2)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+    uint256 merkle_root = BlockMerkleRoot(block, &mutated);\n+    if (block.hashMerkleRoot != merkle_root) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txnmrklroot\",\n+            /*debug_message=*/\"hashMerkleRoot mismatch\");\n+    }\n \n     // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n     // of transactions in a block without affecting the merkle root of a block,\n     // while still invalidating it.\n-    if (mutated)\n-        return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-txns-duplicate\", \"duplicate transaction\");\n+    if (mutated) {\n+        return state.Invalid(\n+            /*result=*/BlockValidationResult::BLOCK_MUTATED,\n+            /*reject_reason=*/\"bad-txns-duplicate\",\n+            /*debug_message=*/\"duplicate transaction\");\n+    }\n \n     return true;\n }\n \n+/** CheckWitnessMalleation performs checks for block malleation with regard to\n+ * its witnesses.\n+ *\n+ * Note: If the witness commitment is expected (i.e. `expect_witness_commitment\n+ * = true`), then the block is required to have at least one transaction and the\n+ * first transaction needs to have at least one input. */",
      "path": "src/validation.cpp",
      "position": 36,
      "original_position": 35,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "e7669e1343aec4298fd30d539847963e6fa5619c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e7669e1343aec4298fd30d539847963e6fa5619c: This note seems incorrect. I think it should say:\r\n\r\n```\r\n If the witness commitment is present (i.e. `expect_witness_commitment\r\n = true` and `commitpos != NO_WITNESS_COMMITMENT`)\r\n```",
      "created_at": "2024-02-29T11:22:16Z",
      "updated_at": "2024-02-29T12:35:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1507419793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507419793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3674,
      "original_line": 3671,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507451209",
      "pull_request_review_id": 1908615751,
      "id": 1507451209,
      "node_id": "PRRC_kwDOABII585Z2eFJ",
      "diff_hunk": "@@ -3808,6 +3808,36 @@ bool HasValidProofOfWork(const std::vector<CBlockHeader>& headers, const Consens\n             [&](const auto& header) { return CheckProofOfWork(header.GetHash(), header.nBits, consensusParams);});\n }\n \n+bool IsBlockMutated(const CBlock& block, bool check_witness_root)\n+{\n+    BlockValidationState state;\n+    if (!CheckMerkleRoot(block, state)) {\n+        LogDebug(BCLog::VALIDATION, \"%s: %s\\n\", __func__, state.ToString());\n+        return true;\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {",
      "path": "src/validation.cpp",
      "position": 120,
      "original_position": 12,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "30bdbcd561342fc9afb69830e8927b0d63f5637f",
      "in_reply_to_id": 1495884531,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I got confused by this returning `false` in 66abce1d98115e41f394bc4f4f52341960ddc839, but the next commit 2d8495e0800f5332748cd50eaad801ff77671bba goes and implements an actual check.",
      "created_at": "2024-02-29T11:49:26Z",
      "updated_at": "2024-02-29T12:35:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1507451209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507451209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3841,
      "original_line": 3841,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507479174",
      "pull_request_review_id": 1908615751,
      "id": 1507479174,
      "node_id": "PRRC_kwDOABII585Z2k6G",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,",
      "path": "src/net_processing.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d028bb12abb041870413a3437865547cff2df653",
      "in_reply_to_id": 1484551682,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "49257c0304828a185c273fcb99742c54bbef0c8e I had the same question, specifically why we're not doing this after the `CalculateHeadersWork()` check below, and right before `ProcessBlock`.\r\n\r\nA code comment would be useful here.",
      "created_at": "2024-02-29T12:12:56Z",
      "updated_at": "2024-02-29T12:35:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1507479174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507479174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4724,
      "original_line": 4724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507499192",
      "pull_request_review_id": 1908615751,
      "id": 1507499192,
      "node_id": "PRRC_kwDOABII585Z2py4",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,\n+                           /*check_witness_root=*/DeploymentActiveAfter(prev_block, m_chainman, Consensus::DEPLOYMENT_SEGWIT))) {",
      "path": "src/net_processing.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "49257c0304828a185c273fcb99742c54bbef0c8e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "49257c0304828a185c273fcb99742c54bbef0c8e: `DeploymentActiveAfter` is going to be `false` for a block that's disconnected from anything we have. Assuming the block has witness data, the \"No witness data is allowed in blocks that don't commit to witness data\" check in `CheckWitnessMalleation` will then get triggered.\r\n\r\nSo IIUC this could reject a valid block, for the wrong reason. Before this change, the `CheckWitnessMalleation()` was called from `ContextualCheckBlock()`, which in turn is guarded by `prev-blk-not-found`.\r\n\r\nI guess you have to repeat the `prev-blk-not-found` (and `bad-prevblk`?) checks here.",
      "created_at": "2024-02-29T12:27:54Z",
      "updated_at": "2024-02-29T12:35:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1507499192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507499192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4725,
      "original_line": 4725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507555772",
      "pull_request_review_id": 1908840329,
      "id": 1507555772,
      "node_id": "PRRC_kwDOABII585Z23m8",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Test that an attacker can't degrade compact block relay by sending unsolicited\n+mutated blocks to clear in-flight blocktxn requests from other honest peers.\n+\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.messages import (\n+    BlockTransactions,\n+    msg_cmpctblock,\n+    msg_block,\n+    msg_blocktxn,\n+    HeaderAndShortIDs,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    add_witness_commitment,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+import copy\n+\n+class MutatedBlocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY)\n+\n+        honest_relayer = self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        attacker = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Create new block with two transactions (coinbase + 1 self-transfer).\n+        # The self-transfer transaction is needed to trigger a compact block\n+        # `getblocktxn` roundtrip.\n+        tx = self.wallet.create_self_transfer()[\"tx\"]\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx])\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Create mutated version of the block by changing the transaction\n+        # version on the self-transfer.\n+        mutated_block = copy.deepcopy(block)\n+        mutated_block.vtx[1].nVersion = 4\n+\n+        # Announce the new block via a compact block through the honest relayer\n+        cmpctblock = HeaderAndShortIDs()\n+        cmpctblock.initialize_from_block(block, use_witness=True)\n+        honest_relayer.send_message(msg_cmpctblock(cmpctblock.to_p2p()))\n+\n+        # Wait for a `getblocktxn` that attempts to fetch the self-transfer\n+        def self_transfer_requested():\n+            if not honest_relayer.last_message.get('getblocktxn'):\n+                return False\n+\n+            get_block_txn = honest_relayer.last_message['getblocktxn']\n+            return get_block_txn.block_txn_request.blockhash == block.sha256 and \\\n+                   get_block_txn.block_txn_request.indexes == [1]\n+        honest_relayer.wait_until(self_transfer_requested, timeout=5)\n+\n+        # Block at height 101 should be the only one in flight from peer 0\n+        peer_info_prior_to_attack = self.nodes[0].getpeerinfo()\n+        assert_equal(peer_info_prior_to_attack[0]['id'], 0)\n+        assert_equal([101], peer_info_prior_to_attack[0][\"inflight\"])\n+\n+        # Attempt to clear the honest relayer's download request by sending the\n+        # mutated block (as the attacker).\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\"bad-txnmrklroot, hashMerkleRoot mismatch\"]):\n+            attacker.send_message(msg_block(mutated_block))\n+        # Attacker should get disconnected for sending a mutated block\n+        attacker.wait_for_disconnect(timeout=5)\n+\n+        # Block at height 101 should *still* be the only block in-flight from\n+        # peer 0\n+        peer_info_after_attack = self.nodes[0].getpeerinfo()\n+        assert_equal(peer_info_after_attack[0]['id'], 0)\n+        assert_equal([101], peer_info_after_attack[0][\"inflight\"])",
      "path": "test/functional/p2p_mutated_blocks.py",
      "position": 86,
      "original_position": 86,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "5bf4f5ba32da4627f152b54d266df9b2aa930457",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "5bf4f5ba32da4627f152b54d266df9b2aa930457: you might need a slight delay here. I noticed several times that it was still inflight after sabotaging net_processing: https://github.com/bitcoin/bitcoin/pull/29412#issuecomment-1971109097\r\n\r\n(I'm a bit surprised by that, given the `wait_for_disconnect` above)",
      "created_at": "2024-02-29T13:14:14Z",
      "updated_at": "2024-02-29T13:17:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1507555772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507555772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507571031",
      "pull_request_review_id": 1908865538,
      "id": 1507571031,
      "node_id": "PRRC_kwDOABII585Z27VX",
      "diff_hunk": "@@ -3694,6 +3699,7 @@ static bool CheckWitnessMalleation(const CBlock& block, bool expect_witness_comm\n                     /*debug_message=*/strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n \n+            block.m_checked_witness_commitment = true;",
      "path": "src/validation.cpp",
      "position": 67,
      "original_position": 30,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "d10e1fd4d850a3f7e5ed3ef4a4ca1cdc41f4f349",
      "in_reply_to_id": 1503345647,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree that we should document why the cache is only used inside `if (expect_witness_commitment)`.",
      "created_at": "2024-02-29T13:25:51Z",
      "updated_at": "2024-02-29T13:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1507571031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507571031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3705,
      "original_line": 3705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507577569",
      "pull_request_review_id": 1908876847,
      "id": 1507577569,
      "node_id": "PRRC_kwDOABII585Z287h",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,\n+                           /*check_witness_root=*/DeploymentActiveAfter(prev_block, m_chainman, Consensus::DEPLOYMENT_SEGWIT))) {",
      "path": "src/net_processing.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "49257c0304828a185c273fcb99742c54bbef0c8e",
      "in_reply_to_id": 1507499192,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Related, although caching is not an issue in the scenario I described, because we don't store the block if it's rejected at this point: https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1503769394",
      "created_at": "2024-02-29T13:29:24Z",
      "updated_at": "2024-02-29T13:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1507577569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1507577569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4725,
      "original_line": 4725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508127116",
      "pull_request_review_id": 1909766986,
      "id": 1508127116,
      "node_id": "PRRC_kwDOABII585Z5DGM",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,\n+                           /*check_witness_root=*/DeploymentActiveAfter(prev_block, m_chainman, Consensus::DEPLOYMENT_SEGWIT))) {",
      "path": "src/net_processing.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "49257c0304828a185c273fcb99742c54bbef0c8e",
      "in_reply_to_id": 1507499192,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> So IIUC this could reject a valid block, for the wrong reason.\r\n\r\nI assume you mean invalid?\r\n\r\nThis behavior change would manifest itself if someone is sending a full unconnected(or built on invalid) segwit block unilaterally. And instead of adding 10 DoS points for missing, we outright ban for \"mutation\"?",
      "created_at": "2024-02-29T20:00:49Z",
      "updated_at": "2024-02-29T20:01:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1508127116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508127116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4725,
      "original_line": 4725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508726205",
      "pull_request_review_id": 1910699832,
      "id": 1508726205,
      "node_id": "PRRC_kwDOABII585Z7VW9",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,\n+                           /*check_witness_root=*/DeploymentActiveAfter(prev_block, m_chainman, Consensus::DEPLOYMENT_SEGWIT))) {",
      "path": "src/net_processing.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "49257c0304828a185c273fcb99742c54bbef0c8e",
      "in_reply_to_id": 1507499192,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I guess it would have been useful to enumerate the behavior changes in the commit, such as DoS points.",
      "created_at": "2024-03-01T09:35:36Z",
      "updated_at": "2024-03-01T09:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1508726205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508726205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4725,
      "original_line": 4725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508823874",
      "pull_request_review_id": 1910860608,
      "id": 1508823874,
      "node_id": "PRRC_kwDOABII585Z7tNC",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,\n+                           /*check_witness_root=*/DeploymentActiveAfter(prev_block, m_chainman, Consensus::DEPLOYMENT_SEGWIT))) {",
      "path": "src/net_processing.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "49257c0304828a185c273fcb99742c54bbef0c8e",
      "in_reply_to_id": 1507499192,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No, I meant valid but disconnected. Although not normal behavior, you might have the chain up to block N, and some peer could send N + 2 without first sending (headers for) N + 1. Such a block should be rejected with `prev-blk-not-found`, but with this patch it'll be rejected for being \"mutated\". ",
      "created_at": "2024-03-01T10:52:17Z",
      "updated_at": "2024-03-01T10:53:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1508823874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508823874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4725,
      "original_line": 4725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508881422",
      "pull_request_review_id": 1909786674,
      "id": 1508881422,
      "node_id": "PRRC_kwDOABII585Z77QO",
      "diff_hunk": "@@ -4719,6 +4719,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom.GetId());\n \n+        const CBlockIndex* prev_block{WITH_LOCK(m_chainman.GetMutex(), return m_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock))};\n+\n+        if (IsBlockMutated(/*block=*/*pblock,\n+                           /*check_witness_root=*/DeploymentActiveAfter(prev_block, m_chainman, Consensus::DEPLOYMENT_SEGWIT))) {",
      "path": "src/net_processing.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "d8087adc7ebd4ea05dd3843e5a92e8115fd7bbcc",
      "original_commit_id": "49257c0304828a185c273fcb99742c54bbef0c8e",
      "in_reply_to_id": 1507499192,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I mean, our node calls that invalid :)\r\n\r\nopened https://github.com/bitcoin/bitcoin/pull/29524 as what I think a clean fix is, with test coverage",
      "created_at": "2024-03-01T11:51:29Z",
      "updated_at": "2024-03-01T11:51:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29412#discussion_r1508881422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508881422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29412"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4725,
      "original_line": 4725,
      "side": "RIGHT"
    }
  ]
}