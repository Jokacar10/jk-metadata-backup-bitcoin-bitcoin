{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569",
    "id": 1999181445,
    "node_id": "PR_kwDOABII5853KRaF",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30569",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30569.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30569.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/18d65d27726bf9fc7629b8e794047a10c9cf6156",
    "number": 30569,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "node: reduce unsafe uint256S usage",
    "user": {
      "login": "stickies-v",
      "id": 69010457,
      "node_id": "MDQ6VXNlcjY5MDEwNDU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stickies-v",
      "html_url": "https://github.com/stickies-v",
      "followers_url": "https://api.github.com/users/stickies-v/followers",
      "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
      "organizations_url": "https://api.github.com/users/stickies-v/orgs",
      "repos_url": "https://api.github.com/users/stickies-v/repos",
      "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stickies-v/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Since fad2991ba073de0bd1f12e42bf0fbaca4a265508, `uint256S` has been [deprecated](https://github.com/bitcoin/bitcoin/pull/30482/commits/fad2991ba073de0bd1f12e42bf0fbaca4a265508#diff-800776e2dda39116e889839f69409571a5d397de048a141da7e4003bc099e3e2R138) because it is less robust than the `base_blob::FromHex()` introduced in [the same PR](https://github.com/bitcoin/bitcoin/pull/30482). Specifically, it tries to recover from length-mismatches, recover from untrimmed whitespace, 0x-prefix and garbage at the end, instead of simply requiring exactly 64 hex-only characters. _(see also #30532)_\r\n\r\nThis PR carves out the few `uint256S` callsites that may potentially prove a bit more controversial to change because they deal with user input and backwards incompatible behaviour change.\r\n\r\nThe main behaviour change introduced in this PR is:\r\n- `-minimumchainwork` will raise an error when input is longer than 64 hex digits\r\n- `-assumevalid` will raise an error when input contains invalid hex characters, or when it is longer than 64 hex digits\r\n- test: the optional RANDOM_CTX_SEED env var will now cause tests to abort when it contains invalid hex characters, or when it is longer than 64 hex digits\r\n\r\nAfter this PR, the remaining work to remove `uint256S` completely is almost entirely mechanical and/or test related. I will open that PR once #30560 is merged because it builds on that.",
    "labels": [],
    "created_at": "2024-08-01T18:59:05Z",
    "updated_at": "2025-08-29T11:33:57Z",
    "closed_at": "2024-08-27T20:48:03Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-08-27T20:48:03Z",
    "merged_by": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "2c7a4231db35060fa1ab66d29e8139f04edc85a4",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "stickies-v:2024-08/hex-arg-parse",
      "ref": "2024-08/hex-arg-parse",
      "sha": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 431644530,
        "node_id": "R_kgDOGbpfcg",
        "name": "bitcoin",
        "full_name": "stickies-v/bitcoin",
        "owner": {
          "login": "stickies-v",
          "id": 69010457,
          "node_id": "MDQ6VXNlcjY5MDEwNDU3",
          "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stickies-v",
          "html_url": "https://github.com/stickies-v",
          "followers_url": "https://api.github.com/users/stickies-v/followers",
          "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
          "organizations_url": "https://api.github.com/users/stickies-v/orgs",
          "repos_url": "https://api.github.com/users/stickies-v/repos",
          "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stickies-v/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/stickies-v/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/stickies-v/bitcoin",
        "archive_url": "https://api.github.com/repos/stickies-v/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stickies-v/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stickies-v/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stickies-v/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stickies-v/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stickies-v/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stickies-v/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stickies-v/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stickies-v/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stickies-v/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/stickies-v/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/stickies-v/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/stickies-v/bitcoin/events",
        "forks_url": "https://api.github.com/repos/stickies-v/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/stickies-v/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stickies-v/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stickies-v/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stickies-v/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/stickies-v/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stickies-v/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stickies-v/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stickies-v/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stickies-v/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stickies-v/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/stickies-v/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/stickies-v/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stickies-v/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stickies-v/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stickies-v/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:stickies-v/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/stickies-v/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/stickies-v/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stickies-v/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/stickies-v/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/stickies-v/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/stickies-v/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/stickies-v/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stickies-v/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/stickies-v/bitcoin/hooks",
        "svn_url": "https://github.com/stickies-v/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 281635,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-26T14:52:56Z",
        "created_at": "2021-11-24T22:26:41Z",
        "updated_at": "2024-06-19T14:39:47Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c81c6bf65b34eb91c98768e6b4f46e450ccfd779",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37677,
        "stargazers_count": 85243,
        "watchers_count": 85243,
        "size": 291764,
        "default_branch": "master",
        "open_issues_count": 758,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-28T23:10:55Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-08-29T11:07:15Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 139,
    "deletions": 52,
    "changed_files": 11,
    "commits": 6,
    "review_comments": 156,
    "comments": 16
  },
  "events": [
    {
      "event": "commented",
      "id": 2263761475,
      "node_id": "IC_kwDOABII586G7kJD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2263761475",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T18:59:09Z",
      "updated_at": "2024-08-27T20:34:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30569).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [hodlinator](https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2307070733), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2257343762), [l0rinc](https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2307287794), [achow101](https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2313472718) |\n| Stale ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2277446519) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30618](https://github.com/bitcoin/bitcoin/pull/30618) (test: TrySanitizeHexNumber FUZZ and unit testing coverage by l0rinc)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2263761475",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "reviewed",
      "id": 2213720639,
      "node_id": "PRR_kwDOABII586D8rI_",
      "url": null,
      "actor": null,
      "commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-01T19:31:24Z",
      "author_association": "MEMBER",
      "body": "Not sure about the breaking changes. `-noassumevalid` seems common https://github.com/search?q=noassumevalid&type=code",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2213720639",
      "submitted_at": "2024-08-01T19:31:24Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "labeled",
      "id": 13731528261,
      "node_id": "LE_lADOABII586RoByHzwAAAAMydn5F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13731528261",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T20:07:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13744302692,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAMzOWpk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13744302692",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/b38a259d1e2749876d4e3a15f218b4f257049320",
      "created_at": "2024-08-02T16:35:07Z"
    },
    {
      "event": "commented",
      "id": 2265777270,
      "node_id": "IC_kwDOABII586HDQR2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2265777270",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T16:44:44Z",
      "updated_at": "2024-08-02T16:44:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks a lot for the quick approach feedback, @maflcko. Force pushed to minimize breaking changes by repurposing `IsHexNumber()` to `TrySanitizeHexNumber()` and allowing < 64 characters for `-minimumchainwork` and `RANDOM_CTX_SEED`, and to address the broken `-no<parameter>`  behaviour.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2265777270",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "mentioned",
      "id": 13744416016,
      "node_id": "MEE_lADOABII586RoByHzwAAAAMzOyUQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13744416016",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T16:44:46Z"
    },
    {
      "event": "subscribed",
      "id": 13744416038,
      "node_id": "SE_lADOABII586RoByHzwAAAAMzOyUm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13744416038",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T16:44:46Z"
    },
    {
      "event": "reviewed",
      "id": 2217100926,
      "node_id": "PRR_kwDOABII586EJkZ-",
      "url": null,
      "actor": null,
      "commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-03T19:19:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for clearing these up, please see my observations.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2217100926",
      "submitted_at": "2024-08-03T19:19:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2217172418,
      "node_id": "PRR_kwDOABII586EJ13C",
      "url": null,
      "actor": null,
      "commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-03T19:22:34Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2217172418",
      "submitted_at": "2024-08-03T19:22:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2218701543,
      "node_id": "PRR_kwDOABII586EPrLn",
      "url": null,
      "actor": null,
      "commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-05T11:02:23Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2218701543",
      "submitted_at": "2024-08-05T11:02:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13776620517,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM1Jovl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13776620517",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d7f866f90201b23016c9da17f367e45fd9ec9806",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/d7f866f90201b23016c9da17f367e45fd9ec9806",
      "created_at": "2024-08-06T10:41:52Z"
    },
    {
      "event": "reviewed",
      "id": 2219106988,
      "node_id": "PRR_kwDOABII586EROKs",
      "url": null,
      "actor": null,
      "commit_id": "d7f866f90201b23016c9da17f367e45fd9ec9806",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-06T10:49:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to address review comments, mainly:\r\n- [fixed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702863593) buggy `-noassumedvalid` behaviour and added unit tests to cover this\r\n- [changed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702863957) `result_size` to an int type and changed the disabled (default) state to `-1` instead of `0`\r\n- [changed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1703942199) `RANDOM_CTX_SEED` to now have to be a 64 char hex string",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2219106988",
      "submitted_at": "2024-08-06T10:49:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13778745839,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM1Rvnv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13778745839",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bdb47d258f4b3198a9ced6ff8b2db73e4d7bd668",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/bdb47d258f4b3198a9ced6ff8b2db73e4d7bd668",
      "created_at": "2024-08-06T13:26:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13779635602,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM1VI2S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13779635602",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5368fd41ecac5dda320074382800e8e0c4b09719",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/5368fd41ecac5dda320074382800e8e0c4b09719",
      "created_at": "2024-08-06T14:25:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13780833191,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM1ZtOn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13780833191",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "abf96610212fb5d0897dc3c8cec8c1068944d04c",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/abf96610212fb5d0897dc3c8cec8c1068944d04c",
      "created_at": "2024-08-06T15:50:25Z"
    },
    {
      "event": "unlabeled",
      "id": 13782128055,
      "node_id": "UNLE_lADOABII586RoByHzwAAAAM1epW3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13782128055",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T17:50:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2223466412,
      "node_id": "PRR_kwDOABII586Eh2es",
      "url": null,
      "actor": null,
      "commit_id": "abf96610212fb5d0897dc3c8cec8c1068944d04c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-07T09:00:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Will continue reviewing a bit later, I only had time for these so far",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2223466412",
      "submitted_at": "2024-08-07T09:00:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2224497224,
      "node_id": "PRR_kwDOABII586ElyJI",
      "url": null,
      "actor": null,
      "commit_id": "abf96610212fb5d0897dc3c8cec8c1068944d04c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-07T12:18:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, please see my remaining suggestions ",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2224497224",
      "submitted_at": "2024-08-07T12:18:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13793103710,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM2Ig9e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13793103710",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "created_at": "2024-08-07T14:05:42Z"
    },
    {
      "event": "reviewed",
      "id": 2224783283,
      "node_id": "PRR_kwDOABII586Em3-z",
      "url": null,
      "actor": null,
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-07T14:54:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review @paplorinc, force pushed to address all outstanding comments. Style-only changes:\r\n- [introduced](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706884207) `final_size` var to avoid typecasting between (un)signed types and some related cleanup\r\n- [removed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706891172) hardcoded `64` value\r\n- [cleaned up](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706897088) the `-noassumevalid` logic a bit",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2224783283",
      "submitted_at": "2024-08-07T14:54:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2225466836,
      "node_id": "PRR_kwDOABII586Epe3U",
      "url": null,
      "actor": null,
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-07T15:00:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK d045fc7ac1729cf29140c43518f20375f2aaa1cc\r\n\r\nNote that I don't know the second order effects of constraining previous public input values, somebody else should assess that part",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2225466836",
      "submitted_at": "2024-08-07T15:00:34Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2225982967,
      "node_id": "PRR_kwDOABII586Erc33",
      "url": null,
      "actor": null,
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-07T21:22:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK d045fc7ac1729cf29140c43518f20375f2aaa1cc\r\n\r\nThanks for chipping away at making hex string handling more robust!\r\n\r\nSome minor disagreements + ignorable nits. The most significant disagreement in this thread: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700718302\r\n\r\nTested:\r\n```bash\r\n$ RANDOM_CTX_SEED=1231231231231231231231231231231231231231231231231231231231312312 src/test/test_bitcoin\r\n$ test/functional/feature_assumevalid.py\r\n```\r\n",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2225982967",
      "submitted_at": "2024-08-07T21:22:06Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2226246193,
      "node_id": "PRR_kwDOABII586EsdIx",
      "url": null,
      "actor": null,
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-07T21:40:16Z",
      "author_association": "MEMBER",
      "body": "left a nit. Feel free to ignore.\r\n\r\nOtherwise this looks good on a first glance.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2226246193",
      "submitted_at": "2024-08-07T21:40:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13804989042,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM212py",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13804989042",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "53d8a6203a37b57d0197c1f7ab6da74b85f004fe",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/53d8a6203a37b57d0197c1f7ab6da74b85f004fe",
      "created_at": "2024-08-08T10:54:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13805024541,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM21_Ud",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13805024541",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/ee63e211e33a142cdda93343281b5d3625275428",
      "created_at": "2024-08-08T10:57:21Z"
    },
    {
      "event": "reviewed",
      "id": 2227455502,
      "node_id": "PRR_kwDOABII586ExEYO",
      "url": null,
      "actor": null,
      "commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-08T11:00:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to address all outstanding review comments, mainly:\r\n- [avoid string re-allocation](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707728879)\r\n- [cleaned up](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707958805) `util/random.cpp` a bit more\r\n- [removed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707734248) unnecessary docstring",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2227455502",
      "submitted_at": "2024-08-08T11:00:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2227696150,
      "node_id": "PRR_kwDOABII586Ex_IW",
      "url": null,
      "actor": null,
      "commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-08T12:18:52Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2227696150",
      "submitted_at": "2024-08-08T12:18:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13807456903,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM2_RKH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13807456903",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/855784d3a0026414159acc42fceeb271f8a28133",
      "created_at": "2024-08-08T13:56:18Z"
    },
    {
      "event": "commented",
      "id": 2275904176,
      "node_id": "IC_kwDOABII586Hp4qw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2275904176",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T13:58:15Z",
      "updated_at": "2024-08-08T13:58:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force pushed to [terminate with `std::abort()`](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709568559) in case of invalid `RANDOM_CTX_SEED` input.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275904176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "commented",
      "id": 2275958345,
      "node_id": "IC_kwDOABII586HqF5J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2275958345",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T14:22:20Z",
      "updated_at": "2024-08-08T14:22:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 855784d3a0026414159acc42fceeb271f8a28133",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275958345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "review_requested",
      "id": 13807845032,
      "node_id": "RRE_lADOABII586RoByHzwAAAAM3Av6o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13807845032",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T14:22:24Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2275970516,
      "node_id": "IC_kwDOABII586HqI3U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2275970516",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T14:26:54Z",
      "updated_at": "2024-08-08T14:26:54Z",
      "author_association": "MEMBER",
      "body": "> This PR carves out the few `uint256S` callsites that may potentially prove a bit more controversial to change because they deal with user input and - potentially - backwards incompatible behaviour change.\r\n> \r\n> After this PR, the remaining work to remove `uint256S` completely is almost entirely mechanical and/or test related. I will open that PR once #30560 is merged because it builds on that.\r\n\r\nI think the description can be clarified that there are two user-facing settings that are now stricter checked.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275970516",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "commented",
      "id": 2275982831,
      "node_id": "IC_kwDOABII586HqL3v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2275982831",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T14:32:07Z",
      "updated_at": "2024-08-08T14:32:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think the description can be clarified that there are two user-facing settings that are now stricter checked.\r\n\r\nThanks, added a section on introduced behaviour change.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275982831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "reviewed",
      "id": 2228661985,
      "node_id": "PRR_kwDOABII586E1q7h",
      "url": null,
      "actor": null,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-08T19:28:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 855784d3a0026414159acc42fceeb271f8a28133\r\n\r\nPassed `make check`.\r\nPassed ``RANDOM_CTX_SEED=1231231231231231231231231231231231231231231231231231231231312312 src/test/test_bitcoin``.\r\nFailed with expected error when removing char or inserting non-hex char into `RANDOM_CTX_SEED` from above.\r\n\r\nThanks @stickies-v for humoring me regarding the error handling in **test/util/random.cpp**!",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2228661985",
      "submitted_at": "2024-08-08T19:28:05Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "commented",
      "id": 2277446519,
      "node_id": "IC_kwDOABII586HvxN3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2277446519",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-09T08:36:19Z",
      "updated_at": "2024-08-09T08:36:19Z",
      "author_association": "MEMBER",
      "body": "ACK 855784d3a0026414159acc42fceeb271f8a28133 🔋\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: ACK 855784d3a0026414159acc42fceeb271f8a28133 🔋\r\ndosCiDfeNxthUmbV00hveQKoOka0fC9nFw0BDCe/HtnnknF+L2/hfD2/aHv9hYT68heKoF0Oc6X5Skx2/ya1Dg==\r\n```\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2277446519",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "commented",
      "id": 2278320928,
      "node_id": "IC_kwDOABII586HzGsg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2278320928",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-09T16:29:06Z",
      "updated_at": "2024-08-09T16:29:06Z",
      "author_association": "MEMBER",
      "body": "> `-assumevalid` will raise an error when input contains invalid hex characters (including `0x` prefix), or when it is not exactly 64 characters long\r\n\r\nWhy not allow `0x` prefixes as `-minimumchainwork` does? It seems plausible to me that someone might have put a `0x` prefixed block hash in their conf file and this change breaks that.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2278320928",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "reviewed",
      "id": 2230780077,
      "node_id": "PRR_kwDOABII586E9wCt",
      "url": null,
      "actor": null,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-09T19:02:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review 855784d3a0026414159acc42fceeb271f8a28133, mild NACK.\r\n\r\nI like the new test, and ideas behind this change, but I think some parts of this are not well documented, and are breaking things that work without a clear reason. ",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2230780077",
      "submitted_at": "2024-08-09T19:02:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2231282040,
      "node_id": "PRR_kwDOABII586E_ql4",
      "url": null,
      "actor": null,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-10T01:31:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Why not allow 0x prefixes as -minimumchainwork does? \r\n\r\nBecause my understanding is that `0x` is used for hex numbers, and a block hash is not a number. So we have to make a trade-off between not introducing \"weirdness\" into the code vs maintaining backwards compatibility (for an undocumented feature). I prefer leaning towards the former unless there are good reasons to go for the latter, but that's exactly the reason I carved out these commits into a smaller PR so thank you for your input.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2231282040",
      "submitted_at": "2024-08-10T01:05:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "commented",
      "id": 2279822735,
      "node_id": "IC_kwDOABII586H41WP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2279822735",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-10T06:55:02Z",
      "updated_at": "2024-08-10T06:55:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Because my understanding is that `0x` is used for hex numbers, and a block hash is not a number.\r\n\r\nIf it's not a number, why are we prefixing it with 0 (by a method called TrySanitizeHex*Number*)?\r\n\r\n> parameter of base_blob::FromHex(),\r\n\r\nor alternatively chain the two together like `TrimAndParse`, i.e. `base_blob::FromHexLenient()`\r\n\r\n> -assumedvalid [...] -minimumchainwork\r\n\r\nWould it be clearer if we just warned about the changes in this release and require sanitized input in the next?",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2279822735",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "reviewed",
      "id": 2234255969,
      "node_id": "PRR_kwDOABII586FLAph",
      "url": null,
      "actor": null,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-13T02:36:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review 855784d3a0026414159acc42fceeb271f8a28133 again (unchanged since last time). I think motivation here is good and this PR could be merged if my concerns are not shared, but IMO this change is a net negative in current state without some compatibility improvements.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712563888\r\n\r\n> Because my understanding is that `0x` is used for hex numbers, and a block hash is not a number.\r\n\r\nI do think block hashes are numbers, and it's not really unusual to treat them that way, but even if it is strange and bad to think of them as numbers, I would want to give more thought to backwards compatibility, and only make things errors when they are (1) definitely errors or (2) have a pretty likelihood of being errors, and not just shorter or different styles of writing things.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2234255969",
      "submitted_at": "2024-08-13T02:36:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2234995444,
      "node_id": "PRR_kwDOABII586FN1L0",
      "url": null,
      "actor": null,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-13T09:21:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach NACK 855784d3a0026414159acc42fceeb271f8a28133\r\n\r\n..in light of https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714952020",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2234995444",
      "submitted_at": "2024-08-13T09:19:41Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "commented",
      "id": 2298062851,
      "node_id": "IC_kwDOABII586I-agD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298062851",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T06:26:27Z",
      "updated_at": "2024-08-20T06:26:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Would be great to get the final issues resolved. Possible way forward, preserving backwards compatibility:\r\n\r\n<details>\r\n<summary>\r\ndiff\r\n</summary>\r\n\r\n```diff\r\ndiff --git a/src/node/chainstatemanager_args.cpp b/src/node/chainstatemanager_args.cpp\r\nindex ff5a7ebd00..e83b5f38b6 100644\r\n--- a/src/node/chainstatemanager_args.cpp\r\n+++ b/src/node/chainstatemanager_args.cpp\r\n@@ -33,7 +33,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\r\n \r\n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\r\n         if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\r\n-            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));\r\n+            opts.minimum_chain_work = UintToArith256(uint256::FromHex(*sanitized_hex).value());\r\n         } else {\r\n             return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\r\n         }\r\n@@ -42,10 +42,10 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\r\n     if (auto value{args.GetArg(\"-assumevalid\")}) {\r\n         if (*value == \"0\") { // handle -noassumevalid\r\n             opts.assumed_valid_block = uint256{};\r\n-        } else if (auto block_hash{uint256::FromHex(*value)}) {\r\n-            opts.assumed_valid_block = *block_hash;\r\n+        } else if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\r\n+            opts.assumed_valid_block = uint256::FromHex(*sanitized_hex).value();\r\n         } else {\r\n-            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex (or 0 to disable)\"), *value, uint256::size() * 2)};\r\n+            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d hex digits (or 0 to disable)\"), *value, uint256::size() * 2)};\r\n         }\r\n     }\r\n \r\ndiff --git a/src/test/util/random.cpp b/src/test/util/random.cpp\r\nindex 0c09d8fd24..26f114c6d4 100644\r\n--- a/src/test/util/random.cpp\r\n+++ b/src/test/util/random.cpp\r\n@@ -27,8 +27,8 @@ void SeedRandomForTest(SeedRand seedtype)\r\n     static const uint256 ctx_seed = []() {\r\n         // If RANDOM_CTX_SEED is set, use that as seed.\r\n         if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\r\n-            if (auto num_parsed{uint256::FromHex(num)}) {\r\n-                return *num_parsed;\r\n+            if (auto num_sanitized{TrySanitizeHexNumber(num, /*result_size=*/uint256::size() * 2)}) {\r\n+                return uint256::FromHex(*num_sanitized).value();\r\n             } else {\r\n                 std::cerr << RANDOM_CTX_SEED << \" must be a \" << uint256::size() * 2 << \" char hex string without '0x'-prefix, was set to: '\" << num << \"'.\\n\";\r\n                 std::abort();\r\ndiff --git a/src/test/validation_chainstatemanager_tests.cpp b/src/test/validation_chainstatemanager_tests.cpp\r\nindex 6f81444aa9..63b687a3c4 100644\r\n--- a/src/test/validation_chainstatemanager_tests.cpp\r\n+++ b/src/test/validation_chainstatemanager_tests.cpp\r\n@@ -802,6 +802,8 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\r\n     BOOST_CHECK(set_opts({\"-noassumevalid\"}).assumed_valid_block.value().IsNull());\r\n     const std::string cmd{\"-assumevalid=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"};\r\n     BOOST_CHECK_EQUAL(set_opts({cmd.c_str()}).assumed_valid_block.value().ToString(), cmd.substr(13, cmd.size()));\r\n+    const std::string prefixed{\"-assumevalid=0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"};\r\n+    BOOST_CHECK_EQUAL(set_opts({prefixed.c_str()}).assumed_valid_block.value().ToString(), prefixed.substr(15, prefixed.size()));\r\n \r\n     // test -minimumchainwork\r\n     BOOST_CHECK(!set_opts({}).minimum_chain_work.has_value());\r\n```\r\n</details>\r\n\r\nSide note: `make check` fails for me in 2 steps after the regular unit tests, same thing happens on the base commit of the PR, so it's not caused by the PR changes.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2298062851",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg1YjdjYmZjYmUzZjk0NzcwYmRmNzNkZWRkOGJkYTAxOTNhNDQ2Mjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85b7cbfcbe3f94770bdf73dedd8bda0193a44627",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/85b7cbfcbe3f94770bdf73dedd8bda0193a44627",
      "tree": {
        "sha": "e877ce2f86c8c9ac238ae9919295e88790ec74b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e877ce2f86c8c9ac238ae9919295e88790ec74b4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e877ce2f86c8c9ac238ae9919295e88790ec74b4\nparent 9774a958b501a6d439a734e18b29e04f59f973f6\nauthor stickies-v <stickies-v@protonmail.com> 1722938155 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1724264965 +0100\n\ntest: unittest chainstatemanager_args\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbGMgUACgkQXLHObl5m\np1eZ/Q/9FZ6ZVqMVfEDywyQxFxwPuYqzMxkt5Y8PXiS7t64J+gCxSx1VTkmu0rEG\nQHul+k0LYZ9VPELcgeopkXCAjzgzVlHZpTxgSz9zAiy9T6yYJdTwNX0K4Shb6Sma\n0B7lvM9FewPBlC46+0XLJFKbvQSwcA4XGtbJyYjlpDJACvdV6G0TxFvkHtnKRvFU\nuyKxn399z1D35qI3m5rlj2qh8SlH0lKtWdbrZLnCJ4+6rkhQ1/CbEVL+z8W8ihQz\npusUKgBYJACTTUUHUeyB1GHHgXO+ZsBEegHmgY9zQT/ZFEUXhCyPzYWPrLWgfwn0\nryVM+bzBICBrbfDLYLpoM6vP11YrswIgAEFzIgorY/MBSIoU4QMolNBaENENyJU5\nsH7ksLMKT5S55e4ejJ7/jtknz6aCe7kDA4Sg4EyIbQi3UlPsFrbaotCY9bKj1u74\nlgtOnI5aBqEUDB0rUWK0WCQCL8MwBZ+CBgTVscMlyoEen1N0hIjzwU6Z0/1n9RpE\n7abxu7bp6NdNj37FXa6k467KB+GJ9rNC/OBxUU9bvg/2K4IwOPFMeolu6P43btfg\nQDlshZUMSgwmKsyiC2w6IAh6kCkoxY5FdRc0kNCYQh6WEvQklFtLLGrto0lQNkb5\nLLW/QIu/H7ybrvQn5vosME5M3ONEjtCquxzi8KuSdkBDXB50cuw=\n=Ru1L\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9774a958b501a6d439a734e18b29e04f59f973f6",
          "sha": "9774a958b501a6d439a734e18b29e04f59f973f6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9774a958b501a6d439a734e18b29e04f59f973f6"
        }
      ],
      "message": "test: unittest chainstatemanager_args",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-21T18:29:25Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-06T09:55:55Z"
      },
      "sha": "85b7cbfcbe3f94770bdf73dedd8bda0193a44627"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13964810490,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAANAXhj6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13964810490",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/cf88a55e97719aabd62f0b608df0800fef8304de",
      "created_at": "2024-08-21T18:31:53Z"
    },
    {
      "event": "reviewed",
      "id": 2251830807,
      "node_id": "PRR_kwDOABII586GODYX",
      "url": null,
      "actor": null,
      "commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-21T20:24:04Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2251830807",
      "submitted_at": "2024-08-21T20:24:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2251909699,
      "node_id": "PRR_kwDOABII586GOWpD",
      "url": null,
      "actor": null,
      "commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-21T21:24:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK cf88a55e97719aabd62f0b608df0800fef8304de\r\n\r\nI really like the `TrySanitizeHexNumber` -> `FromUserHex` change!\r\nSorry for not understanding that you had it in the works with my prior suggestion.\r\nOnly ignorable nits left.\r\n\r\n(Still fails at the end of `make check` due to unlucky base commit).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2251909699",
      "submitted_at": "2024-08-21T21:24:48Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "review_requested",
      "id": 13974988144,
      "node_id": "RRE_lADOABII586RoByHzwAAAANA-WVw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13974988144",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T10:31:07Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13974988301,
      "node_id": "RRE_lADOABII586RoByHzwAAAANA-WYN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13974988301",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T10:31:08Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13975405374,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAANA_8M-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13975405374",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/81554aac80bf2270db977c110c37acc7e8034194",
      "created_at": "2024-08-22T11:05:30Z"
    },
    {
      "event": "reviewed",
      "id": 2254228380,
      "node_id": "PRR_kwDOABII586GXMuc",
      "url": null,
      "actor": null,
      "commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-22T11:30:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed (twice) to change the approach to address @achow101's, @ryanofsky's and @hodlinator's concerns about being too strict about user hex input for `-assumevalid` and `RANDOM_CTX_SEED`. Thanks again for sharing your concerns about breaking changes (and the detailed review), in hindsight I think this is indeed the better approach.\r\n\r\nSpecifically, these last two force-pushes:\r\n- introduces a `uint256::FromUserHex()` to allow for lenient user input parsing and\r\ndoes away with the `TrySanitizeHexNumber`, as suggested by [l0rinc](https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2279822735) and [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1715587191)\r\n- use the new `uint256::FromUserHex()` function for `-minimumchainwork`, [`-assumevalid`](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711973562) and [`RANDOM_CTX_SEED`](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711982050) parsing, minimizing the behaviour change in this PR and allowing 0x prefixes and too-short-input in all 3 cases. The main behaviour change now introduced by this PR is limited to more explicit handling of invalid hex characters and too-long-input, which I believe won't be controversial.\r\n- remove the now unused `IsHexNumber()`. Most of its unit tests have been migrated to `uint256_tests/from_user_hex`.\r\n- improved testing in `validation_chainstatemanager_tests`:\r\n    - refactored `SetOptsFromArgs` to be templated and reusable, and allow for better error reporting by moving the BOOST_ calls to the edges as much as ergonomically possible\r\n    - added unit tests for invalid-hex-char or too-many-char cases for -minimumchainwork and -assumevalid\r\n- added and cleaned up some of the `uint256_tests/from_user_hex tests [1](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725705844), [2](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725701490), [e](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725699517) \r\n- terminology: [consistently use \"hex digits\"](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725732478) whenever the character is indeed a [0-9, a-f] value, and \"(non-hex) character\" when it isn't or we're not sure yet.\r\n",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2254228380",
      "submitted_at": "2024-08-22T11:30:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "commented",
      "id": 2304465368,
      "node_id": "IC_kwDOABII586JW1nY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2304465368",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T11:44:55Z",
      "updated_at": "2024-08-22T11:44:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "I like it a lot more now, thanks for considering the feedbacks.\r\n\r\nThe only part that still bugs me a bit is the naming of `FromUserHex` -> the \"user\" is on a different abstraction level, I'd prefer mentioning the behavior change compared to the sibling method (i.e. it's more forgiving/leninent for the inputs), rather than the motivation for adding the method (the users sometimes prefer different formats).\r\n\r\nACK 81554aac80bf2270db977c110c37acc7e8034194",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2304465368",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "review_requested",
      "id": 13975871732,
      "node_id": "RRE_lADOABII586RoByHzwAAAANBBuD0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13975871732",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T11:45:01Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2254259199,
      "node_id": "PRR_kwDOABII586GXUP_",
      "url": null,
      "actor": null,
      "commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-22T11:45:44Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2254259199",
      "submitted_at": "2024-08-22T11:45:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "commented",
      "id": 2305181520,
      "node_id": "IC_kwDOABII586JZkdQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2305181520",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T16:30:46Z",
      "updated_at": "2024-08-22T16:30:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Sorry for not understanding that you had it in the works with my prior suggestion.\r\n\r\nNo problem at all, I decided to give this PR a bit of a rest to focus on reviewing and aligning with related PRs, and think about the suggestions made here, hence the delay in updating this. Will quickly address feedback again from here on.\r\n\r\n> The only part that still bugs me a bit is the naming of `FromUserHex` -> the \"user\" is on a different abstraction level, I'd prefer mentioning the behavior change compared to the sibling method (i.e. it's more forgiving/leninent for the inputs), rather than the motivation for adding the method (the users sometimes prefer different formats).\r\n\r\nI think it's a valid concern, and I agree that generally functions should be named in line with what they do, not with how they're used - and `FromHexLenient` would be a good name. The reason I'm sticking with `FromUserHex` is that it's 100% a convenience function that we've implemented specifically for dealing with user input, and the name makes that very clear imo. I'd also prefer to avoid bikeshedding over this, since it does touch quite a few LoC, commits, commit messages, PR descriptions, ... and I think both options are good.\r\n\r\nThank you both for your continued review!",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2305181520",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "commented",
      "id": 2305343773,
      "node_id": "IC_kwDOABII586JaMEd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2305343773",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T18:02:19Z",
      "updated_at": "2024-08-22T18:03:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 81554aac80bf2270db977c110c37acc7e8034194. Thanks for all the changes. This seems simpler and more backwards compatible now.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/30569#issue-2443189383\r\n\r\nIn PR description:\r\n\r\n>* test: the optional `RANDOM_CTX_SEED` env var is now required to consist only of up to 64 hex digits (optionally prefixed with \"0x\"), otherwise the program will abort\r\n\r\nI think it would be clearer and more consistent with the rest of the description if it said \"test: the optional `RANDOM_CTX_SEED` env var will now cause tests to abort when it contains invalid hex characters, or when it is longer than 64 hex digits\"",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2305343773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "reviewed",
      "id": 2255189643,
      "node_id": "PRR_kwDOABII586Ga3aL",
      "url": null,
      "actor": null,
      "commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-22T18:02:32Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2255189643",
      "submitted_at": "2024-08-22T18:02:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2255475669,
      "node_id": "PRR_kwDOABII586Gb9PV",
      "url": null,
      "actor": null,
      "commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-22T19:28:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 81554aac80bf2270db977c110c37acc7e8034194\r\n\r\n`git range-diff master cf88a55e97719aabd62f0b608df0800fef8304de 81554aac80bf2270db977c110c37acc7e8034194`\r\n\r\nOnly changes `BOOST_AUTO_TEST_CASE(from_user_hex)` tests, error strings, commit messages and revives the `LogPrintf` -> `LogInfo` update.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2255475669",
      "submitted_at": "2024-08-22T19:28:30Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcwZTJjODc3MzdlNzdlZTg1ODEyY2MzMjhjNGRkZmFlYTcxNDc1MzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70e2c87737e77ee85812cc328c4ddfaea7147533",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/70e2c87737e77ee85812cc328c4ddfaea7147533",
      "tree": {
        "sha": "aaf29dec8dab040ac508a64f8cc2b05fb61a2c98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaf29dec8dab040ac508a64f8cc2b05fb61a2c98"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree aaf29dec8dab040ac508a64f8cc2b05fb61a2c98\nparent 85b7cbfcbe3f94770bdf73dedd8bda0193a44627\nauthor stickies-v <stickies-v@protonmail.com> 1724157668 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1724417619 +0100\n\nrefactor: add uint256::FromUserHex helper\n\nFromUserHex will be used in future commits to construct\nuint256 instances from user hex input without being\nunnecessarily restrictive on formatting by allowing\n0x-prefixed input that is shorter than 64 characters.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbIhlMACgkQXLHObl5m\np1eTeRAAq83rSezD29uSOQf+P16F+8bIZKvbVOlsnF4E8kFP/joBAE+gQn3cydJS\ntTtu0Pce0OQ9h3zXOTdE8w+yIJoVquqTjMYTkg+Y/8pDlrUZsuwIEawTBg0P6UD9\nO/4W0pvby7vWiChOVf69bxVbGm+Uvm8CYy+eaPYnevBn5IuQ4dSGuxN0w0DA27px\nmcWRJTEFdvXBVxGZqdkY2pKjeIponKjIVT5V2JYRNaj9ppMVbux0DreHNtslDDlb\nCEaZj9oZvgDonaWnol+V64q31UcQA5lS79vTdLPgRKsKXh/N+fA0ZMjmCSEjmuYw\nk4h48g5G1WQ0mE5WBc+B8ExIX22LTy/PoDFjX0vPJYabdsRbEAmswgaie5aZsMhK\nYSoGEzgmlhvcCFotF5CUDI5M4Jxd9GnPecrYpg1YHfJ6mUxrzXpE37laicx5e5p3\n39zbM5HxdU7su9H6t+ZYic0wYpZHlRmj++N/eAdx/14cnMtKf6ATpTz4SHkdQdAT\nnXvQiLH0C/M8b9PmXyLdJeLK2Tki0qr+eEan7IPvjqXrMltKBmIgleLBPj6xMchd\n382V65vXs0ay/TnmrZUEMhJCgBlKHL99hXoJ5dmJgvotzBTebfGdYouNCmNyZrp/\nirQEqJFpZS3eOno4E25bhyWhda8syHZDQ8HfJeZ8AP7aN8QWz40=\n=xnBy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85b7cbfcbe3f94770bdf73dedd8bda0193a44627",
          "sha": "85b7cbfcbe3f94770bdf73dedd8bda0193a44627",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/85b7cbfcbe3f94770bdf73dedd8bda0193a44627"
        }
      ],
      "message": "refactor: add uint256::FromUserHex helper\n\nFromUserHex will be used in future commits to construct\nuint256 instances from user hex input without being\nunnecessarily restrictive on formatting by allowing\n0x-prefixed input that is shorter than 64 characters.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-23T12:53:39Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-20T12:41:08Z"
      },
      "sha": "70e2c87737e77ee85812cc328c4ddfaea7147533"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhhNDRkN2QzYzFlNWQ1YWY2Nzc5YzNlNGJlZmU1MTRjOWRhZmI4ZmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a44d7d3c1e5d5af6779c3e4befe514c9dafb8ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8a44d7d3c1e5d5af6779c3e4befe514c9dafb8ff",
      "tree": {
        "sha": "5fb73a929e81cf3a9b8ac7f5c9300143ae9afdf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fb73a929e81cf3a9b8ac7f5c9300143ae9afdf1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5fb73a929e81cf3a9b8ac7f5c9300143ae9afdf1\nparent 70e2c87737e77ee85812cc328c4ddfaea7147533\nauthor stickies-v <stickies-v@protonmail.com> 1722002508 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1724417620 +0100\n\nnode: use uint256::FromUserHex for -minimumchainwork parsing\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by returning an error\nwhen the input contains more than 64 hex digits.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbIhlQACgkQXLHObl5m\np1eXMBAAiWBxr5DrZG8QVYKfEYZMdLML3XmEtTp99FT/kAth4XKlEM7kcOYaSCOP\nTC8qtva8vFmM1LD+7FTGV1e2cRslau7cO41v97uF4YQVki0H0mUFWPpeNaQH8vUs\nTafdFL06RBGIMpak606XoM6NnHUjINOt0hjLXd5kvv9L+mv/koTZnru6RJ8SzuSe\naXeqp4wv3cmpAa73qp4krgwiUKx7tdLo7Vs4Gj77HLYkxg24mQ19Zd0SP/xIm6vP\n07rYKAaGlf1zeRn6cZVLXtnOM38+tOM9emo8rtrF+ygxro4JzwO31aD5pxRZWcll\n4RKu7ELI7LjJa/4x3KZFFXW4WbCbwYwFShE5G+DX9K38HEqW31xml1WwrDx/+yh3\ngJUFQLgcZwixNn3COxJt3SMtMWK9Hsz2gOi3AJCzeEjJAIkyQiBAZLDsn2xxwTWF\n1+MQHs+wf+eYGFdHHTHRuGOWVATSNas+GOkbozB47RM72lKK1AvbIXOa1JTWIhij\nbgxjxw244cnQgBczxEVdALUx21QlxAhbI/lKKeoFl/MBX1FwssiH7DV962zAOXX+\nLSHBsVa8G/UIpFtPRelTvgI9NpxraQZgnQN2Nauz/OsZiDImhNFy09pemcax+p/u\naGrCBRlg2bRUag+Y3gay15XcYff5lThvvXy73C49nWMFkAF79WA=\n=1lyP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70e2c87737e77ee85812cc328c4ddfaea7147533",
          "sha": "70e2c87737e77ee85812cc328c4ddfaea7147533",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/70e2c87737e77ee85812cc328c4ddfaea7147533"
        }
      ],
      "message": "node: use uint256::FromUserHex for -minimumchainwork parsing\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by returning an error\nwhen the input contains more than 64 hex digits.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-23T12:53:40Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-26T14:01:48Z"
      },
      "sha": "8a44d7d3c1e5d5af6779c3e4befe514c9dafb8ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJlNThmZGI1NDRiNTM4ZGJhOTgyM2JjZDU3NTRkMDc0MjcyYmZjMDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e58fdb544b538dba9823bcd5754d074272bfc04",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2e58fdb544b538dba9823bcd5754d074272bfc04",
      "tree": {
        "sha": "d24f9e84844d20f79f314c7bc1f64b1dcbf54b1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d24f9e84844d20f79f314c7bc1f64b1dcbf54b1d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d24f9e84844d20f79f314c7bc1f64b1dcbf54b1d\nparent 8a44d7d3c1e5d5af6779c3e4befe514c9dafb8ff\nauthor stickies-v <stickies-v@protonmail.com> 1724162368 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1724417620 +0100\n\nutil: remove unused IsHexNumber\n\nThe relevant unit tests have been incorporated in\nuint256_tests/from_user_hex in a previous commit.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbIhlQACgkQXLHObl5m\np1eQ/xAAk3TfxJrefCyingMTQ/gXZ+Y/LKuEtfRYi5nB5NnvMzXPzdFs4WZcPy1N\navXpJUvtEV5lD5hhaUXSBsnnaKcS3A6bM4AvK+6SdWKDVOYE+qWjAK7IEZwNHJwh\n+cgilvgAZ5CH1BeykCbqotXqyDPNQVCoRhE9YIabBQcZRQ2SLHsvYGL2U6GaZH/z\nnTax4/hEiRkQqF9lk0eWKUBNF0n/GzGbhFHfOQi87OyY0u04WJ8Ji/nZhK5oOT5F\n2Nvi2EwT3epDEgB89HxziJicvgcMsUeW14ULYqJl/4RqNDzLcH+QRocMxjskbuzq\nFStTIcZUdu2p4DNPNtRy7YvwvT4dzUvWd6wolQzjy+bzsg5HZfkcOz8xUsyVve0Z\nqR6MsKsYZKW03UcIfXMMx0HVZ/OfG283yklj5sI5kSrMy3nVc96tLoBBoVCMVh21\nbQ/fqIMkx1FXRTMDRTRmn6gfNCcWHye4xi6lDytcEK8NeRt02rwxXg1g2LHjMK4n\nITuI49o3eXL/vBvWVN0M1lwG2FPvey5fAYLQgmo9Vj2JPaMqnPu6W6IGnghJerTj\na795ONq0ouZtPyEF7TP+fBtZlnT6C3M5vwzuy8W11rOJbGONzphzxjF2x12NLESj\nwCPGiA50gbg8AhcK9QL/p6vf/5t4I/t/OOsPnxJSjirYKkoqg2k=\n=dFGo\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a44d7d3c1e5d5af6779c3e4befe514c9dafb8ff",
          "sha": "8a44d7d3c1e5d5af6779c3e4befe514c9dafb8ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8a44d7d3c1e5d5af6779c3e4befe514c9dafb8ff"
        }
      ],
      "message": "util: remove unused IsHexNumber\n\nThe relevant unit tests have been incorporated in\nuint256_tests/from_user_hex in a previous commit.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-23T12:53:40Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-20T13:59:28Z"
      },
      "sha": "2e58fdb544b538dba9823bcd5754d074272bfc04"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY4MTllNWEzMjljM2JmMzhlNDdhMDc0MzRlMmEzYzAwMzFmODA4ZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6819e5a329c3bf38e47a07434e2a3c0031f808d0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6819e5a329c3bf38e47a07434e2a3c0031f808d0",
      "tree": {
        "sha": "30354ace52e552a04ed5ce2f482185b7c730a17b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30354ace52e552a04ed5ce2f482185b7c730a17b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 30354ace52e552a04ed5ce2f482185b7c730a17b\nparent 2e58fdb544b538dba9823bcd5754d074272bfc04\nauthor stickies-v <stickies-v@protonmail.com> 1722003025 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1724417620 +0100\n\nnode: use uint256::FromUserHex for -assumevalid parsing\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by returning an error\nwhen the input contains non-hex characters, or when it\ncontains more than 64 hex digits.\n\nAlso make feature_assumevalid.py more robust by using CBlock.hash\nwhich is guaranteed to be 64 characters long, as opposed to the\nvariable-length hex(CBlock.sha256)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbIhlQACgkQXLHObl5m\np1dzUA/8DQxZNcGAC9jNp9YssLUZE61dTAMk6VF4sN6n+9ZYakKL3862fSukW845\n4gdBE2ORTz2BjBAk9EjjUhBhs9Wk5rWQhR+WWPeF7+yFxQuD7EktXRqGBYXULsSb\n/iFQZHblpXYX9iTZirR4KBgNQLxBYgSk0Y6eYBwv5hWOmAJ4644Kc9p0hlq4xpVH\nRtsFqj7F7pbJQM9emrWTQIiG9RTmdqIGnse3BxQofCWNLr6uYUSFzFOx2H7GumJ4\nSFgAhgQgwQ1h+3tWcnlfbbSWZJanujzcjibpsgDNPOmavG9F+yEDRlngT9l1QR8C\nzQfwICjU4JyJ24Zo4J9BimFLGoazEvVJLjGlm3MzTNe1AoZvHDJ5R6ToNDoQ8UcI\nmI0j0DSApXlXhNRTB3OfdttlVG0FqGA7VaWxnoELPKISsNmprA9G5P/ZPjbma+RL\nmXlLW9On1OkybdN1jseMme4LXj0eKPg+M3h5kpZO2A7/S1qQkUQyzstB/aJ6B1aj\nz8+Z1ZBJ5WzzTj4+fSMsdB2wYmetPMQ+sifABcTqn7pxcohyA/3qO/8FcpjWtSOk\nJWTvsJTr981NcgRhJ1Wqod4Ud+ftBkl3nDwi6xpwQlrFfnl0X2xE/PoDuxaKt5D7\nxtjOOLmc5oGecigCW7J9J04Ht+t5i6/jy+TrwsOleaCtlDy2Bvg=\n=G33v\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e58fdb544b538dba9823bcd5754d074272bfc04",
          "sha": "2e58fdb544b538dba9823bcd5754d074272bfc04",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2e58fdb544b538dba9823bcd5754d074272bfc04"
        }
      ],
      "message": "node: use uint256::FromUserHex for -assumevalid parsing\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by returning an error\nwhen the input contains non-hex characters, or when it\ncontains more than 64 hex digits.\n\nAlso make feature_assumevalid.py more robust by using CBlock.hash\nwhich is guaranteed to be 64 characters long, as opposed to the\nvariable-length hex(CBlock.sha256)",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-23T12:53:40Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-26T14:10:25Z"
      },
      "sha": "6819e5a329c3bf38e47a07434e2a3c0031f808d0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE4ZDY1ZDI3NzI2YmY5ZmM3NjI5YjhlNzk0MDQ3YTEwYzljZjYxNTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "tree": {
        "sha": "60809c56f64d264f55b740d217cbb7854f905ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60809c56f64d264f55b740d217cbb7854f905ce1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 60809c56f64d264f55b740d217cbb7854f905ce1\nparent 6819e5a329c3bf38e47a07434e2a3c0031f808d0\nauthor stickies-v <stickies-v@protonmail.com> 1722357059 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1724417620 +0100\n\ntest: use uint256::FromUserHex for RANDOM_CTX_SEED\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by requiring RANDOM_CTX_SEED\nto be a string of up to 64 hex digits (optionally prefixed with\n\"0x\"), whereas previously any string would be accepted, with\nnon-hex characters silently ignored and input longer than\n64 characters (ignoring \"0x\" prefix) silently trimmed.\n\nCan be tested with:\n\n$ RANDOM_CTX_SEED=z ./src/test/test_bitcoin --log_level=all --run_test=timeoffsets_tests/timeoffsets_warning -- -printtoconsole=1 | grep RANDOM_CTX_SEED\nRANDOM_CTX_SEED must consist of up to 64 hex digits (\"0x\" prefix allowed), it was set to: 'z'.\n\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbIhlQACgkQXLHObl5m\np1ce5g//dW+E2oK7hZDVNkF3k9VAkODmt2sDXCNSKV8jcm832Oo/QJIyN7I9SGa0\nYnQ/ZJPYmMRAP4aGg78oSG5EIXpQY4MNr+IomcYL9Uogen+dwBQPvj1meJfKU1sE\nJJ4GRGrkZnsCKgBBUzZ/6lEEgoH6a5ILugt5+5rG4oLqyxEb6p7FMkaEp0z7hF7/\nr/W5QRV1roEZrH37HsvINzffbjKr7ZDmN9KaoL7lJ2xBQcCBW89TnlxlUeyBVWoD\npPnluzsIZSTRAW9JInzUzvqvG8iJGAxNes8sVXLpzggN9u8GuODN77264SmcqrTM\nOGItts72/KVRX6Z7/3IX2vl2T47QwRD+KGyT1qzeEySdzmwoPqSaiNpuostXs05r\nagDmpMGQj9RgfP5XgJ5vjZBEA1MXIeRSh60EosBylNpVOO7jfjKyLWsDv7EIKxT1\nqCOUnHUFNSiGJO8rJALLJ2Wd6wqJJUNn963syFnZeQ60tpXyrzNHm6AnLRKBYcvu\n5SmhKoBzxHc5P0K031jIYnrHKNPu/f5tybbsHyg1e+zsIQ9ojAPaYfJMtuR2VCUv\ntsP6rFDR3JDRusAdvBaVpvFicSRWdVII/WSvjlkQWYh2QAmHGhXlR0ptDEvxCVX+\nC9X/9THFWAodd8tvgCOSz/MrLCl2BDzO5FjeRU3jZPqEp956A68=\n=ey+t\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6819e5a329c3bf38e47a07434e2a3c0031f808d0",
          "sha": "6819e5a329c3bf38e47a07434e2a3c0031f808d0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6819e5a329c3bf38e47a07434e2a3c0031f808d0"
        }
      ],
      "message": "test: use uint256::FromUserHex for RANDOM_CTX_SEED\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by requiring RANDOM_CTX_SEED\nto be a string of up to 64 hex digits (optionally prefixed with\n\"0x\"), whereas previously any string would be accepted, with\nnon-hex characters silently ignored and input longer than\n64 characters (ignoring \"0x\" prefix) silently trimmed.\n\nCan be tested with:\n\n$ RANDOM_CTX_SEED=z ./src/test/test_bitcoin --log_level=all --run_test=timeoffsets_tests/timeoffsets_warning -- -printtoconsole=1 | grep RANDOM_CTX_SEED\nRANDOM_CTX_SEED must consist of up to 64 hex digits (\"0x\" prefix allowed), it was set to: 'z'.\n\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-23T12:53:40Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-30T16:30:59Z"
      },
      "sha": "18d65d27726bf9fc7629b8e794047a10c9cf6156"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13992901365,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAANCCrr1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13992901365",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "created_at": "2024-08-23T12:53:48Z"
    },
    {
      "event": "reviewed",
      "id": 2257111871,
      "node_id": "PRR_kwDOABII586GiMs_",
      "url": null,
      "actor": null,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-23T12:59:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to address all review comments, limited to nits and tests so should be an easy re-review:\r\n- [grammar nit](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726880388) for `RANDOM_CTX_SEED`\r\n- [added](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727507122) `from_user_hex` test case to cover more > 64 char cases and cleaned up the test a bit by replacing `valid_hex_65` with `valid_hex_64` which should be less confusing\r\n- [re-added mixed case testing](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727569784) in `from_user_hex`\r\n- [undid](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727696360) unintentional newline removal\r\n> I think it would be clearer and more consistent with the rest of the description if it said \"test: the optional RANDOM_CTX_SEED env var will now cause tests to abort when it contains invalid hex characters, or when it is longer than 64 hex digits\"\r\n\r\nThanks, PR description updated with your suggestion.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2257111871",
      "submitted_at": "2024-08-23T12:59:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "commented",
      "id": 2307070733,
      "node_id": "IC_kwDOABII586JgxsN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2307070733",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-23T13:13:38Z",
      "updated_at": "2024-08-23T13:13:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 18d65d27726bf9fc7629b8e794047a10c9cf6156\r\n\r\n`git range-diff master 81554aac80bf2270db977c110c37acc7e8034194 18d65d27726bf9fc7629b8e794047a10c9cf6156`\r\n\r\nChanges: Grammar, added&adjusted tests (passed), undid unintentional new line.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2307070733",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "review_requested",
      "id": 13993141281,
      "node_id": "RRE_lADOABII586RoByHzwAAAANCDmQh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13993141281",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-23T13:13:43Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13993141411,
      "node_id": "RRE_lADOABII586RoByHzwAAAANCDmSj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13993141411",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-23T13:13:44Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2257343762,
      "node_id": "PRR_kwDOABII586GjFUS",
      "url": null,
      "actor": null,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-23T14:05:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 18d65d27726bf9fc7629b8e794047a10c9cf6156. Very nice change that cleans up the API, adds checking for invalid values, makes parsing of values more consistent, and adds test coverage.\r\n\r\nJust small test, error message, and comment changes since last review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2257343762",
      "submitted_at": "2024-08-23T14:05:41Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "commented",
      "id": 2307287794,
      "node_id": "IC_kwDOABII586Jhmry",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2307287794",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-23T15:09:55Z",
      "updated_at": "2024-08-23T15:09:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "While I'm not a fan of mixed casing, I agree that it's probably outside the scope of current change.\r\n\r\nACK 18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2307287794",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "commented",
      "id": 2313472718,
      "node_id": "IC_kwDOABII586J5MrO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2313472718",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-27T20:34:49Z",
      "updated_at": "2024-08-27T20:34:49Z",
      "author_association": "MEMBER",
      "body": "ACK 18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2313472718",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "merged",
      "id": 14034867394,
      "node_id": "ME_lADOABII586RoByHzwAAAANEixTC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14034867394",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2c7a4231db35060fa1ab66d29e8139f04edc85a4",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c7a4231db35060fa1ab66d29e8139f04edc85a4",
      "created_at": "2024-08-27T20:48:03Z"
    },
    {
      "event": "closed",
      "id": 14034867424,
      "node_id": "CE_lADOABII586RoByHzwAAAANEixTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14034867424",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-27T20:48:03Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 14059916969,
      "node_id": "HRDE_lADOABII586RoByHzwAAAANGCU6p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14059916969",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T11:06:53Z"
    },
    {
      "event": "referenced",
      "id": 14204810376,
      "node_id": "REFE_lADOABII586RoByHzwAAAANOrDSI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14204810376",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c66c68345efb0bb3d5613ebac703cde779fa0f01",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c66c68345efb0bb3d5613ebac703cde779fa0f01",
      "created_at": "2024-09-10T19:41:42Z"
    },
    {
      "event": "referenced",
      "id": 14235937715,
      "node_id": "REFE_lADOABII586RoByHzwAAAANQhyuz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14235937715",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "be768dbd185bf750ff2b1435dfd57c71de214b52",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be768dbd185bf750ff2b1435dfd57c71de214b52",
      "created_at": "2024-09-12T16:36:43Z"
    },
    {
      "event": "locked",
      "id": 19410010369,
      "node_id": "LOE_lADOABII586RoByHzwAAAASE7UEB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19410010369",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-29T11:33:57Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700712603",
      "pull_request_review_id": 2213720639,
      "id": 1700712603,
      "node_id": "PRRC_kwDOABII585lXtCb",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I wonder if it makes sense to add an option to `FromHex` to allow parsing of \"hex numbers\", which would remove the prefix and only reject too large or junk input?\r\n\r\nIn any case, you can remove `IsHexNumber`?",
      "created_at": "2024-08-01T19:24:19Z",
      "updated_at": "2024-08-01T19:31:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700712603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700712603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "LEFT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700717783",
      "pull_request_review_id": 2213720639,
      "id": 1700717783,
      "node_id": "PRRC_kwDOABII585lXuTX",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (auto block_hash{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.assumed_valid_block = *block_hash;\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I presume this will break, when someone sets `-noassumevalid`?\r\n\r\n```\r\nError: Invalid assumevalid block hash specified (0), must be 64 character hex\r\n",
      "created_at": "2024-08-01T19:29:35Z",
      "updated_at": "2024-08-01T19:31:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700717783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700717783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700718302",
      "pull_request_review_id": 2213720639,
      "id": 1700718302,
      "node_id": "PRRC_kwDOABII585lXube",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems fine to just use `Assert(FromHex(...))`?",
      "created_at": "2024-08-01T19:30:07Z",
      "updated_at": "2024-08-01T19:31:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700718302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700718302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700826270",
      "pull_request_review_id": 2213904151,
      "id": 1700826270,
      "node_id": "PRRC_kwDOABII585lYIye",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (auto block_hash{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.assumed_valid_block = *block_hash;\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700717783,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah thanks, didn't think of that. Will add a \"0\" check:\r\n\r\n<details>\r\n<summary>git diff on c0d508e69c</summary>\r\n\r\n```diff\r\ndiff --git a/src/node/chainstatemanager_args.cpp b/src/node/chainstatemanager_args.cpp\r\nindex 8085aa65dc..60cee3dd78 100644\r\n--- a/src/node/chainstatemanager_args.cpp\r\n+++ b/src/node/chainstatemanager_args.cpp\r\n@@ -31,7 +31,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\r\n \r\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\r\n \r\n-    if (auto value{args.GetArg(\"-minimumchainwork\")}) {\r\n+    if (auto value{args.GetArg(\"-minimumchainwork\")}; value && *value != \"0\") {\r\n         if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\r\n             opts.minimum_chain_work = UintToArith256(*min_work);\r\n         } else {\r\n@@ -39,7 +39,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\r\n         }\r\n     }\r\n \r\n-    if (auto value{args.GetArg(\"-assumevalid\")}) {\r\n+    if (auto value{args.GetArg(\"-assumevalid\")}; value && *value != \"0\") {\r\n         if (auto block_hash{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\r\n             opts.assumed_valid_block = *block_hash;\r\n         } else {\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-08-01T20:47:54Z",
      "updated_at": "2024-08-01T20:47:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700826270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700826270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702084437",
      "pull_request_review_id": 2216001026,
      "id": 1702084437,
      "node_id": "PRRC_kwDOABII585lc79V",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700712603,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for the suggestion. I've been exploring different options here. Adding a `bool is_num` optional param to `uint256::FromHex()` is an option, but felt a bit awkward because it'd be a uint256-specific parameter (doesn't make sense for `transaction_identifier`).\r\n\r\nSince we only need this for user input validation, I've now taken a different approach where I've repurposed `IsHexNumber()` -> `TrySanitizeHexNumber()`. I think this minimizes churn (e.g. the test suite can largely be kept as is), isolates user input validation from code that's mostly used internally and benefits from being strict and simple.",
      "created_at": "2024-08-02T16:39:43Z",
      "updated_at": "2024-08-02T16:39:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702084437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702084437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "LEFT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702085339",
      "pull_request_review_id": 2216002612,
      "id": 1702085339,
      "node_id": "PRRC_kwDOABII585lc8Lb",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (auto block_hash{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.assumed_valid_block = *block_hash;\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700717783,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`-minimumchainwork` now accepts hex number input (including \"0\") again, and `-assumevalid` has an extra `*value != \"0\"` check. Marking as resolved.",
      "created_at": "2024-08-02T16:40:44Z",
      "updated_at": "2024-08-02T16:40:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702085339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702085339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702086239",
      "pull_request_review_id": 2216004069,
      "id": 1702086239,
      "node_id": "PRRC_kwDOABII585lc8Zf",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done (and `RANDOM_CTX_SEED` now also accepts < 64 character input string), thanks.",
      "created_at": "2024-08-02T16:41:34Z",
      "updated_at": "2024-08-02T16:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702086239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702086239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702827034",
      "pull_request_review_id": 2217100926,
      "id": 1702827034,
      "node_id": "PRRC_kwDOABII585lfxQa",
      "diff_hunk": "@@ -27,7 +27,7 @@ FUZZ_TARGET(hex)\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string);",
      "path": "src/test/fuzz/hex.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would it make sense to test the `result_size` param here, too?",
      "created_at": "2024-08-03T16:36:16Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702827034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702827034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702836629",
      "pull_request_review_id": 2217100926,
      "id": 1702836629,
      "node_id": "PRRC_kwDOABII585lfzmV",
      "diff_hunk": "@@ -432,29 +432,33 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/0).value(), \"1234\");",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 49,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find it a bit surprising that a result size of 0 returns a value with size 4.\r\nDo you think it would make sense to ignore negative values instead, so that a `result_size` of 0 returns an empty string instead, to make it slightly more intuitive?",
      "created_at": "2024-08-03T16:42:54Z",
      "updated_at": "2024-08-03T19:22:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702836629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702836629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702840728",
      "pull_request_review_id": 2217100926,
      "id": 1702840728,
      "node_id": "PRRC_kwDOABII585lf0mY",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (input.empty() || (result_size && input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (input.size() < result_size) {",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "since we've checked `>` before, maybe it would be more self-explanatory to check whether we're equal or not, since it's a stronger guarantee:\r\n```suggestion\r\n    if (input.size() != result_size) {\r\n```",
      "created_at": "2024-08-03T16:47:13Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702840728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702840728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702847680",
      "pull_request_review_id": 2217100926,
      "id": 1702847680,
      "node_id": "PRRC_kwDOABII585lf2TA",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does it still make sense to suffix it with `Number` after the change?\r\nAnd besides the `TryParseHex` below, it doesn't seem common to prefix optional returning methods with `Try` - the return type already states that the operation might not succeed, `Try` seems redundant.",
      "created_at": "2024-08-03T16:59:53Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702847680",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702847680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702847776",
      "pull_request_review_id": 2217100926,
      "id": 1702847776,
      "node_id": "PRRC_kwDOABII585lf2Ug",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding\n+ *                    if input is too short, or a std::nullopt return\n+ *                    value if input is too long. Disabled if <= 0.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can it be negative?",
      "created_at": "2024-08-03T17:00:58Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702847776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702847776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702863593",
      "pull_request_review_id": 2217100926,
      "id": 1702863593,
      "node_id": "PRRC_kwDOABII585lf6Lp",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/64)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));\n+        } else {\n             return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}; value && *value != \"0\") {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "shouldn't we still set the `assumed_valid_block` value when it's `0`, given that `defaultAssumeValid` isn't `0`?",
      "created_at": "2024-08-03T19:14:48Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702863593",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702863593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702863957",
      "pull_request_review_id": 2217100926,
      "id": 1702863957,
      "node_id": "PRRC_kwDOABII585lf6RV",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think we could document how to disable this param - currently with 0, I recommend considering negative numbers",
      "created_at": "2024-08-03T19:18:30Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702863957",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702863957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702864451",
      "pull_request_review_id": 2217172418,
      "id": 1702864451,
      "node_id": "PRRC_kwDOABII585lf6ZD",
      "diff_hunk": "@@ -432,29 +432,33 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/0).value(), \"1234\");\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/4).value(), \"1234\");",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 50,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*result_size=*/4).value(), \"1234\");\r\n```",
      "created_at": "2024-08-03T19:22:33Z",
      "updated_at": "2024-08-03T19:22:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702864451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702864451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1703942199",
      "pull_request_review_id": 2218701543,
      "id": 1703942199,
      "node_id": "PRRC_kwDOABII585lkBg3",
      "diff_hunk": "@@ -7,26 +7,29 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            auto sanitized{*Assert(TrySanitizeHexNumber(num, uint256::size() * 2))}; // RANDOM_CTX_SEED must be up to 64 char hex string",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I just don't see the use case to accept accidentally truncated input silently. Why not just fa295215f6fa3b85b0387511920f75eeb3e12b58?",
      "created_at": "2024-08-05T11:02:23Z",
      "updated_at": "2024-08-05T11:02:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1703942199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1703942199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704179447",
      "pull_request_review_id": 2219106988,
      "id": 1704179447,
      "node_id": "PRRC_kwDOABII585lk7b3",
      "diff_hunk": "@@ -432,29 +432,33 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/0).value(), \"1234\");\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/4).value(), \"1234\");",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 50,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1702864451,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, leftover from a previous version, updated now!",
      "created_at": "2024-08-05T14:07:04Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704179447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704179447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704245347",
      "pull_request_review_id": 2219106988,
      "id": 1704245347,
      "node_id": "PRRC_kwDOABII585llLhj",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (input.empty() || (result_size && input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (input.size() < result_size) {",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702840728,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure about this. I don't find it more readable, and it also makes the code less robust to changes in other lines. Going to leave as is for now.",
      "created_at": "2024-08-05T14:52:53Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704245347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704245347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704246003",
      "pull_request_review_id": 2219106988,
      "id": 1704246003,
      "node_id": "PRRC_kwDOABII585llLrz",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1702863957,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed to an `int` type which takes a negative value to disable.",
      "created_at": "2024-08-05T14:53:22Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704246003",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704246003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704246877",
      "pull_request_review_id": 2219106988,
      "id": 1704246877,
      "node_id": "PRRC_kwDOABII585llL5d",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding\n+ *                    if input is too short, or a std::nullopt return\n+ *                    value if input is too long. Disabled if <= 0.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702847776,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, leftover from previous version where it could be. Since `result_size` is now an `int` again, docs updated to say `Disabled if <= -1`",
      "created_at": "2024-08-05T14:53:59Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704246877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704246877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704248989",
      "pull_request_review_id": 2219106988,
      "id": 1704248989,
      "node_id": "PRRC_kwDOABII585llMad",
      "diff_hunk": "@@ -432,29 +432,33 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/0).value(), \"1234\");",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 49,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702836629,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done (although `result_size=0` will always return `std::nullopt` because empty input strings are not allowed as per the existing `IsHexNumber` behaviour)",
      "created_at": "2024-08-05T14:55:29Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704248989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704248989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705281963",
      "pull_request_review_id": 2219106988,
      "id": 1705281963,
      "node_id": "PRRC_kwDOABII585lpImr",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/64)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));\n+        } else {\n             return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}; value && *value != \"0\") {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1702863593,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ugh, you're right, thanks a lot for catching this. This approach would've silently ignored `-noassumevalid` and `-assumevalid=0` by using the `defaultAssumeValid` value instead. I think it's not great that this bug didn't cause any tests to fail. `feature_assumevalid.py` doesn't catch this because `defaultAssumeValid` on regtest [is null](https://github.com/bitcoin/bitcoin/blob/43740f4971f45cd5499470b6a085b3ecd8b96d28/src/kernel/chainparams.cpp#L452) (and I don't think there's a way around this), and we don't seem to have any unittesting on applying args to options.\r\n\r\nI've added 1c909b2ccfaee902637b28f890db8dbe168ea926 as a first commit (fails on b38a259d1e2749876d4e3a15f218b4f257049320) to add unittesting on `-assumevalid` and `-minimumchainwork`. ",
      "created_at": "2024-08-06T10:13:59Z",
      "updated_at": "2024-08-06T15:51:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705281963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705281963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705285352",
      "pull_request_review_id": 2219106988,
      "id": 1705285352,
      "node_id": "PRRC_kwDOABII585lpJbo",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702847680,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `Number` part indicates that we're dealing with numerical values, where `0x00` means the same thing as `0x0000`, so I think that aligns with how the function behaves?\r\nReturn types are not immediately visible on in the callsite, and I think `Try` indicating that the function accepts malformed input is helpful for the reader, so I'm going to leave this as is.",
      "created_at": "2024-08-06T10:16:53Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705285352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705285352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705293768",
      "pull_request_review_id": 2219106988,
      "id": 1705293768,
      "node_id": "PRRC_kwDOABII585lpLfI",
      "diff_hunk": "@@ -7,26 +7,29 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            auto sanitized{*Assert(TrySanitizeHexNumber(num, uint256::size() * 2))}; // RANDOM_CTX_SEED must be up to 64 char hex string",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1703942199,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I couldn't see `RANDOM_CTX_SEED` be documented anywhere as having to be a 64 char hex string, so I thought trying to be lenient would be good for backwards compatibility, but I don't have a view on how important that is so happy to go with your simplification. Adopted in latest force push.",
      "created_at": "2024-08-06T10:24:02Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705293768",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705293768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705382053",
      "pull_request_review_id": 2221052712,
      "id": 1705382053,
      "node_id": "PRRC_kwDOABII585lphCl",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (input.empty() || (result_size && input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (input.size() < result_size) {",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702840728,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍, thanks for considering",
      "created_at": "2024-08-06T11:35:45Z",
      "updated_at": "2024-08-06T11:35:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705382053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705382053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705386853",
      "pull_request_review_id": 2221060518,
      "id": 1705386853,
      "node_id": "PRRC_kwDOABII585lpiNl",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702847680,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ok, the number part can make sense, I'm still not sure about the `Try` part - seems like https://en.wikipedia.org/wiki/Hungarian_notation, which (as a Hungarian) I'm very much against :p\r\n\r\n> Return types are not immediately visible on in the callsite\r\n\r\nIt's part of the method's signature, I don't see how repeating it in the method's name helps.\r\nThe parameters also aren't visible on the call site, yet we're not encoding them in the method's name.\r\n\r\nIf you insist, I won't block you on this of course, but want to make sure that my arguments against it are clear.",
      "created_at": "2024-08-06T11:39:55Z",
      "updated_at": "2024-08-06T11:39:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705386853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705386853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705542508",
      "pull_request_review_id": 2221314252,
      "id": 1705542508,
      "node_id": "PRRC_kwDOABII585lqINs",
      "diff_hunk": "@@ -27,7 +27,7 @@ FUZZ_TARGET(hex)\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string);",
      "path": "src/test/fuzz/hex.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702827034,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good idea, updated `fuzz/hex.cpp` to cover `result_size` with an `int16_t`. Not sure what the optimal range of values would be here, but I figured not making it too large (`int`) makes sense given that `result_size` is not user input?",
      "created_at": "2024-08-06T13:28:51Z",
      "updated_at": "2024-08-06T13:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705542508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705542508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706570743",
      "pull_request_review_id": 2223189422,
      "id": 1706570743,
      "node_id": "PRRC_kwDOABII585luDP3",
      "diff_hunk": "@@ -7,26 +7,29 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            auto sanitized{*Assert(TrySanitizeHexNumber(num, uint256::size() * 2))}; // RANDOM_CTX_SEED must be up to 64 char hex string",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1703942199,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I couldn't see `RANDOM_CTX_SEED` be documented anywhere as having to be a 64 char hex string, so I thought trying to be lenient would be good for backwards compatibility, but I don't have a view on how important that is so happy to go with your simplification. Adopted in latest force push.\r\n\r\nThanks.\r\n\r\nFor historic context, it was added in fae43a97ca947cd0802392e9bb86d9d0572c0fba, where it is only printed. Thus, the only source should be to copy-paste from a printed value.\r\n\r\nIf not, and someone were to provide the seed from \"outside\", I think it is reasonable and clearer to require them to provide it in the exact same hex format. Otherwise, it seems fragile.",
      "created_at": "2024-08-07T08:07:01Z",
      "updated_at": "2024-08-07T08:07:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706570743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706570743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706637780",
      "pull_request_review_id": 2223466412,
      "id": 1706637780,
      "node_id": "PRRC_kwDOABII585luTnU",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for covering these scenarios!\r\n\r\nI checked to see how this fails for the previous error:\r\n> unknown location:0: fatal error: in \"validation_chainstatemanager_tests/chainstatemanager_args\": std::bad_optional_access: bad_optional_access\r\n\r\ni.e. it doesn't get to the `IsNull` check since it can't call `value()` on a null optional, right?\r\n\r\nI think we can work around that by comparing the dereferenced optional instead:\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(*set_opts({\"-assumevalid=0\"}).assumed_valid_block, uint256::ZERO);\r\n```\r\n\r\nwhich gives this error for the previously invalid setup:\r\n> src/test/validation_chainstatemanager_tests.cpp:801: error: in \"validation_chainstatemanager_tests/chainstatemanager_args\": check *set_opts({\"-assumevalid=0\"}).assumed_valid_block == uint256::ZERO has failed [000000016bcc2e20000000016bcc2e20000000016bcc29a03b66800104140f00 != 0000000000000000000000000000000000000000000000000000000000000000]\r\n\r\nWhich I find a lot more revealing.",
      "created_at": "2024-08-07T08:53:33Z",
      "updated_at": "2024-08-07T09:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706637780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706637780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706639474",
      "pull_request_review_id": 2223466412,
      "id": 1706639474,
      "node_id": "PRRC_kwDOABII585luUBy",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*result_size=*/-1).value(), \"1234\");\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*result_size=*/4).value(), \"1234\");\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"1234\", /*result_size=*/5).value(), \"01234\");\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x1234\", /*result_size=*/0));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 52,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nice",
      "created_at": "2024-08-07T08:54:39Z",
      "updated_at": "2024-08-07T09:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706639474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706639474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706642642",
      "pull_request_review_id": 2223466412,
      "id": 1706642642,
      "node_id": "PRRC_kwDOABII585luUzS",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: my first reaction was here - \"I wonder if there's an off-by-one error here\".\r\nIf you think it makes sense, consider this alternative:\r\n```suggestion\r\n    if (result_size < 0) result_size = std::numeric_limits<int>::max(); // negative result_size disables the size check\r\n```\r\n",
      "created_at": "2024-08-07T08:56:44Z",
      "updated_at": "2024-08-07T09:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706642642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706642642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706647454",
      "pull_request_review_id": 2223466412,
      "id": 1706647454,
      "node_id": "PRRC_kwDOABII585luV-e",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't particularly  like the alternative, but the developer notes state:\r\n```\r\n- Use a named cast or functional cast, not a C-Style cast. When casting\r\n    between integer types, use functional casts such as `int(x)` or `int{x}`\r\n    instead of `(int) x`. When casting between more complex types, use `static_cast`.\r\n ```",
      "created_at": "2024-08-07T08:59:59Z",
      "updated_at": "2024-08-07T09:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706647454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706647454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706662216",
      "pull_request_review_id": 2223563556,
      "id": 1706662216,
      "node_id": "PRRC_kwDOABII585luZlI",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > has failed [000000016bcc2e20000000016bcc2e20000000016bcc29a03b66800104140f00 != 0000000000000000000000000000000000000000000000000000000000000000]\r\n> \r\n> Which I find a lot more revealing.\r\n\r\nCan you run this in valgrind? Dereferencing a nullopt is UB (undefined behavior), which must be avoided in production (obviously), but also in tests.\r\n\r\nIf you want to learn which methods expose undefined behavior, I find [https://en.cppreference.com/w/cpp/utility/optional/operator*] a good resource.",
      "created_at": "2024-08-07T09:09:22Z",
      "updated_at": "2024-08-07T09:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706662216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706662216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706674268",
      "pull_request_review_id": 2223616707,
      "id": 1706674268,
      "node_id": "PRRC_kwDOABII585luchc",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706642642,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That wouldn't work. `result_size` is used both to ensure the input is not too long, as well as to pad with leading zeroes if it's too short: https://github.com/bitcoin/bitcoin/pull/30569/files#diff-3f688af8f182edecd9c33977b905b3e71dc010574f721fd4e328bdbc7706f574R59",
      "created_at": "2024-08-07T09:18:07Z",
      "updated_at": "2024-08-07T09:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706674268",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706674268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706681205",
      "pull_request_review_id": 2223645357,
      "id": 1706681205,
      "node_id": "PRRC_kwDOABII585lueN1",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706647454,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, will change to `int{x}` in next force push.",
      "created_at": "2024-08-07T09:22:49Z",
      "updated_at": "2024-08-07T09:22:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706681205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706681205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706830350",
      "pull_request_review_id": 2224318297,
      "id": 1706830350,
      "node_id": "PRRC_kwDOABII585lvCoO",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Can you run this in valgrind?\r\n\r\nThanks for the context @maflcko! Valgrind currently isn't really [compatible with ARM-based Macs](https://github.com/LouisBrunner/valgrind-macos/issues/56).\r\n\r\n> Dereferencing a nullopt is UB \r\n\r\nAnd we can't use `BOOST_CHECK_EQUAL(set_opts({\"-assumevalid=0\"}).assumed_valid_block, std::make_optional(uint256::ZERO))` since there's no standard way to display optionals, right?\r\n\r\nOk, in that case just consider the test fix validated, it failed before the fix, passes now.",
      "created_at": "2024-08-07T11:19:58Z",
      "updated_at": "2024-08-07T11:20:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706830350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706830350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706832389",
      "pull_request_review_id": 2224327805,
      "id": 1706832389,
      "node_id": "PRRC_kwDOABII585lvDIF",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706642642,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "K, in that case, the test cases check the boundaries correctly already, thanks for considering.",
      "created_at": "2024-08-07T11:21:42Z",
      "updated_at": "2024-08-07T12:20:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706832389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706832389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706853629",
      "pull_request_review_id": 2224429134,
      "id": 1706853629,
      "node_id": "PRRC_kwDOABII585lvIT9",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > Can you run this in valgrind?\r\n> \r\n> Thanks for the context @maflcko! Valgrind currently isn't really [compatible with ARM-based Macs](https://github.com/LouisBrunner/valgrind-macos/issues/56).\r\n\r\nAn alternative on macos may be Asan (or possibly Ubsan), but they require re-compiling the binary.",
      "created_at": "2024-08-07T11:39:21Z",
      "updated_at": "2024-08-07T11:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706853629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706853629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706867937",
      "pull_request_review_id": 2224497224,
      "id": 1706867937,
      "node_id": "PRRC_kwDOABII585lvLzh",
      "diff_hunk": "@@ -19,15 +20,17 @@\n \n FUZZ_TARGET(hex)\n {\n-    const std::string random_hex_string(buffer.begin(), buffer.end());\n+    FuzzedDataProvider fdp{buffer.data(), buffer.size()};\n+    const auto result_size{fdp.ConsumeIntegral<int16_t>()};\n+    const std::string random_hex_string{fdp.ConsumeRemainingBytesAsString()};\n     const std::vector<unsigned char> data = ParseHex(random_hex_string);\n     const std::vector<std::byte> bytes{ParseHex<std::byte>(random_hex_string)};\n     assert(AsBytes(Span{data}) == Span{bytes});\n     const std::string hex_data = HexStr(data);\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string, result_size);",
      "path": "src/test/fuzz/hex.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do I understand it correctly that the point of this kind of testing (i.e. just calling the method with random values without validating the result) is to make sure we don't have memory problems, don't throw unexpected exceptions, etc?\r\n\r\nSince we seem to have many hex related methods, would it make sense to compare their outputs, to make sure we at least have internal consistency?\r\n```suggestion\r\n    auto sanitized_hex = TrySanitizeHexNumber(random_hex_string, result_size);\r\n    if (sanitized_hex) {\r\n        assert(IsHex(*sanitized_hex));\r\n        assert(result_size < 0 || sanitized_hex->length() == static_cast<size_t>(result_size));\r\n    }\r\n```",
      "created_at": "2024-08-07T11:51:26Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706867937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706867937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706875949",
      "pull_request_review_id": 2224497224,
      "id": 1706875949,
      "node_id": "PRRC_kwDOABII585lvNwt",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 34,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I might have mentioned this before, but what's the reason for empbracing mixed-case hexadecimal values?",
      "created_at": "2024-08-07T11:58:06Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706875949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706875949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 443,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706877603",
      "pull_request_review_id": 2224497224,
      "id": 1706877603,
      "node_id": "PRRC_kwDOABII585lvOKj",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is it deliberate that inputs don't always contain an even number of digits?",
      "created_at": "2024-08-07T11:59:33Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706877603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706877603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706878513",
      "pull_request_review_id": 2224497224,
      "id": 1706878513,
      "node_id": "PRRC_kwDOABII585lvOYx",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could we use `IsHex` here instead, i.e. merge it with previous line:\r\n```C++\r\n    if (input.empty() || ((int)input.size() > result_size) || !IsHex(input)) return std::nullopt;\r\n```\r\n\r\nthough this contains an extra evennes requirement which we may not want here.",
      "created_at": "2024-08-07T12:00:21Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706878513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706878513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706884207",
      "pull_request_review_id": 2224497224,
      "id": 1706884207,
      "node_id": "PRRC_kwDOABII585lvPxv",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706647454,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That might not work, but extracting might:\r\n```C++\r\n    auto final_size = (result_size < 0) ? input.size() : static_cast<size_t>(result_size);\r\n```",
      "created_at": "2024-08-07T12:05:17Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706884207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706884207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706891172",
      "pull_request_review_id": 2224497224,
      "id": 1706891172,
      "node_id": "PRRC_kwDOABII585lvRek",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/64)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "00fba2a7d6a9997044e544415962de81ab5ef7ed",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in the next commit we're using `uint256::size() * 2` instead of the hard-coded 64 - consider unifying, if you agree that it documents the behavior slightly better",
      "created_at": "2024-08-07T12:11:05Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706891172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706891172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706897088",
      "pull_request_review_id": 2224497224,
      "id": 1706897088,
      "node_id": "PRRC_kwDOABII585lvS7A",
      "diff_hunk": "@@ -39,7 +39,14 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") value.emplace(uint256::size() * 2, '0'); // handle -noassumevalid",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "686e6bcf379e9590e19e347c61835b0cd6f821cb",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: if you think it's more readable, here's an alternative which avoids reparsing and duplicating `uint256::size() * 2` (but assigns twice, so you may not like it):\r\n```C++\r\n    if (auto value{args.GetArg(\"-assumevalid\")}) {\r\n        if (*value == \"0\") { // handle -noassumevalid\r\n            opts.assumed_valid_block = uint256{};\r\n        } else if (auto block_hash{uint256::FromHex(*value)}) {\r\n            opts.assumed_valid_block = *block_hash;\r\n        } else {\r\n            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex (or 0 to disable)\"), *value, uint256::size() * 2)};\r\n        }\r\n    }\r\n```",
      "created_at": "2024-08-07T12:15:51Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706897088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706897088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706902315",
      "pull_request_review_id": 2224658209,
      "id": 1706902315,
      "node_id": "PRRC_kwDOABII585lvUMr",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've noted it and will give it a try next time, thank you",
      "created_at": "2024-08-07T12:19:56Z",
      "updated_at": "2024-08-07T12:19:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706902315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706902315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706931724",
      "pull_request_review_id": 2224783283,
      "id": 1706931724,
      "node_id": "PRRC_kwDOABII585lvbYM",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706878513,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> though this contains an extra evennes requirement which we may not want here.\r\n\r\nExactly",
      "created_at": "2024-08-07T12:41:28Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706931724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706931724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706935424",
      "pull_request_review_id": 2224783283,
      "id": 1706935424,
      "node_id": "PRRC_kwDOABII585lvcSA",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706877603,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, since we're dealing with numbers specifically.",
      "created_at": "2024-08-07T12:44:00Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706935424",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706935424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706936276",
      "pull_request_review_id": 2224783283,
      "id": 1706936276,
      "node_id": "PRRC_kwDOABII585lvcfU",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 34,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706875949,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't have a strong view on it, but this commit just reuses the existing `IsHexNumber` tests so I'd rather not change that here.",
      "created_at": "2024-08-07T12:44:35Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706936276",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706936276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 443,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706946286",
      "pull_request_review_id": 2224783283,
      "id": 1706946286,
      "node_id": "PRRC_kwDOABII585lve7u",
      "diff_hunk": "@@ -39,7 +39,14 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") value.emplace(uint256::size() * 2, '0'); // handle -noassumevalid",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "686e6bcf379e9590e19e347c61835b0cd6f821cb",
      "in_reply_to_id": 1706897088,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah I like your approach better, taken, thanks.",
      "created_at": "2024-08-07T12:51:06Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706946286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706946286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706949124",
      "pull_request_review_id": 2224783283,
      "id": 1706949124,
      "node_id": "PRRC_kwDOABII585lvfoE",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/64)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "00fba2a7d6a9997044e544415962de81ab5ef7ed",
      "in_reply_to_id": 1706891172,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Makes sense, taken, thanks.",
      "created_at": "2024-08-07T12:53:02Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706949124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706949124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706949955",
      "pull_request_review_id": 2224783283,
      "id": 1706949955,
      "node_id": "PRRC_kwDOABII585lvf1D",
      "diff_hunk": "@@ -19,15 +20,17 @@\n \n FUZZ_TARGET(hex)\n {\n-    const std::string random_hex_string(buffer.begin(), buffer.end());\n+    FuzzedDataProvider fdp{buffer.data(), buffer.size()};\n+    const auto result_size{fdp.ConsumeIntegral<int16_t>()};\n+    const std::string random_hex_string{fdp.ConsumeRemainingBytesAsString()};\n     const std::vector<unsigned char> data = ParseHex(random_hex_string);\n     const std::vector<std::byte> bytes{ParseHex<std::byte>(random_hex_string)};\n     assert(AsBytes(Span{data}) == Span{bytes});\n     const std::string hex_data = HexStr(data);\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string, result_size);",
      "path": "src/test/fuzz/hex.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706867937,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> is to make sure we don't have memory problems, don't throw unexpected exceptions, etc?\r\n\r\nThat's my understanding too.\r\n\r\n> would it make sense to compare their outputs, to make sure we at least have internal consistency?\r\n\r\nSounds reasonable, but I think I'll leave that for another PR.",
      "created_at": "2024-08-07T12:53:37Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706949955",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706949955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707005179",
      "pull_request_review_id": 2224783283,
      "id": 1707005179,
      "node_id": "PRRC_kwDOABII585lvtT7",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706647454,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah that'll work, ~taken, thanks.",
      "created_at": "2024-08-07T13:30:38Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707005179",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707005179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707706392",
      "pull_request_review_id": 2225982967,
      "id": 1707706392,
      "node_id": "PRRC_kwDOABII585lyYgY",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> And we can't use `BOOST_CHECK_EQUAL(set_opts({\"-assumevalid=0\"}).assumed_valid_block, std::make_optional(uint256::ZERO))` since there's no standard way to display optionals, right?\r\n\r\nWould this fit your definition of displaying optionals?\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/16545/files#diff-d4a2fb26adedc27f16bd3778424fa94c473342a695b228220a1810119028be5bR48-R64",
      "created_at": "2024-08-07T19:06:23Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707706392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707706392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707728879",
      "pull_request_review_id": 2225982967,
      "id": 1707728879,
      "node_id": "PRRC_kwDOABII585lyd_v",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (auto padding{final_size - input.size()}; padding > 0) {\n+        result = std::string(padding, '0') + result;\n+    }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: If padding were on a warm code path I would advocate for reserving the final size of the `result` string first, avoiding the temporary '0'-repeated string and appending `input` after the zeroes.",
      "created_at": "2024-08-07T19:19:32Z",
      "updated_at": "2024-08-07T21:42:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707728879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707728879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707734248",
      "pull_request_review_id": 2225982967,
      "id": 1707734248,
      "node_id": "PRRC_kwDOABII585lyfTo",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding\n+ *                    if input is too short, or a std::nullopt return\n+ *                    value if input is too long. Disabled if <= -1.\n+ *                    (default: -1)\n+ * @return std::optional<std::string>",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why document the type here when it appears in the code below?\r\nSeems noisy if we were to do that for return types everywhere.",
      "created_at": "2024-08-07T19:22:50Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707734248",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707734248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707739633",
      "pull_request_review_id": 2225982967,
      "id": 1707739633,
      "node_id": "PRRC_kwDOABII585lygnx",
      "diff_hunk": "@@ -32,7 +32,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n+        if (!TrySanitizeHexNumber(*value)) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Would personally merge the next commit (e6f81b9d81359a7ffeff6d1830188f00df0e8db0) into this one (a227cb511ec948b37ddbc9ee65de586109ebc1da) since you're already touching this line and it looks weird as an atomic commit to just throw away the sanitized value.",
      "created_at": "2024-08-07T19:26:08Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707739633",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707739633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707760135",
      "pull_request_review_id": 2225982967,
      "id": 1707760135,
      "node_id": "PRRC_kwDOABII585lyloH",
      "diff_hunk": "@@ -7,26 +7,27 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`constexpr` implies `inline` for functions, doesn't it also for variables? Never used `inline` on variables myself, but seems it is useful in **.h** files to avoid ODR-issues. This is a **.cpp** file though.",
      "created_at": "2024-08-07T19:38:03Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707760135",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707760135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707787408",
      "pull_request_review_id": 2225982967,
      "id": 1707787408,
      "node_id": "PRRC_kwDOABII585lysSQ",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To me asserts are for enforcing logical consistency of the code, NOT for handling invalid values of environment variables.\r\n\r\nA slight convention seems to be using `abort()` in these circumstances.\r\n```C++\r\n            if (auto num_parsed{uint256::FromHex(num)}) {\r\n                return *num_parsed;\r\n            } else {\r\n                std::cerr << RANDOM_CTX_SEED << \" must be a \" << uint256::size() * 2 << \" char hex string without '0x'-prefix, was set to: '\" << num << \"'.\" << std::endl;\r\n                std::abort();\r\n            }\r\n```\r\n(I also tried `BOOST_TEST_FAIL` but ran into linker errors for the **test_util** library so would rather avoid adding a dependency).\r\n\r\nGives output:\r\n```bash\r\n$ RANDOM_CTX_SEED=123 src/test/test_bitcoin\r\nRunning 621 test cases...\r\nRANDOM_CTX_SEED must be a 64 char hex string without '0x'-prefix, was set to: '123'.\r\nunknown location(0): fatal error: in \"addrman_tests/addrman_simple\": signal: SIGABRT (application abort requested)\r\ntest/addrman_tests.cpp(64): last checkpoint: \"addrman_simple\" fixture ctor\r\ntest_bitcoin: common/args.cpp:576: void ArgsManager::AddArg(const std::string&, const std::string&, unsigned int, const OptionsCategory&): Assertion `ret.second' failed.\r\nunknown location(0): fatal error: in \"addrman_tests/addrman_ports\": signal: SIGABRT (application abort requested)\r\ntest/addrman_tests.cpp(108): last checkpoint: \"addrman_ports\" fixture ctor\r\n...\r\n```",
      "created_at": "2024-08-07T19:54:38Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707787408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707787408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707914379",
      "pull_request_review_id": 2225982967,
      "id": 1707914379,
      "node_id": "PRRC_kwDOABII585lzLSL",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\r\n    BOOST_REQUIRE(error.empty());\r\n```",
      "created_at": "2024-08-07T21:08:55Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707914379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707914379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 781,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707936724",
      "pull_request_review_id": 2226223316,
      "id": 1707936724,
      "node_id": "PRRC_kwDOABII585lzQvU",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, I think that would produce better error messages on failure.",
      "created_at": "2024-08-07T21:24:28Z",
      "updated_at": "2024-08-07T21:24:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707936724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707936724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707941944",
      "pull_request_review_id": 2226228213,
      "id": 1707941944,
      "node_id": "PRRC_kwDOABII585lzSA4",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> To me asserts are for enforcing logical consistency of the code, NOT for handling invalid values of environment variables.\r\n\r\nCorrect. This rule must be applied to real production code. However, in the tests, personally I like to use it for brevity. No objection to using something else.",
      "created_at": "2024-08-07T21:28:08Z",
      "updated_at": "2024-08-07T21:28:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707941944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707941944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707958805",
      "pull_request_review_id": 2226246193,
      "id": 1707958805,
      "node_id": "PRRC_kwDOABII585lzWIV",
      "diff_hunk": "@@ -7,26 +7,27 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            return *Assert(uint256::FromHex(num)); // RANDOM_CTX_SEED must be a 64 char hex string\n+        }\n         // Otherwise use a (truly) random value.\n         return GetRandHash();\n     }();",
      "path": "src/test/util/random.cpp",
      "position": 37,
      "original_position": 32,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you re-touch this commit, it could make sense to remove the `__func__` printing in the log call below. It doesn't add any value and may be duplicate. I understand it is unrelated, but when touching a test-only function, may as well fix all trivial issues in one go. (See the commit I referred to in https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1703942199, which also has steps to reproduce and test in the description)",
      "created_at": "2024-08-07T21:39:35Z",
      "updated_at": "2024-08-07T21:40:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707958805",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707958805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709153215",
      "pull_request_review_id": 2227455502,
      "id": 1709153215,
      "node_id": "PRRC_kwDOABII585l35u_",
      "diff_hunk": "@@ -7,26 +7,27 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            return *Assert(uint256::FromHex(num)); // RANDOM_CTX_SEED must be a 64 char hex string\n+        }\n         // Otherwise use a (truly) random value.\n         return GetRandHash();\n     }();",
      "path": "src/test/util/random.cpp",
      "position": 37,
      "original_position": 32,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": 1707958805,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, I've taken your commit (hadn't seen the commit message earlier, very nice) but just added the docstring (and smaller `num` scope) back in.",
      "created_at": "2024-08-08T10:18:58Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709153215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709153215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709155583",
      "pull_request_review_id": 2227455502,
      "id": 1709155583,
      "node_id": "PRRC_kwDOABII585l36T_",
      "diff_hunk": "@@ -7,26 +7,27 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": 1707760135,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think you're right that `inline` was not necessary here. No longer applies as I've adopted [maflcko's suggestion](https://github.com/bitcoin/bitcoin/pull/30569/files#r1707958805) which moves the var back inside the `SeedRandomForTest` scope.",
      "created_at": "2024-08-08T10:20:13Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709155583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709155583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709162569",
      "pull_request_review_id": 2227455502,
      "id": 1709162569,
      "node_id": "PRRC_kwDOABII585l38BJ",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": 1707914379,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This feels like a distraction to me tbh, we're not unit testing `ParseParameters` here. I think it's safe to rely on `ParseParameters` returning `false` when there's an error.",
      "created_at": "2024-08-08T10:24:08Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709162569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709162569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 781,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709194170",
      "pull_request_review_id": 2227455502,
      "id": 1709194170,
      "node_id": "PRRC_kwDOABII585l4Du6",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (auto padding{final_size - input.size()}; padding > 0) {\n+        result = std::string(padding, '0') + result;\n+    }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": 1707728879,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Don't think this is worth spending too much time on but given that the only non-test call is quite likely to require padding, I've updated it to:\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/src/util/strencodings.cpp b/src/util/strencodings.cpp\r\nindex 4e0317cd0e..be946af269 100644\r\n--- a/src/util/strencodings.cpp\r\n+++ b/src/util/strencodings.cpp\r\n@@ -8,6 +8,7 @@\r\n #include <crypto/hex_base.h>\r\n #include <span.h>\r\n \r\n+#include <algorithm>\r\n #include <array>\r\n #include <cassert>\r\n #include <cstring>\r\n@@ -54,10 +55,8 @@ std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int resu\r\n     for (char c : input) {\r\n         if (HexDigit(c) < 0) return std::nullopt;\r\n     }\r\n-    std::string result{input};\r\n-    if (auto padding{final_size - input.size()}; padding > 0) {\r\n-        result = std::string(padding, '0') + result;\r\n-    }\r\n+    std::string result(final_size, '0');\r\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\r\n     return result;\r\n }\r\n \r\n```\r\n</details>",
      "created_at": "2024-08-08T10:41:51Z",
      "updated_at": "2024-08-08T11:00:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709194170",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709194170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709204523",
      "pull_request_review_id": 2227455502,
      "id": 1709204523,
      "node_id": "PRRC_kwDOABII585l4GQr",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding\n+ *                    if input is too short, or a std::nullopt return\n+ *                    value if input is too long. Disabled if <= -1.\n+ *                    (default: -1)\n+ * @return std::optional<std::string>",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": 1707734248,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed, autogenerated and didn't think to remove it. Done.",
      "created_at": "2024-08-08T10:48:13Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709204523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709204523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709206741",
      "pull_request_review_id": 2227455502,
      "id": 1709206741,
      "node_id": "PRRC_kwDOABII585l4GzV",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be nice to have std::optional support in BOOST_CHECK_EQUAL but this PR has already had quite a bit of churn so I'm going to limit the scope and leave as is given that it's not super relevant.",
      "created_at": "2024-08-08T10:49:31Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709206741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709206741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709207046",
      "pull_request_review_id": 2227455502,
      "id": 1709207046,
      "node_id": "PRRC_kwDOABII585l4G4G",
      "diff_hunk": "@@ -32,7 +32,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n+        if (!TrySanitizeHexNumber(*value)) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": 1707739633,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I disagree, a227cb511ec948b37ddbc9ee65de586109ebc1da is a refactor commit so I prefer keeping the behaviour-changing commits such as e6f81b9d81359a7ffeff6d1830188f00df0e8db0 smaller and separate.",
      "created_at": "2024-08-08T10:49:43Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709207046",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709207046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709211452",
      "pull_request_review_id": 2227455502,
      "id": 1709211452,
      "node_id": "PRRC_kwDOABII585l4H88",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> However, in the tests, personally I like to use it for brevity.\r\n\r\nI agree. The tests fail gracefully, and the error message is helpful, including the location of the assertion which documents that we're expecting a 64 char hex string. Going to leave as is.\r\n\r\n```\r\nRunning 1 test case...\r\ntest/util/random.cpp:29 operator(): Assertion `uint256::FromHex(num)' failed.\r\nunknown location:0: fatal error: in \"timeoffsets_tests/timeoffsets_warning\": signal: SIGABRT (application abort requested)\r\ntest/timeoffsets_tests.cpp:62: last checkpoint: \"timeoffsets_warning\" fixture ctor\r\n\r\n*** 1 failure is detected in the test module \"Bitcoin Core Test Suite\"\r\n```",
      "created_at": "2024-08-08T10:52:20Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709211452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709211452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709346477",
      "pull_request_review_id": 2227676819,
      "id": 1709346477,
      "node_id": "PRRC_kwDOABII585l4o6t",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The inclination to use `Assert` for any fatal error is understandable, but as I said in my book they are for catching logic errors - not for validating user environment. My non-Bitcoin experience tells me that policies around what should be asserts require upkeep, so I took the time to provide an alternate version.\r\n\r\nWas reading https://bitcoincore.academy/bin/onboarding-to-bitcoin-core.html today and came across\r\n> We take extra care during the encryption phase to either complete atomically or fail. This includes database writes where we don’t want to write half and crash, for example. *Therefore we will throw an assertion if the write fails.*\r\n\r\nNot sure if the actual code really uses assertions to stop the process if the database reports write failure. Maybe Bitcoin Core has a looser policy than I'm used to, and at least @maflcko is okay with using it in tests.\r\n\r\nFrom a purely functional angle, the `std::cerr` output provides more immediate and actionable information than the assert.\r\n``test/util/random.cpp:29 operator(): Assertion `uint256::FromHex(num)' failed.``\r\nvs\r\n``RANDOM_CTX_SEED must be a 64 char hex string without '0x'-prefix, was set to: '123'.``\r\n\r\nI'm happy you incorporated some of my other suggestions but I pointed out this as my major gripe with the PR.\r\n\r\nStaying true to my principles and giving this an Approach A-C-K generates cognitive dissonance. But maybe I could be bribed by promises of likely support for a future PR from me cleaning up incorrect `Assert` usage in tests in general.",
      "created_at": "2024-08-08T12:08:59Z",
      "updated_at": "2024-08-08T12:09:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709346477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709346477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709362894",
      "pull_request_review_id": 2227696150,
      "id": 1709362894,
      "node_id": "PRRC_kwDOABII585l4s7O",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that:\r\n* this is only used in a single place in prod (which accept `std::string_view` as well and has an `std::string` input)\r\n* we're always copying the result before returning\r\n* the overwhelming majority of inputs will probably have the correct size already, i.e. don't need change.\r\n* the performance of the method seems to be important\r\n\r\nCould we either return an `std::optional<std::string_view>` instead or take an `std::string& input` to be able to return it?\r\n\r\ni.e.\r\n```suggestion\r\nstd::optional<std::string> TrySanitizeHexNumber(std::string input, int result_size)\r\n{\r\n    input = util::RemovePrefixView(input, \"0x\");\r\n    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\r\n    if (input.empty() || (input.size() > final_size)) [[unlikely]] return std::nullopt;\r\n    for (char c : input) {\r\n        if (HexDigit(c) < 0) [[unlikely]] return std::nullopt;\r\n    }\r\n    if (input.size() == final_size) [[likely]] return input;\r\n\r\n    std::string result(final_size, '0');\r\n    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\r\n    return result;\r\n}\r\n```",
      "created_at": "2024-08-08T12:18:33Z",
      "updated_at": "2024-08-08T12:20:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709362894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709362894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709378173",
      "pull_request_review_id": 2227714760,
      "id": 1709378173,
      "node_id": "PRRC_kwDOABII585l4wp9",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n> > _Therefore we will throw an assertion if the write fails._\r\n> \r\n> Not sure if the actual code really uses assertions to stop the process if the database reports write failure. Maybe Bitcoin Core has a looser policy than I'm used to, and at least @maflcko is okay with using it in tests.\r\n\r\nI haven't checked the code, but \"throw assertion\" could mean \"throw assertion error\", which seems fine to use in this context the quote was taken from.\r\n\r\nNot to be confused with other context, where aborting the program on (some) hardware corruption is actually intentional, and I think also fine. When your hardware runs into a corrupt state, aborting seems preferable, when otherwise execution can't continue meaningfully anyway. When it happens, the user will usually have to wipe their state or replace their hardware anyway. It is also not external user-input that is passed to the assert, in this case (at least it can be assumed to).\r\n\r\n\r\n\r\n> But maybe I could be bribed by promises of likely support for a future PR from me cleaning up incorrect `Assert` usage in tests in general.\r\n\r\nHeh, I am generally happy to review any test-related pull requests.\r\n",
      "created_at": "2024-08-08T12:26:24Z",
      "updated_at": "2024-08-08T12:26:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709378173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709378173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709416606",
      "pull_request_review_id": 2227761837,
      "id": 1709416606,
      "node_id": "PRRC_kwDOABII585l46Ce",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree taking `input` as `std::string` works better with the return type.\r\n\r\nInstead of introducing a 2nd string at the end, one could simply:\r\n```C++\r\n    input.insert(0, final_size - input.size(), '0');\r\n    return input;\r\n```",
      "created_at": "2024-08-08T12:45:19Z",
      "updated_at": "2024-08-08T12:45:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709416606",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709416606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709439226",
      "pull_request_review_id": 2227791118,
      "id": 1709439226,
      "node_id": "PRRC_kwDOABII585l4_j6",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Using assertions to prevent the process from continuing in an unsupported state is certainly better than nothing at all.\r\n\r\nOnce the risk of unsupported state due to hardware failure or environment variable misconfiguration becomes known, one should implement non-assert error handling code, as the unsupported state is now expected in some circumstances.\r\n\r\nI concede that in this case the environment variable is usually supposed to be set by Python functional tests, so there is a weak case to be made that it is a logic error. But if a problematic seed value is found and incorrectly copied like in my \"123\" example above, skipping over the Python layer, it no longer is a code-level logic error.",
      "created_at": "2024-08-08T12:57:00Z",
      "updated_at": "2024-08-08T12:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709439226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709439226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709471024",
      "pull_request_review_id": 2227833623,
      "id": 1709471024,
      "node_id": "PRRC_kwDOABII585l5HUw",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> in this case the environment variable is usually supposed to be set by Python functional tests, so there is a weak case to be made that it is a logic error.\r\n\r\nGoing back to this case, I don't think `RANDOM_CTX_SEED` is set by python at all. It should only be set by a dev (or user), or not at all.\r\n\r\nAt least when I locally call `git grep RANDOM_CTX_SEED`, I don't see it.\r\n\r\n",
      "created_at": "2024-08-08T13:12:21Z",
      "updated_at": "2024-08-08T13:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709471024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709471024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709484770",
      "pull_request_review_id": 2227855746,
      "id": 1709484770,
      "node_id": "PRRC_kwDOABII585l5Kri",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for calling out my assumption that `test_runner.py --randomseed=X` could trickle down into unit tests.\r\n\r\nMakes my case for it not being a logic error slightly stronger.",
      "created_at": "2024-08-08T13:19:09Z",
      "updated_at": "2024-08-08T13:19:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709484770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709484770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709502254",
      "pull_request_review_id": 2227879671,
      "id": 1709502254,
      "node_id": "PRRC_kwDOABII585l5O8u",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">    input.insert(0, final_size - input.size(), '0');\r\n    return input;\r\n\r\nmy functional programming past screams at the though of mutating parameters and also returning them\r\n<insert meme with PTSD Chihuahua>",
      "created_at": "2024-08-08T13:26:56Z",
      "updated_at": "2024-08-08T13:26:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709502254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709502254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709508509",
      "pull_request_review_id": 2227887917,
      "id": 1709508509,
      "node_id": "PRRC_kwDOABII585l5Qed",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, I had a bit of an itch as I was writing `return input`, but you made your bed when you started taking `std::string` by non-const value. :)",
      "created_at": "2024-08-08T13:30:06Z",
      "updated_at": "2024-08-08T13:30:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709508509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709508509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709526856",
      "pull_request_review_id": 2227913016,
      "id": 1709526856,
      "node_id": "PRRC_kwDOABII585l5U9I",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> the performance of the method seems to be important\r\n\r\nHow so? There is one callsite, which can be called at most once, to parse one optional debug-only option.\r\n\r\n> Could we either return an std::optional<std::string_view>\r\n\r\nHow would that work? `std::string_view` is a non-owning view.\r\n\r\n> we're always copying the result before returning\r\n\r\nIn 802374b4355bd1dec7a88bba6287c55f935699fe, we're always allocating exactly once (assuming RVO). In your example, we'd be allocating at least once, and twice if we need padding. That doesn't look like an improvement to me.\r\n\r\n> the overwhelming majority of inputs will probably have the correct size already, i.e. don't need change.\r\n\r\nGiven that it relies on user input, that seems hard to substantiate. In the functional tests, for example, we're using quite a bit of non-64 char hex input, which is reasonable given that we're doing all this work to accept number input.",
      "created_at": "2024-08-08T13:39:05Z",
      "updated_at": "2024-08-08T13:46:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709526856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709526856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709538299",
      "pull_request_review_id": 2227929027,
      "id": 1709538299,
      "node_id": "PRRC_kwDOABII585l5Xv7",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Edit: this was regarding the suggestion in https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709362894).\r\n\r\n```C++\r\ninput = util::RemovePrefixView(input, \"0x\");\r\n```\r\nThis line gives me the heebie-jeebies if input is `std::string`. It might be okay as we are assigning a shorter string, but worst case, the assignment operator could free it's prior heap buffer and allocate a shorter buffer, before attempting to copy from the string_view which now might reference the deallocated buffer. Using `RemovePrefix()` should alleviate the problem.",
      "created_at": "2024-08-08T13:43:47Z",
      "updated_at": "2024-08-08T19:39:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709538299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709538299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709568559",
      "pull_request_review_id": 2227969312,
      "id": 1709568559,
      "node_id": "PRRC_kwDOABII585l5fIv",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Force pushed to use `std::abort()` since it seems everyone can get behind that, thanks for the suggestion.",
      "created_at": "2024-08-08T13:56:18Z",
      "updated_at": "2024-08-08T13:57:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709568559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709568559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709618160",
      "pull_request_review_id": 2228034963,
      "id": 1709618160,
      "node_id": "PRRC_kwDOABII585l5rPw",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will let you decide, there are multiple ways to do this, each would be slightly better in a different scenario.\r\nWhichever produces the cleanest code, choose that :)\r\n\r\nedit: the example I gave didn't actually use the `std::string& input` I've suggested",
      "created_at": "2024-08-08T14:20:11Z",
      "updated_at": "2024-08-08T18:37:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709618160",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709618160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710130409",
      "pull_request_review_id": 2228661985,
      "id": 1710130409,
      "node_id": "PRRC_kwDOABII585l7oTp",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: An `Assume()` or `Assert()` around the `FromHex()` result before the `*`-deref might be better here, even though it should work :tm:.\r\n\r\nMaybe linking `TrySanitizeHexNumber` and `FromHex` together in the fuzz-test would be good for enforcing that the former only allows through something acceptable to the latter (although `result_size` must also be correct).\r\n\r\nEdit: An alternative to `Assert`/`Assume` would be to call `FromHex(..).value()` and have a `std::bad_optional_access` be thrown should it ever not have a value.",
      "created_at": "2024-08-08T19:11:29Z",
      "updated_at": "2024-08-08T19:32:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1710130409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710130409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710962569",
      "pull_request_review_id": 2229552365,
      "id": 1710962569,
      "node_id": "PRRC_kwDOABII585l-zeJ",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1710130409,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, even though this assumption seems safe at the moment it's brittle and blindly dereferencing it is not good practice. Will use `.value()` either in next force-push or in the follow-up PR removing `uint256S` completely. Thanks.",
      "created_at": "2024-08-09T07:39:19Z",
      "updated_at": "2024-08-09T07:39:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1710962569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710962569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711088525",
      "pull_request_review_id": 2229712005,
      "id": 1711088525,
      "node_id": "PRRC_kwDOABII585l_SON",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1710130409,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(In the follow-up you can also adjust the error message to explain the new max-length check. Otherwise, this could be confusing:\r\n\r\n`Error: Invalid non-hex (0x1234ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) minimum chain work value specified`)",
      "created_at": "2024-08-09T08:58:11Z",
      "updated_at": "2024-08-09T08:58:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711088525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711088525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711222223",
      "pull_request_review_id": 2229881893,
      "id": 1711222223,
      "node_id": "PRRC_kwDOABII585l_y3P",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1710130409,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> blindly dereferencing it is not good practice\r\n\r\nIn C++23 we'll be able to chain them properly via something like `auto hex_value = sanitized_hex.and_then(uint256::FromHex);`\r\nIf there's a C++23 checklist somewhere (haven't seen any), we could just leave the dereference as is and fix it after we migrate to C++23 instead.",
      "created_at": "2024-08-09T10:30:14Z",
      "updated_at": "2024-08-09T10:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711222223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711222223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711493167",
      "pull_request_review_id": 2230242407,
      "id": 1711493167,
      "node_id": "PRRC_kwDOABII585mA1Av",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 40,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Split out to pr: https://github.com/bitcoin/bitcoin/pull/30618",
      "created_at": "2024-08-09T13:43:31Z",
      "updated_at": "2024-08-09T13:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711493167",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711493167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711494297",
      "pull_request_review_id": 2230243666,
      "id": 1711494297,
      "node_id": "PRRC_kwDOABII585mA1SZ",
      "diff_hunk": "@@ -19,15 +20,17 @@\n \n FUZZ_TARGET(hex)\n {\n-    const std::string random_hex_string(buffer.begin(), buffer.end());\n+    FuzzedDataProvider fdp{buffer.data(), buffer.size()};\n+    const auto result_size{fdp.ConsumeIntegral<int16_t>()};\n+    const std::string random_hex_string{fdp.ConsumeRemainingBytesAsString()};\n     const std::vector<unsigned char> data = ParseHex(random_hex_string);\n     const std::vector<std::byte> bytes{ParseHex<std::byte>(random_hex_string)};\n     assert(AsBytes(Span{data}) == Span{bytes});\n     const std::string hex_data = HexStr(data);\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string, result_size);",
      "path": "src/test/fuzz/hex.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706867937,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Split out to other pr: https://github.com/bitcoin/bitcoin/pull/30618",
      "created_at": "2024-08-09T13:44:01Z",
      "updated_at": "2024-08-09T13:56:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711494297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711494297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711911714",
      "pull_request_review_id": 2230780077,
      "id": 1711911714,
      "node_id": "PRRC_kwDOABII585mCbMi",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: unittest chainstatemanager_args\" (1c909b2ccfaee902637b28f890db8dbe168ea926)\r\n\r\nI don't think this should be a standalone function when it is only called one place. IMO it would be better to drop it and move the code into the set_opts lambda, which is the only place using it. Getting rid of this function would also avoid unnecessary complexity of converting a char* array to a std::string array and back to a char* array again, and it could avoid introducing an inconsistently named \"args_man\" variable (majority of code uses `args` to refer to the ArgsManager instance, and some older code uses `argsman`, but `args_man` would be new).",
      "created_at": "2024-08-09T18:02:28Z",
      "updated_at": "2024-08-09T19:02:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711911714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711911714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 774,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711935626",
      "pull_request_review_id": 2230780077,
      "id": 1711935626,
      "node_id": "PRRC_kwDOABII585mChCK",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: refactor: change IsHexNumber to TrySanitizeHexNumber\" (802374b4355bd1dec7a88bba6287c55f935699fe)\r\n\r\nWould be good to change \"Size of\" to \"Desired size of\". When I first read this I was confused why this would ask for the size to specified.",
      "created_at": "2024-08-09T18:09:32Z",
      "updated_at": "2024-08-09T19:02:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711935626",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711935626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711957751",
      "pull_request_review_id": 2230780077,
      "id": 1711957751,
      "node_id": "PRRC_kwDOABII585mCmb3",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: refactor: change IsHexNumber to TrySanitizeHexNumber\" (802374b4355bd1dec7a88bba6287c55f935699fe)\r\n\r\nThis is a somewhat odd function doing a combination of arbitrary things:\r\n\r\n- Trimming 0x prefix\r\n- Returning an error the string is too long\r\n- Padding with 0 if the string is too short\r\n\r\nAnd not doing other things that you might expect a sanitize function to do like trimming whitespace or normalizing the case.\r\n\r\nI think instead of saying this \"sanitizes\" the string and pretending like that word means something it would be better to just say this strips 0x prefixes and fixes the length of the string so it can be passed to the base_blob::ParseHex() function.",
      "created_at": "2024-08-09T18:24:58Z",
      "updated_at": "2024-08-09T19:02:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711957751",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711957751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711973562",
      "pull_request_review_id": 2230780077,
      "id": 1711973562,
      "node_id": "PRRC_kwDOABII585mCqS6",
      "diff_hunk": "@@ -39,7 +39,15 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") { // handle -noassumevalid\n+            opts.assumed_valid_block = uint256{};\n+        } else if (auto block_hash{uint256::FromHex(*value)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "19650768575e3d76d0e06c186896b00ad3e26e57",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~In commit \"node: use uint256::FromHex for -minimumchainwork parsing\" (3c794b537fe8fe000d3545704afc17d1d63bdb5f)~\r\nIn commit \"node: use uint256::FromHex for -assumevalid parsing\" (19650768575e3d76d0e06c186896b00ad3e26e57)\r\n\r\nThis is also now going to reject assumevalid numbers that begin with `0x` which isn't mentioned in the commit message, and also reject numbers with whitespace prefixes and suffixes and trailing non-hex characters.\r\n\r\nI think it would be better to just use TrySanitizeHexNumber here to avoid breaking things that work without a clear reason. I can see an argument for rejecting extra whitespace and spurious characters, but `0x` prefix should be harmless and it also seems ok to not require numbers to be padded with leading 0's.\r\n\r\nUsing TrySanitizeHexNumber here would also allow simplifying the code by dropping the == \"0\" special case and avoiding the need to modify `feature_assumevalid.py`.",
      "created_at": "2024-08-09T18:36:07Z",
      "updated_at": "2024-08-13T01:11:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711973562",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711973562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711982050",
      "pull_request_review_id": 2230780077,
      "id": 1711982050,
      "node_id": "PRRC_kwDOABII585mCsXi",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromHex(num)}) {",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Only accept a fully valid RANDOM_CTX_SEED\" (855784d3a0026414159acc42fceeb271f8a28133)\r\n\r\nI don't understand the motivation for being so strict here. It seems better to call TrySanitizeHexNumber and keep accepting small numbers. The seed just needs to be any number, and I don't see why numbers that have 64 digits are better than other numbers, or why somebody manually setting the environment variable manually should need to pad the number and make sure it has 64 digits.",
      "created_at": "2024-08-09T18:43:05Z",
      "updated_at": "2024-08-09T19:03:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711982050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711982050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711985406",
      "pull_request_review_id": 2230780077,
      "id": 1711985406,
      "node_id": "PRRC_kwDOABII585mCtL-",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: refactor: change IsHexNumber to TrySanitizeHexNumber\" (802374b4355bd1dec7a88bba6287c55f935699fe)\r\n\r\n> std::nullopt returned if input is longer than result_size\r\n\r\nImplementation seems to return null when string is empty, not just when string is too long.",
      "created_at": "2024-08-09T18:45:40Z",
      "updated_at": "2024-08-09T19:02:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711985406",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711985406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 77,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711992941",
      "pull_request_review_id": 2230780077,
      "id": 1711992941,
      "node_id": "PRRC_kwDOABII585mCvBt",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"node: use uint256::FromHex for -minimumchainwork parsing\" (3c794b537fe8fe000d3545704afc17d1d63bdb5f)\r\n\r\n> This makes parsing more strict, by explicitly returning an error\r\n> when the input is longer than 64 hex characters.\r\n\r\nCommit message is incomplete. The number is not just rejected when it is too long but also if it has whitespace prefixes or suffixes or trailing non-hex characters. These would have been ignored previously.",
      "created_at": "2024-08-09T18:50:48Z",
      "updated_at": "2024-08-09T19:02:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711992941",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711992941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712427499",
      "pull_request_review_id": 2231282040,
      "id": 1712427499,
      "node_id": "PRRC_kwDOABII585mEZHr",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1711992941,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The number is not just rejected when it is too long but also if it has whitespace prefixes or suffixes or trailing non-hex characters. These would have been ignored previously.\r\n\r\nIs that so? It seems to me that `IsHexNumber()` would have returned false for all of those cases, which is why 802374b4355bd1dec7a88bba6287c55f935699fe is a refactor commit?",
      "created_at": "2024-08-10T00:36:10Z",
      "updated_at": "2024-08-10T01:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712427499",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712427499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712432448",
      "pull_request_review_id": 2231282040,
      "id": 1712432448,
      "node_id": "PRRC_kwDOABII585mEaVA",
      "diff_hunk": "@@ -39,7 +39,15 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") { // handle -noassumevalid\n+            opts.assumed_valid_block = uint256{};\n+        } else if (auto block_hash{uint256::FromHex(*value)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "19650768575e3d76d0e06c186896b00ad3e26e57",
      "in_reply_to_id": 1711973562,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> 0x which isn't mentioned in the commit message, and also reject numbers with whitespace prefixes and suffixes and trailing non-hex characters.\r\n\r\n`x`, whitespace, and trailing non-hex characters are all non-hex characters, so arguably it is mentioned in the commit message, but I agree it wouldn't hurt to be explicit about the 0x prefix and whitespace.\r\n\r\n> and it also seems ok to not require numbers to be padded with leading 0's.\r\n\r\nI'm a bit confused about this comment being in the `-assumevalid` code block, which specifically should only accept hashes and not numbers\r\n\r\n> Using TrySanitizeHexNumber here would also allow simplifying the code by dropping the == \"0\" special case and avoiding the need to modify feature_assumevalid.py.\r\n\r\nI don't think we should allow anything besides `0` or a (potentially) valid block hash, that feels brittle to me. But again, given that you're commenting on `-assumedvalid` code in a `-minimumchainwork` commit I think there might be some misunderstanding?",
      "created_at": "2024-08-10T00:43:17Z",
      "updated_at": "2024-08-10T01:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712432448",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712432448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712435380",
      "pull_request_review_id": 2231282040,
      "id": 1712435380,
      "node_id": "PRRC_kwDOABII585mEbC0",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromHex(num)}) {",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "in_reply_to_id": 1711982050,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for your input. I wasn't sure about this either. See https://github.com/bitcoin/bitcoin/pull/30569/#discussion_r1703942199 for previous discussion on this topic. It seems example values have all been 64 characters in the past, and given that it's only used in tests it doesn't seem unreasonably to be a bit more strict to simplify the logic, but I appreciate your point of view too.",
      "created_at": "2024-08-10T00:48:35Z",
      "updated_at": "2024-08-10T01:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712435380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712435380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712438144",
      "pull_request_review_id": 2231282040,
      "id": 1712438144,
      "node_id": "PRRC_kwDOABII585mEbuA",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1711911714,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't think this should be a standalone function when it is only called one place.\r\n\r\nThe reason I organized it this way is because I was quite surprised to see that we don't have unit testing on setting options from arguments, and `SetOptsFromArgs()` can trivially (when templated) be reused for any other options setting test, avoiding (non-move) changes to this file. With that said, would you still prefer not having a separate function, or e.g. templating it (prematurely) and moving it into `test/util/`?",
      "created_at": "2024-08-10T00:54:13Z",
      "updated_at": "2024-08-10T01:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712438144",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712438144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 774,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712440706",
      "pull_request_review_id": 2231282040,
      "id": 1712440706,
      "node_id": "PRRC_kwDOABII585mEcWC",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711985406,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah yes you're right, this is to follow existing behaviour of `IsHexNumber()`  but it's not documented, I'll fix that, thanks.",
      "created_at": "2024-08-10T00:58:24Z",
      "updated_at": "2024-08-10T01:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712440706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712440706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 77,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712441877",
      "pull_request_review_id": 2231282040,
      "id": 1712441877,
      "node_id": "PRRC_kwDOABII585mEcoV",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711935626,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Would be good to change \"Size of\" to \"Desired size of\".\r\n\r\n\"Desired\" to me sounds like the result string may not actually be of the requested size, when it is actually guaranteed. I'm not sure that would be an improvement?",
      "created_at": "2024-08-10T01:00:15Z",
      "updated_at": "2024-08-10T01:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712441877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712441877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712444215",
      "pull_request_review_id": 2231282040,
      "id": 1712444215,
      "node_id": "PRRC_kwDOABII585mEdM3",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711957751,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think instead of saying this \"sanitizes\" the string and pretending like that word means something it would be better to just say this strips 0x prefixes and fixes the length of the string so it can be passed to the base_blob::ParseHex() function.\r\n\r\nYeah, I felt a bit uneasy about the arbitrariness of what the function is doing and how it's named. I can't really come up with a better name, though, but I'm open to suggestions?\r\n\r\nAn alternative would be to, as @maflcko initially [suggested](https://github.com/bitcoin/bitcoin/pull/30569/#discussion_r1700712603), just have this be a parameter of `base_blob::FromHex()`, but that feels less elegant to me, still. What do you think?",
      "created_at": "2024-08-10T01:03:34Z",
      "updated_at": "2024-08-10T01:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712444215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712444215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712563888",
      "pull_request_review_id": 2231341409,
      "id": 1712563888,
      "node_id": "PRRC_kwDOABII585mE6aw",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromHex(num)}) {",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "in_reply_to_id": 1711982050,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"test: Only accept a fully valid RANDOM_CTX_SEED\" ([855784d](https://github.com/bitcoin/bitcoin/commit/855784d3a0026414159acc42fceeb271f8a28133))\r\n> \r\n> I don't understand the motivation for being so strict here.\r\n\r\nJust for reference, you approved the exact same commit 2 days prior in https://github.com/bitcoin/bitcoin/pull/30571#pullrequestreview-2222184242 .\r\n\r\nMaybe my comment from https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706570743 can be moved into the commit message for clarity?",
      "created_at": "2024-08-10T06:22:15Z",
      "updated_at": "2024-08-10T06:22:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712563888",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1712563888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714518388",
      "pull_request_review_id": 2234255969,
      "id": 1714518388,
      "node_id": "PRRC_kwDOABII585mMXl0",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1711911714,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712438144\r\n\r\n> With that said, would you still prefer not having a separate function, or e.g. templating it (prematurely) and moving it into `test/util/`?\r\n\r\nThanks for pointing out that it's a pretty generic function. Either way seems fine, since it does seem like something that could be reused.\r\n",
      "created_at": "2024-08-13T00:51:08Z",
      "updated_at": "2024-08-13T02:36:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714518388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714518388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 774,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714521300",
      "pull_request_review_id": 2234255969,
      "id": 1714521300,
      "node_id": "PRRC_kwDOABII585mMYTU",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711935626,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712441877\r\n\r\n> \"Desired\" to me sounds like the result string may not actually be of the requested size, when it is actually guaranteed. I'm not sure that would be an improvement?\r\n\r\nMakes sense, I think \"Requested\" would be better than \"Desired\" in that case, since the function can still fail and return nullopt.\r\n",
      "created_at": "2024-08-13T00:56:04Z",
      "updated_at": "2024-08-13T02:36:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714521300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714521300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714524098",
      "pull_request_review_id": 2234255969,
      "id": 1714524098,
      "node_id": "PRRC_kwDOABII585mMY_C",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711957751,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712444215\r\n\r\n> An alternative would be to, as @maflcko initially [suggested](https://github.com/bitcoin/bitcoin/pull/30569/#discussion_r1700712603), just have this be a parameter of `base_blob::FromHex()`, but that feels less elegant to me, still. What do you think?\r\n\r\nYes I think that suggestion would be a lot better! It's hard to imagine this function being used for anything other than as a preprocessor to `FromHex`. And I think it would be great if `FromHex` had an option to parse numbers strictly, or in a nonstrict way that is still safe, with protection from overflows and garbage characters.",
      "created_at": "2024-08-13T01:00:33Z",
      "updated_at": "2024-08-13T02:36:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714524098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714524098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714528877",
      "pull_request_review_id": 2234255969,
      "id": 1714528877,
      "node_id": "PRRC_kwDOABII585mMaJt",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1711992941,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > The number is not just rejected when it is too long but also if it has whitespace prefixes or suffixes or trailing non-hex characters. These would have been ignored previously.\r\n> \r\n> Is that so? It seems to me that `IsHexNumber()` would have returned false for all of those cases, which is why [802374b](https://github.com/bitcoin/bitcoin/commit/802374b4355bd1dec7a88bba6287c55f935699fe) is a refactor commit?\r\n\r\nOh, sorry I forgot about the previous call. So this commit message is perfectly accurate as it is.",
      "created_at": "2024-08-13T01:10:00Z",
      "updated_at": "2024-08-13T02:36:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714528877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714528877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714546457",
      "pull_request_review_id": 2234255969,
      "id": 1714546457,
      "node_id": "PRRC_kwDOABII585mMecZ",
      "diff_hunk": "@@ -39,7 +39,15 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") { // handle -noassumevalid\n+            opts.assumed_valid_block = uint256{};\n+        } else if (auto block_hash{uint256::FromHex(*value)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "19650768575e3d76d0e06c186896b00ad3e26e57",
      "in_reply_to_id": 1711973562,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712432448\r\n\r\nThanks for the response, but I think there are two things that could be improved here:\r\n\r\n- I think it would be better to call TrySanitizeHexNumber so this continues to accept block hashes with optional 0x prefixes and without leading 0's. This behavior worked previously and seems safe, so I don't see a reason to break it. If we do want to break, it would be nice to state some reasoning for doing that in the commit message. I don't think there is a problem with treating block hashes like numbers since our own code does it and it's how bitcoin determines block difficulty.\r\n\r\n- I don't think current commit message is accurate unless you drop the word \"explicitly\" because this change is not just reporting errors that weren't previously reported, it is making things that use to work and were not errors into errors. The commit message is also incomplete because it is not mentioning the things which used to work.\r\n\r\nTo be clear, IMO:\r\n\r\n- It's good this change is making it an error to include trailing non-hex characters instead of silently ignoring them.\r\n- It's good this change is making it an error to specify hex strings that are too long.\r\n- It's probably ok this change makes it an error to include leading and trailing whitespace, instead of trimming it. Maybe that could be safer and prevent configuration bugs.\r\n- It's not good but probably ok this change makes it an error to specify an empty string (`-assumedvalid=\"\"`) to disable the assumevalid feature. That seemed like a useful way to clear the setting.\r\n- It's not good this change makes it an error to include a `0x` prefix or write numbers not padded with `0`'s. That just seems like being arbitrarily strict and breaking backwards compatibility for no reason.",
      "created_at": "2024-08-13T01:39:42Z",
      "updated_at": "2024-08-13T02:36:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714546457",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714546457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714564547",
      "pull_request_review_id": 2234255969,
      "id": 1714564547,
      "node_id": "PRRC_kwDOABII585mMi3D",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromHex(num)}) {",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "in_reply_to_id": 1711982050,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1712563888\r\n\r\nThanks for the links. I don't think I realized this change was made in the other PR, and I think it is not a good change.\r\n\r\nI don't see a reason somebody shouldn't be able to run `RANDOM_CTX_SEED=12345 ./test_bitcoin` conveniently from a command line or script without padding the seed with 59 0's. It seems like this makes it pointlessly difficult to specify a random seed and I don't get the motivation behind it.\r\n\r\nIf we want to go ahead with change, I think it should be described accurately as making something that used to work no longer work, not just as adding error checking and implying that anything this now rejects was previously in error.",
      "created_at": "2024-08-13T02:10:41Z",
      "updated_at": "2024-08-13T02:36:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714564547",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714564547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714681251",
      "pull_request_review_id": 2234522539,
      "id": 1714681251,
      "node_id": "PRRC_kwDOABII585mM_Wj",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromHex(num)}) {",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "in_reply_to_id": 1711982050,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Thanks for the links. I don't think I realized this change was made in the other PR, and I think it is not a good change.\r\n> \r\n> I don't see a reason somebody shouldn't be able to run `RANDOM_CTX_SEED=12345 ./test_bitcoin` conveniently from a command line or script without padding the seed with 59 0's. It seems like this makes it pointlessly difficult to specify a random seed and I don't get the motivation behind it.\r\n\r\nNo strong opinion, but my thinking was that the seed would at most be copy-pasted from previous logs of failing tests. If someone really wanted to provide a seed themselves, they could easily run `echo 12355 | sha256sum` and use the result of that.\r\n\r\nBut this is test-only, so anything is probably fine here.",
      "created_at": "2024-08-13T05:21:59Z",
      "updated_at": "2024-08-13T05:21:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714681251",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714681251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714952020",
      "pull_request_review_id": 2234984256,
      "id": 1714952020,
      "node_id": "PRRC_kwDOABII585mOBdU",
      "diff_hunk": "@@ -39,7 +39,15 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") { // handle -noassumevalid\n+            opts.assumed_valid_block = uint256{};\n+        } else if (auto block_hash{uint256::FromHex(*value)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "19650768575e3d76d0e06c186896b00ad3e26e57",
      "in_reply_to_id": 1711973562,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I didn't previously realize that this PR breaks use-facing compatibility wrt `0x` prefixes in args. Would also like to see such cases be filtered through `TrySanitizeHexNumber` before going into `FromHex` so that level of compatibility is maintained.",
      "created_at": "2024-08-13T09:14:55Z",
      "updated_at": "2024-08-13T09:14:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714952020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1714952020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715077813",
      "pull_request_review_id": 2235200535,
      "id": 1715077813,
      "node_id": "PRRC_kwDOABII585mOgK1",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711957751,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It's hard to imagine this function being used for anything other than as a preprocessor to `FromHex`\r\n\r\nThe reason I carved it out instead of having it be a `FromHex()` parameter is not for reusability but to not bloat `FromHex()` with an explosion of input validation options (which also leaks into functions wrapping `base_blob::FromHex()`, such as `transaction_identifier::FromHex()`). I don't think there is a single answer to what we'll ever need for e.g. the below options, it can very much vary for each callsite and context:\r\n- do we accept leading and/or trailing whitespaces\r\n- do we require fixed size input\r\n- do we forbid, allow or require a 0x prefix\r\n- is an empty string forbidden or equivalent to 0\r\n\r\nI think having an opinionated input validation function (and potentially more in the future, when the need arises) and a pristine `FromHex()` that does not concern itself with input validation is a much more maintainable and testable approach. For that reason, I'd prefer not parameterizing `FromHex()`.\r\n\r\nWould an approach like the below (moved into the `uint256.h` header), alleviate your concern?\r\n\r\n```\r\n/**\r\n * @brief Helper function for \\ref base_blob::FromHex. Returns a copy of\r\n *        the input without (optional) \"0x\" prefix, and padded with\r\n *        leading zeroes if it is shorter than what T::FromHex expects.\r\n *        If input contains invalid hex characters, including\r\n *        whitespace, or if it is longer than what T::FromHex expects, a\r\n *        std::nullopt is returned.\r\n *\r\n *        If a value is returned, it will be accepted by T::FromHex().\r\n *\r\n * @param input Hex encoding of a number, optionally prefixed with 0x.\r\n */\r\ntemplate <typename T>\r\nstd::optional<std::string> ValidateAndPadHexNumber(std::string_view input) \r\n    requires std::is_base_of_v<base_blob<T::size() * 8>, T>;\r\n```",
      "created_at": "2024-08-13T10:43:06Z",
      "updated_at": "2024-08-13T10:50:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1715077813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715077813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715587191",
      "pull_request_review_id": 2236030862,
      "id": 1715587191,
      "node_id": "PRRC_kwDOABII585mQch3",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711957751,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I would probably add `base_blob::FromUserHex()` function wrapping `base_blob::FromHex()`. `FromHex()` would require strict formatting with fixed width strings and no extraneous characters. But when provided with user input, `FromUserHex()` would allow `0x` prefixes, and not require numbers to be padded to a fixed number of digits. Either way, numbers that are too big to fit in the blob or contained unrecognized characters would be errors.\r\n\r\nThere is no need for either of these functions to trim whitespace as we already have convenient functions to do that, and decision on whether to allow whitespace depends more on how the string arrived (from a file, or over the command line or RPC) than on what produced it.\r\n\r\nI think a `FromUserHex` function would be better than a sidecar `ValidateAndPadHexNumber` function because it would be easier to use, and more discoverable. The more it was used, the more it would provide a consistent user interface that did not arbitrarily reject things some places which are accepted other places.",
      "created_at": "2024-08-13T16:25:02Z",
      "updated_at": "2024-08-13T16:25:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1715587191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715587191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725690444",
      "pull_request_review_id": 2251830807,
      "id": 1725690444,
      "node_id": "PRRC_kwDOABII585m2_JM",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromUserHex(*value)}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be up to %d characters hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit (feel free to disregard): Based on the description (`Minimum work assumed to exist on a valid chain in hex`), \"chain\" and \"value\" might be superfluous here\r\n```suggestion\r\n            return util::Error{strprintf(Untranslated(\"Invalid minimum work specified (%s), must be up to %d characters hex\"), *value, uint256::size() * 2)};\r\n```",
      "created_at": "2024-08-21T20:02:02Z",
      "updated_at": "2024-08-21T20:24:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725690444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725690444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725693175",
      "pull_request_review_id": 2251830807,
      "id": 1725693175,
      "node_id": "PRRC_kwDOABII585m2_z3",
      "diff_hunk": "@@ -106,6 +108,25 @@ std::optional<uintN_t> FromHex(std::string_view str)\n     rv.SetHexDeprecated(str);\n     return rv;\n }\n+/**\n+ * @brief Like FromHex(std::string_view str), but allows an \"0x\" prefix\n+ *        and pads the input with leading zeroes if it is shorter than\n+ *        the expected length of uintN_t::size()*2.\n+ *\n+ *        Designed to be used when dealing with user input.\n+ */\n+template <class uintN_t>\n+std::optional<uintN_t> FromUserHex(std::string_view input)",
      "path": "src/uint256.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since this is a \"User\" centric specialization of `FromHex` (and not a `Hex` specialization of `FromUser`), I'd keep the `FromHex` prefix, i.e.: `FromHexUser` or perhaps `FromHexLenient`, since the `User` part is just incidental",
      "created_at": "2024-08-21T20:04:55Z",
      "updated_at": "2024-08-21T20:24:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725693175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725693175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 119,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725694129",
      "pull_request_review_id": 2251830807,
      "id": 1725694129,
      "node_id": "PRRC_kwDOABII585m3ACx",
      "diff_hunk": "@@ -106,6 +108,25 @@ std::optional<uintN_t> FromHex(std::string_view str)\n     rv.SetHexDeprecated(str);\n     return rv;\n }\n+/**\n+ * @brief Like FromHex(std::string_view str), but allows an \"0x\" prefix\n+ *        and pads the input with leading zeroes if it is shorter than\n+ *        the expected length of uintN_t::size()*2.\n+ *\n+ *        Designed to be used when dealing with user input.\n+ */\n+template <class uintN_t>\n+std::optional<uintN_t> FromUserHex(std::string_view input)\n+{\n+    input = util::RemovePrefixView(input, \"0x\");\n+    constexpr auto expected_size{uintN_t::size() * 2};",
      "path": "src/uint256.h",
      "position": 31,
      "original_position": 31,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we extract this this as a constant and use it throughout this PR (e.g. in error messages and tests)?",
      "created_at": "2024-08-21T20:05:50Z",
      "updated_at": "2024-08-21T20:24:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725694129",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725694129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725695133",
      "pull_request_review_id": 2251830807,
      "id": 1725695133,
      "node_id": "PRRC_kwDOABII585m3ASd",
      "diff_hunk": "@@ -769,4 +772,59 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+template <typename Options>\n+util::Result<Options> SetOptsFromArgs(ArgsManager& args_man, Options opts,\n+                                      const std::vector<const char*>& args)\n+{\n+    const auto argv{Cat({\"ignore\"}, args)};\n+    std::string error{};\n+    if (!args_man.ParseParameters(argv.size(), argv.data(), error)) {\n+        return util::Error{Untranslated(\"ParseParameters failed with error: \" + error)};\n+    }\n+    const auto result{node::ApplyArgsManOptions(args_man, opts)};\n+    if (!result) return util::Error{util::ErrorString(result)};\n+    return opts;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    //! Try to apply the provided args to a ChainstateManager::Options\n+    auto get_opts = [&](const std::vector<const char*>& args) {\n+        static kernel::Notifications notifications{};\n+        static const ChainstateManager::Options options{\n+            .chainparams = ::Params(),\n+            .datadir = {},\n+            .notifications = notifications};\n+        return SetOptsFromArgs(*this->m_node.args, options, args);\n+    };\n+    //! Like get_opts, but requires the provided args to be valid and unwraps the result\n+    auto get_valid_opts = [&](const std::vector<const char*>& args) {\n+        const auto result{get_opts(args)};\n+        BOOST_REQUIRE_MESSAGE(result, util::ErrorString(result).original);\n+        return *result;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!get_valid_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(get_valid_opts({\"-assumevalid=\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 56,
      "original_position": 56,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are we sure this behavior should be written in stone? It rather seems like an error to me",
      "created_at": "2024-08-21T20:06:54Z",
      "updated_at": "2024-08-21T20:24:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725695133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725695133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 810,
      "original_line": 810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725699517",
      "pull_request_review_id": 2251830807,
      "id": 1725699517,
      "node_id": "PRRC_kwDOABII585m3BW9",
      "diff_hunk": "@@ -386,6 +386,33 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could we move this closer to first usage?",
      "created_at": "2024-08-21T20:11:20Z",
      "updated_at": "2024-08-21T20:24:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725699517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725699517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725701490",
      "pull_request_review_id": 2251830807,
      "id": 1725701490,
      "node_id": "PRRC_kwDOABII585m3B1y",
      "diff_hunk": "@@ -386,6 +386,33 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars\n+    static_assert(valid_hex_65.size() == 2 + 65);\n+\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{16});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{16});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{255});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{255});",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{0x10});\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{0x10});\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{0xff});\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{0xff});\r\n```",
      "created_at": "2024-08-21T20:13:27Z",
      "updated_at": "2024-08-21T20:24:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725701490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725701490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 397,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725705844",
      "pull_request_review_id": 2251830807,
      "id": 1725705844,
      "node_id": "PRRC_kwDOABII585m3C50",
      "diff_hunk": "@@ -386,6 +386,33 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars\n+    static_assert(valid_hex_65.size() == 2 + 65);\n+\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);",
      "path": "src/test/uint256_tests.cpp",
      "position": 8,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I was wondering if it accepts `00` as well (since numbers usually trim leading zeros) and if it accepts `1` (since other implementations require an even number of digits), consider extending the examples:\r\n```C++\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"00\").value(), uint256::ZERO);\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"1\").value(), uint256::ONE);\r\n```",
      "created_at": "2024-08-21T20:17:52Z",
      "updated_at": "2024-08-21T20:24:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725705844",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725705844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 393,
      "original_line": 393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725732478",
      "pull_request_review_id": 2251909699,
      "id": 1725732478,
      "node_id": "PRRC_kwDOABII585m3JZ-",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromUserHex(*value)}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be up to %d characters hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725690444,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: \"characters hex\" -> \"hex digits\" here and below - better order grammatically, more precise, and shorter.",
      "created_at": "2024-08-21T20:42:52Z",
      "updated_at": "2024-08-21T21:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725732478",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725732478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725741207",
      "pull_request_review_id": 2251909699,
      "id": 1725741207,
      "node_id": "PRRC_kwDOABII585m3LiX",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromUserHex(num)}) {\n+                return *num_parsed;\n+            } else {\n+                std::cerr << RANDOM_CTX_SEED << \" must be a \" << uint256::size() * 2 << \" char hex string without '0x'-prefix, was set to: '\" << num << \"'.\\n\";\n+                std::abort();\n+            }\n+        }\n         // Otherwise use a (truly) random value.\n         return GetRandHash();\n     }();\n \n     const uint256& seed{seedtype == SeedRand::SEED ? ctx_seed : uint256::ZERO};\n-    LogPrintf(\"%s: Setting random seed for current tests to %s=%s\\n\", __func__, RANDOM_CTX_SEED, seed.GetHex());\n+    LogPrintf(\"Setting random seed for current tests to %s=%s\\n\", RANDOM_CTX_SEED, seed.GetHex());",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Noticed you changed this back from the modern `LogInfo` in 855784d3a0026414159acc42fceeb271f8a28133 to the legacy `LogPrintf`, was that intentional?",
      "created_at": "2024-08-21T20:51:29Z",
      "updated_at": "2024-08-21T21:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725741207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725741207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725742566",
      "pull_request_review_id": 2251909699,
      "id": 1725742566,
      "node_id": "PRRC_kwDOABII585m3L3m",
      "diff_hunk": "@@ -769,4 +772,59 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+template <typename Options>\n+util::Result<Options> SetOptsFromArgs(ArgsManager& args_man, Options opts,\n+                                      const std::vector<const char*>& args)\n+{\n+    const auto argv{Cat({\"ignore\"}, args)};\n+    std::string error{};\n+    if (!args_man.ParseParameters(argv.size(), argv.data(), error)) {\n+        return util::Error{Untranslated(\"ParseParameters failed with error: \" + error)};\n+    }\n+    const auto result{node::ApplyArgsManOptions(args_man, opts)};\n+    if (!result) return util::Error{util::ErrorString(result)};\n+    return opts;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    //! Try to apply the provided args to a ChainstateManager::Options\n+    auto get_opts = [&](const std::vector<const char*>& args) {\n+        static kernel::Notifications notifications{};\n+        static const ChainstateManager::Options options{\n+            .chainparams = ::Params(),\n+            .datadir = {},\n+            .notifications = notifications};\n+        return SetOptsFromArgs(*this->m_node.args, options, args);\n+    };\n+    //! Like get_opts, but requires the provided args to be valid and unwraps the result\n+    auto get_valid_opts = [&](const std::vector<const char*>& args) {\n+        const auto result{get_opts(args)};\n+        BOOST_REQUIRE_MESSAGE(result, util::ErrorString(result).original);\n+        return *result;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!get_valid_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(get_valid_opts({\"-assumevalid=\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 56,
      "original_position": 56,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725695133,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Thread https://github.com/bitcoin/bitcoin/pull/30569/files#r1725695133)\r\nGood to document current behavior, whatever it is.",
      "created_at": "2024-08-21T20:52:53Z",
      "updated_at": "2024-08-21T21:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725742566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725742566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 810,
      "original_line": 810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725743234",
      "pull_request_review_id": 2251909699,
      "id": 1725743234,
      "node_id": "PRRC_kwDOABII585m3MCC",
      "diff_hunk": "@@ -769,4 +772,59 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+template <typename Options>\n+util::Result<Options> SetOptsFromArgs(ArgsManager& args_man, Options opts,\n+                                      const std::vector<const char*>& args)\n+{\n+    const auto argv{Cat({\"ignore\"}, args)};\n+    std::string error{};\n+    if (!args_man.ParseParameters(argv.size(), argv.data(), error)) {\n+        return util::Error{Untranslated(\"ParseParameters failed with error: \" + error)};\n+    }\n+    const auto result{node::ApplyArgsManOptions(args_man, opts)};\n+    if (!result) return util::Error{util::ErrorString(result)};\n+    return opts;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    //! Try to apply the provided args to a ChainstateManager::Options\n+    auto get_opts = [&](const std::vector<const char*>& args) {\n+        static kernel::Notifications notifications{};\n+        static const ChainstateManager::Options options{\n+            .chainparams = ::Params(),\n+            .datadir = {},\n+            .notifications = notifications};\n+        return SetOptsFromArgs(*this->m_node.args, options, args);\n+    };\n+    //! Like get_opts, but requires the provided args to be valid and unwraps the result\n+    auto get_valid_opts = [&](const std::vector<const char*>& args) {\n+        const auto result{get_opts(args)};\n+        BOOST_REQUIRE_MESSAGE(result, util::ErrorString(result).original);\n+        return *result;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!get_valid_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(get_valid_opts({\"-assumevalid=\"}).assumed_valid_block.value().IsNull());\n+    BOOST_CHECK(get_valid_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());\n+    BOOST_CHECK(get_valid_opts({\"-noassumevalid\"}).assumed_valid_block.value().IsNull());\n+    BOOST_CHECK_EQUAL(get_valid_opts({\"-assumevalid=0x1234\"}).assumed_valid_block.value().ToString(), std::string(60, '0') + \"1234\");\n+    const std::string cmd{\"-assumevalid=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"};\n+    BOOST_CHECK_EQUAL(get_valid_opts({cmd.c_str()}).assumed_valid_block.value().ToString(), cmd.substr(13, cmd.size()));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Intentionally leaving out 0x-variant?",
      "created_at": "2024-08-21T20:53:35Z",
      "updated_at": "2024-08-21T21:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725743234",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725743234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 814,
      "original_start_line": 814,
      "start_side": "RIGHT",
      "line": 815,
      "original_line": 815,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725748797",
      "pull_request_review_id": 2251909699,
      "id": 1725748797,
      "node_id": "PRRC_kwDOABII585m3NY9",
      "diff_hunk": "@@ -106,6 +108,25 @@ std::optional<uintN_t> FromHex(std::string_view str)\n     rv.SetHexDeprecated(str);\n     return rv;\n }\n+/**\n+ * @brief Like FromHex(std::string_view str), but allows an \"0x\" prefix\n+ *        and pads the input with leading zeroes if it is shorter than\n+ *        the expected length of uintN_t::size()*2.\n+ *\n+ *        Designed to be used when dealing with user input.\n+ */\n+template <class uintN_t>\n+std::optional<uintN_t> FromUserHex(std::string_view input)",
      "path": "src/uint256.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725693175,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Thread https://github.com/bitcoin/bitcoin/pull/30569/files#r1725693175)\r\nI prefer the current `uint256::FromUserHex` over `uint256::FromHexUser` (the latter makes me think of sorcerers). (`uint256::FromHexLenient` is okay to).",
      "created_at": "2024-08-21T20:59:25Z",
      "updated_at": "2024-08-21T21:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725748797",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725748797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 119,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725750590",
      "pull_request_review_id": 2251909699,
      "id": 1725750590,
      "node_id": "PRRC_kwDOABII585m3N0-",
      "diff_hunk": "@@ -106,6 +108,25 @@ std::optional<uintN_t> FromHex(std::string_view str)\n     rv.SetHexDeprecated(str);\n     return rv;\n }\n+/**\n+ * @brief Like FromHex(std::string_view str), but allows an \"0x\" prefix\n+ *        and pads the input with leading zeroes if it is shorter than\n+ *        the expected length of uintN_t::size()*2.\n+ *\n+ *        Designed to be used when dealing with user input.\n+ */\n+template <class uintN_t>\n+std::optional<uintN_t> FromUserHex(std::string_view input)\n+{\n+    input = util::RemovePrefixView(input, \"0x\");\n+    constexpr auto expected_size{uintN_t::size() * 2};",
      "path": "src/uint256.h",
      "position": 31,
      "original_position": 31,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725694129,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Thread https://github.com/bitcoin/bitcoin/pull/30569/files#r1725694129)\r\n(This has been silently nagging me as well, but totally understand if you want to leave it for someone to follow up on).",
      "created_at": "2024-08-21T21:01:23Z",
      "updated_at": "2024-08-21T21:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725750590",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725750590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726799882",
      "pull_request_review_id": 2254142793,
      "id": 1726799882,
      "node_id": "PRRC_kwDOABII585m7OAK",
      "diff_hunk": "@@ -106,6 +108,25 @@ std::optional<uintN_t> FromHex(std::string_view str)\n     rv.SetHexDeprecated(str);\n     return rv;\n }\n+/**\n+ * @brief Like FromHex(std::string_view str), but allows an \"0x\" prefix\n+ *        and pads the input with leading zeroes if it is shorter than\n+ *        the expected length of uintN_t::size()*2.\n+ *\n+ *        Designed to be used when dealing with user input.\n+ */\n+template <class uintN_t>\n+std::optional<uintN_t> FromUserHex(std::string_view input)\n+{\n+    input = util::RemovePrefixView(input, \"0x\");\n+    constexpr auto expected_size{uintN_t::size() * 2};",
      "path": "src/uint256.h",
      "position": 31,
      "original_position": 31,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725694129,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm open to the idea, but I don't immediately see a super elegant solution. Thoughts:\r\n- a lot of the `::size() * 2` uses are templated (such as in the referenced example here), so constants wouldn't really work. Adding a `base_blob::hex_size()` seems inappropriate to me too, that's not really a `base_blob` concern.\r\n- non-templated use is not very frequent, and mostly in tests. Potentially a `constexpr auto UINT256_HEX_SIZE{uint256::size() * 2}` could work, but I'm not really convinced that's worth it either tbh",
      "created_at": "2024-08-22T10:31:02Z",
      "updated_at": "2024-08-22T10:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726799882",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726799882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726804057",
      "pull_request_review_id": 2254148621,
      "id": 1726804057,
      "node_id": "PRRC_kwDOABII585m7PBZ",
      "diff_hunk": "@@ -769,4 +772,59 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+template <typename Options>\n+util::Result<Options> SetOptsFromArgs(ArgsManager& args_man, Options opts,\n+                                      const std::vector<const char*>& args)\n+{\n+    const auto argv{Cat({\"ignore\"}, args)};\n+    std::string error{};\n+    if (!args_man.ParseParameters(argv.size(), argv.data(), error)) {\n+        return util::Error{Untranslated(\"ParseParameters failed with error: \" + error)};\n+    }\n+    const auto result{node::ApplyArgsManOptions(args_man, opts)};\n+    if (!result) return util::Error{util::ErrorString(result)};\n+    return opts;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    //! Try to apply the provided args to a ChainstateManager::Options\n+    auto get_opts = [&](const std::vector<const char*>& args) {\n+        static kernel::Notifications notifications{};\n+        static const ChainstateManager::Options options{\n+            .chainparams = ::Params(),\n+            .datadir = {},\n+            .notifications = notifications};\n+        return SetOptsFromArgs(*this->m_node.args, options, args);\n+    };\n+    //! Like get_opts, but requires the provided args to be valid and unwraps the result\n+    auto get_valid_opts = [&](const std::vector<const char*>& args) {\n+        const auto result{get_opts(args)};\n+        BOOST_REQUIRE_MESSAGE(result, util::ErrorString(result).original);\n+        return *result;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!get_valid_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(get_valid_opts({\"-assumevalid=\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 56,
      "original_position": 56,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725695133,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This behaviour was mentioned [here](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1714546457) (and correctly identified as broken by a previous version of this PR), so that's why I added a test to make it explicit. I don't have a strong view on whether that behaviour should be allowed, but since it exists, and some people seem to find it useful, and we're trying to minimize breaking behaviour now, I think I'd prefer keeping it and documenting it.",
      "created_at": "2024-08-22T10:34:02Z",
      "updated_at": "2024-08-22T10:34:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726804057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726804057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 810,
      "original_line": 810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726858671",
      "pull_request_review_id": 2254228380,
      "id": 1726858671,
      "node_id": "PRRC_kwDOABII585m7cWv",
      "diff_hunk": "@@ -386,6 +386,33 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars\n+    static_assert(valid_hex_65.size() == 2 + 65);\n+\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);",
      "path": "src/test/uint256_tests.cpp",
      "position": 8,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725705844,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, I've added these two test cases!",
      "created_at": "2024-08-22T11:14:08Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726858671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726858671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 393,
      "original_line": 393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726861212",
      "pull_request_review_id": 2254228380,
      "id": 1726861212,
      "node_id": "PRRC_kwDOABII585m7c-c",
      "diff_hunk": "@@ -769,4 +772,59 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+template <typename Options>\n+util::Result<Options> SetOptsFromArgs(ArgsManager& args_man, Options opts,\n+                                      const std::vector<const char*>& args)\n+{\n+    const auto argv{Cat({\"ignore\"}, args)};\n+    std::string error{};\n+    if (!args_man.ParseParameters(argv.size(), argv.data(), error)) {\n+        return util::Error{Untranslated(\"ParseParameters failed with error: \" + error)};\n+    }\n+    const auto result{node::ApplyArgsManOptions(args_man, opts)};\n+    if (!result) return util::Error{util::ErrorString(result)};\n+    return opts;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    //! Try to apply the provided args to a ChainstateManager::Options\n+    auto get_opts = [&](const std::vector<const char*>& args) {\n+        static kernel::Notifications notifications{};\n+        static const ChainstateManager::Options options{\n+            .chainparams = ::Params(),\n+            .datadir = {},\n+            .notifications = notifications};\n+        return SetOptsFromArgs(*this->m_node.args, options, args);\n+    };\n+    //! Like get_opts, but requires the provided args to be valid and unwraps the result\n+    auto get_valid_opts = [&](const std::vector<const char*>& args) {\n+        const auto result{get_opts(args)};\n+        BOOST_REQUIRE_MESSAGE(result, util::ErrorString(result).original);\n+        return *result;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!get_valid_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(get_valid_opts({\"-assumevalid=\"}).assumed_valid_block.value().IsNull());\n+    BOOST_CHECK(get_valid_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());\n+    BOOST_CHECK(get_valid_opts({\"-noassumevalid\"}).assumed_valid_block.value().IsNull());\n+    BOOST_CHECK_EQUAL(get_valid_opts({\"-assumevalid=0x1234\"}).assumed_valid_block.value().ToString(), std::string(60, '0') + \"1234\");\n+    const std::string cmd{\"-assumevalid=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"};\n+    BOOST_CHECK_EQUAL(get_valid_opts({cmd.c_str()}).assumed_valid_block.value().ToString(), cmd.substr(13, cmd.size()));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725743234,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, I'm trying to keep tests focused on the specific function under test. We already have proper \"0x\" prefix testing in `uint256_tests/from_user_hex` tests, and as belt-and-suspenders this case also covers a bit of both but I'd rather not bloat it too much.",
      "created_at": "2024-08-22T11:15:57Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726861212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726861212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 814,
      "original_start_line": 814,
      "start_side": "RIGHT",
      "line": 815,
      "original_line": 815,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726862849",
      "pull_request_review_id": 2254228380,
      "id": 1726862849,
      "node_id": "PRRC_kwDOABII585m7dYB",
      "diff_hunk": "@@ -106,6 +108,25 @@ std::optional<uintN_t> FromHex(std::string_view str)\n     rv.SetHexDeprecated(str);\n     return rv;\n }\n+/**\n+ * @brief Like FromHex(std::string_view str), but allows an \"0x\" prefix\n+ *        and pads the input with leading zeroes if it is shorter than\n+ *        the expected length of uintN_t::size()*2.\n+ *\n+ *        Designed to be used when dealing with user input.\n+ */\n+template <class uintN_t>\n+std::optional<uintN_t> FromUserHex(std::string_view input)",
      "path": "src/uint256.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725693175,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have nothing against any of the suggested names, but personally I still find `FromUserHex` to be the most intuitive (and it seems at least 2 other reviewers like it as well), so I'm going to stick with that if that's okay?",
      "created_at": "2024-08-22T11:17:14Z",
      "updated_at": "2024-08-23T14:21:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726862849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726862849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 119,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726863840",
      "pull_request_review_id": 2254228380,
      "id": 1726863840,
      "node_id": "PRRC_kwDOABII585m7dng",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromUserHex(num)}) {\n+                return *num_parsed;\n+            } else {\n+                std::cerr << RANDOM_CTX_SEED << \" must be a \" << uint256::size() * 2 << \" char hex string without '0x'-prefix, was set to: '\" << num << \"'.\\n\";\n+                std::abort();\n+            }\n+        }\n         // Otherwise use a (truly) random value.\n         return GetRandHash();\n     }();\n \n     const uint256& seed{seedtype == SeedRand::SEED ? ctx_seed : uint256::ZERO};\n-    LogPrintf(\"%s: Setting random seed for current tests to %s=%s\\n\", __func__, RANDOM_CTX_SEED, seed.GetHex());\n+    LogPrintf(\"Setting random seed for current tests to %s=%s\\n\", RANDOM_CTX_SEED, seed.GetHex());",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725741207,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oops, it wasn't, thanks for spotting. Reverted in latest force-push.",
      "created_at": "2024-08-22T11:18:00Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726863840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726863840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726864045",
      "pull_request_review_id": 2254228380,
      "id": 1726864045,
      "node_id": "PRRC_kwDOABII585m7dqt",
      "diff_hunk": "@@ -386,6 +386,33 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars\n+    static_assert(valid_hex_65.size() == 2 + 65);\n+\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{16});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{16});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{255});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{255});",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725701490,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, that makes much more sense indeed, taken.",
      "created_at": "2024-08-22T11:18:12Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726864045",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726864045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 397,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726864143",
      "pull_request_review_id": 2254228380,
      "id": 1726864143,
      "node_id": "PRRC_kwDOABII585m7dsP",
      "diff_hunk": "@@ -386,6 +386,33 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725699517,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, done!",
      "created_at": "2024-08-22T11:18:18Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726864143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726864143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726864665",
      "pull_request_review_id": 2254228380,
      "id": 1726864665,
      "node_id": "PRRC_kwDOABII585m7d0Z",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromUserHex(*value)}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be up to %d characters hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725690444,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken both suggestions in latest force-push, thanks.",
      "created_at": "2024-08-22T11:18:40Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726864665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726864665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726868348",
      "pull_request_review_id": 2254228380,
      "id": 1726868348,
      "node_id": "PRRC_kwDOABII585m7et8",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711985406,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Resolved by removing `TrySanitizeHexNumber()` altogether (and empty strings are still allowed in `uint256::FromUserHex`, as per current behaviour on `master`)",
      "created_at": "2024-08-22T11:21:21Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726868348",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726868348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 77,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726871848",
      "pull_request_review_id": 2254228380,
      "id": 1726871848,
      "node_id": "PRRC_kwDOABII585m7fko",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromHex(num)}) {",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "in_reply_to_id": 1711982050,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It seems like this makes it pointlessly difficult to specify a random seed and I don't get the motivation behind it.\r\n\r\nI definitely didn't mean to introduce user friction with this PR - the philosophy was more to not introduce unnecessary code complexity for features that aren't used, but since it seems like this might be breaking existing/valuable use cases, I've now updated `RANDOM_CTX_SEED` to use the more lenient `uint256::FromUserHex()` to still allow 0x-prefixes and shorter input, and it doesn't add code complexity anyway.",
      "created_at": "2024-08-22T11:23:56Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726871848",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726871848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726874669",
      "pull_request_review_id": 2254251051,
      "id": 1726874669,
      "node_id": "PRRC_kwDOABII585m7gQt",
      "diff_hunk": "@@ -106,6 +108,25 @@ std::optional<uintN_t> FromHex(std::string_view str)\n     rv.SetHexDeprecated(str);\n     return rv;\n }\n+/**\n+ * @brief Like FromHex(std::string_view str), but allows an \"0x\" prefix\n+ *        and pads the input with leading zeroes if it is shorter than\n+ *        the expected length of uintN_t::size()*2.\n+ *\n+ *        Designed to be used when dealing with user input.\n+ */\n+template <class uintN_t>\n+std::optional<uintN_t> FromUserHex(std::string_view input)\n+{\n+    input = util::RemovePrefixView(input, \"0x\");\n+    constexpr auto expected_size{uintN_t::size() * 2};",
      "path": "src/uint256.h",
      "position": 31,
      "original_position": 31,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725694129,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for considering",
      "created_at": "2024-08-22T11:26:05Z",
      "updated_at": "2024-08-22T11:26:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726874669",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726874669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726876602",
      "pull_request_review_id": 2254253761,
      "id": 1726876602,
      "node_id": "PRRC_kwDOABII585m7gu6",
      "diff_hunk": "@@ -769,4 +772,59 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+template <typename Options>\n+util::Result<Options> SetOptsFromArgs(ArgsManager& args_man, Options opts,\n+                                      const std::vector<const char*>& args)\n+{\n+    const auto argv{Cat({\"ignore\"}, args)};\n+    std::string error{};\n+    if (!args_man.ParseParameters(argv.size(), argv.data(), error)) {\n+        return util::Error{Untranslated(\"ParseParameters failed with error: \" + error)};\n+    }\n+    const auto result{node::ApplyArgsManOptions(args_man, opts)};\n+    if (!result) return util::Error{util::ErrorString(result)};\n+    return opts;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    //! Try to apply the provided args to a ChainstateManager::Options\n+    auto get_opts = [&](const std::vector<const char*>& args) {\n+        static kernel::Notifications notifications{};\n+        static const ChainstateManager::Options options{\n+            .chainparams = ::Params(),\n+            .datadir = {},\n+            .notifications = notifications};\n+        return SetOptsFromArgs(*this->m_node.args, options, args);\n+    };\n+    //! Like get_opts, but requires the provided args to be valid and unwraps the result\n+    auto get_valid_opts = [&](const std::vector<const char*>& args) {\n+        const auto result{get_opts(args)};\n+        BOOST_REQUIRE_MESSAGE(result, util::ErrorString(result).original);\n+        return *result;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!get_valid_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(get_valid_opts({\"-assumevalid=\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 56,
      "original_position": 56,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725695133,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Haven't realized it was possible before as well, thanks for clearing that up",
      "created_at": "2024-08-22T11:27:29Z",
      "updated_at": "2024-08-22T11:27:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726876602",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726876602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 810,
      "original_line": 810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726878931",
      "pull_request_review_id": 2254228380,
      "id": 1726878931,
      "node_id": "PRRC_kwDOABII585m7hTT",
      "diff_hunk": "@@ -39,7 +39,15 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") { // handle -noassumevalid\n+            opts.assumed_valid_block = uint256{};\n+        } else if (auto block_hash{uint256::FromHex(*value)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "19650768575e3d76d0e06c186896b00ad3e26e57",
      "in_reply_to_id": 1711973562,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you for summarizing your concerns @ryanofsky. I believe the latest force-push addresses all of them.\r\n\r\n> It's good this change is making it an error to include trailing non-hex characters instead of silently ignoring them.\r\nIt's good this change is making it an error to specify hex strings that are too long.\r\nIt's probably ok this change makes it an error to include leading and trailing whitespace, instead of trimming it. Maybe that could be safer and prevent configuration bugs.\r\n\r\nRelevant behaviour unchanged in latest force-push.\r\n\r\n> It's not good but probably ok this change makes it an error to specify an empty string (-assumedvalid=\"\") to disable the assumevalid feature. That seemed like a useful way to clear the setting.\r\nIt's not good this change makes it an error to include a 0x prefix or write numbers not padded with 0's. That just seems like being arbitrarily strict and breaking backwards compatibility for no reason.\r\n\r\nLatest force-push continues to allow `-assumevalid=\"\"` as well as 0x-prefixed and too-short-input (and unit test cases are added to `test: unittest chainstatemanager_args`), keeping this behaviour the same as it currently is on master.",
      "created_at": "2024-08-22T11:29:09Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726878931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726878931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726879444",
      "pull_request_review_id": 2254228380,
      "id": 1726879444,
      "node_id": "PRRC_kwDOABII585m7hbU",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711957751,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think I would probably add base_blob::FromUserHex() function wrapping base_blob::FromHex().\r\n\r\nThanks for the suggestion, I've adopted this approach.",
      "created_at": "2024-08-22T11:29:33Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726879444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726879444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 74,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726879771",
      "pull_request_review_id": 2254228380,
      "id": 1726879771,
      "node_id": "PRRC_kwDOABII585m7hgb",
      "diff_hunk": "@@ -71,9 +71,19 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "802374b4355bd1dec7a88bba6287c55f935699fe",
      "in_reply_to_id": 1711935626,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Resolved by removing `TrySanitizeHexNumber()` in latest force-push.",
      "created_at": "2024-08-22T11:29:49Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726879771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726879771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726880388",
      "pull_request_review_id": 2254259199,
      "id": 1726880388,
      "node_id": "PRRC_kwDOABII585m7hqE",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromUserHex(num)}) {\n+                return *num_parsed;\n+            } else {\n+                std::cerr << RANDOM_CTX_SEED << \" must consist only of up to \" << uint256::size() * 2 << \" hex digits (\\\"0x\\\" prefix allowed), was set to: '\" << num << \"'.\\n\";",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 31,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, if you touch again, consider:\r\n```suggestion\r\n                std::cerr << RANDOM_CTX_SEED << \" must consist of up to \" << uint256::size() * 2 << \" hex digits (\\\"0x\\\" prefix allowed), it was set to: '\" << num << \"'.\\n\";\r\n```",
      "created_at": "2024-08-22T11:30:13Z",
      "updated_at": "2024-08-22T11:45:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726880388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726880388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726880784",
      "pull_request_review_id": 2254228380,
      "id": 1726880784,
      "node_id": "PRRC_kwDOABII585m7hwQ",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1710130409,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> (In the follow-up you can also adjust the error message to explain the new max-length check.\r\n\r\nDone.\r\n\r\n> Will use .value() either in next force-push\r\n\r\nResolved by using `FromUserHex()` instead.",
      "created_at": "2024-08-22T11:30:28Z",
      "updated_at": "2024-08-22T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1726880784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1726880784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727507122",
      "pull_request_review_id": 2255189643,
      "id": 1727507122,
      "node_id": "PRRC_kwDOABII585m96qy",
      "diff_hunk": "@@ -386,6 +386,34 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"00\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"1\").value(), uint256::ONE);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{0xff});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{0xff});\n+    // a value is expected when the last (65th) character is trimmed off valid_hex_65\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars\n+    static_assert(valid_hex_65.size() == 2 + 65);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_65.substr(2, 64)).value().ToString(), valid_hex_65.substr(2, 64));\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_65.substr(0, 66)).value().ToString(), valid_hex_65.substr(2, 64));\n+\n+    BOOST_CHECK(!uint256::FromUserHex(\"0x0 \"));                 // no spaces at end,",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "4e05d9459ad275d5929bab8f55e7edcd0be9dca9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add uint256::FromUserHex helper\" (4e05d9459ad275d5929bab8f55e7edcd0be9dca9)\r\n\r\nNot important but could also add a test that this does not allow spaces after a 64 digit string (not just a short string).",
      "created_at": "2024-08-22T17:00:27Z",
      "updated_at": "2024-08-22T18:02:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727507122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727507122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727515102",
      "pull_request_review_id": 2255189643,
      "id": 1727515102,
      "node_id": "PRRC_kwDOABII585m98ne",
      "diff_hunk": "@@ -386,6 +386,34 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"00\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"1\").value(), uint256::ONE);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{0xff});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{0xff});\n+    // a value is expected when the last (65th) character is trimmed off valid_hex_65\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars\n+    static_assert(valid_hex_65.size() == 2 + 65);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_65.substr(2, 64)).value().ToString(), valid_hex_65.substr(2, 64));\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_65.substr(0, 66)).value().ToString(), valid_hex_65.substr(2, 64));",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "4e05d9459ad275d5929bab8f55e7edcd0be9dca9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add uint256::FromUserHex helper\" (4e05d9459ad275d5929bab8f55e7edcd0be9dca9)\r\n\r\nI found these two tests and especially the comment above \"a value is expected when the last (65th) character is trimmed off valid_hex_65\" confusing because they make it sound like the function is supposed to trim off the 65th hex character and ignore it.\r\n\r\nWould change the comment above to plainly describe the string: `// 65 digit hex number with 0x prefix`\r\n\r\nAnd add a comment to explain the thing these two tests are actually checking: `// Pass views of first 64 hex digits to verify string_view size is respected.`",
      "created_at": "2024-08-22T17:05:34Z",
      "updated_at": "2024-08-22T18:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727515102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727515102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 403,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727558308",
      "pull_request_review_id": 2255189643,
      "id": 1727558308,
      "node_id": "PRRC_kwDOABII585m-HKk",
      "diff_hunk": "@@ -106,6 +108,25 @@ std::optional<uintN_t> FromHex(std::string_view str)\n     rv.SetHexDeprecated(str);\n     return rv;\n }\n+/**\n+ * @brief Like FromHex(std::string_view str), but allows an \"0x\" prefix\n+ *        and pads the input with leading zeroes if it is shorter than\n+ *        the expected length of uintN_t::size()*2.\n+ *\n+ *        Designed to be used when dealing with user input.\n+ */\n+template <class uintN_t>\n+std::optional<uintN_t> FromUserHex(std::string_view input)",
      "path": "src/uint256.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "cf88a55e97719aabd62f0b608df0800fef8304de",
      "in_reply_to_id": 1725693175,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1725693175\r\nre: https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2305181520\r\n\r\nMaybe I have a slightly different perspective because I think it can be good to name functions after how they are intended to be used, instead of what they do, depending on what's more relevant to callers. In this case, though, I do think the name describes what it does: parse hex input from a user. The assumption is that callers should not make idiosyncratic choices about what user input to accept, and there should be a common standard.\r\n\r\nI don't like name `FromHexLenient` so much because it sounds like a negative thing that should be avoided, and doesn't provide much more information about what the function does either.\r\n\r\nIf we do want the function name to more literally describe what it does, I think `FromHexNumber` could work because it's conventional for hex numbers to have 0x prefixes and not need to be padded with 0's.\r\n\r\nBut my vote would be for FromUserHex over FromHexNumber over FromHexLenient",
      "created_at": "2024-08-22T17:37:55Z",
      "updated_at": "2024-08-22T18:02:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727558308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727558308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 119,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727569784",
      "pull_request_review_id": 2255189643,
      "id": 1727569784,
      "node_id": "PRRC_kwDOABII585m-J94",
      "diff_hunk": "@@ -386,6 +386,34 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"00\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"1\").value(), uint256::ONE);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{0xff});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{0xff});",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "4e05d9459ad275d5929bab8f55e7edcd0be9dca9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add uint256::FromUserHex helper\" (4e05d9459ad275d5929bab8f55e7edcd0be9dca9)\r\n\r\nWe seem to be dropping the mixed case checks from the previous code:\r\n\r\n```c++\r\n    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\r\n    BOOST_CHECK(IsHexNumber(\"Ffa\"));\r\n    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\r\n    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\r\n```\r\n\r\nI tend to think it would be good to keep these, so code is changing less. But if these are intentionally being dropped, it could be good to add a test comment saying what this test is intentionally not checking, and pointing to other tests where the checks are.",
      "created_at": "2024-08-22T17:47:06Z",
      "updated_at": "2024-08-22T18:02:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727569784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727569784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727696360",
      "pull_request_review_id": 2255475669,
      "id": 1727696360,
      "node_id": "PRRC_kwDOABII585m-o3o",
      "diff_hunk": "@@ -23,7 +23,6 @@\n \n # 2 hashes required per regtest block (with no difficulty adjustment)\n REGTEST_WORK_PER_BLOCK = 2\n-",
      "path": "test/functional/feature_minchainwork.py",
      "position": 1,
      "original_position": 4,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Inadvertent newline removal?",
      "created_at": "2024-08-22T19:27:03Z",
      "updated_at": "2024-08-22T19:28:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727696360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727696360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728890062",
      "pull_request_review_id": 2257111871,
      "id": 1728890062,
      "node_id": "PRRC_kwDOABII585nDMTO",
      "diff_hunk": "@@ -7,32 +7,39 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n+#include <iostream>\n \n FastRandomContext g_insecure_rand_ctx;\n \n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+    constexpr auto RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n \n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            if (auto num_parsed{uint256::FromUserHex(num)}) {\n+                return *num_parsed;\n+            } else {\n+                std::cerr << RANDOM_CTX_SEED << \" must consist only of up to \" << uint256::size() * 2 << \" hex digits (\\\"0x\\\" prefix allowed), was set to: '\" << num << \"'.\\n\";",
      "path": "src/test/util/random.cpp",
      "position": 1,
      "original_position": 31,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "in_reply_to_id": 1726880388,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, taken.",
      "created_at": "2024-08-23T12:27:54Z",
      "updated_at": "2024-08-23T12:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1728890062",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728890062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728903797",
      "pull_request_review_id": 2257111871,
      "id": 1728903797,
      "node_id": "PRRC_kwDOABII585nDPp1",
      "diff_hunk": "@@ -386,6 +386,34 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"00\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"1\").value(), uint256::ONE);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{0xff});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{0xff});\n+    // a value is expected when the last (65th) character is trimmed off valid_hex_65\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars\n+    static_assert(valid_hex_65.size() == 2 + 65);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_65.substr(2, 64)).value().ToString(), valid_hex_65.substr(2, 64));\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_65.substr(0, 66)).value().ToString(), valid_hex_65.substr(2, 64));\n+\n+    BOOST_CHECK(!uint256::FromUserHex(\"0x0 \"));                 // no spaces at end,",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "4e05d9459ad275d5929bab8f55e7edcd0be9dca9",
      "in_reply_to_id": 1727507122,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, and reorganized the test a bit to use `std::string valid_hex_64` instead of `std::string_view valid_hex_65` which makes cat operations significantly less verbose, and makes the test more readable imo.",
      "created_at": "2024-08-23T12:38:51Z",
      "updated_at": "2024-08-23T12:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1728903797",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728903797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728905343",
      "pull_request_review_id": 2257111871,
      "id": 1728905343,
      "node_id": "PRRC_kwDOABII585nDQB_",
      "diff_hunk": "@@ -386,6 +386,34 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"00\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"1\").value(), uint256::ONE);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{0xff});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{0xff});\n+    // a value is expected when the last (65th) character is trimmed off valid_hex_65\n+    constexpr std::string_view valid_hex_65{\"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0\"}; // 0x prefix and 65 hex chars\n+    static_assert(valid_hex_65.size() == 2 + 65);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_65.substr(2, 64)).value().ToString(), valid_hex_65.substr(2, 64));\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_65.substr(0, 66)).value().ToString(), valid_hex_65.substr(2, 64));",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "4e05d9459ad275d5929bab8f55e7edcd0be9dca9",
      "in_reply_to_id": 1727515102,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Resolved by [replacing](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1727507122) `valid_hex_65` with `valid_hex_64` which I think addresses the confusion, too?",
      "created_at": "2024-08-23T12:39:58Z",
      "updated_at": "2024-08-23T12:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1728905343",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728905343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 403,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728920638",
      "pull_request_review_id": 2257111871,
      "id": 1728920638,
      "node_id": "PRRC_kwDOABII585nDTw-",
      "diff_hunk": "@@ -386,6 +386,34 @@ BOOST_AUTO_TEST_CASE(from_hex)\n     TestFromHex<Wtxid>();\n }\n \n+BOOST_AUTO_TEST_CASE(from_user_hex)\n+{\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"00\").value(), uint256::ZERO);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"1\").value(), uint256::ONE);\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0x10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"10\").value(), uint256{0x10});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xff\").value(), uint256{0xff});\n+    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"ff\").value(), uint256{0xff});",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "4e05d9459ad275d5929bab8f55e7edcd0be9dca9",
      "in_reply_to_id": 1727569784,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, fair point. I think I dropped it because of #30377 dropping mixed case support for the consteval ctor, but that's unrelated to this pull of course so keeping the test is the right approach. I've added mixed case into 4 existing checks, but I'd still like to drop the `Ffa` tests since we can't use the `uint8_t` ctor which would make an equality test quite verbose for I think nothing that's not already tested in the other lines?\r\n\r\n```cpp\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"0xFf\").value(), uint256{0xff});\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(\"Ff\").value(), uint256{0xff});\r\n    const std::string valid_hex_64{\"0x0123456789abcdef0123456789abcdef0123456789ABDCEF0123456789ABCDEF\"};\r\n    BOOST_REQUIRE_EQUAL(valid_hex_64.size(), 2 + 64); // 0x prefix and 64 hex digits\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_64.substr(2)).value().ToString(), ToLower(valid_hex_64.substr(2)));\r\n    BOOST_CHECK_EQUAL(uint256::FromUserHex(valid_hex_64.substr(0)).value().ToString(), ToLower(valid_hex_64.substr(2)));\r\n```",
      "created_at": "2024-08-23T12:51:17Z",
      "updated_at": "2024-08-23T13:43:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1728920638",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728920638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728922692",
      "pull_request_review_id": 2257111871,
      "id": 1728922692,
      "node_id": "PRRC_kwDOABII585nDURE",
      "diff_hunk": "@@ -23,7 +23,6 @@\n \n # 2 hashes required per regtest block (with no difficulty adjustment)\n REGTEST_WORK_PER_BLOCK = 2\n-",
      "path": "test/functional/feature_minchainwork.py",
      "position": 1,
      "original_position": 4,
      "commit_id": "18d65d27726bf9fc7629b8e794047a10c9cf6156",
      "original_commit_id": "81554aac80bf2270db977c110c37acc7e8034194",
      "in_reply_to_id": 1727696360,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah, I could've sworn a previous version introduced this newline and this was me reverting it, but I suppose it must be a rebase artifact, thanks for spotting and fixed now.",
      "created_at": "2024-08-23T12:52:48Z",
      "updated_at": "2024-08-23T12:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1728922692",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728922692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "LEFT"
    }
  ]
}