{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966",
    "id": 2663459083,
    "node_id": "PR_kwDOABII586ewSkL",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32966",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32966.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32966.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/7150948e694a3ec8420a39ff9530b70e0a8d6c07",
    "number": 32966,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Silent Payments: Receiving",
    "user": {
      "login": "Eunovo",
      "id": 37949128,
      "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Eunovo",
      "html_url": "https://github.com/Eunovo",
      "followers_url": "https://api.github.com/users/Eunovo/followers",
      "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
      "organizations_url": "https://api.github.com/users/Eunovo/orgs",
      "repos_url": "https://api.github.com/users/Eunovo/repos",
      "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Eunovo/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR is part of integrating silent payments into Bitcoin Core. Status and tracking for the project is managed in https://github.com/bitcoin/bitcoin/issues/28536\r\nThis PR is based on https://github.com/bitcoin/bitcoin/pull/28201 and will remain in draft until https://github.com/bitcoin/bitcoin/pull/28201 is merged.\r\n\r\nThis PR:\r\n- Adds a Silent Payments descriptor implemenation\r\n- Adds a `SilentPaymentsDescriptorScriptPubKeyMan` Impl that is a subclass of `DescriptorScriptPubKeyMan`\r\n- Implements Silent Payments scanning for the wallet\r\n- Updates sending logic to use `silent-payments` destination for change when sending to `silent-payments` destination\r\n- Adds unit and functional tests for silent payments-related functionality\r\n\r\n**Follow-ups**\r\n- Silent Payments Label functionality is incomplete in this PR and will be added as a follow-up PR.\r\n",
    "labels": [
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2025-07-14T08:30:35Z",
    "updated_at": "2025-09-05T14:55:45Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "Eunovo:2025-implement-bip352-receiving",
      "ref": "2025-implement-bip352-receiving",
      "sha": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 755831492,
        "node_id": "R_kgDOLQ0SxA",
        "name": "bitcoin",
        "full_name": "Eunovo/bitcoin",
        "owner": {
          "login": "Eunovo",
          "id": 37949128,
          "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
          "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Eunovo",
          "html_url": "https://github.com/Eunovo",
          "followers_url": "https://api.github.com/users/Eunovo/followers",
          "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
          "organizations_url": "https://api.github.com/users/Eunovo/orgs",
          "repos_url": "https://api.github.com/users/Eunovo/repos",
          "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Eunovo/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Eunovo/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Eunovo/bitcoin",
        "archive_url": "https://api.github.com/repos/Eunovo/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Eunovo/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Eunovo/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Eunovo/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Eunovo/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Eunovo/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Eunovo/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Eunovo/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Eunovo/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Eunovo/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Eunovo/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Eunovo/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Eunovo/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Eunovo/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Eunovo/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Eunovo/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Eunovo/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Eunovo/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Eunovo/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Eunovo/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Eunovo/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Eunovo/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Eunovo/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Eunovo/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Eunovo/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Eunovo/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Eunovo/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Eunovo/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Eunovo/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Eunovo/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Eunovo/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Eunovo/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Eunovo/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Eunovo/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Eunovo/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Eunovo/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Eunovo/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Eunovo/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Eunovo/bitcoin/hooks",
        "svn_url": "https://github.com/Eunovo/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 252185,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-19T14:08:53Z",
        "created_at": "2024-02-11T07:44:19Z",
        "updated_at": "2025-05-02T08:08:35Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "22e689587a7ae02f82ad2464017731f3b23b5363",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37715,
        "stargazers_count": 85353,
        "watchers_count": 85353,
        "size": 291985,
        "default_branch": "master",
        "open_issues_count": 770,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-05T09:24:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-09-05T14:47:19Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 15564,
    "deletions": 155,
    "changed_files": 93,
    "commits": 40,
    "review_comments": 89,
    "comments": 20
  },
  "events": [
    {
      "event": "commented",
      "id": 3068386268,
      "node_id": "IC_kwDOABII586249vc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3068386268",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T08:30:40Z",
      "updated_at": "2025-08-13T09:44:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32966.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#33169](https://github.com/bitcoin/bitcoin/pull/33169) (interfaces, chain, refactor: Remove unused getTipLocator and incaccurate getActiveChainLocator by pablomartin4btc)\n* [#33163](https://github.com/bitcoin/bitcoin/pull/33163) (BIP360: Includes the following: by jbride)\n* [#33116](https://github.com/bitcoin/bitcoin/pull/33116) (refactor: Convert uint256 to Txid by marcofleon)\n* [#33112](https://github.com/bitcoin/bitcoin/pull/33112) (wallet: relax external_signer flag constraints by Sjors)\n* [#33043](https://github.com/bitcoin/bitcoin/pull/33043) ([POC] wallet: Enable non-electronic (paper-based) wallet backup with codex32 by w0xlt)\n* [#33034](https://github.com/bitcoin/bitcoin/pull/33034) (wallet: Store transactions in a separate sqlite table by achow101)\n* [#32977](https://github.com/bitcoin/bitcoin/pull/32977) (wallet: Remove wallet version and several legacy related functions by w0xlt)\n* [#32896](https://github.com/bitcoin/bitcoin/pull/32896) (wallet, rpc: add v3 transaction creation and wallet support by ishaanam)\n* [#32861](https://github.com/bitcoin/bitcoin/pull/32861) (Have createwalletdescriptor auto-detect an unused(KEY) by Sjors)\n* [#32784](https://github.com/bitcoin/bitcoin/pull/32784) (wallet: derivehdkey RPC to get xpub at arbitrary path by Sjors)\n* [#32763](https://github.com/bitcoin/bitcoin/pull/32763) (wallet: Replace CWalletTx::mapValue and vOrderForm with explicit class members by achow101)\n* [#32652](https://github.com/bitcoin/bitcoin/pull/32652) (wallet: add codex32 argument to addhdkey by roconnor-blockstream)\n* [#32579](https://github.com/bitcoin/bitcoin/pull/32579) (headerssync: Preempt unrealistic unit test behavior by hodlinator)\n* [#32523](https://github.com/bitcoin/bitcoin/pull/32523) (wallet: Remove isminetypes by achow101)\n* [#32489](https://github.com/bitcoin/bitcoin/pull/32489) (wallet: Add `exportwatchonlywallet` RPC to export a watchonly version of a wallet by achow101)\n* [#32471](https://github.com/bitcoin/bitcoin/pull/32471) (wallet/rpc: fix listdescriptors RPC fails to return descriptors with private key information when wallet contains descriptors missing any key by Eunovo)\n* [#31974](https://github.com/bitcoin/bitcoin/pull/31974) (Drop testnet3 by Sjors)\n* [#31514](https://github.com/bitcoin/bitcoin/pull/31514) (wallet: allow label for non-ranged external descriptor (if `internal=false`) & disallow label for ranged descriptors by scgbckbone)\n* [#30243](https://github.com/bitcoin/bitcoin/pull/30243) (descriptors: taproot partial descriptors by Eunovo)\n* [#30157](https://github.com/bitcoin/bitcoin/pull/30157) (Fee Estimation via Fee rate Forecasters by ismaelsadeeq)\n* [#29136](https://github.com/bitcoin/bitcoin/pull/29136) (wallet: `addhdkey` RPC to add just keys to wallets via new `unused(KEY)` descriptor by achow101)\n* [#28333](https://github.com/bitcoin/bitcoin/pull/28333) (wallet: Construct ScriptPubKeyMans with all data rather than loaded progressively by achow101)\n* [#27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#27260](https://github.com/bitcoin/bitcoin/pull/27260) (Enhanced error messages for invalid network prefix during address parsing. by portlandhodl)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3068386268",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "labeled",
      "id": 18615146284,
      "node_id": "LE_lADOABII587AZUn2zwAAAARVjJcs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18615146284",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T10:32:41Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3068875066,
      "node_id": "IC_kwDOABII586261E6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3068875066",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T10:32:42Z",
      "updated_at": "2025-07-14T10:32:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/45909076324</sub>\n<sub>LLM reason (✨ experimental): The CI failure was caused by errors in clang-tidy checks, specifically in descriptor.cpp and walletutil.cpp, which are treated as failures due to warnings-as-errors settings.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3068875066",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "reviewed",
      "id": 3015969430,
      "node_id": "PRR_kwDOABII586zxAqW",
      "url": null,
      "actor": null,
      "commit_id": "2d443cc405574077fd6860b7d4083943d6addab8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-14T11:56:35Z",
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#pullrequestreview-3015969430",
      "submitted_at": "2025-07-14T11:56:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
    },
    {
      "event": "commented",
      "id": 3070838431,
      "node_id": "IC_kwDOABII5863CUaf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3070838431",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T20:13:21Z",
      "updated_at": "2025-07-14T20:14:08Z",
      "author_association": "MEMBER",
      "body": "Another thing I noticed while testing using the `send` RPC, in a wallet with _only_ an `sp()` descriptor, is that it insists on having a bech32 descriptor for change:\r\n\r\n> Transaction needs a change address, but we can't generate it. Error: No bech32 addresses available.\r\n\r\nIt seems safer, for backups, to send change to the same silent payment address.\r\n\r\nWallet created by:\r\n\r\n```sh\r\nbitcoin rpc createwallet Silent blank=true silent_payments=true\r\nbitcoin rpc importdescriptors '[{\"desc\": \"sp(xprv...,xprv...)\",  \"timestamp\": \"now\", \"active\": true]\r\n``` \r\n\r\nAlso looking forward to have labels back :-)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3070838431",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "reviewed",
      "id": 3020599518,
      "node_id": "PRR_kwDOABII5860CrDe",
      "url": null,
      "actor": null,
      "commit_id": "2d443cc405574077fd6860b7d4083943d6addab8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-15T15:19:00Z",
      "author_association": "MEMBER",
      "body": "Did a big overview with @Sjors , leaving the notes from our discussion as a review. In general, I think we should investigate using a custom type for the scan key since a lot of the changes seem to be hacking around the fact we represent the scan key as a private key, but then often need to use it as not a private key.\r\n\r\nStill in the process of reviewing, but leaving the initial notes for now",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#pullrequestreview-3020599518",
      "submitted_at": "2025-07-15T15:19:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
    },
    {
      "event": "reviewed",
      "id": 3019536178,
      "node_id": "PRR_kwDOABII586z-ncy",
      "url": null,
      "actor": null,
      "commit_id": "2d443cc405574077fd6860b7d4083943d6addab8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-15T15:31:27Z",
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#pullrequestreview-3019536178",
      "submitted_at": "2025-07-15T15:31:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
    },
    {
      "event": "commented",
      "id": 3075063066,
      "node_id": "IC_kwDOABII5863Sb0a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3075063066",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T18:56:43Z",
      "updated_at": "2025-07-15T18:56:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews @josibake and @Sjors . I am currently travelling, and I will get to them later in the week.",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3075063066",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "mentioned",
      "id": 18644898724,
      "node_id": "MEE_lADOABII587AZUn2zwAAAARXUpOk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18644898724",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T18:56:44Z"
    },
    {
      "event": "subscribed",
      "id": 18644898778,
      "node_id": "SE_lADOABII587AZUn2zwAAAARXUpPa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18644898778",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T18:56:44Z"
    },
    {
      "event": "mentioned",
      "id": 18644898818,
      "node_id": "MEE_lADOABII587AZUn2zwAAAARXUpQC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18644898818",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T18:56:44Z"
    },
    {
      "event": "subscribed",
      "id": 18644898875,
      "node_id": "SE_lADOABII587AZUn2zwAAAARXUpQ7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18644898875",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T18:56:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18714683346,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARbe2fS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18714683346",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cf8007c1e9d2e415409b157694793a1616fb4606",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/cf8007c1e9d2e415409b157694793a1616fb4606",
      "created_at": "2025-07-20T04:47:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18715369714,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARbheDy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18715369714",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ec56655f73a04b56b05e97e1ca204a26b9299e61",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/ec56655f73a04b56b05e97e1ca204a26b9299e61",
      "created_at": "2025-07-20T08:16:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18715411231,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARbhoMf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18715411231",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3b05f60120123ce1fbfc7f4f2689c31dd5ad4d33",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/3b05f60120123ce1fbfc7f4f2689c31dd5ad4d33",
      "created_at": "2025-07-20T08:30:37Z"
    },
    {
      "event": "commented",
      "id": 3094352453,
      "node_id": "IC_kwDOABII5864cBJF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3094352453",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-20T08:33:22Z",
      "updated_at": "2025-07-20T08:33:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added @achow101 as co-author on commits with code/ideas taken from  https://github.com/bitcoin/bitcoin/pull/28453",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3094352453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "mentioned",
      "id": 18715419539,
      "node_id": "MEE_lADOABII587AZUn2zwAAAARbhqOT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18715419539",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-20T08:33:23Z"
    },
    {
      "event": "subscribed",
      "id": 18715419542,
      "node_id": "SE_lADOABII587AZUn2zwAAAARbhqOW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18715419542",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-20T08:33:23Z"
    },
    {
      "event": "unlabeled",
      "id": 18715641055,
      "node_id": "UNLE_lADOABII587AZUn2zwAAAARbigTf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18715641055",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-20T09:35:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18732802564,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARcj-IE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18732802564",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ed7f894fc0c1ed3a84f4af73ece619698cee11c0",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/ed7f894fc0c1ed3a84f4af73ece619698cee11c0",
      "created_at": "2025-07-21T16:32:23Z"
    },
    {
      "event": "commented",
      "id": 3098588297,
      "node_id": "IC_kwDOABII5864sLSJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3098588297",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T20:23:05Z",
      "updated_at": "2025-07-21T20:26:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Another thing I noticed while testing using the `send` RPC, in a wallet with _only_ an `sp()` descriptor, is that it insists on having a bech32 descriptor for change:\r\n> \r\n> > Transaction needs a change address, but we can't generate it. Error: No bech32 addresses available.\r\n\r\nIn https://github.com/bitcoin/bitcoin/pull/32966/commits/ed7f894fc0c1ed3a84f4af73ece619698cee11c0 I modified the change `OutputType` determination logic to try to use silent payments if `bech32m` addresses are not available.\r\n\r\n> It seems safer, for backups, to send change to the same silent payment address.\r\n\r\nThat may be true, but the wallet tries to match the change `OutputType` to the other outputs to preserve privacy. \r\n\r\ncc @Sjors \r\n ",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3098588297",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "mentioned",
      "id": 18736388570,
      "node_id": "MEE_lADOABII587AZUn2zwAAAARcxpna",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18736388570",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T20:24:13Z"
    },
    {
      "event": "subscribed",
      "id": 18736388594,
      "node_id": "SE_lADOABII587AZUn2zwAAAARcxpny",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18736388594",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T20:24:13Z"
    },
    {
      "event": "commented",
      "id": 3101665965,
      "node_id": "IC_kwDOABII586436qt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3101665965",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T08:36:47Z",
      "updated_at": "2025-07-22T08:36:47Z",
      "author_association": "MEMBER",
      "body": "@Eunovo that's an interesting trade-off, and we should probably be consistent with how the rest of the wallet behaves. Otherwise we'd leave a fingerprint of which coins were sent using silent payments.\r\n\r\nSo in that case I think the bevavior should be:\r\n- if coins are sent to a bech32m address, use a silent payment change address (don't use the regular bech32m descriptor)\r\n- otherwise, use a matching output type\r\n  - when there's no descriptor for it, fall back to silent payment change address ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3101665965",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "mentioned",
      "id": 18746599300,
      "node_id": "MEE_lADOABII587AZUn2zwAAAARdYmeE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18746599300",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T08:36:48Z"
    },
    {
      "event": "subscribed",
      "id": 18746599318,
      "node_id": "SE_lADOABII587AZUn2zwAAAARdYmeW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18746599318",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T08:36:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18750720217,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARdoUjZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18750720217",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "913d82456686a3c8e38e50230209ebbf6efcdd54",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/913d82456686a3c8e38e50230209ebbf6efcdd54",
      "created_at": "2025-07-22T12:02:12Z"
    },
    {
      "event": "commented",
      "id": 3102421425,
      "node_id": "IC_kwDOABII58646zGx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3102421425",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T12:03:25Z",
      "updated_at": "2025-07-22T12:03:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "> So in that case I think the bevavior should be:\r\n> \r\n> * if coins are sent to a bech32m address, use a silent payment change address (don't use the regular bech32m descriptor)\r\n> * otherwise, use a matching output type\r\n>   \r\n>   * when there's no descriptor for it, fall back to silent payment change address\r\n\r\nDone",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3102421425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "labeled",
      "id": 18750986963,
      "node_id": "LE_lADOABII587AZUn2zwAAAARdpVrT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18750986963",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T12:16:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3102461311,
      "node_id": "IC_kwDOABII5864681_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3102461311",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T12:16:16Z",
      "updated_at": "2025-07-22T12:16:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `CentOS, depends, gui`: https://github.com/bitcoin/bitcoin/runs/46470201152</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by an assertion failure in wallet_tests due to a test check failing, leading to subprocess abortion.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3102461311",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "commented",
      "id": 3103829182,
      "node_id": "IC_kwDOABII5865AKy-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3103829182",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T16:47:30Z",
      "updated_at": "2025-07-22T16:47:30Z",
      "author_association": "MEMBER",
      "body": "Looks like the most recent change is causing a failure in the unit tests:\r\n\r\n> 2025-07-22T13:09:52.932304Z (mocktime: 2020-08-31T15:34:12Z) [test] [txmempool.cpp:699] [void CTxMemPool::check(const CCoinsViewCache &, int64_t) const] [mempwallet/spend.cpp:1343 CreateTransactionInternal: Assertion `!change_script.empty()' failed.\r\n\r\n",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3103829182",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "commented",
      "id": 3104340209,
      "node_id": "IC_kwDOABII5865CHjx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3104340209",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T18:50:07Z",
      "updated_at": "2025-07-22T18:50:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yes @josibake, it's a slightly tricky problem. Rather than rush to a solution, I'd like to discuss it next meeting.",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3104340209",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "mentioned",
      "id": 18758869002,
      "node_id": "MEE_lADOABII587AZUn2zwAAAAReHaAK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18758869002",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T18:50:08Z"
    },
    {
      "event": "subscribed",
      "id": 18758869034,
      "node_id": "SE_lADOABII587AZUn2zwAAAAReHaAq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18758869034",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T18:50:09Z"
    },
    {
      "event": "labeled",
      "id": 18771111646,
      "node_id": "LE_lADOABII587AZUn2zwAAAARe2G7e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18771111646",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T10:27:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18778589263,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARfSohP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18778589263",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7f84d23c16cfa50435fd061f55bfd7865ee06c19",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/7f84d23c16cfa50435fd061f55bfd7865ee06c19",
      "created_at": "2025-07-23T16:38:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18778978856,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARfUHoo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18778978856",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c96cc615a6e3a972e17245d1afc4640dd0d0bed3",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/c96cc615a6e3a972e17245d1afc4640dd0d0bed3",
      "created_at": "2025-07-23T17:01:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18779226275,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARfVECj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18779226275",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3bab8e63c3082dda84ebeeed7fd6899c04c5d157",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/3bab8e63c3082dda84ebeeed7fd6899c04c5d157",
      "created_at": "2025-07-23T17:16:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18807342683,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARhAUZb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18807342683",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "640a4abd10db578bce3f49db64c6f0f3c0d77f7b",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/640a4abd10db578bce3f49db64c6f0f3c0d77f7b",
      "created_at": "2025-07-25T04:12:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18807567207,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARhBLNn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18807567207",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "970bef8749a6371676e7b48ecfd18153b36fe13f",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/970bef8749a6371676e7b48ecfd18153b36fe13f",
      "created_at": "2025-07-25T04:41:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18808106561,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARhDO5B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18808106561",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fb185b09f2289f283e3ef3d206977e12e1f52414",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/fb185b09f2289f283e3ef3d206977e12e1f52414",
      "created_at": "2025-07-25T05:42:53Z"
    },
    {
      "event": "unlabeled",
      "id": 18808322337,
      "node_id": "UNLE_lADOABII587AZUn2zwAAAARhEDkh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18808322337",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T06:04:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3117061381,
      "node_id": "IC_kwDOABII5865ypUF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3117061381",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T09:27:33Z",
      "updated_at": "2025-07-25T09:27:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've fixed all known errors. The current failing CI is unrelated.",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3117061381",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "commented",
      "id": 3117088226,
      "node_id": "IC_kwDOABII5865yv3i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3117088226",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T09:36:53Z",
      "updated_at": "2025-07-25T09:36:53Z",
      "author_association": "MEMBER",
      "body": "> The current failing CI\r\n\r\nShould be fixed in my (just now) pushed changes for the base and sending PRs.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3117088226",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18812881772,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARhVcts",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18812881772",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "created_at": "2025-07-25T11:22:42Z"
    },
    {
      "event": "commented",
      "id": 3117880896,
      "node_id": "IC_kwDOABII58651xZA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3117880896",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T13:45:36Z",
      "updated_at": "2025-07-25T14:23:33Z",
      "author_association": "MEMBER",
      "body": "I did some more testing with 587c63e06955ce5c5f2d64f1c1700ca8628572cf, noticed improvements:\r\n- rescan uses the slow version (when `-blockfilterindex` is enabled), as expected\r\n- if I add a label to a transaction, it stores it\r\n\r\nStuff I tested that just works:\r\n- `listdescriptors` gives me a working scan key (tried by importing it into a watch-only wallet)\r\n\r\nNew bug:\r\n- when I send to a bech32m (`bcp1...`) address with change, using my wallet that only has an sp descriptor, the change output is dropped and added to fees\r\n  - strange, because your test in 5be304dfa50bcfd3b0a92eff52bac3d8023ce523 seems to cover exactly this scenario\r\n  - perhaps it's a GUI bug (yikes), because when I use the `send` RPC instead it behaves correctly\r\n  - _update_: now I can't reproduce it in the GUI either. It was a pretty small output, so maybe it was an edge case where it wanted to avoid a dust change output - although it was bigger than that.\r\n\r\nSome remaining issues:\r\n- add silent payments to \"output types\" in the receive screen (see patch below)\r\n- when setting a label in the Send dialog it doesn't seem to be added to the resulting transaction\r\n- if I don't set `silent_payments=true` at wallet creation time I can't change it later and  `importdescriptors` fails with `Cannot import silent payment descriptor into a wallet with silent-payments disabled`\r\n\r\nSome style suggestions:\r\n- I prefer giving `SilentPaymentDescriptorScriptPubKeyMan` in its own file, similar to `external_signer_scriptpubkeyman.{h,cpp}`\r\n\r\n<details>\r\n<summary>Patch to add Silent Payment address to dropdown</summary>\r\n \r\n```diff\r\ndiff --git a/src/interfaces/wallet.h b/src/interfaces/wallet.h\r\nindex 94869aff5a..bbd87c075b 100644\r\n--- a/src/interfaces/wallet.h\r\n+++ b/src/interfaces/wallet.h\r\n@@ -268,6 +268,9 @@ public:\r\n     // Return whether the wallet contains a Taproot scriptPubKeyMan\r\n     virtual bool taprootEnabled() = 0;\r\n\r\n+    // Return whether the wallet contains a Silent Payment scriptPubKeyMan\r\n+    virtual bool silentPaymentsEnabled() = 0;\r\n+\r\n     // Return whether wallet uses an external signer.\r\n     virtual bool hasExternalSigner() = 0;\r\n\r\ndiff --git a/src/qt/receivecoinsdialog.cpp b/src/qt/receivecoinsdialog.cpp\r\nindex be7741e8a8..d3164eccf0 100644\r\n--- a/src/qt/receivecoinsdialog.cpp\r\n+++ b/src/qt/receivecoinsdialog.cpp\r\n@@ -99,6 +99,9 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\r\n         if (model->wallet().taprootEnabled()) {\r\n             add_address_type(OutputType::BECH32M, tr(\"Bech32m (Taproot)\"), tr(\"Bech32m (BIP-350) is an upgrade to Bech32, wallet support is still limited.\"));\r\n         }\r\n+        if (model->wallet().silentPaymentsEnabled()) {\r\n+            add_address_type(OutputType::SILENT_PAYMENTS, tr(\"Silent Payment\"), tr(\"A Silent Payment address (BIP-352) can safely be reused. Wallet support is still limited.\"));\r\n+        }\r\n\r\n         // Set the button to be enabled or disabled based on whether the wallet can give out new addresses.\r\n         ui->receiveButton->setEnabled(model->wallet().canGetAddresses());\r\ndiff --git a/src/wallet/interfaces.cpp b/src/wallet/interfaces.cpp\r\nindex 66b24d1ec2..ed62e21012 100644\r\n--- a/src/wallet/interfaces.cpp\r\n+++ b/src/wallet/interfaces.cpp\r\n@@ -505,6 +505,10 @@ public:\r\n         auto spk_man = m_wallet->GetScriptPubKeyMan(OutputType::BECH32M, /*internal=*/false);\r\n         return spk_man != nullptr;\r\n     }\r\n+    bool silentPaymentsEnabled() override {\r\n+        auto spk_man = m_wallet->GetScriptPubKeyMan(OutputType::SILENT_PAYMENTS, /*internal=*/false);\r\n+        return spk_man != nullptr;\r\n+    }\r\n     OutputType getDefaultAddressType() override { return m_wallet->m_default_address_type; }\r\n     CAmount getDefaultMaxTxFee() override { return m_wallet->m_default_max_tx_fee; }\r\n     void remove() override\r\n```\r\n\r\nNote there's an unrelated GUI glitch that requires you to close and reopen the wallet after importing a new descriptor to get this dropdown to update.\r\n\r\n</details>",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3117880896",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "reviewed",
      "id": 3055528177,
      "node_id": "PRR_kwDOABII5862H6jx",
      "url": null,
      "actor": null,
      "commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-25T14:09:14Z",
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#pullrequestreview-3055528177",
      "submitted_at": "2025-07-25T14:09:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
    },
    {
      "event": "unlabeled",
      "id": 18820348414,
      "node_id": "UNLE_lADOABII587AZUn2zwAAAARhx7n-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18820348414",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T19:34:13Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3056616801,
      "node_id": "PRR_kwDOABII5862MEVh",
      "url": null,
      "actor": null,
      "commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-25T19:45:52Z",
      "author_association": "NONE",
      "body": "working on backup / restore testing I noticed a few issues.",
      "user": {
        "login": "macgyver13",
        "id": 4712150,
        "node_id": "MDQ6VXNlcjQ3MTIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4712150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/macgyver13",
        "html_url": "https://github.com/macgyver13",
        "followers_url": "https://api.github.com/users/macgyver13/followers",
        "following_url": "https://api.github.com/users/macgyver13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/macgyver13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/macgyver13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/macgyver13/subscriptions",
        "organizations_url": "https://api.github.com/users/macgyver13/orgs",
        "repos_url": "https://api.github.com/users/macgyver13/repos",
        "events_url": "https://api.github.com/users/macgyver13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/macgyver13/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#pullrequestreview-3056616801",
      "submitted_at": "2025-07-25T19:45:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
    },
    {
      "event": "labeled",
      "id": 18856137148,
      "node_id": "LE_lADOABII587AZUn2zwAAAARj6dG8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18856137148",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T13:22:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "comment_deleted",
      "id": 18862549229,
      "node_id": "CDE_lADOABII587AZUn2zwAAAARkS6jt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862549229",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T18:42:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18896716558,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARmVQMO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18896716558",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1982c8f0ad812d301a4dc09fa3d05328688f0172",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/1982c8f0ad812d301a4dc09fa3d05328688f0172",
      "created_at": "2025-07-30T11:05:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18977350862,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARrI2TO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18977350862",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a7291beb65379b187118d2851784b60364d7d4ed",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/a7291beb65379b187118d2851784b60364d7d4ed",
      "created_at": "2025-08-04T19:42:50Z"
    },
    {
      "event": "unlabeled",
      "id": 18977848821,
      "node_id": "UNLE_lADOABII587AZUn2zwAAAARrKv31",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18977848821",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-04T20:17:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19116008616,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAARzZySo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19116008616",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d543c8770511a5d7acb0b4515aaf62eb4b46101f",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/d543c8770511a5d7acb0b4515aaf62eb4b46101f",
      "created_at": "2025-08-12T15:41:26Z"
    },
    {
      "event": "labeled",
      "id": 19120870727,
      "node_id": "LE_lADOABII587AZUn2zwAAAARzsVVH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19120870727",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T19:42:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3180769967,
      "node_id": "IC_kwDOABII5869lrKv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3180769967",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T19:42:27Z",
      "updated_at": "2025-08-12T19:42:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/47922196595</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a static assertion failure in transaction_tests.cpp due to a mismatch in the expected size of a variant type.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3180769967",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19131506363,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAAR0U567",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19131506363",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "50fafd9cbec4bd7361bc74434967085d53061118",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/50fafd9cbec4bd7361bc74434967085d53061118",
      "created_at": "2025-08-13T08:39:53Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUyMGFjYmE0ZWZlYzE0N2ZhOTdkMDQwYTYyZmJiZjgxNjNiNmRjOGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/520acba4efec147fa97d040a62fbbf8163b6dc8b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/520acba4efec147fa97d040a62fbbf8163b6dc8b",
      "tree": {
        "sha": "c6bb2df2965cf59ffaaae5c6b5c5c95b0a905490",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6bb2df2965cf59ffaaae5c6b5c5c95b0a905490"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5600e6fc4bb4f8e82adc58fc676ec44730e3cec4",
          "sha": "5600e6fc4bb4f8e82adc58fc676ec44730e3cec4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5600e6fc4bb4f8e82adc58fc676ec44730e3cec4"
        }
      ],
      "message": "Squashed 'src/secp256k1/' changes from b9313c6e1a..2b57d2ad89\n\n2b57d2ad89 docs: update README\n5d2d4adabd ci: enable silentpayments module\nd6788a888c tests: add constant time tests\n4c32ba9613 tests: add BIP-352 test vectors\n183e5414f7 silentpayments: add benchmarks for scanning\n288390446a silentpayments: add examples/silentpayments.c\n250beff5d2 silentpayments: receiving\nf90d7a76b0 silentpayments: recipient label support\n1a5f53f2cf silentpayments: sending\nca2538a878 build: add skeleton for new silentpayments (BIP352) module\n\ngit-subtree-dir: src/secp256k1\ngit-subtree-split: 2b57d2ad8964e536508fae0b6ab1331396fe0308",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-13T08:52:25Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-13T08:52:25Z"
      },
      "sha": "520acba4efec147fa97d040a62fbbf8163b6dc8b"
    },
    {
      "event": "commented",
      "id": 3182866003,
      "node_id": "IC_kwDOABII5869tq5T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3182866003",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T09:04:44Z",
      "updated_at": "2025-08-13T09:04:44Z",
      "author_association": "MEMBER",
      "body": "Rebased the base and sending PRs on master and fixed the static assert failure. Rebasing this on the sending PR should fix the CI failure.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3182866003",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19134783968,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAAR0haHg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19134783968",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "01e275bdcc47319d94fcd3a5ab519277d7fe3a02",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/01e275bdcc47319d94fcd3a5ab519277d7fe3a02",
      "created_at": "2025-08-13T11:19:27Z"
    },
    {
      "event": "unlabeled",
      "id": 19138787329,
      "node_id": "UNLE_lADOABII587AZUn2zwAAAAR0wrgB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19138787329",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T14:24:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 19145133704,
      "node_id": "LE_lADOABII587AZUn2zwAAAAR1I46I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19145133704",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T20:32:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlhZDA5YmZlODdkMjM2MzJmOTc2NTA3YTkwZTg0YzkyZGJkMGMyMmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ad09bfe87d23632f976507a90e84c92dbd0c22c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad09bfe87d23632f976507a90e84c92dbd0c22c",
      "tree": {
        "sha": "95dd1bdad8bd426ed596d4bb427e4fdf642352da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95dd1bdad8bd426ed596d4bb427e4fdf642352da"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 95dd1bdad8bd426ed596d4bb427e4fdf642352da\nparent 9b1a7c3e8dd78d97fbf47c2d056d043b05969176\nparent 520acba4efec147fa97d040a62fbbf8163b6dc8b\nauthor josibake <josibake@protonmail.com> 1755075145 +0100\ncommitter josibake <josibake@protonmail.com> 1755158162 +0100\n\nMerge commit '520acba4efec147fa97d040a62fbbf8163b6dc8b' into refresh-secp256k1\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmidlpMACgkQity1WMTz\nPWVz5xAA2EL/SEQ8M2VZgpNDjYSakcGhE3VYQGToHTZzntpG+1XDVDnbegUPypLy\ncp67J1nCfhTgHUCo09ruq7QMQc0YWfQuXd/npsOBnO3Jx5O3ONlQRN6nuh7EDE7k\n5RUJYD4n2W1jPHnjInyMB8ey+uTBRHt89xMjzEZpwbn6RhebreS2K9ZBcoeWaxMR\nneqqLO0R5eF3rEA4NPeXcdTN3E8RpL1MuJ7pr1VUFGDN6dY1KvyLnjSVvnzqv3+8\nWI6Tb+DpdiEco6UC4O3uvq5XaOi5yWf/zOYDUukpVvbFk38OXH5fp8rog7DrDssd\nnFmUQqxW9kkj43Agmv5E+Vp26/49DGwZ4xL47Yj1couuZlZ5HlEaogzZnKgfB8sJ\nmpO6jouVTZqr6DCdYQuSSV1VYicbkhoESRJVc9657RaykXAyjWFOrhA0dOcg01by\nlNrxP4sT3fvP6+UrhIWKqNSOC+bu/pfuiQYWQhLmnG5+Q1K0I6dTqMoLezDFW8hZ\nsgtGBKo2y30DI3LsaQMbgiKlWgrcf6yBvQ+UE5aKeufVR0t33kH6W0QG63IASp3q\ney15yLaJ212LMAdaE3Tqmv5Y527yoyt+sKHY3AY5+Q2WueJxWKw5DueBxU7HkM0s\no+rtcKzhMHSHCQQpqyHmtZ3N3yoHuaAbWrUH2OZX7reiTriMfFU=\n=VzUr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b1a7c3e8dd78d97fbf47c2d056d043b05969176",
          "sha": "9b1a7c3e8dd78d97fbf47c2d056d043b05969176",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1a7c3e8dd78d97fbf47c2d056d043b05969176"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/520acba4efec147fa97d040a62fbbf8163b6dc8b",
          "sha": "520acba4efec147fa97d040a62fbbf8163b6dc8b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/520acba4efec147fa97d040a62fbbf8163b6dc8b"
        }
      ],
      "message": "Merge commit '520acba4efec147fa97d040a62fbbf8163b6dc8b' into refresh-secp256k1",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-14T07:56:02Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-13T08:52:25Z"
      },
      "sha": "9ad09bfe87d23632f976507a90e84c92dbd0c22c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg3YjI0NDBkODQyMzhjNzAzMzY5ZDI5MGM4ZGQ4YjhjMGY4YmY0Nzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87b2440d84238c703369d290c8dd8b8c0f8bf477",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/87b2440d84238c703369d290c8dd8b8c0f8bf477",
      "tree": {
        "sha": "1b8ba6e9f8c789e462fac7cf3d8ad9dcf4f069d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b8ba6e9f8c789e462fac7cf3d8ad9dcf4f069d3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1b8ba6e9f8c789e462fac7cf3d8ad9dcf4f069d3\nparent 9ad09bfe87d23632f976507a90e84c92dbd0c22c\nauthor josibake <josibake@protonmail.com> 1743763075 +0200\ncommitter josibake <josibake@protonmail.com> 1755158164 +0100\n\ncrypto: add read-only method to KeyPair\n\nAdd a method for passing a KeyPair object to secp256k1 functions expecting a secp256k1_keypair.\nThis allows for passing a KeyPair directly to a secp256k1 function without needing to create a\ntemporary secp256k1_keypair object.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmidlpUACgkQity1WMTz\nPWWyGBAAgH0OrWYZa+VN0+EWphaiwThyJmfoo72HRK8DqBm5+WpZSBknTkjrfjiL\nwZ26L1EdwOoCkF6ExEOUnMD6vhpSPcHjCBThyQtqwhb/N8gt2X70TKTlbuodxZKy\npYPFL6o/cI5jepry+juKhgXXsElbsIDvIhhZHv0Nf3m9WSEBZYX2kv2fkvS2WARU\ng3duNjI0E2qKiGIxYkfDOLPgKEokfOnsomUfqjrxFtQQqI3W9k4iN0FI2+S4U0RQ\nFUv+h4aziMGX3o+MgGdU5fVMgousJam+9+6g6RW8sivW/C8jVw3wrYjEtJU4xxyv\n/LNX58EFGzrJ+kBmEHdFOgagonAOzNIcs5ylKUyzvL5d0AOF5lbXriB0JF09en5U\n3oBr1rjmML9aQuDuTn73fYSyKVKvkpT3utMhPP/EaFnm1J//5LjMi05CsRpkXpTO\ncXcNJULhROev9dWUD/FKTgVRweKSwnJoMWW4HBxlMYZBx7TzfI1dfd1qOYrOLGtz\nMwdhXwFO6N2SjuJsIOEDtKp4wPTkIivSilj1uDNll/XWgAJqR/ptTv8QPKESrgo3\nlaR1REBu6q5LeNS6DN4hTpWedDwKuRpXzi7EsQ/pHkBBimph8MRWqd2tzUNG6LNT\nVuKYSRo+wx/7prABbys+tBjARVZnYVuIwDZxeSxWTBrYxDSqEBo=\n=ildD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ad09bfe87d23632f976507a90e84c92dbd0c22c",
          "sha": "9ad09bfe87d23632f976507a90e84c92dbd0c22c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad09bfe87d23632f976507a90e84c92dbd0c22c"
        }
      ],
      "message": "crypto: add read-only method to KeyPair\n\nAdd a method for passing a KeyPair object to secp256k1 functions expecting a secp256k1_keypair.\nThis allows for passing a KeyPair directly to a secp256k1 function without needing to create a\ntemporary secp256k1_keypair object.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-14T07:56:04Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-04-04T10:37:55Z"
      },
      "sha": "87b2440d84238c703369d290c8dd8b8c0f8bf477"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMwODU0NzgzOGYxOTJiMGZlOTU1YmFlNWNiNDMxOTExNzZiZmI4OTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c08547838f192b0fe955bae5cb43191176bfb893",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c08547838f192b0fe955bae5cb43191176bfb893",
      "tree": {
        "sha": "826aa05daeba83d3cf0101d8119cf31d37aa3a04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/826aa05daeba83d3cf0101d8119cf31d37aa3a04"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 826aa05daeba83d3cf0101d8119cf31d37aa3a04\nparent 87b2440d84238c703369d290c8dd8b8c0f8bf477\nauthor josibake <josibake@protonmail.com> 1689711791 +0200\ncommitter josibake <josibake@protonmail.com> 1755158165 +0100\n\nAdd \"sp\" HRP\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmidlpYACgkQity1WMTz\nPWVGaQ/9EtOSUH4laTMp/xW/ylWs/Sz4Qnb5SJsiF8u9d4UaEwcrL/AiFBOyy6Ep\ni81ylsuD58CeUTkOTyKrhjgXDZbxqccNPhA/Q/DVBF6GW0O3EPybu6Jm+rCjEhyc\nc/eCCBACvyuJsmIWIO62XpWulODiIzjctKCheXny3rcxfTTSo7ku7Hdel2IwsUyw\n/vLSV24vTbVOUejDw0eWf0I/5YMBtsHcNTIjvISLMfCm9Z8khyeVWHdJsOaMQqDv\neQuqN2Y8KHZUcO4Drwj/cu8Asfvx4/D69pjzP5SkGDLkEmQvW977WGzJPsV+G4/T\nTTWGODgFxUmzk+SMu/vhAHVVOHnGVxddzcYC2MdHXPiuottzOLM3EgYOzeClu+Z5\nUOoGEN+4DuVq+UBzsFLlDQgvOzLllwejBAJTm6tvto85diDwutI+2Q92XRwnoR2i\nU0pK4I1T3/cHlKP4gqhjMmG8RbS0IuP/kpKnL5mbbtWW9OMpSMbexUGiwBC5NZ2s\n5bu3BYRcgrquihnd4Ja38cFvR4WncWZHQkLbKRdXyBQVewQaRx+74v0aqOdUVKty\nxioPIN4D1lv3ijl73P2pq/lLQZB0zLoJPhJikG3fr6y62ae5ltBPVBJuuuhPxFEz\nLih2KqAW2UmT7UDnOdpXy+2yrOeQKBIYjgywIvvjm3YZPIuB0/0=\n=0sKf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87b2440d84238c703369d290c8dd8b8c0f8bf477",
          "sha": "87b2440d84238c703369d290c8dd8b8c0f8bf477",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/87b2440d84238c703369d290c8dd8b8c0f8bf477"
        }
      ],
      "message": "Add \"sp\" HRP",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-14T07:56:05Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-07-18T20:23:11Z"
      },
      "sha": "c08547838f192b0fe955bae5cb43191176bfb893"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE0YzQ3OTU3ZDRhZTY1YTk2MjQ2ODY0ZTcyYmQ0YjZiYTQ5OTRmZDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4c47957d4ae65a96246864e72bd4b6ba4994fd3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a4c47957d4ae65a96246864e72bd4b6ba4994fd3",
      "tree": {
        "sha": "04cca6c65ae70aafc406c93e4c663f0da4617665",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04cca6c65ae70aafc406c93e4c663f0da4617665"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 04cca6c65ae70aafc406c93e4c663f0da4617665\nparent c08547838f192b0fe955bae5cb43191176bfb893\nauthor josibake <josibake@protonmail.com> 1691675009 +0200\ncommitter josibake <josibake@protonmail.com> 1755158166 +0100\n\nAdd V0SilentPaymentDestination address type\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmidlpcACgkQity1WMTz\nPWUKlA/5AUKQozH5BHw1qjSOX/11FtEjlbY0x3+fpGY8cMlfpXpv0GgdUCQBai4/\nhbm5lGDW0lWFB+9GKcCUFF7i4F+Rpns/5ogB4AiTU7J34uqv1LzWnsXs0h3yhAJm\ntADbujmG5c2utKE9oAnJSr/v71wvnScZasfuOxf1fjtSenCO38tD5NceJctcdL7T\nwAPl+V5PfUe7jhsO7DRPraK2sPg4r8TMW3B9lPRXHvJTYmT/6OiCVzbMWhE3B0es\nkXmZGEQK5EOoch5j7TwG6Y3XAGCK+99qS/RYOjXoHbwTJxLhAL90bwOp9xoZp6IC\nazWXwWuoTEP1Xhycl50y2XD69aSJZNQQbfoCs5MFo0yQIUouhQCC8fS6juKy2vWJ\n0jEe+yDAqEJaQAqaUH8q8RfYdcCyMEXWxlva9L70AarA3ZTb0+COADXqV3BlIExu\nnfDpRqE4adgaRY5HnkehCqU+eZBfZz4n2Jh/tp9723SMr8cozFnlos+fNgPWgnNg\nshi8RFxsMNUkOiv6n5Gve3xxO5Uudx71u1YATwKaiPGR4G+vHi0U48sazWoiFbtC\nk/KRC3YeEZEhnLvdREzEllk1OBeFHB2Zswe1yHtMX2C2bPOfpSbtvhW5ed5zSatJ\nNG9qDOH9ZZZntxiwcfszaBwR9pDATQl/dXJ7lkqH2rPZ8ZQy89E=\n=7xJt\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c08547838f192b0fe955bae5cb43191176bfb893",
          "sha": "c08547838f192b0fe955bae5cb43191176bfb893",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c08547838f192b0fe955bae5cb43191176bfb893"
        }
      ],
      "message": "Add V0SilentPaymentDestination address type",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-14T07:56:06Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-08-10T13:43:29Z"
      },
      "sha": "a4c47957d4ae65a96246864e72bd4b6ba4994fd3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19153763259,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAAR1pzu7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19153763259",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "09277cbc63907d5566f50a3a3643862cd18c568d",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/09277cbc63907d5566f50a3a3643862cd18c568d",
      "created_at": "2025-08-14T08:04:59Z"
    },
    {
      "event": "unlabeled",
      "id": 19155302973,
      "node_id": "UNLE_lADOABII587AZUn2zwAAAAR1vro9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19155302973",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T09:23:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 19166066428,
      "node_id": "LE_lADOABII587AZUn2zwAAAAR2Yvb8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19166066428",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T19:53:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3189699972,
      "node_id": "IC_kwDOABII586-HvWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3189699972",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T19:53:26Z",
      "updated_at": "2025-08-14T19:53:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3189699972",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "reviewed",
      "id": 3123737293,
      "node_id": "PRR_kwDOABII5866MHLN",
      "url": null,
      "actor": null,
      "commit_id": "09277cbc63907d5566f50a3a3643862cd18c568d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-15T13:17:18Z",
      "author_association": "MEMBER",
      "body": "Looks much better now that you added `ScankeyPubkeyProvider`. We could even just call this a `SilentPaymentsPubKeyProvider`, which is perhaps a bit less confusing for reviewers who are less familiar with the details of how silent payments work. Reviewed up until the `SilentPaymentsSPKMan` commit and onward.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#pullrequestreview-3123737293",
      "submitted_at": "2025-08-15T13:17:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUyNTA2NmU0YzljMjgwMDIyYjMyOTQ5MmEzNmQ5MTdmZTI2ZGExNjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e25066e4c9c280022b329492a36d917fe26da165",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e25066e4c9c280022b329492a36d917fe26da165",
      "tree": {
        "sha": "6f7471ff00c8cdba115eecc71c203b3abc2a3dbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f7471ff00c8cdba115eecc71c203b3abc2a3dbe"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6f7471ff00c8cdba115eecc71c203b3abc2a3dbe\nparent a4c47957d4ae65a96246864e72bd4b6ba4994fd3\nauthor josibake <josibake@protonmail.com> 1707319694 +0100\ncommitter josibake <josibake@protonmail.com> 1755269486 +0100\n\ncommon: add bip352.{h,cpp} secp256k1 module\n\nWrap the silentpayments module from libsecp256k1. This is placed in\ncommon as it is intended to be used by:\n\n  * RPCs: for parsing addresses\n  * Wallet: for sending, receiving, spending silent payment outputs\n  * Node: for creating silent payment indexes for light clients\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSW8ACgkQity1WMTz\nPWXhJhAAmhTcBqS8V8WOg6dDADje2iszvtg2BHV7OJYy5vIaHba1z8ZKkEFo8NqF\nsDyDf0EEQD5hZC/Z+FTiQZoAzwChOlYjn28kk5YwFnkPVIiohv/aEiROPcwYk4wR\n2i1OcGGVT8S+8NpTlOmxvJy6MzXNGIA2EVWhDbLuoMqM+iMFHz0j7nghjBQ+IKOc\naFPX+dI9JxXaudtevooFtH+mGEoxQQAzlOcajjQ/LEZEC3qpZpM07SiIkWU4QnmH\nCBeFyzTzBhHcR7VacJmA6zOxs5XY1/ej+XapUbptedNIXt3zxYpuqNEjvzFiXNeT\nGJWveh10JDi6mTRmpwoPE8S+VMTwMj21uI9gEVSc2Ja6T+kLE71we92Ao2/hk7Dn\nqLbFvYxv98DuprhVyCe+duMcc8HgaRckePjTu1AScO2sOMObb+69zUtw8DpbEMSq\no6sihmFioJB6MEN6w7S1JoFbyYym9RONgkizuJFmrVVjri0k5sBZPw3oNfxXDZTB\nm0L/uKYJkN1yJ8TJ76tJTqRHDt6GQLNcC21K6bE6sXUZ7aUy/7Y+XbnMkTY9nL7t\nOpZDoUrpkdtFUhtlIdPg17RPAubfHPtn3Hi9PP2FbxGJ3TQBu8jjdioXliY5FRZ0\nmVD9nt9vhgFHEXyuOEBA8s/FliD74vGk2UTLDHLrI9DVO9UIJvU=\n=1Z/w\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4c47957d4ae65a96246864e72bd4b6ba4994fd3",
          "sha": "a4c47957d4ae65a96246864e72bd4b6ba4994fd3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a4c47957d4ae65a96246864e72bd4b6ba4994fd3"
        }
      ],
      "message": "common: add bip352.{h,cpp} secp256k1 module\n\nWrap the silentpayments module from libsecp256k1. This is placed in\ncommon as it is intended to be used by:\n\n  * RPCs: for parsing addresses\n  * Wallet: for sending, receiving, spending silent payment outputs\n  * Node: for creating silent payment indexes for light clients",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:51:26Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-02-07T15:28:14Z"
      },
      "sha": "e25066e4c9c280022b329492a36d917fe26da165"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQzYjNjMzgxZTNjYWI2YzBkOGM2ZDM2M2JlMjg0OTMzMzUzZWI3YTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3b3c381e3cab6c0d8c6d363be284933353eb7a8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b3c381e3cab6c0d8c6d363be284933353eb7a8",
      "tree": {
        "sha": "8827fb665828720ca1fcafc7fdb7c8fecbc6c359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8827fb665828720ca1fcafc7fdb7c8fecbc6c359"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8827fb665828720ca1fcafc7fdb7c8fecbc6c359\nparent e25066e4c9c280022b329492a36d917fe26da165\nauthor josibake <josibake@protonmail.com> 1694507187 +0200\ncommitter josibake <josibake@protonmail.com> 1755269488 +0100\n\nwallet: disable sending to silent payment address\n\nHave `IsValidDestination` return false for silent payment destinations\nand set an error string when decoding a silent payment address.\n\nThis prevents anyone from sending to a silent payment address before\nsending is implemented in the wallet, but also allows the functions to\nbe used in the unit testing famework.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSXEACgkQity1WMTz\nPWWb1A/+NBPy0zyMLiXM/ReeRXbSKeLMyMqfksELbR5Yh2+JR2fRP0ItEgB5EdDu\nLa14mMzrvfJigul5cY1yaWMF0HX+g1Q4WOU/U/Sc2F9gk2KqO3cTOHZUFx5uBEEh\nVbInGBtMDjGz2QDPE1gdq3YX7yePNFymRDA66aVHsjCsh8E8/ZkUDLzgSQrNUE+J\nVYjTHudECD3Jy3v42n7RJm5CEBmKi6Os+PyP5MZSEfW3qwLAVMAxibVJYTaayrsN\niGNq0YE/kOnoWZzgdePETk/LHol/aZXODI5US88lR5tr/W8AUHi5wJkunXVD7SYj\n6Xd5JwfVH9Oq/VkqJ5BhlWbtZCERBkm27qYrfdgQivSTFPEnWBOUK9mGrK2uImkk\nDzfeusJ55o5tHKd8rt68CJZRaqCHslCv8sKOC/GqDdt1hFQYo2AioOIwb96nM4CZ\naY5amUiDbXaUWngK9H9UT52rfaMB9FLZYDEBL0EDip816zuRt7lKIgwmxJcRRMxi\nLh6gCyLuKHN13Yi8nJ3SeBjQ1fNG2atvnNhhQejgn+DioDvnZwcGWFiylcHaJbBr\nIWazOxX5u6ZH/49WzdNGAqhLDoIzppt38CMlFNtYW1S+1ahd/YXv+0pS7xqElZm/\n8ykbe8p/N9MaHt+F5QXW9207GXT+V12zVQ4BwoXVgRK/y56DjHg=\n=HIjt\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e25066e4c9c280022b329492a36d917fe26da165",
          "sha": "e25066e4c9c280022b329492a36d917fe26da165",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e25066e4c9c280022b329492a36d917fe26da165"
        }
      ],
      "message": "wallet: disable sending to silent payment address\n\nHave `IsValidDestination` return false for silent payment destinations\nand set an error string when decoding a silent payment address.\n\nThis prevents anyone from sending to a silent payment address before\nsending is implemented in the wallet, but also allows the functions to\nbe used in the unit testing famework.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:51:28Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-09-12T08:26:27Z"
      },
      "sha": "d3b3c381e3cab6c0d8c6d363be284933353eb7a8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgzMmQ3NjdiNzgwNjA4NDcyYzdlZDA5ZmYwODE0MzRhMDRjODg5Nzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/832d767b780608472c7ed09ff081434a04c88978",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/832d767b780608472c7ed09ff081434a04c88978",
      "tree": {
        "sha": "5b1db356b7a6bbf04d74c1688229a19e919c92b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b1db356b7a6bbf04d74c1688229a19e919c92b3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5b1db356b7a6bbf04d74c1688229a19e919c92b3\nparent d3b3c381e3cab6c0d8c6d363be284933353eb7a8\nauthor josibake <josibake@protonmail.com> 1714906399 +0200\ncommitter josibake <josibake@protonmail.com> 1755269489 +0100\n\ntests: add BIP352 test vectors as unit tests\n\nUse the test vectors to test sending and receiving. A few cases are not\ncovered here, namely anything that requires testing specific to the\nwallet. For example:\n\n* Taproot script path spending is not tested, as that is better tested in\n  a wallets coin selection / signing logic\n* Re-computing outputs during RBF is not tested, as that is better\n  tested in a wallets RBF logic\n\nThe unit tests are written in such a way that adding new test cases is\nas easy as updating the JSON file\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSXIACgkQity1WMTz\nPWVoUhAAw7rEEpkO9O28bnJhK6Yi+WVZdq476ZXPGW8tGyp1+2Jmj85HEz6Bi5fT\npJGFcZitSabllABedUNZ1d6awGnunSCKMRC/sEtjad8VOyUgZwUYGjphxTsleWRk\n6uZVtWMRFjG0R6MhmUzoby3F2TiMdBKfnVuFiNpkYPog2Q9ggyyy7JjOKy2J4fwP\nJam1hqTMVm7Zv2ogDYuRIT07yvtIrDgEZm9Wefu8DlpuVJ85zgwjVOvmXU9DmWii\nyBRNB+kUeNBLXNXMnoCcz6sixVWabnAYEMZbp4awVyppCv9R8b6C1lLlFO9ocqN5\n163p33KHmQP0tHHnpvgwUc9Oqk+n3NK8KlhqPZF6xc7C1OWOsV16I65izugdaRMZ\nAH2P6kaKMfySO32UH82wk9Bq+Ac0rvlipq/8yQjCz9vLGLY/O7zPzP7Y12meXuyQ\n27rrOfqEKr7qcED/VLRVMeEitkkCsnLD8l+vaOHJoXgNuFgk9/oW5LB/t6nxmnAi\nmWLmLOEenFOvqYkQuwaAo7ClI4SW/um8xJu7Izr/OFICm+nBo0CxtWsP9RfLruHp\nqJmvzel5Lq7BLYtxGgIsHTMsIJ+n4xH2YL+8QkMO1eQkdXq1r0aGo9nWE0Vy6H6A\nek6G9lQZSr8nS91UR/4vW+Q4fM5vyi61bpYtBMgP3Etv31bQMdY=\n=mOAa\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3b3c381e3cab6c0d8c6d363be284933353eb7a8",
          "sha": "d3b3c381e3cab6c0d8c6d363be284933353eb7a8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b3c381e3cab6c0d8c6d363be284933353eb7a8"
        }
      ],
      "message": "tests: add BIP352 test vectors as unit tests\n\nUse the test vectors to test sending and receiving. A few cases are not\ncovered here, namely anything that requires testing specific to the\nwallet. For example:\n\n* Taproot script path spending is not tested, as that is better tested in\n  a wallets coin selection / signing logic\n* Re-computing outputs during RBF is not tested, as that is better\n  tested in a wallets RBF logic\n\nThe unit tests are written in such a way that adding new test cases is\nas easy as updating the JSON file",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:51:29Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-05T10:53:19Z"
      },
      "sha": "832d767b780608472c7ed09ff081434a04c88978"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU0YWIwZDdmZjUxNzE5OTA1NTRmNmUwNzNkY2IwNjQwZmMyODkwZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54ab0d7ff5171990554f6e073dcb0640fc2890d0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/54ab0d7ff5171990554f6e073dcb0640fc2890d0",
      "tree": {
        "sha": "3dc09c100e6531d50f50a100b2d77fa304e8d841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dc09c100e6531d50f50a100b2d77fa304e8d841"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3dc09c100e6531d50f50a100b2d77fa304e8d841\nparent 832d767b780608472c7ed09ff081434a04c88978\nauthor josibake <josibake@protonmail.com> 1714909622 +0200\ncommitter josibake <josibake@protonmail.com> 1755269556 +0100\n\nwallet: get serialized size for `V0SilentPayments`\n\nBIP352 v0 specifies that a silent payment output is a taproot output.\nTaproot scriptPubKeys are a fixed size, so when calculating the\nserialized size for a CRecipient with a V0SilentPayments destination,\nuse WitnessV1Taproot for the serialized txout size.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSbUACgkQity1WMTz\nPWWQYw/8Dx80vZVRBnkEVxglfMa1BPR3IMt4CTd2IWPmjG6azXG9lgiu1Wo152B/\nSEWnoBUq8NxavN4fpRymwyAQYWJLEIVqQfTEyVw6klE1Vp92XvK9HP9Qs2bGhbhr\nfS4rlvaquhlEqxbFKJj2CSY33s9zi6D2D+zYmn5o750cZk1bhTj+cCVv9259yo+C\nNv7SdJsSu25iCjyUTU+JgxcG10qLbP4S/s/VXySzagHPB8J+AdeIjQzH9DSHQwNx\n9aOrr1KhB9xqXWFgniQluLdFt6QFr24pTdrSwrx6yi1KO8dr/bfNg+dFlc1gMjs0\nYVXFplnT9sGgS7S6CCfRoor8clFnWvz0hXESMzfwxXhiH2CGKwhhplCmttFsA7ph\n8EQ5rZGf8vTy/h6o73f4PZRn1gJJr5TGOyVU3H4h4Q2JYfaMYwW+EBQXafFA6UFg\nQs93w79pfJO7dbQ0EyhmeQbcPNsbE2Lk8FBcffF6ZeZwNuf85kdeeFg6wHo6HK/0\nIYD60voIlMto6JktJhm1LBdc27J3KqnibKbTrKVVF0teHSrBv9TpDoZkyAQzQQPM\n9qDUEBO0PeqrdsLfriWDBKgCgzJ9aBb6XQGYLG3HishTq4KIJ8TPojLTtnJuj8Fv\n7Ic062sXSjdZmG3y5ztpRA+lcAIvG7VyBigKK+smLir8IixqPn8=\n=uOht\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/832d767b780608472c7ed09ff081434a04c88978",
          "sha": "832d767b780608472c7ed09ff081434a04c88978",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/832d767b780608472c7ed09ff081434a04c88978"
        }
      ],
      "message": "wallet: get serialized size for `V0SilentPayments`\n\nBIP352 v0 specifies that a silent payment output is a taproot output.\nTaproot scriptPubKeys are a fixed size, so when calculating the\nserialized size for a CRecipient with a V0SilentPayments destination,\nuse WitnessV1Taproot for the serialized txout size.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:52:36Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-05-05T11:47:02Z"
      },
      "sha": "54ab0d7ff5171990554f6e073dcb0640fc2890d0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYzNzk4YmY1MmY0MWI3NzIwNmYyZmRiMDUwOWYwNTkzZjM1MWVlYzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63798bf52f41b77206f2fdb0509f0593f351eec2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/63798bf52f41b77206f2fdb0509f0593f351eec2",
      "tree": {
        "sha": "4d1f84411429c2f6bd4a6091ce0295a765553b55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d1f84411429c2f6bd4a6091ce0295a765553b55"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4d1f84411429c2f6bd4a6091ce0295a765553b55\nparent 54ab0d7ff5171990554f6e073dcb0640fc2890d0\nauthor josibake <josibake@protonmail.com> 1689934894 +0200\ncommitter josibake <josibake@protonmail.com> 1755269558 +0100\n\nwallet: add method for retreiving a private key\n\nAdd a method for retreiving a private key for a given scriptPubKey.\nIf the scriptPubKey is a taproot output, tweak the private key with the\nmerkle root or hash of the public key, if applicable.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSbYACgkQity1WMTz\nPWWuHA//ShGZRTX96+cCIeFEDjp8vbLF4Ag6c2rktpMzfhFEIA9wFm5jwQEp2Kfo\nPthxGobD9EMHhK76ZFFMYgE+aeG8DyyEfN6BeAgmwYSKQJfrS3s7Sd0q8URZcnQ7\no+djdnBlDhMXN+6X4xPYB9VWurrAh3uY7RyrSJqv2hkxYj72ql4hwqxxwMk7h3bR\nN2jdhvtNqd5o1f51PRIvgK79bnIPFPEI0cMpYfsZgCSK/g00sbH1XTnT4verJOxG\n3u7LK1rJojbFjltUNwf9Sw4ixsTDbXY0U2UMjy3OfVNEaCN7wki0ve9PFGy3RkcE\nYg9SVVySMHeo6bgPYRHLSANAA1enqtquhP47Xh+GsgCK1ZXFPuLCdkjrVpRh+wQ3\nNiBYu47EUSSyirXXBNlFk0U9B0hvG6h0TzK/+EQl8+29UO2blh0NpDuQppaCjzIZ\nNoMJwwJP6MuzNc7D6ZJcXQfXjpvkwP3NPkODFSsdFzmUN/fc6IBDs5g3KVOB9Lzj\nLUvpaEbYEFVS6yrqkyPeevETeGMOvmNeQIEk7nZvWgdEgeHajZW8x9wEY4xmDAps\n3zElb8NKOWrP+WJi2ecXfymIVdsDs+OXuKIayWhGg5BPDHpQLQlU+ao0143lgeGS\nU9q/35d6FYkfbQ0u9RzLb0pJc9TW9dYSb15ISAJaWMOKSpRsjSE=\n=VChV\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54ab0d7ff5171990554f6e073dcb0640fc2890d0",
          "sha": "54ab0d7ff5171990554f6e073dcb0640fc2890d0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/54ab0d7ff5171990554f6e073dcb0640fc2890d0"
        }
      ],
      "message": "wallet: add method for retreiving a private key\n\nAdd a method for retreiving a private key for a given scriptPubKey.\nIf the scriptPubKey is a taproot output, tweak the private key with the\nmerkle root or hash of the public key, if applicable.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:52:38Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-07-21T10:21:34Z"
      },
      "sha": "63798bf52f41b77206f2fdb0509f0593f351eec2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDViODkyOTFlNmI0YzIwZDgwNjcyYjIxYTBkNDhhZWU1MDU5Nzg3NzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b89291e6b4c20d80672b21a0d48aee505978771",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5b89291e6b4c20d80672b21a0d48aee505978771",
      "tree": {
        "sha": "1546d56322944a708a2be896195e591f94450e93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1546d56322944a708a2be896195e591f94450e93"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1546d56322944a708a2be896195e591f94450e93\nparent 63798bf52f41b77206f2fdb0509f0593f351eec2\nauthor josibake <josibake@protonmail.com> 1689934780 +0200\ncommitter josibake <josibake@protonmail.com> 1755269559 +0100\n\nwallet: make coin selection silent payment aware\n\nAdd a flag to the `CoinControl` object if silent payment destinations\nare provided. Before adding the flag, call a function which checks if:\n\n* The wallet has private keys\n* The wallet is unlocked\n\nWithout both of the above being true, we cannot send to a silent payment\naddress.\n\nDuring coin selection, if this flag is set, skip taproot inputs when\nscript spend data is available. This is based on the assumption that if\na user provides script spend data, they don't have access to the key\npath spend. As future improvement, we could instead check to see if we\nhave access to the key path spend, and only exclude the output when we\ndon't regardless of whether or not the user provides script spend data.\n\nAlso skip UTXOs of type `WITNESS_UNKNOWN`, although it is very unlikely\nour wallet would ever try to spend a witness unknown output.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSbcACgkQity1WMTz\nPWWG8w/+OnN3qb+e1swSY0KoCaa3A7db04hDK9wYOcTUobORZpoyDfdJW6zWsFCc\nazJUOIGiPhxUMxXsnoQcutM2rN1XcgZ49/8DGE+sXPMcbCcFEMrF3os2t5/J9ae/\noeCjZnOsqBD2Ie/JLWHn3VPsmB6O9s8UHZSL+oKz7RQVGe3zPdzYpRnQq3Xm5+Ts\nVFWnW+jPyCgDCN7pzd/yYZzdT5+KRpcRQDI3p9U2MziA5ZT2dh9DfIG9FWS4JpSj\nZHve0+40Bu8GSpsDfIvMtEFje8nfx8D6sEF5Go+vqVBTtodiL5QDK2IhIGSnN2Rh\nwTqNolPvCroHxA75rwkvTIRhVhxKEnLIPDprlJaV0/sXUJtRPlnOnpNjaLvduyr7\n/xyfQ8/JZ2MTI2ETj6yQm5UU1H/E/7Pt1tXwnEtH3M3EfqGahewZAymlxJ1c36D1\n3OFEU4wt2GvA1C91sT/uTiGVAyiTTSFLQkMmULDhkzea7DpMV/cD+yNOHwFhahCh\nEsNWEY+InnEw6EbbTI9vYL+6jrCuo210Fg96OjnMhYYQ+CBN9UEAtMgkgiV6xpu6\nICO6W+wVhV/nqucJG/J5slszYOMtdliwXkJPIa/Pc1kCc4R56i0MOsYGViQA3EKz\nd1LcMXdT2+UmmrBDn6Ar4j6cx4DJ2pKCxNRIP5dIf1/IhIrHUOE=\n=sCi3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63798bf52f41b77206f2fdb0509f0593f351eec2",
          "sha": "63798bf52f41b77206f2fdb0509f0593f351eec2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/63798bf52f41b77206f2fdb0509f0593f351eec2"
        }
      ],
      "message": "wallet: make coin selection silent payment aware\n\nAdd a flag to the `CoinControl` object if silent payment destinations\nare provided. Before adding the flag, call a function which checks if:\n\n* The wallet has private keys\n* The wallet is unlocked\n\nWithout both of the above being true, we cannot send to a silent payment\naddress.\n\nDuring coin selection, if this flag is set, skip taproot inputs when\nscript spend data is available. This is based on the assumption that if\na user provides script spend data, they don't have access to the key\npath spend. As future improvement, we could instead check to see if we\nhave access to the key path spend, and only exclude the output when we\ndon't regardless of whether or not the user provides script spend data.\n\nAlso skip UTXOs of type `WITNESS_UNKNOWN`, although it is very unlikely\nour wallet would ever try to spend a witness unknown output.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:52:39Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-07-21T10:19:40Z"
      },
      "sha": "5b89291e6b4c20d80672b21a0d48aee505978771"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI2ZGM1YmRmYjBkYjI5YWRmNzk1YzMwYWM5NzQ0NzBiNTM5ZjYzMTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6dc5bdfb0db29adf795c30ac974470b539f6315",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b6dc5bdfb0db29adf795c30ac974470b539f6315",
      "tree": {
        "sha": "4083bd100dea75085fed973cd5b9e7c4557c312f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4083bd100dea75085fed973cd5b9e7c4557c312f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4083bd100dea75085fed973cd5b9e7c4557c312f\nparent 5b89291e6b4c20d80672b21a0d48aee505978771\nauthor josibake <josibake@protonmail.com> 1690901143 +0200\ncommitter josibake <josibake@protonmail.com> 1755269560 +0100\n\nwallet: add `IsInputForSharedSecretDerivation` function\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSbgACgkQity1WMTz\nPWVm/hAAhMUTfzyzlm2gk13/PuAd5HshXNRew77hqDIKU9DDdDd0Q/TyK4H5E5K3\n3K6jyDlTu2sGIRs4KBC7wPzOGN4/J8Y6+aIG7JwCMOwq2MKlqh+5E32FkXhShRwd\nDQIFE8eksHpiiAr/0ameSBlDfKRkTH6TPcvn41+o25N3MYaF9vczpFil+KDpmuHg\n2eivok75aRm1T8RLckaDcy7QNDCp2/ewWupvF4ACefvyjLDqXFsTtFiYvxL8mssy\nGynuYHziNOPKrtpmIuKf7ZegjZJSo8mhDrffycRmtVXIZZrvOLUYk2NWutt4um/Q\nFRzUfZB9mU7lzfxbe0uxm5y8ybKOqZJEfU3GKmueWYxiigMJylnMU3ntIPuYS2rg\n8dly1nxauRG/EnvfVQs+GbvoL1pMpy9zDzUL2+i2hsyn5ic+JjK+kdJ9K79r02oG\nzO6HMODSup3p206DOn/SmDjydkJ4AP7tiNCSo7PoowhkNWqDCBVVVUiM62FWhnK3\nm15Z2tNTM5EFE+BkoovKr1DGLRxYZ3lKlv8OX/m/rjkFMvfG2wnW3dAlMOowlBps\njZ+r2fszkXtf8uuJeio7E+z2O/lRmZneAWvgvzZc6fICN44bwcEo/RlduxKdtxZr\n28RrV3olRDWQcyW6Fa+PxSVyigKd8PeZoAOjtRiWiAvOuh8SF1Q=\n=wx7K\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b89291e6b4c20d80672b21a0d48aee505978771",
          "sha": "5b89291e6b4c20d80672b21a0d48aee505978771",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5b89291e6b4c20d80672b21a0d48aee505978771"
        }
      ],
      "message": "wallet: add `IsInputForSharedSecretDerivation` function",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:52:40Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-08-01T14:45:43Z"
      },
      "sha": "b6dc5bdfb0db29adf795c30ac974470b539f6315"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdjMTA5M2IwOGMwMzYzYTZkMzQxOTY3NjU5ZjdiNDllMGY2ZDAyNjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c1093b08c0363a6d341967659f7b49e0f6d0266",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7c1093b08c0363a6d341967659f7b49e0f6d0266",
      "tree": {
        "sha": "0184cff188dfbbc08967f98d44c69ebf5679b083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0184cff188dfbbc08967f98d44c69ebf5679b083"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0184cff188dfbbc08967f98d44c69ebf5679b083\nparent b6dc5bdfb0db29adf795c30ac974470b539f6315\nauthor josibake <josibake@protonmail.com> 1718717909 +0200\ncommitter josibake <josibake@protonmail.com> 1755269561 +0100\n\nwallet: add `CreateSilentPaymentOutputs` function\n\n`CreateSilentPaymentsOutputs` gets the correct private keys, adds them\ntogether, groups the silent payment destinations and then generates the\ntaproot script pubkeys. These are then passed back to\nCreateTransactionInternal, which uses these scriptPubKeys to update\nvecSend before adding them to the transaction outputs.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSbkACgkQity1WMTz\nPWXPlw//SN8uRIBHt7PJUw1v1AbXbLFhXDbwXZWa+7UFC7EY0J/mCpodNbJZ/lZY\ncadniaxoaBUUZFqL8IPEAxStb7a/LA1MHqiobLmYJpbLo83ebQO+tTnVUTSwAwva\ntTExByco1efo8NHW9CEmjUrxiBdzV2AFnbEsL254SIpRD3hz2ZYb86opTiTnNAUC\nEuffsTBFSk9ZG3nS+KhEKkIAE3uPy0TmlkU6dGLDsBqUFiGYGzuyUhPf5ElkZIHJ\nBbeiyPZWwbD/b5am5DOuL9ROl+38jTav8DcGyERxT9CYZQSqi72YQcaGpfxkOqwl\nYZ5vdvG87Pj4Wc1mcX/1AitDNwbiAM7RuvPzYhoS2NxpNLQGpVcl57bWzunJJfg0\nSYND1Tdi/WwBMeMOt5q82ZarBpKyY92zWJO2mDsFD2AgvhsM8TVUM1ZFCllKNDmT\nmnDw6Ep2fmdlAElxMlZRX0v9MIh/tlMMtKAQsujcULhsKDcgNzf160CKcrd5njZl\n4PdXJAOTORP8w1+knEcM5VmlwhUmn+nvbiOuVV2fj5dzU/VS0LDlDmz1yeatYETg\nSXsA94Qdkhzc2QwOM5oQbvz14KgbvxBb+KEKR8fTPQtq6fNx41wX+WkDs8YWYCrP\n0gJeR7M3kXGJsO5RtMQardloQe2aMFRi1h4PvsMdqMLwjwaXH2M=\n=dGw8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6dc5bdfb0db29adf795c30ac974470b539f6315",
          "sha": "b6dc5bdfb0db29adf795c30ac974470b539f6315",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b6dc5bdfb0db29adf795c30ac974470b539f6315"
        }
      ],
      "message": "wallet: add `CreateSilentPaymentOutputs` function\n\n`CreateSilentPaymentsOutputs` gets the correct private keys, adds them\ntogether, groups the silent payment destinations and then generates the\ntaproot script pubkeys. These are then passed back to\nCreateTransactionInternal, which uses these scriptPubKeys to update\nvecSend before adding them to the transaction outputs.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:52:41Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-06-18T13:38:29Z"
      },
      "sha": "7c1093b08c0363a6d341967659f7b49e0f6d0266"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ2ZDYxOTE3NmQzNDVlNzBkOGVmNjYzMDA4OWQxMDY0YzdmODI2MTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46d619176d345e70d8ef6630089d1064c7f82611",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/46d619176d345e70d8ef6630089d1064c7f82611",
      "tree": {
        "sha": "d50cb847fb0937d971cfac3162aabc16ffef138f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d50cb847fb0937d971cfac3162aabc16ffef138f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d50cb847fb0937d971cfac3162aabc16ffef138f\nparent 7c1093b08c0363a6d341967659f7b49e0f6d0266\nauthor josibake <josibake@protonmail.com> 1690383935 +0200\ncommitter josibake <josibake@protonmail.com> 1755269562 +0100\n\nwallet: update TransactionChangeType\n\nIf sending to a silent payment destination, the change type should be taproot\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSboACgkQity1WMTz\nPWWZKhAAhDyU3ekhWkRmFSVA4Jv0Vn3m+jJrTPBm0ovp2yhP/YnKLBWXHvZNnxPO\nCS7ekhEf5JrcptYg0NJaDdFTlRssoP1c63fejl/JQwDLoIj4/oVMQ7B94xymjXPp\nZ6GfpiNOkRmq5ZFPUpFYyAbCF47zEx/pwY8wVB0kY70EWZtBO/8YLKoE97hhzIUL\n3qqP3DP9q1SCZg3cmBwbDButI5snbIYB+jfIaZ5KOSe7r0T7KM8hLbvW0jFs6KZT\ngDhif4j9ln1lLW7DGOOiIoKy12YNZMKGKmaV3ijOC/W335dEA5zMvKs9bP7tn+H0\nklIiDYOtwHfpgebqkLJgDZTxLaFP21ZLeO8IZwyIuUGy7ODekK8AwH3hazj1hBiK\noMckvpIX3UZdScpIW53x2QOuaE1ZWYLRAwDV4YcCVFNF+kOjkGo2Pj43FPYytokG\nT6Iw0ezHqLq3wnnqaxtIcYc2aVitaRwdEBngP3fZow/hrgMRDxADnp2WIICjwS8H\nv2gM2EuFNODHCukTzTyygFlRpnLk5IAQh03Rv83ydnHDp1bknk/7rGhdVSzCl9Xe\nrio1pWcYZhwgz782z8jXOBb9HR0niXMlAS8s3rYR/8AM9RqUPVXPm6PdeEXoJJzC\nDksPeF8CiUZBxtmLbv1OxDm2tLFl0uzzLgVIbVSQvdO/2Gktryc=\n=kCdS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c1093b08c0363a6d341967659f7b49e0f6d0266",
          "sha": "7c1093b08c0363a6d341967659f7b49e0f6d0266",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7c1093b08c0363a6d341967659f7b49e0f6d0266"
        }
      ],
      "message": "wallet: update TransactionChangeType\n\nIf sending to a silent payment destination, the change type should be taproot",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:52:42Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-07-26T15:05:35Z"
      },
      "sha": "46d619176d345e70d8ef6630089d1064c7f82611"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg3YzViNTJmM2I4M2QxZjMyNjMyNTkwY2YxYjMyNTlhNmE5OGQzYWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87c5b52f3b83d1f32632590cf1b3259a6a98d3ab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/87c5b52f3b83d1f32632590cf1b3259a6a98d3ab",
      "tree": {
        "sha": "e83393c7adf1d4c1fa9004264bf3d14f8fc6279b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e83393c7adf1d4c1fa9004264bf3d14f8fc6279b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e83393c7adf1d4c1fa9004264bf3d14f8fc6279b\nparent 46d619176d345e70d8ef6630089d1064c7f82611\nauthor josibake <josibake@protonmail.com> 1694515383 +0200\ncommitter josibake <josibake@protonmail.com> 1755269563 +0100\n\nwallet: enable sending to silent payment address\n\nTreat silent payment addresses as valid destination. Also disable using\nsilent payment addresses with the `addr()` descriptor, as this\ndescriptor expects an encoding of a scriptPubKey, whereas a silent\npayment address consists of instructions on how to generate a\nscriptPubKey for the recipient.\n\nCo-authored-by: Oghenovo Usiwoma <37949128+eunovo@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSbsACgkQity1WMTz\nPWUDxBAAhZWpoBx9G83PKB2S+YSjbHUJt0ABV3QjUrBnvgjmKa/CE+B1OdHC0hmY\ng91FQqKg99SpgIqKmsHjzIln1Vg9um4Tcqv3+qGkmJvybcV7TnNzzSiBDntY90LQ\ngad0MmBcrSVVvvhrVsw8Fb9n1pTy3MhaZGhm+u+6zBFBF1ZVPC2Sn9SmOqnM/xdT\njmfjCE1huFdiJpMqlsVDGIpzqm7StQZ90+ALHTRRWjidoPlomSc4anUFVmY4Nu3q\nBI6gWnbUMZVHd7veAjVOd5loQKxhJw+izag/Yx637JDAYBXnxxsyD5vl6ePFXOmQ\nh8ssyq3QewRtgaMZuD0n1H9D84OXz8+2UkjGtzSSA5iLbPrJsfDRj4+rJyw0Oker\ne1OsJcJm7WEyWaMPpRJFWXQwticBQ7MyKrS+h1UuN9aifHHG8u/Um3rG+W8KiwlS\n8orqRVnflY3BfZ58ych7LzOluEhnEagzFnTWUunM5iSaqcwWVQ2hekMCL6/00JUe\nF9TwR4SOOFGzylYS9DMdPs9Y+J1mh5vUs7RtSx/wMQYpL7SVhL2PZSqbaD1lRRKu\n9cMmA6YULV3Z/xotUix8qfVgyNJV+kQkjDszVokfXB1i8soxCzRxtRuxuhWsNNxa\nX6LDxHF8QNQ6vgztRemBBrO++CsTsety7vbk3yUxuHWwyc8tdNw=\n=w35s\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46d619176d345e70d8ef6630089d1064c7f82611",
          "sha": "46d619176d345e70d8ef6630089d1064c7f82611",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/46d619176d345e70d8ef6630089d1064c7f82611"
        }
      ],
      "message": "wallet: enable sending to silent payment address\n\nTreat silent payment addresses as valid destination. Also disable using\nsilent payment addresses with the `addr()` descriptor, as this\ndescriptor expects an encoding of a scriptPubKey, whereas a silent\npayment address consists of instructions on how to generate a\nscriptPubKey for the recipient.\n\nCo-authored-by: Oghenovo Usiwoma <37949128+eunovo@users.noreply.github.com>",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:52:43Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-09-12T10:43:03Z"
      },
      "sha": "87c5b52f3b83d1f32632590cf1b3259a6a98d3ab"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY5ODZlNTA3ZGFkMzU5ZDc3NTMwMzhkNjUzMTEyZTUyNTVmYWM5Njg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6986e507dad359d7753038d653112e5255fac968",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6986e507dad359d7753038d653112e5255fac968",
      "tree": {
        "sha": "9475fdd653cb8aed1abea3f4d7b814490064d8c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9475fdd653cb8aed1abea3f4d7b814490064d8c9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9475fdd653cb8aed1abea3f4d7b814490064d8c9\nparent 87c5b52f3b83d1f32632590cf1b3259a6a98d3ab\nauthor josibake <josibake@protonmail.com> 1690550678 +0200\ncommitter josibake <josibake@protonmail.com> 1755269564 +0100\n\ntests: add sending functional tests\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmifSbwACgkQity1WMTz\nPWUe2hAAo46h76E2bkbYaGl3ktvUhKKoSi0hzLCd6smYvzOS6RaJpTxr67mpb0Ly\nmo94XDoZvmylXutdvpBdda7TYtlxASWcwTBi+t7szC1NHbTwC48h/dQRkMh2jJip\nTa/d5esrWeMcLWbqqaoheHiD62/SuhcpwBgs/5gjXxBC7uG8G1HpfP6HAVhKMl4O\n2QWRLb7T5HLwJTa8J9Cb3YC1YvEURRKEbu4bLeTde8g/dZXBUZMYPul4smmkj4fu\nBk1cU1pr6Dtju7gzDKkK//nB08yl6H6JS9puDo7YFxfHABWo4Yx1KXu2yn7d6oeM\nvLltL4lNFnO52piweyIzJF3P06kuoIHzFBCvRKvmvhRDoR/lDvGJv8x6LZJ6g1f1\n+KLsK/MT38uxXBQgf5CX3ep0ISUFepCypRRP8xIhuvR8yPd0Q+qacsBNGYIfjd9x\nysSngXKaCutEmvnJ2mk5yrCSAT5r3DOAaXfh6q9NEStfsoQuzCNmEieCTSsUTpGT\n67fY8JGGGRZhZsaPFtHSBvp0F13fwd/Buc88a0nyzPihhCq5k2x4qBaNDh/MpwXO\nuoNR4bv1IoPFGaLJfTd2J8P3hrCV1rZ4NwjoNUcBxZL20oGNRAZHfArvT6sW0ylL\nHkXlY9C5lO5Rg3JwIaRCiQzhsBnQ4Yk42zBkML217hnIUymq2xg=\n=Emol\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87c5b52f3b83d1f32632590cf1b3259a6a98d3ab",
          "sha": "87c5b52f3b83d1f32632590cf1b3259a6a98d3ab",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/87c5b52f3b83d1f32632590cf1b3259a6a98d3ab"
        }
      ],
      "message": "tests: add sending functional tests",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-08-15T14:52:44Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2023-07-28T13:24:38Z"
      },
      "sha": "6986e507dad359d7753038d653112e5255fac968"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc2OGYyMGIxOTYwOTkzYTRiMGQxMWM5ZDZlNjc4MDNjMTk0ODhhOTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/768f20b1960993a4b0d11c9d6e67803c19488a96",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/768f20b1960993a4b0d11c9d6e67803c19488a96",
      "tree": {
        "sha": "16aa9f984404267d688657433c87b933767e4edc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16aa9f984404267d688657433c87b933767e4edc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6986e507dad359d7753038d653112e5255fac968",
          "sha": "6986e507dad359d7753038d653112e5255fac968",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6986e507dad359d7753038d653112e5255fac968"
        }
      ],
      "message": "Add OutputType::SILENT_PAYMENTS",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-15T15:07:43Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-20T04:34:45Z"
      },
      "sha": "768f20b1960993a4b0d11c9d6e67803c19488a96"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19197308680,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAAR4P68I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19197308680",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4b4970427ea51f93308eade67368f3d44e8a999d",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/4b4970427ea51f93308eade67368f3d44e8a999d",
      "created_at": "2025-08-18T07:22:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19198662164,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAAR4VFYU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19198662164",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f86b9d208e79e153dbc218d66c5a62ce372ee139",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/f86b9d208e79e153dbc218d66c5a62ce372ee139",
      "created_at": "2025-08-18T08:35:13Z"
    },
    {
      "event": "commented",
      "id": 3196441400,
      "node_id": "IC_kwDOABII586-hdM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3196441400",
      "actor": {
        "login": "macgyver13",
        "id": 4712150,
        "node_id": "MDQ6VXNlcjQ3MTIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4712150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/macgyver13",
        "html_url": "https://github.com/macgyver13",
        "followers_url": "https://api.github.com/users/macgyver13/followers",
        "following_url": "https://api.github.com/users/macgyver13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/macgyver13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/macgyver13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/macgyver13/subscriptions",
        "organizations_url": "https://api.github.com/users/macgyver13/orgs",
        "repos_url": "https://api.github.com/users/macgyver13/repos",
        "events_url": "https://api.github.com/users/macgyver13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/macgyver13/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T12:17:45Z",
      "updated_at": "2025-08-18T12:17:45Z",
      "author_association": "NONE",
      "body": "@Eunovo Nice work on addressing the issues identified in previous tests.  All of those are working as expected now.\r\n\r\nI am including a patch that adds 2 more failing tests when adding silent-payments address in the transaction output:\r\nself.test_sendrawtransaction()\r\nself.test_mixed_output_types()\r\n\r\n[test_sp_receive.patch](https://github.com/user-attachments/files/21834964/test_sp_receive.patch)\r\n",
      "user": {
        "login": "macgyver13",
        "id": 4712150,
        "node_id": "MDQ6VXNlcjQ3MTIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4712150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/macgyver13",
        "html_url": "https://github.com/macgyver13",
        "followers_url": "https://api.github.com/users/macgyver13/followers",
        "following_url": "https://api.github.com/users/macgyver13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/macgyver13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/macgyver13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/macgyver13/subscriptions",
        "organizations_url": "https://api.github.com/users/macgyver13/orgs",
        "repos_url": "https://api.github.com/users/macgyver13/repos",
        "events_url": "https://api.github.com/users/macgyver13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/macgyver13/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3196441400",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "mentioned",
      "id": 19202548507,
      "node_id": "MEE_lADOABII587AZUn2zwAAAAR4j6Mb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19202548507",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T12:17:47Z"
    },
    {
      "event": "subscribed",
      "id": 19202548542,
      "node_id": "SE_lADOABII587AZUn2zwAAAAR4j6M-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19202548542",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T12:17:47Z"
    },
    {
      "event": "commented",
      "id": 3200698339,
      "node_id": "IC_kwDOABII586-xsfj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3200698339",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T13:09:04Z",
      "updated_at": "2025-08-19T13:09:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @Eunovo Nice work on addressing the issues identified in previous tests. All of those are working as expected now.\r\n> \r\n> I am including a patch that adds 2 more failing tests when adding silent-payments address in the transaction output: self.test_sendrawtransaction() self.test_mixed_output_types()\r\n> \r\n> [test_sp_receive.patch](https://github.com/user-attachments/files/21834964/test_sp_receive.patch)\r\n\r\nI think these might be more appropriate for the sending PR https://github.com/bitcoin/bitcoin/pull/28201 cc @josibake ",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3200698339",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "mentioned",
      "id": 19224469358,
      "node_id": "MEE_lADOABII587AZUn2zwAAAAR53h9u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19224469358",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T13:09:05Z"
    },
    {
      "event": "subscribed",
      "id": 19224469379,
      "node_id": "SE_lADOABII587AZUn2zwAAAAR53h-D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19224469379",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T13:09:05Z"
    },
    {
      "event": "mentioned",
      "id": 19224469424,
      "node_id": "MEE_lADOABII587AZUn2zwAAAAR53h-w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19224469424",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T13:09:05Z"
    },
    {
      "event": "subscribed",
      "id": 19224469458,
      "node_id": "SE_lADOABII587AZUn2zwAAAAR53h_S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19224469458",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T13:09:06Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY2MDgzNmYxOTdmMmIxZDIwYzI0YTI4ZDI0MmZmODc3OGZkMjUzN2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f60836f197f2b1d20c24a28d242ff8778fd2537f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f60836f197f2b1d20c24a28d242ff8778fd2537f",
      "tree": {
        "sha": "3059ec506b0e1ffdaece9fb23d62e194a1651724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3059ec506b0e1ffdaece9fb23d62e194a1651724"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/768f20b1960993a4b0d11c9d6e67803c19488a96",
          "sha": "768f20b1960993a4b0d11c9d6e67803c19488a96",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/768f20b1960993a4b0d11c9d6e67803c19488a96"
        }
      ],
      "message": "descriptors: impl ScankeyPubkeyProvider\n\nWhile the scankey looks like a private key, and is represented as a `CKey` in the code,\nit is actually much closer to a public key and it needs to be treated as a public key,\nso it can be added to watch-only wallets.",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:10Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-12T08:42:47Z"
      },
      "sha": "f60836f197f2b1d20c24a28d242ff8778fd2537f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM4NjgyNDQ4YjBmYzAxMDgyNTg4ZjVhZGZjYjgwMzBlZDgxMTE4YzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38682448b0fc01082588f5adfcb8030ed81118c0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/38682448b0fc01082588f5adfcb8030ed81118c0",
      "tree": {
        "sha": "3ba0aac2a26b0a98bb999add36a4a0664752a4b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ba0aac2a26b0a98bb999add36a4a0664752a4b8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f60836f197f2b1d20c24a28d242ff8778fd2537f",
          "sha": "f60836f197f2b1d20c24a28d242ff8778fd2537f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f60836f197f2b1d20c24a28d242ff8778fd2537f"
        }
      ],
      "message": "descriptor: implement sp(scan, spend) desc\n\nsp() expects a scan private key and a spend key which could be a private key\nor a public key.\nThe scan key is really a \"scan entropy\" and will not be treated as an actual\nprivate key.",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:31Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-20T04:35:09Z"
      },
      "sha": "38682448b0fc01082588f5adfcb8030ed81118c0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJjNTNkMjJiMjI3ZGMxY2QxNGUyOTdkNWI2YjRhNmM5YjFkNGZkZmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c53d22b227dc1cd14e297d5b6b4a6c9b1d4fdfb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2c53d22b227dc1cd14e297d5b6b4a6c9b1d4fdfb",
      "tree": {
        "sha": "0986f82c77c8a54e1aa9a8b0c5ff4d8c95f0072e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0986f82c77c8a54e1aa9a8b0c5ff4d8c95f0072e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38682448b0fc01082588f5adfcb8030ed81118c0",
          "sha": "38682448b0fc01082588f5adfcb8030ed81118c0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/38682448b0fc01082588f5adfcb8030ed81118c0"
        }
      ],
      "message": "descriptor: add SPDescriptor public interface\n\nCreate an SPDescriptor interface that will be used by the\n`SilentPaymentDescriptorScriptPubKeyMan`.\n\nThe interface only needs to provide a way to get the scan key,\nthe spend key can be obtained through the normal Descriptor methods.\n\nWhile the scan key is represented as a `CKey`, it will not be used\nin the signing process. This creates an argument against putting this\nin a signing provider.",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-18T15:16:15Z"
      },
      "sha": "2c53d22b227dc1cd14e297d5b6b4a6c9b1d4fdfb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk1OGMxMzQyNDYxYzMxYTBkZjc0ZGYxNWU5MDQxNGEyMzJmNjg3YTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/958c1342461c31a0df74df15e90414a232f687a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/958c1342461c31a0df74df15e90414a232f687a6",
      "tree": {
        "sha": "3aac68eb02bb185acda5d8375584f2188aee3843",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aac68eb02bb185acda5d8375584f2188aee3843"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c53d22b227dc1cd14e297d5b6b4a6c9b1d4fdfb",
          "sha": "2c53d22b227dc1cd14e297d5b6b4a6c9b1d4fdfb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2c53d22b227dc1cd14e297d5b6b4a6c9b1d4fdfb"
        }
      ],
      "message": "pubkey: add TweakAdd() method\n\nThis method makes it easier to tweak silent payment spend keys in later commits",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-06-24T12:23:36Z"
      },
      "sha": "958c1342461c31a0df74df15e90414a232f687a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI5ZjNhYTM1YTg1NjE1ZjI2NWMyMzllNzUxMGExNTRlZWUyNmFlODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9f3aa35a85615f265c239e7510a154eee26ae80",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f3aa35a85615f265c239e7510a154eee26ae80",
      "tree": {
        "sha": "6c8dd368ecfb4197190702c8212a904832da3ecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c8dd368ecfb4197190702c8212a904832da3ecf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/958c1342461c31a0df74df15e90414a232f687a6",
          "sha": "958c1342461c31a0df74df15e90414a232f687a6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/958c1342461c31a0df74df15e90414a232f687a6"
        }
      ],
      "message": "notifications: Add spent_coins to tx added notification\n\nThe spent_coins data will be used to scan for silent payments in later commits\n\nCo-authored-by: Ava Chow <github@achow101.com>",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-20T07:47:35Z"
      },
      "sha": "b9f3aa35a85615f265c239e7510a154eee26ae80"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk1NDIwZGZlNmZiYjczMjY1ZDBjNzdkNjY0NGE1ZmQ2MGVlYjA1OTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95420dfe6fbb73265d0c77d6644a5fd60eeb0594",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/95420dfe6fbb73265d0c77d6644a5fd60eeb0594",
      "tree": {
        "sha": "d0c439110c6fa406e037c5805129806e8cf919d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0c439110c6fa406e037c5805129806e8cf919d7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9f3aa35a85615f265c239e7510a154eee26ae80",
          "sha": "b9f3aa35a85615f265c239e7510a154eee26ae80",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f3aa35a85615f265c239e7510a154eee26ae80"
        }
      ],
      "message": "interfaces: Load block undo data\n\nThis undo data will be used to scan for silent payments in later commits\n\nCo-authored-by: Ava Chow <github@achow101.com>",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-20T07:50:54Z"
      },
      "sha": "95420dfe6fbb73265d0c77d6644a5fd60eeb0594"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZjYTIxZDFjMjJkNGYyYjU3M2I0NzJiNTVhZmZiY2FiNGRmMjM5NDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ca21d1c22d4f2b573b472b55affbcab4df23941",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6ca21d1c22d4f2b573b472b55affbcab4df23941",
      "tree": {
        "sha": "f8c45e918924a7d181ef2b0e6e3375fa941d7944",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8c45e918924a7d181ef2b0e6e3375fa941d7944"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95420dfe6fbb73265d0c77d6644a5fd60eeb0594",
          "sha": "95420dfe6fbb73265d0c77d6644a5fd60eeb0594",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/95420dfe6fbb73265d0c77d6644a5fd60eeb0594"
        }
      ],
      "message": "wallet: generate sp() descriptor\n\nThe scan key will be derived while the descriptor is parsed, so\nwe must pass the master xpriv into `GenerateWalletDescriptor`.\n\nThe spend key is expanded later so it is specified\nas an xpub and path instead.",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-05-18T14:33:30Z"
      },
      "sha": "6ca21d1c22d4f2b573b472b55affbcab4df23941"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE1YWI5OWQ3MTI1NTczMTkyYWY3NDczYzA3NjllOTk5OTNlZDk0YTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15ab99d7125573192af7473c0769e99993ed94a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/15ab99d7125573192af7473c0769e99993ed94a7",
      "tree": {
        "sha": "4fac8b456db98ab54b9620a076a71b5be827a49f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fac8b456db98ab54b9620a076a71b5be827a49f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ca21d1c22d4f2b573b472b55affbcab4df23941",
          "sha": "6ca21d1c22d4f2b573b472b55affbcab4df23941",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6ca21d1c22d4f2b573b472b55affbcab4df23941"
        }
      ],
      "message": "wallet: create SilentPaymentDescriptorScriptPubKeyMan\n\nCo-authored-by: Ava Chow <github@achow101.com>",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-05-18T18:38:15Z"
      },
      "sha": "15ab99d7125573192af7473c0769e99993ed94a7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgyNjIwMmE0N2MxOTc4Y2IwMTk0MWU2YWY1ODhiODEzZmJiNjg2YmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/826202a47c1978cb01941e6af588b813fbb686bd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/826202a47c1978cb01941e6af588b813fbb686bd",
      "tree": {
        "sha": "cc56aa93951c56d5afb258bcddfde211759a233b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc56aa93951c56d5afb258bcddfde211759a233b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15ab99d7125573192af7473c0769e99993ed94a7",
          "sha": "15ab99d7125573192af7473c0769e99993ed94a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/15ab99d7125573192af7473c0769e99993ed94a7"
        }
      ],
      "message": "wallet: scan for silent payments\n\nCo-authored-by: Ava Chow <github@achow101.com>",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-20T07:58:09Z"
      },
      "sha": "826202a47c1978cb01941e6af588b813fbb686bd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI3YWNjN2QxMmJlYTZlZjg3ODUyOGUwZWVlOTQwZDlhOGU0YzIwNmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7acc7d12bea6ef878528e0eee940d9a8e4c206d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b7acc7d12bea6ef878528e0eee940d9a8e4c206d",
      "tree": {
        "sha": "a255bfbe051a4f801f1de3a03363fcfdd7f6f831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a255bfbe051a4f801f1de3a03363fcfdd7f6f831"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/826202a47c1978cb01941e6af588b813fbb686bd",
          "sha": "826202a47c1978cb01941e6af588b813fbb686bd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/826202a47c1978cb01941e6af588b813fbb686bd"
        }
      ],
      "message": "wallet/rpc: add create silent-payments wallet option\n\nCo-authored-by: Ava Chow <github@achow101.com>",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-06-24T08:55:30Z"
      },
      "sha": "b7acc7d12bea6ef878528e0eee940d9a8e4c206d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ5NmVmMTNkNDZmYjQwMjgxMTNhNmViYTI1M2NiODAzMWUzZmY2YTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d96ef13d46fb4028113a6eba253cb8031e3ff6a8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d96ef13d46fb4028113a6eba253cb8031e3ff6a8",
      "tree": {
        "sha": "2b5595a313f3ccc486a5edc5702ecbc2cc4998a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b5595a313f3ccc486a5edc5702ecbc2cc4998a1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7acc7d12bea6ef878528e0eee940d9a8e4c206d",
          "sha": "b7acc7d12bea6ef878528e0eee940d9a8e4c206d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b7acc7d12bea6ef878528e0eee940d9a8e4c206d"
        }
      ],
      "message": "wallet: disable fast rescan for silent_payments wallet\n\nsilent_payments wallet needs to scan entire blocks since it doesn't know ahead of time which scriptPubKeys to use in it's fast rescan filter.",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-21T11:01:16Z"
      },
      "sha": "d96ef13d46fb4028113a6eba253cb8031e3ff6a8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMzNjAwZTJhYzU2NzU1YTM5ZmIyM2Q5ZTVlZTcwMjg2Zjc2MTc2YzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3600e2ac56755a39fb23d9e5ee70286f76176c6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c3600e2ac56755a39fb23d9e5ee70286f76176c6",
      "tree": {
        "sha": "bdaf78faf59776b2f16c78a24c438f086d079732",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdaf78faf59776b2f16c78a24c438f086d079732"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d96ef13d46fb4028113a6eba253cb8031e3ff6a8",
          "sha": "d96ef13d46fb4028113a6eba253cb8031e3ff6a8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d96ef13d46fb4028113a6eba253cb8031e3ff6a8"
        }
      ],
      "message": "wallet: import silent payments descriptor",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-05-21T19:05:58Z"
      },
      "sha": "c3600e2ac56755a39fb23d9e5ee70286f76176c6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ4NjFmNmM4ZDYxMWE3MzA4YjQ5YWJhMDA0NTg4NmQ4OGY4MGY2OTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d861f6c8d611a7308b49aba0045886d88f80f692",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d861f6c8d611a7308b49aba0045886d88f80f692",
      "tree": {
        "sha": "7c7d3ed222e7a2680b38e36b31e7c8ef9c387662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c7d3ed222e7a2680b38e36b31e7c8ef9c387662"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3600e2ac56755a39fb23d9e5ee70286f76176c6",
          "sha": "c3600e2ac56755a39fb23d9e5ee70286f76176c6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c3600e2ac56755a39fb23d9e5ee70286f76176c6"
        }
      ],
      "message": "tests: add silent payments receiving functional tests\n\nCo-authored-by: Ava Chow <github@achow101.com>",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-05-21T19:06:35Z"
      },
      "sha": "d861f6c8d611a7308b49aba0045886d88f80f692"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE1N2Y0OGJjYzVmYTAzOTA4NDg4ZGFkZTUzZjAyY2VlYmEyNjM3MWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/157f48bcc5fa03908488dade53f02ceeba26371f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/157f48bcc5fa03908488dade53f02ceeba26371f",
      "tree": {
        "sha": "9aff801c1c62fb061657dadb685a3d7cb302e3a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9aff801c1c62fb061657dadb685a3d7cb302e3a2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d861f6c8d611a7308b49aba0045886d88f80f692",
          "sha": "d861f6c8d611a7308b49aba0045886d88f80f692",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d861f6c8d611a7308b49aba0045886d88f80f692"
        }
      ],
      "message": "wallet/rpc: add sp-address support to getaddressinfo",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-06-25T12:26:56Z"
      },
      "sha": "157f48bcc5fa03908488dade53f02ceeba26371f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjZDdlZmY0Mzg5MmY1ZGI4MmMyNjFiNzAxMThlN2FiMmQ3NzRhZTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cd7eff43892f5db82c261b70118e7ab2d774ae5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1cd7eff43892f5db82c261b70118e7ab2d774ae5",
      "tree": {
        "sha": "ea2abe466dc3aa8ac8887f48b37650b1e08664ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea2abe466dc3aa8ac8887f48b37650b1e08664ee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/157f48bcc5fa03908488dade53f02ceeba26371f",
          "sha": "157f48bcc5fa03908488dade53f02ceeba26371f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/157f48bcc5fa03908488dade53f02ceeba26371f"
        }
      ],
      "message": "update addressbook with found silent-payment outputs\n\ntraditionally, the receiving scripts are known to the core wallet\nbecause they are added to the addressbook at the time they are requested.\n\nin silent payments, the outputs are not known until found. its important, however,\nto have the found scripts in the addressbook so all of the change accounting can be down\nproperly.\n\nthis commits adds found outputs to the address book if they are not change. the way\nchange is determined is a bit hacky in that we just check if the found output was\nfound with a label (since this is the only label currently implemented). in the future,\nwe should specifically check for a change specific label.",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-05-27T23:12:31Z"
      },
      "sha": "1cd7eff43892f5db82c261b70118e7ab2d774ae5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJkZWUwOThmOTkzYmIxYjhkZjYxMGFkZTYyNWM2YmVmYTJlZDYxMjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdee098f993bb1b8df610ade625c6befa2ed6125",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bdee098f993bb1b8df610ade625c6befa2ed6125",
      "tree": {
        "sha": "d31569a778bcf1e745f0dd48153684136a73cd66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d31569a778bcf1e745f0dd48153684136a73cd66"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cd7eff43892f5db82c261b70118e7ab2d774ae5",
          "sha": "1cd7eff43892f5db82c261b70118e7ab2d774ae5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1cd7eff43892f5db82c261b70118e7ab2d774ae5"
        }
      ],
      "message": "use silent payments change when sending\n\nThe wallet tries to match change OutputTpe to other outputs to preserve privacy.\nUse silent payment change address when sending coins to:\n- any silent payment address\n- any taproot address",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2025-05-28T09:21:23Z"
      },
      "sha": "bdee098f993bb1b8df610ade625c6befa2ed6125"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU5NzFhMDZjNGRlNzg1NTZkYzgyZWM4MzIzZTdjNmFjNmM4YzcwNTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5971a06c4de78556dc82ec8323e7c6ac6c8c7051",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5971a06c4de78556dc82ec8323e7c6ac6c8c7051",
      "tree": {
        "sha": "28f88e8a97438099ce3a270932a6fa14347157bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28f88e8a97438099ce3a270932a6fa14347157bc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdee098f993bb1b8df610ade625c6befa2ed6125",
          "sha": "bdee098f993bb1b8df610ade625c6befa2ed6125",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bdee098f993bb1b8df610ade625c6befa2ed6125"
        }
      ],
      "message": "wallet/spend: Filter out coins not eligible to pay sp change dest",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-23T12:50:40Z"
      },
      "sha": "5971a06c4de78556dc82ec8323e7c6ac6c8c7051"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRjN2JhYWRlYTI4ZmQyMDNiM2Q1ZTI2MWFiYjkxNjFlMDE2OWM5MDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c7baadea28fd203b3d5e261abb9161e0169c900",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4c7baadea28fd203b3d5e261abb9161e0169c900",
      "tree": {
        "sha": "4ec3ce4752cc0d86d6d31ef886d10ecb0a47c2cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ec3ce4752cc0d86d6d31ef886d10ecb0a47c2cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5971a06c4de78556dc82ec8323e7c6ac6c8c7051",
          "sha": "5971a06c4de78556dc82ec8323e7c6ac6c8c7051",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5971a06c4de78556dc82ec8323e7c6ac6c8c7051"
        }
      ],
      "message": "wallet: retry CreateTransaction without silent_payments change\n\n`CreateTransaction` fails if change_type is set to OutputType::SILENT_PAYMENTS\nand there are no eligible inputs for the transaction. This commit modifies\n`CreateTransaction` logic to make a second attempt to\ncreate a tx without OutputType::SILENT_PAYMENTS change_type",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-25T04:24:41Z"
      },
      "sha": "4c7baadea28fd203b3d5e261abb9161e0169c900"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJmOTY5MzUxY2E5Zjc5YWY3YTA3NmU4N2JhOWQwNDU1MzVjZjZjNTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf969351ca9f79af7a076e87ba9d045535cf6c54",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf969351ca9f79af7a076e87ba9d045535cf6c54",
      "tree": {
        "sha": "69f199feac6960028062daf6aac8251e2df24d53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69f199feac6960028062daf6aac8251e2df24d53"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c7baadea28fd203b3d5e261abb9161e0169c900",
          "sha": "4c7baadea28fd203b3d5e261abb9161e0169c900",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4c7baadea28fd203b3d5e261abb9161e0169c900"
        }
      ],
      "message": "wallet: prefer silent_payments over Bech32m as fallback change type\n\nThis allows wallets with only sp descs to use sp change destination for transactions.",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-25T04:27:33Z"
      },
      "sha": "bf969351ca9f79af7a076e87ba9d045535cf6c54"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE5NTdmZDY2ZjRlMmE1YTY4NzM2ZWQzZDZjYzU2MDQ0ZjI3MTRhOTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1957fd66f4e2a5a68736ed3d6cc56044f2714a99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1957fd66f4e2a5a68736ed3d6cc56044f2714a99",
      "tree": {
        "sha": "7f0e916bce5bd7570e498c92300443f3e453e7c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f0e916bce5bd7570e498c92300443f3e453e7c9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf969351ca9f79af7a076e87ba9d045535cf6c54",
          "sha": "bf969351ca9f79af7a076e87ba9d045535cf6c54",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf969351ca9f79af7a076e87ba9d045535cf6c54"
        }
      ],
      "message": "wallet/tests: Enable Silent Payments in wallet unit tests",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-05-21T09:03:04Z"
      },
      "sha": "1957fd66f4e2a5a68736ed3d6cc56044f2714a99"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE3ZWI4MmNkOTIwMGQ1OGI1MzI4MTI2NGUxYmU3NTI5YzFmZWM5YmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7eb82cd9200d58b53281264e1be7529c1fec9bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a7eb82cd9200d58b53281264e1be7529c1fec9bc",
      "tree": {
        "sha": "1dcb10ceff503233896411c9ccf69c34c5033bde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dcb10ceff503233896411c9ccf69c34c5033bde"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1957fd66f4e2a5a68736ed3d6cc56044f2714a99",
          "sha": "1957fd66f4e2a5a68736ed3d6cc56044f2714a99",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1957fd66f4e2a5a68736ed3d6cc56044f2714a99"
        }
      ],
      "message": "wallet/gui: add silent_payments option to createwalletdialog",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-30T05:14:10Z"
      },
      "sha": "a7eb82cd9200d58b53281264e1be7529c1fec9bc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRjYTBiYmRlMGQ1ZWJiYjA5ZDFjYTIzNDRlZTRlN2JhNThhNGZhOTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dca0bbde0d5ebbb09d1ca2344ee4e7ba58a4fa93",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dca0bbde0d5ebbb09d1ca2344ee4e7ba58a4fa93",
      "tree": {
        "sha": "51e621adb07cdd6010dc227d6e2b537b7eedb24b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51e621adb07cdd6010dc227d6e2b537b7eedb24b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7eb82cd9200d58b53281264e1be7529c1fec9bc",
          "sha": "a7eb82cd9200d58b53281264e1be7529c1fec9bc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a7eb82cd9200d58b53281264e1be7529c1fec9bc"
        }
      ],
      "message": "wallet/gui: add silent-payments to address type dropdown",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-07-30T05:28:21Z"
      },
      "sha": "dca0bbde0d5ebbb09d1ca2344ee4e7ba58a4fa93"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcxNTA5NDhlNjk0YTNlYzg0MjBhMzlmZjk1MzBiNzBlMGE4ZDZjMDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "tree": {
        "sha": "f7bbd8abf8c87b880e2380dec32025c1f1d55a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7bbd8abf8c87b880e2380dec32025c1f1d55a25"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dca0bbde0d5ebbb09d1ca2344ee4e7ba58a4fa93",
          "sha": "dca0bbde0d5ebbb09d1ca2344ee4e7ba58a4fa93",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dca0bbde0d5ebbb09d1ca2344ee4e7ba58a4fa93"
        }
      ],
      "message": "tests: silent-payments wallet coin control\n\nCo-authored-by: macgyver13 <4712150+macgyver13@users.noreply.github.com>",
      "committer": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-19T14:07:46Z"
      },
      "author": {
        "name": "Novo",
        "email": "eunovo9@gmail.com",
        "date": "2025-08-15T15:01:47Z"
      },
      "sha": "7150948e694a3ec8420a39ff9530b70e0a8d6c07"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19225730709,
      "node_id": "HRFPE_lADOABII587AZUn2zwAAAAR58V6V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19225730709",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "created_at": "2025-08-19T14:08:55Z"
    },
    {
      "event": "commented",
      "id": 3201001743,
      "node_id": "IC_kwDOABII586-y2kP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3201001743",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T14:28:12Z",
      "updated_at": "2025-08-19T14:28:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Some Major Updates:\r\n- The `SilentPaymentDescriptorScriptPubKeyMan` now obtains the scan key through a `GetScanKey` method, only available on Silent Payment descriptors\r\n- The spend key is no longer derived during descriptor parsing; it now has to be \"expanded\" the same way other descriptors are expanded\r\n- `LoadKeysAndChangeLabel` has been replaced with an overridden `TopUpWithDB` method. The wallet calls `TopUp` when it wants the SPKMans to derive and load new keys and scripts.",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#issuecomment-3201001743",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32966"
    },
    {
      "event": "reviewed",
      "id": 3189588826,
      "node_id": "PRR_kwDOABII586-HUNa",
      "url": null,
      "actor": null,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-05T14:48:36Z",
      "author_association": "MEMBER",
      "body": "Looking good! Really nice to see you were able to remove a lot of custom code related to how we handle the scan and spend keys. Left some comments/questions below.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#pullrequestreview-3189588826",
      "submitted_at": "2025-09-05T14:48:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2204657999",
      "pull_request_review_id": 3015969430,
      "id": 2204657999,
      "node_id": "PRRC_kwDOABII586DaGlP",
      "diff_hunk": "@@ -358,6 +358,7 @@ static RPCHelpMan createwallet()\n             {\"descriptors\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"If set, must be \\\"true\\\"\"},\n             {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n             {\"external_signer\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n+            {\"silent_payments\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Enable creating and receiving with a silent payments address. Will disable fast rescans with block filters\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "89831dace9d21456eb4a019d86164304e22f458e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 89831dace9d21456eb4a019d86164304e22f458e _wallet/rpc: add create silent-payments wallet option_: while testing I found that it doesn't disable block filters.",
      "created_at": "2025-07-14T11:23:42Z",
      "updated_at": "2025-07-14T11:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2204657999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2204657999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2206657562",
      "pull_request_review_id": 3019063463,
      "id": 2206657562,
      "node_id": "PRRC_kwDOABII586Dhuwa",
      "diff_hunk": "@@ -358,6 +358,7 @@ static RPCHelpMan createwallet()\n             {\"descriptors\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"If set, must be \\\"true\\\"\"},\n             {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n             {\"external_signer\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n+            {\"silent_payments\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Enable creating and receiving with a silent payments address. Will disable fast rescans with block filters\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "89831dace9d21456eb4a019d86164304e22f458e",
      "in_reply_to_id": 2204657999,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks @Sjors. I'll fix it",
      "created_at": "2025-07-15T07:30:39Z",
      "updated_at": "2025-07-15T07:30:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2206657562",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2206657562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2206887912",
      "pull_request_review_id": 3019391176,
      "id": 2206887912,
      "node_id": "PRRC_kwDOABII586Dim_o",
      "diff_hunk": "@@ -358,6 +358,7 @@ static RPCHelpMan createwallet()\n             {\"descriptors\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"If set, must be \\\"true\\\"\"},\n             {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n             {\"external_signer\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n+            {\"silent_payments\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Enable creating and receiving with a silent payments address. Will disable fast rescans with block filters\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "89831dace9d21456eb4a019d86164304e22f458e",
      "in_reply_to_id": 2204657999,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We can disable the fast rescan for now just to keep this PR focused, but in theory we should be able to use the fast rescan regardless of whether or not the wallet is a silent payments wallet. Perhaps we can leave a comment to enable fast rescans in a follow up?",
      "created_at": "2025-07-15T08:53:37Z",
      "updated_at": "2025-07-15T08:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2206887912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2206887912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207029910",
      "pull_request_review_id": 3019536178,
      "id": 2207029910,
      "node_id": "PRRC_kwDOABII586DjJqW",
      "diff_hunk": "@@ -1422,16 +1422,78 @@ class RawTRDescriptor final : public DescriptorImpl\n     }\n };\n \n+/** A parsed sp(...) descriptor */\n+class SpDescriptor final : public DescriptorImpl\n+{\n+    CKey m_scan_key;\n+\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, std::span<const CScript>, FlatSigningProvider&) const override { return std::vector<CScript>(); }\n+\n+public:\n+    SpDescriptor(std::unique_ptr<PubkeyProvider> scan_pubkey, std::unique_ptr<PubkeyProvider> spend_key, CKey scan_key) : DescriptorImpl(Vector(std::move(scan_pubkey), std::move(spend_key)), \"sp\"), m_scan_key(scan_key) {};\n+\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::SILENT_PAYMENTS; }\n+\n+    bool IsSingleType() const final { return true; }",
      "path": "src/script/descriptor.cpp",
      "position": 67,
      "original_position": 26,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "cb44e3812c741e3a939a64799130bbf0787ef89a : I think we should set `bool IsRange() const override { return false; }` so we don't have to think about ranged descriptors.\r\n",
      "created_at": "2025-07-15T09:55:08Z",
      "updated_at": "2025-07-15T15:31:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207029910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207029910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1661,
      "original_line": 1661,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207630652",
      "pull_request_review_id": 3020599518,
      "id": 2207630652,
      "node_id": "PRRC_kwDOABII586DlcU8",
      "diff_hunk": "@@ -206,6 +206,8 @@ struct PubkeyProvider\n     /** Get the descriptor string form including private data (if available in arg). */\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n \n+    virtual std::optional<std::string> ToPrivateString(const CKey& key) const = 0;",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0b3b87c648f7918a0b2017555c136364116d81e2",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "While reviewing the PR, it seems a lot of things could be simplified by if we just treated the scan key as something that _isn't_ a `CKey`, i.e., we introduce a completely new object for holding the scan key. I think that would allow us to drop this commit and simplify other places where we are trying to work around the fact that a scan key isnt really a private key.\r\n\r\nI haven't thought this all the way through yet, but in my initial pass on the PR it seems like it should be possible.",
      "created_at": "2025-07-15T14:14:18Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207630652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207630652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207664427",
      "pull_request_review_id": 3020599518,
      "id": 2207664427,
      "node_id": "PRRC_kwDOABII586Dlkkr",
      "diff_hunk": "@@ -18,6 +18,7 @@ static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n static const std::string OUTPUT_TYPE_STRING_BECH32M = \"bech32m\";\n+static const std::string OUTPUT_TYPE_STRING_SILENT_PAYMENTS = \"silent-payments\";",
      "path": "src/outputtype.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would recommend splitting the output type changes into their own commit(s). Its a self-contained change, and splitting them out from the descriptor changes makes the descriptor commit easier to review.",
      "created_at": "2025-07-15T14:24:40Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207664427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207664427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 21,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207667539",
      "pull_request_review_id": 3020599518,
      "id": 2207667539,
      "node_id": "PRRC_kwDOABII586DllVT",
      "diff_hunk": "@@ -776,7 +776,7 @@ class DescriptorImpl : public Descriptor\n     }\n \n     // NOLINTNEXTLINE(misc-no-recursion)\n-    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const final\n+    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const override",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Potentially another area we could simplify if we end up not treating a scan key as a `CKey`.",
      "created_at": "2025-07-15T14:25:43Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207667539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207667539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1003,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207679341",
      "pull_request_review_id": 3020599518,
      "id": 2207679341,
      "node_id": "PRRC_kwDOABII586DloNt",
      "diff_hunk": "@@ -1422,16 +1422,78 @@ class RawTRDescriptor final : public DescriptorImpl\n     }\n };\n \n+/** A parsed sp(...) descriptor */\n+class SpDescriptor final : public DescriptorImpl\n+{\n+    CKey m_scan_key;\n+\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, std::span<const CScript>, FlatSigningProvider&) const override { return std::vector<CScript>(); }\n+\n+public:\n+    SpDescriptor(std::unique_ptr<PubkeyProvider> scan_pubkey, std::unique_ptr<PubkeyProvider> spend_key, CKey scan_key) : DescriptorImpl(Vector(std::move(scan_pubkey), std::move(spend_key)), \"sp\"), m_scan_key(scan_key) {};\n+\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::SILENT_PAYMENTS; }\n+\n+    bool IsSingleType() const final { return true; }\n+\n+    bool IsSolvable() const override { return false; }\n+\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const override\n+    {\n+        auto scan_key{m_pubkey_args.at(0)->ToPrivateString(m_scan_key)};\n+        assert(scan_key.has_value());\n+        std::string ret{m_name + \"(\" + *scan_key + \",\"};\n+        auto& spend_pubkey{m_pubkey_args.at(1)};\n+        std::string tmp;\n+        switch (type) {\n+        case StringType::NORMALIZED:\n+            if (!spend_pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n+            break;\n+        case StringType::PRIVATE:\n+            if (!spend_pubkey->ToPrivateString(*arg, tmp)) return false;\n+            break;\n+        case StringType::PUBLIC:\n+            tmp = spend_pubkey->ToString();\n+            break;\n+        case StringType::COMPAT:\n+            tmp = spend_pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+            break;\n+        }\n+        out = std::move(ret) + std::move(tmp) + \")\";\n+        return true;\n+    }\n+\n+    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const override\n+    {\n+        FlatSigningProvider tmp;\n+        auto spend_pubkey{m_pubkey_args.at(1)->GetPubKey(0, provider, tmp)};\n+        m_pubkey_args.at(1)->GetPrivKey(0, provider, tmp);\n+\n+        assert(spend_pubkey.has_value());\n+        out.sp_keys = std::make_pair(m_scan_key, *spend_pubkey);\n+\n+        auto it{tmp.keys.find(spend_pubkey->GetID())};\n+        if (it != tmp.keys.end()) out.keys.emplace(spend_pubkey->GetID(), it->second);",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 65,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "AFAICT, we only use the `sp_keys` member of the FlatSigningProvider as a way of passing around the scan key and the spend pubkey, and then also for the spend private key (for signing). It makes sense to me that we would later add the spend private key + tweaks to the FlatSigningProvider, but ideally thats the only thing we use it for and can get rid of `sp_keys`.",
      "created_at": "2025-07-15T14:29:22Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207679341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207679341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1474,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1698,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207692663",
      "pull_request_review_id": 3020599518,
      "id": 2207692663,
      "node_id": "PRRC_kwDOABII586Dlrd3",
      "diff_hunk": "@@ -1422,16 +1422,78 @@ class RawTRDescriptor final : public DescriptorImpl\n     }\n };\n \n+/** A parsed sp(...) descriptor */\n+class SpDescriptor final : public DescriptorImpl\n+{\n+    CKey m_scan_key;\n+\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, std::span<const CScript>, FlatSigningProvider&) const override { return std::vector<CScript>(); }\n+\n+public:\n+    SpDescriptor(std::unique_ptr<PubkeyProvider> scan_pubkey, std::unique_ptr<PubkeyProvider> spend_key, CKey scan_key) : DescriptorImpl(Vector(std::move(scan_pubkey), std::move(spend_key)), \"sp\"), m_scan_key(scan_key) {};\n+\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::SILENT_PAYMENTS; }\n+\n+    bool IsSingleType() const final { return true; }\n+\n+    bool IsSolvable() const override { return false; }\n+\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const override\n+    {\n+        auto scan_key{m_pubkey_args.at(0)->ToPrivateString(m_scan_key)};\n+        assert(scan_key.has_value());\n+        std::string ret{m_name + \"(\" + *scan_key + \",\"};\n+        auto& spend_pubkey{m_pubkey_args.at(1)};\n+        std::string tmp;\n+        switch (type) {\n+        case StringType::NORMALIZED:\n+            if (!spend_pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n+            break;\n+        case StringType::PRIVATE:\n+            if (!spend_pubkey->ToPrivateString(*arg, tmp)) return false;\n+            break;\n+        case StringType::PUBLIC:\n+            tmp = spend_pubkey->ToString();\n+            break;\n+        case StringType::COMPAT:\n+            tmp = spend_pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+            break;\n+        }\n+        out = std::move(ret) + std::move(tmp) + \")\";\n+        return true;\n+    }\n+\n+    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const override\n+    {\n+        FlatSigningProvider tmp;\n+        auto spend_pubkey{m_pubkey_args.at(1)->GetPubKey(0, provider, tmp)};\n+        m_pubkey_args.at(1)->GetPrivKey(0, provider, tmp);\n+\n+        assert(spend_pubkey.has_value());\n+        out.sp_keys = std::make_pair(m_scan_key, *spend_pubkey);\n+\n+        auto it{tmp.keys.find(spend_pubkey->GetID())};\n+        if (it != tmp.keys.end()) out.keys.emplace(spend_pubkey->GetID(), it->second);\n+    }\n+\n+    std::unique_ptr<DescriptorImpl> Clone() const override\n+    {\n+        return std::make_unique<SpDescriptor>(m_pubkey_args.at(0)->Clone(), m_pubkey_args.at(1)->Clone(), m_scan_key);\n+    }\n+};\n+\n ////////////////////////////////////////////////////////////////////////////\n // Parser                                                                 //\n ////////////////////////////////////////////////////////////////////////////\n \n enum class ParseScriptContext {\n-    TOP,     //!< Top-level context (script goes directly in scriptPubKey)\n-    P2SH,    //!< Inside sh() (script becomes P2SH redeemScript)\n-    P2WPKH,  //!< Inside wpkh() (no script, pubkey only)\n-    P2WSH,   //!< Inside wsh() (script becomes v0 witness script)\n-    P2TR,    //!< Inside tr() (either internal key, or BIP342 script leaf)",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 83,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: unnecessary formatting change, should just be a one-line change.",
      "created_at": "2025-07-15T14:34:23Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207692663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207692663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1430,
      "start_side": "LEFT",
      "line": null,
      "original_line": 1614,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207696186",
      "pull_request_review_id": 3020599518,
      "id": 2207696186,
      "node_id": "PRRC_kwDOABII586DlsU6",
      "diff_hunk": "@@ -1807,6 +1897,62 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (scan_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+        if (!Const(\",\", expr)) {\n+            error = strprintf(\"sp(): expected ',', got '%c'\", expr[0]);\n+            return {};\n+        }\n+        ++key_exp_index;\n+\n+        auto spend_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (spend_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+\n+        std::set<CKeyID> scan_keys_rm;\n+        for (auto& scan_pubkey : scan_pubkeys) {\n+            CKeyID scan_keyId;\n+            if (auto root_pubkey{scan_pubkey->GetRootPubKey()}) {\n+                scan_keyId = root_pubkey->GetID();\n+            } else if (auto root_extpubkey{scan_pubkey->GetRootExtPubKey()}) {\n+                scan_keyId = root_extpubkey->pubkey.GetID();\n+            }\n+            if (scan_keyId.IsNull()) {\n+                error = \"sp(): could not get scan key ID\";\n+                return {};\n+            }\n+\n+            auto it{out.keys.find(scan_keyId)};\n+            scan_keys_rm.insert(scan_keyId);\n+\n+            if (it == out.keys.end()) {\n+                error = \"sp(): requires the scan priv key\";\n+                return {};\n+            }\n+\n+            for (auto& spend_pubkey : spend_pubkeys) {\n+                ret.emplace_back(std::make_unique<SpDescriptor>(std::move(scan_pubkey), std::move(spend_pubkey), std::move(it->second)));\n+            }\n+        }\n+\n+        // Remove all scan private keys to allow\n+        // importation of sp descriptors into watch-only wallets\n+        for (auto keyId : scan_keys_rm) {\n+            out.keys.erase(keyId);\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 180,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Another place we could simplify things if we instead came up with a custom type for the scan key.",
      "created_at": "2025-07-15T14:35:55Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207696186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207696186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1944,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207703326",
      "pull_request_review_id": 3020599518,
      "id": 2207703326,
      "node_id": "PRRC_kwDOABII586DluEe",
      "diff_hunk": "@@ -213,6 +213,7 @@ struct FlatSigningProvider final : public SigningProvider\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;\n     std::map<CKeyID, CKey> keys;\n     std::map<XOnlyPubKey, TaprootBuilder> tr_trees; /** Map from output key to Taproot tree (which can then make the TaprootSpendData */\n+    std::pair<CKey, CPubKey> sp_keys;",
      "path": "src/script/signingprovider.h",
      "position": 1,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Feels like the SigningProvider should only care about the `spend_key + tweak` for signing, so another place to potentially simplify things if scan key is a custom type instead of a `CKey`.",
      "created_at": "2025-07-15T14:38:51Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207703326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207703326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207706177",
      "pull_request_review_id": 3020599518,
      "id": 2207706177,
      "node_id": "PRRC_kwDOABII586DluxB",
      "diff_hunk": "@@ -481,7 +481,7 @@ BOOST_FIXTURE_TEST_CASE(BasicOutputTypesTest, ListCoinsTest)\n     //   2. One UTXO from the change, due to payment address matching logic\n \n     for (const auto& out_type : OUTPUT_TYPES) {\n-        if (out_type == OutputType::UNKNOWN) continue;\n+        if (out_type == OutputType::UNKNOWN || out_type == OutputType::SILENT_PAYMENTS) continue;",
      "path": "src/wallet/test/wallet_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This could be moved into the output type commit.",
      "created_at": "2025-07-15T14:40:04Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207706177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207706177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 484,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207706515",
      "pull_request_review_id": 3020599518,
      "id": 2207706515,
      "node_id": "PRRC_kwDOABII586Dlu2T",
      "diff_hunk": "@@ -3523,6 +3523,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans(WalletBatch& batch, const CExtKey&\n     AssertLockHeld(cs_wallet);\n     for (bool internal : {false, true}) {\n         for (OutputType t : OUTPUT_TYPES) {\n+            if (t == OutputType::SILENT_PAYMENTS) continue;",
      "path": "src/wallet/wallet.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This could be moved to the output type commit.",
      "created_at": "2025-07-15T14:40:13Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207706515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207706515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207717440",
      "pull_request_review_id": 3020599518,
      "id": 2207717440,
      "node_id": "PRRC_kwDOABII586DlxhA",
      "diff_hunk": "@@ -2120,6 +2120,10 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n             error = \"Address is not valid\";\n             return {};\n         }\n+        if (std::holds_alternative<V0SilentPaymentDestination>(dest)) {",
      "path": "src/script/descriptor.cpp",
      "position": 235,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "4cecb017071c0ce182ff8708212471e60adb8a86",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think its more appropriate to move this commit into the PR where we first introduce `V0SilentPaymentDestination`. I'll cherry pick this out into https://github.com/bitcoin/bitcoin/pull/28122",
      "created_at": "2025-07-15T14:44:41Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207717440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207717440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2488,
      "original_line": 2488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207728284",
      "pull_request_review_id": 3020599518,
      "id": 2207728284,
      "node_id": "PRRC_kwDOABII586Dl0Kc",
      "diff_hunk": "@@ -46,13 +46,15 @@ WalletFeature GetClosestWalletFeature(int version)\n     return static_cast<WalletFeature>(0);\n }\n \n-WalletDescriptor GenerateWalletDescriptor(const CExtPubKey& master_key, const OutputType& addr_type, bool internal)\n+WalletDescriptor GenerateWalletDescriptor(const CExtKey& master_key, const OutputType& addr_type, bool internal, std::vector<CKey>& out_keys)",
      "path": "src/wallet/walletutil.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "eb1196a5b8315454f1f59e814b6748a3200ccd73",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we can create a custom type for the scan key, it seems better to have a special function just for silent payments that returns this custom key type from an xpriv, rather than change `GenerateWalletDescriptor` to work on an xpriv.",
      "created_at": "2025-07-15T14:48:58Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207728284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207728284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207735327",
      "pull_request_review_id": 3020599518,
      "id": 2207735327,
      "node_id": "PRRC_kwDOABII586Dl14f",
      "diff_hunk": "@@ -73,28 +75,41 @@ WalletDescriptor GenerateWalletDescriptor(const CExtPubKey& master_key, const Ou\n         desc_prefix = \"tr(\" + xpub + \"/86h\";\n         break;\n     }\n+    case OutputType::SILENT_PAYMENTS: {\n+        // The actual scan and spend keys will be derived from these XPRIVs\n+        // The actual XPRIV and the spend key will not be retained in the descriptor,\n+        // but the scan key will be.\n+        desc_str = \"sp(\" + xpriv + \"/352h/0h/0h/1h/0,\" + xpriv + \"/352h/0h/0h/0h/0)\";",
      "path": "src/wallet/walletutil.cpp",
      "position": 1,
      "original_position": 26,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "eb1196a5b8315454f1f59e814b6748a3200ccd73",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ideally we can do this without needing an xpriv, but I vaguely remember a reason why we need the xpriv here. Will dig in a bit more to see if we can avoid this.",
      "created_at": "2025-07-15T14:51:31Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207735327",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207735327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207737007",
      "pull_request_review_id": 3020599518,
      "id": 2207737007,
      "node_id": "PRRC_kwDOABII586Dl2Sv",
      "diff_hunk": "@@ -73,28 +75,41 @@ WalletDescriptor GenerateWalletDescriptor(const CExtPubKey& master_key, const Ou\n         desc_prefix = \"tr(\" + xpub + \"/86h\";\n         break;\n     }\n+    case OutputType::SILENT_PAYMENTS: {\n+        // The actual scan and spend keys will be derived from these XPRIVs\n+        // The actual XPRIV and the spend key will not be retained in the descriptor,\n+        // but the scan key will be.\n+        desc_str = \"sp(\" + xpriv + \"/352h/0h/0h/1h/0,\" + xpriv + \"/352h/0h/0h/0h/0)\";\n+        break;\n+    }\n     case OutputType::UNKNOWN: {\n         // We should never have a DescriptorScriptPubKeyMan for an UNKNOWN OutputType,\n         // so if we get to this point something is wrong\n         assert(false);\n     }\n     } // no default case, so the compiler can warn about missing cases\n-    assert(!desc_prefix.empty());\n+    assert(!desc_str.empty() || !desc_prefix.empty());",
      "path": "src/wallet/walletutil.cpp",
      "position": 48,
      "original_position": 36,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "eb1196a5b8315454f1f59e814b6748a3200ccd73",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just curious, why the extra assert? Seems unrelated to the other changes.",
      "created_at": "2025-07-15T14:52:11Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207737007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207737007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207750518",
      "pull_request_review_id": 3020599518,
      "id": 2207750518,
      "node_id": "PRRC_kwDOABII586Dl5l2",
      "diff_hunk": "@@ -73,28 +75,41 @@ WalletDescriptor GenerateWalletDescriptor(const CExtPubKey& master_key, const Ou\n         desc_prefix = \"tr(\" + xpub + \"/86h\";\n         break;\n     }\n+    case OutputType::SILENT_PAYMENTS: {\n+        // The actual scan and spend keys will be derived from these XPRIVs\n+        // The actual XPRIV and the spend key will not be retained in the descriptor,\n+        // but the scan key will be.\n+        desc_str = \"sp(\" + xpriv + \"/352h/0h/0h/1h/0,\" + xpriv + \"/352h/0h/0h/0h/0)\";\n+        break;\n+    }\n     case OutputType::UNKNOWN: {\n         // We should never have a DescriptorScriptPubKeyMan for an UNKNOWN OutputType,\n         // so if we get to this point something is wrong\n         assert(false);\n     }\n     } // no default case, so the compiler can warn about missing cases\n-    assert(!desc_prefix.empty());\n+    assert(!desc_str.empty() || !desc_prefix.empty());\n \n-    // Mainnet derives at 0', testnet and regtest derive at 1'\n-    if (Params().IsTestChain()) {\n-        desc_prefix += \"/1h\";\n-    } else {\n-        desc_prefix += \"/0h\";\n-    }\n+    if (desc_str.empty()) {\n+        // Mainnet derives at 0', testnet and regtest derive at 1'\n+        if (Params().IsTestChain()) {\n+            desc_prefix += \"/1h\";\n+        } else {\n+            desc_prefix += \"/0h\";\n+        }\n \n-    std::string internal_path = internal ? \"/1\" : \"/0\";\n-    std::string desc_str = desc_prefix + \"/0h\" + internal_path + desc_suffix;\n+        std::string internal_path = internal ? \"/1\" : \"/0\";\n+        desc_str = desc_prefix + \"/0h\" + internal_path + desc_suffix;\n+    }\n \n     // Make the descriptor\n     FlatSigningProvider keys;\n     std::string error;\n     std::vector<std::unique_ptr<Descriptor>> desc = Parse(desc_str, keys, error, false);\n+    for (const auto& key : keys.keys) {\n+        out_keys.push_back(std::move(key.second));",
      "path": "src/wallet/walletutil.cpp",
      "position": 1,
      "original_position": 63,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "eb1196a5b8315454f1f59e814b6748a3200ccd73",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is returning just the spend private key, right? IIRC, the scan private key is removed from `out.keys` as part of the Parse function. Not clear to me why we would want the spend private key in the `out_keys` out param.",
      "created_at": "2025-07-15T14:57:43Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207750518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207750518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207755915",
      "pull_request_review_id": 3020599518,
      "id": 2207755915,
      "node_id": "PRRC_kwDOABII586Dl66L",
      "diff_hunk": "@@ -166,6 +166,13 @@ void CKey::MakeNewKey(bool fCompressedIn) {\n     fCompressed = fCompressedIn;\n }\n \n+bool CKey::TweakAdd(const unsigned char* tweak32)",
      "path": "src/key.cpp",
      "position": 13,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "5d5214b6c16a885ad6920702ce88dc6697fb9ea4",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm wondering if these two methods (`CKey::TweakAdd`, `CPubKey::TweakAdd`) can also be moved into https://github.com/bitcoin/bitcoin/pull/28122, as they seem a little out of place in this PR (though, admittedly its only in this PR that we actually use them).",
      "created_at": "2025-07-15T14:59:58Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207755915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207755915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207760975",
      "pull_request_review_id": 3020599518,
      "id": 2207760975,
      "node_id": "PRRC_kwDOABII586Dl8JP",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};\n+\n+    // Populate m_map_label_tweaks\n+    auto change_label_data = bip352::CreateLabelTweak(provider.sp_keys.first, 0);\n+    m_map_label_tweaks.insert(change_label_data);\n+    for (int i = 1; i < m_wallet_descriptor.next_index; i++) {\n+        // Add the other generated labelled destinations\n+        m_map_label_tweaks.insert(bip352::CreateLabelTweak(provider.sp_keys.first, i));\n+    }",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd remove this (and any other code) related to non-change labels from this PR. Ideally, implement just enough for labels to get change working, and then we can fully implement labels in a follow-up PR. ",
      "created_at": "2025-07-15T15:02:04Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207760975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207760975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1656,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207765554",
      "pull_request_review_id": 3020599518,
      "id": 2207765554,
      "node_id": "PRRC_kwDOABII586Dl9Qy",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 17,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It feels strange to call the provider just to get the scan key, feels like another area we can simplify with a custom scan key type.",
      "created_at": "2025-07-15T15:03:34Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207765554",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207765554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207770146",
      "pull_request_review_id": 3020599518,
      "id": 2207770146,
      "node_id": "PRRC_kwDOABII586Dl-Yi",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};\n+\n+    // Populate m_map_label_tweaks\n+    auto change_label_data = bip352::CreateLabelTweak(provider.sp_keys.first, 0);\n+    m_map_label_tweaks.insert(change_label_data);\n+    for (int i = 1; i < m_wallet_descriptor.next_index; i++) {\n+        // Add the other generated labelled destinations\n+        m_map_label_tweaks.insert(bip352::CreateLabelTweak(provider.sp_keys.first, i));\n+    }\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal)\n+{\n+    if (!DescriptorScriptPubKeyMan::SetupDescriptorGeneration(batch, master_key, addr_type, internal)) return false;\n+    PopulateLabelTweaks();\n+    return true;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewDestination(const OutputType type)\n+{\n+    LOCK(cs_desc_man);\n+    if (type != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Requested Type is not Silent Payment\");\n+    }\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    CTxDestination dest{main_dest};\n+    return dest;\n+}\n+\n+V0SilentPaymentDestination SilentPaymentDescriptorScriptPubKeyMan::GetLabeledDestination(uint64_t index)\n+{\n+    AssertLockHeld(cs_desc_man);\n+\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    // Generate label tweak\n+    auto label_data = bip352::CreateLabelTweak(provider.sp_keys.first, index);\n+    m_map_label_tweaks.insert(label_data);\n+    V0SilentPaymentDestination label_dest = bip352::GenerateSilentPaymentLabeledAddress(main_dest, label_data.second);\n+    return label_dest;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewLabeledDestination(uint64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    auto dest = GetLabeledDestination(m_wallet_descriptor.next_index);\n+    index = m_wallet_descriptor.next_index; // Return the index for this destination\n+    m_wallet_descriptor.next_index++;\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    return CTxDestination{dest};\n+}",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 72,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same comment regarding moving labels related code to a follow-up PR.",
      "created_at": "2025-07-15T15:04:56Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207770146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207770146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1683,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207788108",
      "pull_request_review_id": 3020599518,
      "id": 2207788108,
      "node_id": "PRRC_kwDOABII586DmCxM",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};\n+\n+    // Populate m_map_label_tweaks\n+    auto change_label_data = bip352::CreateLabelTweak(provider.sp_keys.first, 0);\n+    m_map_label_tweaks.insert(change_label_data);\n+    for (int i = 1; i < m_wallet_descriptor.next_index; i++) {\n+        // Add the other generated labelled destinations\n+        m_map_label_tweaks.insert(bip352::CreateLabelTweak(provider.sp_keys.first, i));\n+    }\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal)\n+{\n+    if (!DescriptorScriptPubKeyMan::SetupDescriptorGeneration(batch, master_key, addr_type, internal)) return false;\n+    PopulateLabelTweaks();\n+    return true;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewDestination(const OutputType type)\n+{\n+    LOCK(cs_desc_man);\n+    if (type != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Requested Type is not Silent Payment\");\n+    }\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    CTxDestination dest{main_dest};\n+    return dest;\n+}\n+\n+V0SilentPaymentDestination SilentPaymentDescriptorScriptPubKeyMan::GetLabeledDestination(uint64_t index)\n+{\n+    AssertLockHeld(cs_desc_man);\n+\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    // Generate label tweak\n+    auto label_data = bip352::CreateLabelTweak(provider.sp_keys.first, index);\n+    m_map_label_tweaks.insert(label_data);\n+    V0SilentPaymentDestination label_dest = bip352::GenerateSilentPaymentLabeledAddress(main_dest, label_data.second);\n+    return label_dest;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewLabeledDestination(uint64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    auto dest = GetLabeledDestination(m_wallet_descriptor.next_index);\n+    index = m_wallet_descriptor.next_index; // Return the index for this destination\n+    m_wallet_descriptor.next_index++;\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    return CTxDestination{dest};\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    if (m_map_spk_tweaks.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const std::vector<XOnlyPubKey>& output_keys, const bip352::PublicData& public_data)\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        return ISMINE_NO;\n+    }\n+\n+    const auto provider{GetSPProvider()};\n+    auto tweaks{bip352::ScanForSilentPaymentOutputs(\n+        provider.sp_keys.first, public_data, provider.sp_keys.second, output_keys, m_map_label_tweaks)};\n+    if (!tweaks.has_value()) {\n+        return ISMINE_NO;\n+    }\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot start db transaction wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    for (const auto& tweak : *tweaks) {\n+        if (!TopUpWithDB(batch, tweak.tweak)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing tweak failed\");\n+        }\n+    }\n+    if (!batch.TxnCommit()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    return ISMINE_SPENDABLE;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    // Destination at index 0 is the change destination\n+    auto op_dest = GetLabeledDestination(0);\n+    return CTxDestination{op_dest};\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUp(const uint256& tweak)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 120,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The name TopUp here makes sense in that we are trying to match how the rest of the wallet does it, but @Sjors pointed out this can be confusing for people who think of TopUp in terms of the gap limit / key pool refresh context, which we aren't really doing here. We could just have one function called `AddTweak` and then use a boolean for writing to the database, e.g., `AddTweak(uint256& tweak, store_in_db=false)`",
      "created_at": "2025-07-15T15:09:46Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207788108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207788108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207792955",
      "pull_request_review_id": 3020599518,
      "id": 2207792955,
      "node_id": "PRRC_kwDOABII586DmD87",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};\n+\n+    // Populate m_map_label_tweaks\n+    auto change_label_data = bip352::CreateLabelTweak(provider.sp_keys.first, 0);\n+    m_map_label_tweaks.insert(change_label_data);\n+    for (int i = 1; i < m_wallet_descriptor.next_index; i++) {\n+        // Add the other generated labelled destinations\n+        m_map_label_tweaks.insert(bip352::CreateLabelTweak(provider.sp_keys.first, i));\n+    }\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal)\n+{\n+    if (!DescriptorScriptPubKeyMan::SetupDescriptorGeneration(batch, master_key, addr_type, internal)) return false;\n+    PopulateLabelTweaks();\n+    return true;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewDestination(const OutputType type)\n+{\n+    LOCK(cs_desc_man);\n+    if (type != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Requested Type is not Silent Payment\");\n+    }\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    CTxDestination dest{main_dest};\n+    return dest;\n+}\n+\n+V0SilentPaymentDestination SilentPaymentDescriptorScriptPubKeyMan::GetLabeledDestination(uint64_t index)\n+{\n+    AssertLockHeld(cs_desc_man);\n+\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    // Generate label tweak\n+    auto label_data = bip352::CreateLabelTweak(provider.sp_keys.first, index);\n+    m_map_label_tweaks.insert(label_data);\n+    V0SilentPaymentDestination label_dest = bip352::GenerateSilentPaymentLabeledAddress(main_dest, label_data.second);\n+    return label_dest;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewLabeledDestination(uint64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    auto dest = GetLabeledDestination(m_wallet_descriptor.next_index);\n+    index = m_wallet_descriptor.next_index; // Return the index for this destination\n+    m_wallet_descriptor.next_index++;\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    return CTxDestination{dest};\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    if (m_map_spk_tweaks.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const std::vector<XOnlyPubKey>& output_keys, const bip352::PublicData& public_data)\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        return ISMINE_NO;\n+    }\n+\n+    const auto provider{GetSPProvider()};\n+    auto tweaks{bip352::ScanForSilentPaymentOutputs(\n+        provider.sp_keys.first, public_data, provider.sp_keys.second, output_keys, m_map_label_tweaks)};\n+    if (!tweaks.has_value()) {\n+        return ISMINE_NO;\n+    }\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot start db transaction wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    for (const auto& tweak : *tweaks) {\n+        if (!TopUpWithDB(batch, tweak.tweak)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing tweak failed\");\n+        }\n+    }\n+    if (!batch.TxnCommit()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    return ISMINE_SPENDABLE;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    // Destination at index 0 is the change destination\n+    auto op_dest = GetLabeledDestination(0);\n+    return CTxDestination{op_dest};\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUp(const uint256& tweak)\n+{\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) return false;\n+    bool res = TopUpWithDB(batch, tweak);\n+    if (!batch.TxnCommit()) throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    return res;\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUpWithDB(WalletBatch& batch, const uint256& tweak)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 129,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could be `AddTweakWithDB` (based on my previous comment).",
      "created_at": "2025-07-15T15:11:00Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207792955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207792955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1789,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207796367",
      "pull_request_review_id": 3020599518,
      "id": 2207796367,
      "node_id": "PRRC_kwDOABII586DmEyP",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};\n+\n+    // Populate m_map_label_tweaks\n+    auto change_label_data = bip352::CreateLabelTweak(provider.sp_keys.first, 0);\n+    m_map_label_tweaks.insert(change_label_data);\n+    for (int i = 1; i < m_wallet_descriptor.next_index; i++) {\n+        // Add the other generated labelled destinations\n+        m_map_label_tweaks.insert(bip352::CreateLabelTweak(provider.sp_keys.first, i));\n+    }\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal)\n+{\n+    if (!DescriptorScriptPubKeyMan::SetupDescriptorGeneration(batch, master_key, addr_type, internal)) return false;\n+    PopulateLabelTweaks();\n+    return true;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewDestination(const OutputType type)\n+{\n+    LOCK(cs_desc_man);\n+    if (type != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Requested Type is not Silent Payment\");\n+    }\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    CTxDestination dest{main_dest};\n+    return dest;\n+}\n+\n+V0SilentPaymentDestination SilentPaymentDescriptorScriptPubKeyMan::GetLabeledDestination(uint64_t index)\n+{\n+    AssertLockHeld(cs_desc_man);\n+\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    // Generate label tweak\n+    auto label_data = bip352::CreateLabelTweak(provider.sp_keys.first, index);\n+    m_map_label_tweaks.insert(label_data);\n+    V0SilentPaymentDestination label_dest = bip352::GenerateSilentPaymentLabeledAddress(main_dest, label_data.second);\n+    return label_dest;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewLabeledDestination(uint64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    auto dest = GetLabeledDestination(m_wallet_descriptor.next_index);\n+    index = m_wallet_descriptor.next_index; // Return the index for this destination\n+    m_wallet_descriptor.next_index++;\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    return CTxDestination{dest};\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    if (m_map_spk_tweaks.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const std::vector<XOnlyPubKey>& output_keys, const bip352::PublicData& public_data)\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        return ISMINE_NO;\n+    }\n+\n+    const auto provider{GetSPProvider()};\n+    auto tweaks{bip352::ScanForSilentPaymentOutputs(\n+        provider.sp_keys.first, public_data, provider.sp_keys.second, output_keys, m_map_label_tweaks)};\n+    if (!tweaks.has_value()) {\n+        return ISMINE_NO;\n+    }\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot start db transaction wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    for (const auto& tweak : *tweaks) {\n+        if (!TopUpWithDB(batch, tweak.tweak)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing tweak failed\");\n+        }\n+    }\n+    if (!batch.TxnCommit()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    return ISMINE_SPENDABLE;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    // Destination at index 0 is the change destination\n+    auto op_dest = GetLabeledDestination(0);\n+    return CTxDestination{op_dest};\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUp(const uint256& tweak)\n+{\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) return false;\n+    bool res = TopUpWithDB(batch, tweak);\n+    if (!batch.TxnCommit()) throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    return res;\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUpWithDB(WalletBatch& batch, const uint256& tweak)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_wallet_descriptor.descriptor->GetOutputType() == OutputType::SILENT_PAYMENTS); // Should only ever be called on silent payment descriptorspkman\n+\n+    const auto provider{GetSPProvider()};\n+    CPubKey tweaked_pub{provider.sp_keys.second};\n+    tweaked_pub.TweakAdd(tweak.data());\n+    const auto spk = GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey{tweaked_pub}});\n+    m_map_spk_tweaks.emplace(spk, tweak);\n+    m_storage.TopUpCallback({spk}, this);\n+    return batch.WriteSilentPaymentsTweak(GetID(), tweak);\n+}\n+\n+FlatSigningProvider SilentPaymentDescriptorScriptPubKeyMan::GetSPProvider() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+    FlatSigningProvider tmp;\n+    m_wallet_descriptor.descriptor->ExpandPrivate(0, provider, tmp);\n+    return tmp;\n+}",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 151,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can likely be removed if we have custom methods for storing scan/spend pubkey data, or custom methods for getting them.",
      "created_at": "2025-07-15T15:11:54Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207796367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207796367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1777,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207805827",
      "pull_request_review_id": 3020599518,
      "id": 2207805827,
      "node_id": "PRRC_kwDOABII586DmHGD",
      "diff_hunk": "@@ -62,6 +62,12 @@ class FoundBlock\n     //! Read block data from disk. If the block exists but doesn't have data\n     //! (for example due to pruning), the CBlock variable will be set to null.\n     FoundBlock& data(CBlock& data) { m_data = &data; return *this; }\n+    //! Read block's undo data from disk.",
      "path": "src/interfaces/chain.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "fc6552281265312a5552b9e9ed0111725f5dbf09",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This commit is quite long, making it difficult to focus on the main thing which is the scanning logic. I'd suggest breaking out smaller commits for just the mempool related changes, and just the undoblock related changes. Possibly more, but will need to dig into the commit a bit more.",
      "created_at": "2025-07-15T15:14:36Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207805827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207805827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207809025",
      "pull_request_review_id": 3020599518,
      "id": 2207809025,
      "node_id": "PRRC_kwDOABII586DmH4B",
      "diff_hunk": "@@ -1464,9 +1466,30 @@ void CWallet::blockConnected(ChainstateRole role, const interfaces::BlockInfo& b\n     // Uses chain max time and twice the grace period to adjust time for block time variability.\n     if (block.chain_time_max < m_birth_time.load() - (TIMESTAMP_WINDOW * 2)) return;\n \n+    // Retrieve the undo data from disk\n+    // Although BlockInfo has a field for the undo data, it actually is not provided by blockConnected,\n+    // so we need to pull it up from disk.\n+    // Since blocks with only one tx do not have any relevant undo data, we can avoid unnecessary disk I/O\n+    // by skipping this step for those blocks.\n+    CBlockUndo block_undo;\n+    if (block.data->vtx.size() > 0 && IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENTS)) {\n+        chain().findBlock(block.hash, FoundBlock().undoData(block_undo));\n+    }\n+\n     // Scan block\n     bool wallet_updated = false;\n     for (size_t index = 0; index < block.data->vtx.size(); index++) {\n+        CTransactionRef tx{block.data->vtx.at(index)};",
      "path": "src/wallet/wallet.cpp",
      "position": 1,
      "original_position": 80,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "fc6552281265312a5552b9e9ed0111725f5dbf09",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we need the `CTransactionRef` here, as opposed to just operating on `block.data->vtx` directly? ",
      "created_at": "2025-07-15T15:15:54Z",
      "updated_at": "2025-07-15T15:19:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2207809025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207809025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2209598289",
      "pull_request_review_id": 3023664064,
      "id": 2209598289,
      "node_id": "PRRC_kwDOABII586Ds8tR",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};\n+\n+    // Populate m_map_label_tweaks\n+    auto change_label_data = bip352::CreateLabelTweak(provider.sp_keys.first, 0);\n+    m_map_label_tweaks.insert(change_label_data);\n+    for (int i = 1; i < m_wallet_descriptor.next_index; i++) {\n+        // Add the other generated labelled destinations\n+        m_map_label_tweaks.insert(bip352::CreateLabelTweak(provider.sp_keys.first, i));\n+    }\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal)\n+{\n+    if (!DescriptorScriptPubKeyMan::SetupDescriptorGeneration(batch, master_key, addr_type, internal)) return false;\n+    PopulateLabelTweaks();\n+    return true;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewDestination(const OutputType type)\n+{\n+    LOCK(cs_desc_man);\n+    if (type != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Requested Type is not Silent Payment\");\n+    }\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    CTxDestination dest{main_dest};\n+    return dest;\n+}\n+\n+V0SilentPaymentDestination SilentPaymentDescriptorScriptPubKeyMan::GetLabeledDestination(uint64_t index)\n+{\n+    AssertLockHeld(cs_desc_man);\n+\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    // Generate label tweak\n+    auto label_data = bip352::CreateLabelTweak(provider.sp_keys.first, index);\n+    m_map_label_tweaks.insert(label_data);\n+    V0SilentPaymentDestination label_dest = bip352::GenerateSilentPaymentLabeledAddress(main_dest, label_data.second);\n+    return label_dest;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewLabeledDestination(uint64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    auto dest = GetLabeledDestination(m_wallet_descriptor.next_index);\n+    index = m_wallet_descriptor.next_index; // Return the index for this destination\n+    m_wallet_descriptor.next_index++;\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    return CTxDestination{dest};\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    if (m_map_spk_tweaks.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const std::vector<XOnlyPubKey>& output_keys, const bip352::PublicData& public_data)\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        return ISMINE_NO;\n+    }\n+\n+    const auto provider{GetSPProvider()};\n+    auto tweaks{bip352::ScanForSilentPaymentOutputs(\n+        provider.sp_keys.first, public_data, provider.sp_keys.second, output_keys, m_map_label_tweaks)};\n+    if (!tweaks.has_value()) {\n+        return ISMINE_NO;\n+    }\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot start db transaction wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    for (const auto& tweak : *tweaks) {\n+        if (!TopUpWithDB(batch, tweak.tweak)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing tweak failed\");\n+        }\n+    }\n+    if (!batch.TxnCommit()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    return ISMINE_SPENDABLE;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    // Destination at index 0 is the change destination\n+    auto op_dest = GetLabeledDestination(0);\n+    return CTxDestination{op_dest};\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUp(const uint256& tweak)\n+{\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) return false;\n+    bool res = TopUpWithDB(batch, tweak);\n+    if (!batch.TxnCommit()) throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    return res;\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUpWithDB(WalletBatch& batch, const uint256& tweak)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 129,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": 2207792955,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Worth mentioning, the only reason we wouldn't be able to do this is if this function (and `TopUp`) are called generically on SPKMans, e.g., in a loop. I don't think this is the case, but wanted to mention it.",
      "created_at": "2025-07-16T08:00:26Z",
      "updated_at": "2025-07-16T08:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2209598289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2209598289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1789,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2209852968",
      "pull_request_review_id": 3024068833,
      "id": 2209852968,
      "node_id": "PRRC_kwDOABII586Dt64o",
      "diff_hunk": "@@ -2120,6 +2120,10 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n             error = \"Address is not valid\";\n             return {};\n         }\n+        if (std::holds_alternative<V0SilentPaymentDestination>(dest)) {",
      "path": "src/script/descriptor.cpp",
      "position": 235,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "4cecb017071c0ce182ff8708212471e60adb8a86",
      "in_reply_to_id": 2207717440,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Cherry-picked this commit into https://github.com/bitcoin/bitcoin/pull/28201/commits/b94934e089e70b478ea6aa535098586fedb5a12d, in #28201. I added it to the commit where we enable silent payment addresses as valid addresses, at the end of the sending PR.",
      "created_at": "2025-07-16T09:55:07Z",
      "updated_at": "2025-07-16T09:55:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2209852968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2209852968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2488,
      "original_line": 2488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217563506",
      "pull_request_review_id": 3035704852,
      "id": 2217563506,
      "node_id": "PRRC_kwDOABII586ELVVy",
      "diff_hunk": "@@ -1422,16 +1422,78 @@ class RawTRDescriptor final : public DescriptorImpl\n     }\n };\n \n+/** A parsed sp(...) descriptor */\n+class SpDescriptor final : public DescriptorImpl\n+{\n+    CKey m_scan_key;\n+\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, std::span<const CScript>, FlatSigningProvider&) const override { return std::vector<CScript>(); }\n+\n+public:\n+    SpDescriptor(std::unique_ptr<PubkeyProvider> scan_pubkey, std::unique_ptr<PubkeyProvider> spend_key, CKey scan_key) : DescriptorImpl(Vector(std::move(scan_pubkey), std::move(spend_key)), \"sp\"), m_scan_key(scan_key) {};\n+\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::SILENT_PAYMENTS; }\n+\n+    bool IsSingleType() const final { return true; }\n+\n+    bool IsSolvable() const override { return false; }\n+\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const override\n+    {\n+        auto scan_key{m_pubkey_args.at(0)->ToPrivateString(m_scan_key)};\n+        assert(scan_key.has_value());\n+        std::string ret{m_name + \"(\" + *scan_key + \",\"};\n+        auto& spend_pubkey{m_pubkey_args.at(1)};\n+        std::string tmp;\n+        switch (type) {\n+        case StringType::NORMALIZED:\n+            if (!spend_pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n+            break;\n+        case StringType::PRIVATE:\n+            if (!spend_pubkey->ToPrivateString(*arg, tmp)) return false;\n+            break;\n+        case StringType::PUBLIC:\n+            tmp = spend_pubkey->ToString();\n+            break;\n+        case StringType::COMPAT:\n+            tmp = spend_pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+            break;\n+        }\n+        out = std::move(ret) + std::move(tmp) + \")\";\n+        return true;\n+    }\n+\n+    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const override\n+    {\n+        FlatSigningProvider tmp;\n+        auto spend_pubkey{m_pubkey_args.at(1)->GetPubKey(0, provider, tmp)};\n+        m_pubkey_args.at(1)->GetPrivKey(0, provider, tmp);\n+\n+        assert(spend_pubkey.has_value());\n+        out.sp_keys = std::make_pair(m_scan_key, *spend_pubkey);\n+\n+        auto it{tmp.keys.find(spend_pubkey->GetID())};\n+        if (it != tmp.keys.end()) out.keys.emplace(spend_pubkey->GetID(), it->second);",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 65,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": 2207679341,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Without `sp_keys`, the wallet can't identify which keys are scan and spend keys from the signing provider. Do you have an alternative approach in mind?",
      "created_at": "2025-07-20T04:31:24Z",
      "updated_at": "2025-07-20T08:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217563506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217563506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1474,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1698,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217567798",
      "pull_request_review_id": 3035712379,
      "id": 2217567798,
      "node_id": "PRRC_kwDOABII586ELWY2",
      "diff_hunk": "@@ -1422,16 +1422,78 @@ class RawTRDescriptor final : public DescriptorImpl\n     }\n };\n \n+/** A parsed sp(...) descriptor */\n+class SpDescriptor final : public DescriptorImpl\n+{\n+    CKey m_scan_key;\n+\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, std::span<const CScript>, FlatSigningProvider&) const override { return std::vector<CScript>(); }\n+\n+public:\n+    SpDescriptor(std::unique_ptr<PubkeyProvider> scan_pubkey, std::unique_ptr<PubkeyProvider> spend_key, CKey scan_key) : DescriptorImpl(Vector(std::move(scan_pubkey), std::move(spend_key)), \"sp\"), m_scan_key(scan_key) {};\n+\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::SILENT_PAYMENTS; }\n+\n+    bool IsSingleType() const final { return true; }",
      "path": "src/script/descriptor.cpp",
      "position": 67,
      "original_position": 26,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": 2207029910,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-20T04:48:27Z",
      "updated_at": "2025-07-20T04:48:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217567798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217567798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1661,
      "original_line": 1661,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217567956",
      "pull_request_review_id": 3035713004,
      "id": 2217567956,
      "node_id": "PRRC_kwDOABII586ELWbU",
      "diff_hunk": "@@ -1422,16 +1422,78 @@ class RawTRDescriptor final : public DescriptorImpl\n     }\n };\n \n+/** A parsed sp(...) descriptor */\n+class SpDescriptor final : public DescriptorImpl\n+{\n+    CKey m_scan_key;\n+\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, std::span<const CScript>, FlatSigningProvider&) const override { return std::vector<CScript>(); }\n+\n+public:\n+    SpDescriptor(std::unique_ptr<PubkeyProvider> scan_pubkey, std::unique_ptr<PubkeyProvider> spend_key, CKey scan_key) : DescriptorImpl(Vector(std::move(scan_pubkey), std::move(spend_key)), \"sp\"), m_scan_key(scan_key) {};\n+\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::SILENT_PAYMENTS; }\n+\n+    bool IsSingleType() const final { return true; }\n+\n+    bool IsSolvable() const override { return false; }\n+\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const override\n+    {\n+        auto scan_key{m_pubkey_args.at(0)->ToPrivateString(m_scan_key)};\n+        assert(scan_key.has_value());\n+        std::string ret{m_name + \"(\" + *scan_key + \",\"};\n+        auto& spend_pubkey{m_pubkey_args.at(1)};\n+        std::string tmp;\n+        switch (type) {\n+        case StringType::NORMALIZED:\n+            if (!spend_pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n+            break;\n+        case StringType::PRIVATE:\n+            if (!spend_pubkey->ToPrivateString(*arg, tmp)) return false;\n+            break;\n+        case StringType::PUBLIC:\n+            tmp = spend_pubkey->ToString();\n+            break;\n+        case StringType::COMPAT:\n+            tmp = spend_pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+            break;\n+        }\n+        out = std::move(ret) + std::move(tmp) + \")\";\n+        return true;\n+    }\n+\n+    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const override\n+    {\n+        FlatSigningProvider tmp;\n+        auto spend_pubkey{m_pubkey_args.at(1)->GetPubKey(0, provider, tmp)};\n+        m_pubkey_args.at(1)->GetPrivKey(0, provider, tmp);\n+\n+        assert(spend_pubkey.has_value());\n+        out.sp_keys = std::make_pair(m_scan_key, *spend_pubkey);\n+\n+        auto it{tmp.keys.find(spend_pubkey->GetID())};\n+        if (it != tmp.keys.end()) out.keys.emplace(spend_pubkey->GetID(), it->second);\n+    }\n+\n+    std::unique_ptr<DescriptorImpl> Clone() const override\n+    {\n+        return std::make_unique<SpDescriptor>(m_pubkey_args.at(0)->Clone(), m_pubkey_args.at(1)->Clone(), m_scan_key);\n+    }\n+};\n+\n ////////////////////////////////////////////////////////////////////////////\n // Parser                                                                 //\n ////////////////////////////////////////////////////////////////////////////\n \n enum class ParseScriptContext {\n-    TOP,     //!< Top-level context (script goes directly in scriptPubKey)\n-    P2SH,    //!< Inside sh() (script becomes P2SH redeemScript)\n-    P2WPKH,  //!< Inside wpkh() (no script, pubkey only)\n-    P2WSH,   //!< Inside wsh() (script becomes v0 witness script)\n-    P2TR,    //!< Inside tr() (either internal key, or BIP342 script leaf)",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 83,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": 2207692663,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-07-20T04:48:49Z",
      "updated_at": "2025-07-20T04:48:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217567956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217567956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1430,
      "start_side": "LEFT",
      "line": null,
      "original_line": 1614,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217568207",
      "pull_request_review_id": 3035713403,
      "id": 2217568207,
      "node_id": "PRRC_kwDOABII586ELWfP",
      "diff_hunk": "@@ -481,7 +481,7 @@ BOOST_FIXTURE_TEST_CASE(BasicOutputTypesTest, ListCoinsTest)\n     //   2. One UTXO from the change, due to payment address matching logic\n \n     for (const auto& out_type : OUTPUT_TYPES) {\n-        if (out_type == OutputType::UNKNOWN) continue;\n+        if (out_type == OutputType::UNKNOWN || out_type == OutputType::SILENT_PAYMENTS) continue;",
      "path": "src/wallet/test/wallet_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": 2207706177,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-20T04:49:32Z",
      "updated_at": "2025-07-20T04:49:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217568207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217568207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 484,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217568262",
      "pull_request_review_id": 3035713445,
      "id": 2217568262,
      "node_id": "PRRC_kwDOABII586ELWgG",
      "diff_hunk": "@@ -3523,6 +3523,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans(WalletBatch& batch, const CExtKey&\n     AssertLockHeld(cs_wallet);\n     for (bool internal : {false, true}) {\n         for (OutputType t : OUTPUT_TYPES) {\n+            if (t == OutputType::SILENT_PAYMENTS) continue;",
      "path": "src/wallet/wallet.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": 2207706515,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-20T04:49:43Z",
      "updated_at": "2025-07-20T04:49:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217568262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217568262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217568307",
      "pull_request_review_id": 3035713503,
      "id": 2217568307,
      "node_id": "PRRC_kwDOABII586ELWgz",
      "diff_hunk": "@@ -2120,6 +2120,10 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n             error = \"Address is not valid\";\n             return {};\n         }\n+        if (std::holds_alternative<V0SilentPaymentDestination>(dest)) {",
      "path": "src/script/descriptor.cpp",
      "position": 235,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "4cecb017071c0ce182ff8708212471e60adb8a86",
      "in_reply_to_id": 2207717440,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've dropped this commit from this branch.",
      "created_at": "2025-07-20T04:50:10Z",
      "updated_at": "2025-07-20T04:50:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217568307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217568307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2488,
      "original_line": 2488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217568482",
      "pull_request_review_id": 3035713616,
      "id": 2217568482,
      "node_id": "PRRC_kwDOABII586ELWji",
      "diff_hunk": "@@ -18,6 +18,7 @@ static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n static const std::string OUTPUT_TYPE_STRING_BECH32M = \"bech32m\";\n+static const std::string OUTPUT_TYPE_STRING_SILENT_PAYMENTS = \"silent-payments\";",
      "path": "src/outputtype.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": 2207664427,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-20T04:50:54Z",
      "updated_at": "2025-07-20T04:50:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217568482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217568482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 21,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217570563",
      "pull_request_review_id": 3035716432,
      "id": 2217570563,
      "node_id": "PRRC_kwDOABII586ELXED",
      "diff_hunk": "@@ -166,6 +166,13 @@ void CKey::MakeNewKey(bool fCompressedIn) {\n     fCompressed = fCompressedIn;\n }\n \n+bool CKey::TweakAdd(const unsigned char* tweak32)",
      "path": "src/key.cpp",
      "position": 13,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "5d5214b6c16a885ad6920702ce88dc6697fb9ea4",
      "in_reply_to_id": 2207755915,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe they deserve their own PR?",
      "created_at": "2025-07-20T05:02:00Z",
      "updated_at": "2025-07-20T05:02:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217570563",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217570563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217570887",
      "pull_request_review_id": 3035717261,
      "id": 2217570887,
      "node_id": "PRRC_kwDOABII586ELXJH",
      "diff_hunk": "@@ -73,28 +75,41 @@ WalletDescriptor GenerateWalletDescriptor(const CExtPubKey& master_key, const Ou\n         desc_prefix = \"tr(\" + xpub + \"/86h\";\n         break;\n     }\n+    case OutputType::SILENT_PAYMENTS: {\n+        // The actual scan and spend keys will be derived from these XPRIVs\n+        // The actual XPRIV and the spend key will not be retained in the descriptor,\n+        // but the scan key will be.\n+        desc_str = \"sp(\" + xpriv + \"/352h/0h/0h/1h/0,\" + xpriv + \"/352h/0h/0h/0h/0)\";",
      "path": "src/wallet/walletutil.cpp",
      "position": 1,
      "original_position": 26,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "eb1196a5b8315454f1f59e814b6748a3200ccd73",
      "in_reply_to_id": 2207735327,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Don't we need to derive the scan and spend keys?",
      "created_at": "2025-07-20T05:03:35Z",
      "updated_at": "2025-07-20T05:03:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217570887",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217570887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217571215",
      "pull_request_review_id": 3035717843,
      "id": 2217571215,
      "node_id": "PRRC_kwDOABII586ELXOP",
      "diff_hunk": "@@ -73,28 +75,41 @@ WalletDescriptor GenerateWalletDescriptor(const CExtPubKey& master_key, const Ou\n         desc_prefix = \"tr(\" + xpub + \"/86h\";\n         break;\n     }\n+    case OutputType::SILENT_PAYMENTS: {\n+        // The actual scan and spend keys will be derived from these XPRIVs\n+        // The actual XPRIV and the spend key will not be retained in the descriptor,\n+        // but the scan key will be.\n+        desc_str = \"sp(\" + xpriv + \"/352h/0h/0h/1h/0,\" + xpriv + \"/352h/0h/0h/0h/0)\";\n+        break;\n+    }\n     case OutputType::UNKNOWN: {\n         // We should never have a DescriptorScriptPubKeyMan for an UNKNOWN OutputType,\n         // so if we get to this point something is wrong\n         assert(false);\n     }\n     } // no default case, so the compiler can warn about missing cases\n-    assert(!desc_prefix.empty());\n+    assert(!desc_str.empty() || !desc_prefix.empty());",
      "path": "src/wallet/walletutil.cpp",
      "position": 48,
      "original_position": 36,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "eb1196a5b8315454f1f59e814b6748a3200ccd73",
      "in_reply_to_id": 2207737007,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In the `OutputType::SILENT_PAYMENTS` case, I set the `desc_str`, not the `desc_prefix`; I have to modify the `assert` to prevent a failure.",
      "created_at": "2025-07-20T05:06:18Z",
      "updated_at": "2025-07-20T05:06:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217571215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217571215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217572750",
      "pull_request_review_id": 3035719558,
      "id": 2217572750,
      "node_id": "PRRC_kwDOABII586ELXmO",
      "diff_hunk": "@@ -73,28 +75,41 @@ WalletDescriptor GenerateWalletDescriptor(const CExtPubKey& master_key, const Ou\n         desc_prefix = \"tr(\" + xpub + \"/86h\";\n         break;\n     }\n+    case OutputType::SILENT_PAYMENTS: {\n+        // The actual scan and spend keys will be derived from these XPRIVs\n+        // The actual XPRIV and the spend key will not be retained in the descriptor,\n+        // but the scan key will be.\n+        desc_str = \"sp(\" + xpriv + \"/352h/0h/0h/1h/0,\" + xpriv + \"/352h/0h/0h/0h/0)\";\n+        break;\n+    }\n     case OutputType::UNKNOWN: {\n         // We should never have a DescriptorScriptPubKeyMan for an UNKNOWN OutputType,\n         // so if we get to this point something is wrong\n         assert(false);\n     }\n     } // no default case, so the compiler can warn about missing cases\n-    assert(!desc_prefix.empty());\n+    assert(!desc_str.empty() || !desc_prefix.empty());\n \n-    // Mainnet derives at 0', testnet and regtest derive at 1'\n-    if (Params().IsTestChain()) {\n-        desc_prefix += \"/1h\";\n-    } else {\n-        desc_prefix += \"/0h\";\n-    }\n+    if (desc_str.empty()) {\n+        // Mainnet derives at 0', testnet and regtest derive at 1'\n+        if (Params().IsTestChain()) {\n+            desc_prefix += \"/1h\";\n+        } else {\n+            desc_prefix += \"/0h\";\n+        }\n \n-    std::string internal_path = internal ? \"/1\" : \"/0\";\n-    std::string desc_str = desc_prefix + \"/0h\" + internal_path + desc_suffix;\n+        std::string internal_path = internal ? \"/1\" : \"/0\";\n+        desc_str = desc_prefix + \"/0h\" + internal_path + desc_suffix;\n+    }\n \n     // Make the descriptor\n     FlatSigningProvider keys;\n     std::string error;\n     std::vector<std::unique_ptr<Descriptor>> desc = Parse(desc_str, keys, error, false);\n+    for (const auto& key : keys.keys) {\n+        out_keys.push_back(std::move(key.second));",
      "path": "src/wallet/walletutil.cpp",
      "position": 1,
      "original_position": 63,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "eb1196a5b8315454f1f59e814b6748a3200ccd73",
      "in_reply_to_id": 2207750518,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The derived spend private key must be saved to the DB by the wallet.\r\n\r\nWe can avoid this by doing what other descriptors do; the sp descriptor will then be in this form `sp(xpriv/352h/0h/0h/1h/0,xpub/352h/0h/0h/0h/0)` . The `Parse` function will then derive the scan key and save it in the descriptor. The spend key can be derived later when needed from the master key.\r\n\r\nWith this alternative method, the wallet only saves the master key to DB as it has always done.",
      "created_at": "2025-07-20T05:16:25Z",
      "updated_at": "2025-07-20T05:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217572750",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217572750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217573106",
      "pull_request_review_id": 3035719879,
      "id": 2217573106,
      "node_id": "PRRC_kwDOABII586ELXry",
      "diff_hunk": "@@ -1464,9 +1466,30 @@ void CWallet::blockConnected(ChainstateRole role, const interfaces::BlockInfo& b\n     // Uses chain max time and twice the grace period to adjust time for block time variability.\n     if (block.chain_time_max < m_birth_time.load() - (TIMESTAMP_WINDOW * 2)) return;\n \n+    // Retrieve the undo data from disk\n+    // Although BlockInfo has a field for the undo data, it actually is not provided by blockConnected,\n+    // so we need to pull it up from disk.\n+    // Since blocks with only one tx do not have any relevant undo data, we can avoid unnecessary disk I/O\n+    // by skipping this step for those blocks.\n+    CBlockUndo block_undo;\n+    if (block.data->vtx.size() > 0 && IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENTS)) {\n+        chain().findBlock(block.hash, FoundBlock().undoData(block_undo));\n+    }\n+\n     // Scan block\n     bool wallet_updated = false;\n     for (size_t index = 0; index < block.data->vtx.size(); index++) {\n+        CTransactionRef tx{block.data->vtx.at(index)};",
      "path": "src/wallet/wallet.cpp",
      "position": 1,
      "original_position": 80,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "fc6552281265312a5552b9e9ed0111725f5dbf09",
      "in_reply_to_id": 2207809025,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We only use the reference once, so it's not needed. I'll take this out as I retouch.",
      "created_at": "2025-07-20T05:19:10Z",
      "updated_at": "2025-07-20T05:19:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217573106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217573106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217694773",
      "pull_request_review_id": 3035891048,
      "id": 2217694773,
      "node_id": "PRRC_kwDOABII586EL1Y1",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};\n+\n+    // Populate m_map_label_tweaks\n+    auto change_label_data = bip352::CreateLabelTweak(provider.sp_keys.first, 0);\n+    m_map_label_tweaks.insert(change_label_data);\n+    for (int i = 1; i < m_wallet_descriptor.next_index; i++) {\n+        // Add the other generated labelled destinations\n+        m_map_label_tweaks.insert(bip352::CreateLabelTweak(provider.sp_keys.first, i));\n+    }\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal)\n+{\n+    if (!DescriptorScriptPubKeyMan::SetupDescriptorGeneration(batch, master_key, addr_type, internal)) return false;\n+    PopulateLabelTweaks();\n+    return true;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewDestination(const OutputType type)\n+{\n+    LOCK(cs_desc_man);\n+    if (type != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Requested Type is not Silent Payment\");\n+    }\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    CTxDestination dest{main_dest};\n+    return dest;\n+}\n+\n+V0SilentPaymentDestination SilentPaymentDescriptorScriptPubKeyMan::GetLabeledDestination(uint64_t index)\n+{\n+    AssertLockHeld(cs_desc_man);\n+\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    // Generate label tweak\n+    auto label_data = bip352::CreateLabelTweak(provider.sp_keys.first, index);\n+    m_map_label_tweaks.insert(label_data);\n+    V0SilentPaymentDestination label_dest = bip352::GenerateSilentPaymentLabeledAddress(main_dest, label_data.second);\n+    return label_dest;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewLabeledDestination(uint64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    auto dest = GetLabeledDestination(m_wallet_descriptor.next_index);\n+    index = m_wallet_descriptor.next_index; // Return the index for this destination\n+    m_wallet_descriptor.next_index++;\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    return CTxDestination{dest};\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    if (m_map_spk_tweaks.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const std::vector<XOnlyPubKey>& output_keys, const bip352::PublicData& public_data)\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        return ISMINE_NO;\n+    }\n+\n+    const auto provider{GetSPProvider()};\n+    auto tweaks{bip352::ScanForSilentPaymentOutputs(\n+        provider.sp_keys.first, public_data, provider.sp_keys.second, output_keys, m_map_label_tweaks)};\n+    if (!tweaks.has_value()) {\n+        return ISMINE_NO;\n+    }\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot start db transaction wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    for (const auto& tweak : *tweaks) {\n+        if (!TopUpWithDB(batch, tweak.tweak)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing tweak failed\");\n+        }\n+    }\n+    if (!batch.TxnCommit()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    return ISMINE_SPENDABLE;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    // Destination at index 0 is the change destination\n+    auto op_dest = GetLabeledDestination(0);\n+    return CTxDestination{op_dest};\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUp(const uint256& tweak)\n+{\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) return false;\n+    bool res = TopUpWithDB(batch, tweak);\n+    if (!batch.TxnCommit()) throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    return res;\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUpWithDB(WalletBatch& batch, const uint256& tweak)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 129,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": 2207792955,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated",
      "created_at": "2025-07-20T08:17:17Z",
      "updated_at": "2025-07-20T08:17:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217694773",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217694773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1789,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217694788",
      "pull_request_review_id": 3035891074,
      "id": 2217694788,
      "node_id": "PRRC_kwDOABII586EL1ZE",
      "diff_hunk": "@@ -1635,4 +1635,212 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+\n+SilentPaymentDescriptorScriptPubKeyMan::SilentPaymentDescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    : DescriptorScriptPubKeyMan(storage, descriptor, 0)\n+{\n+    PopulateLabelTweaks();\n+}\n+\n+void SilentPaymentDescriptorScriptPubKeyMan::PopulateLabelTweaks()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": descriptor is not a Silent Payment Descriptor\");\n+    }\n+    const auto provider{GetSPProvider()};\n+\n+    // Populate m_map_label_tweaks\n+    auto change_label_data = bip352::CreateLabelTweak(provider.sp_keys.first, 0);\n+    m_map_label_tweaks.insert(change_label_data);\n+    for (int i = 1; i < m_wallet_descriptor.next_index; i++) {\n+        // Add the other generated labelled destinations\n+        m_map_label_tweaks.insert(bip352::CreateLabelTweak(provider.sp_keys.first, i));\n+    }\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal)\n+{\n+    if (!DescriptorScriptPubKeyMan::SetupDescriptorGeneration(batch, master_key, addr_type, internal)) return false;\n+    PopulateLabelTweaks();\n+    return true;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewDestination(const OutputType type)\n+{\n+    LOCK(cs_desc_man);\n+    if (type != OutputType::SILENT_PAYMENTS) {\n+        throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Requested Type is not Silent Payment\");\n+    }\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    CTxDestination dest{main_dest};\n+    return dest;\n+}\n+\n+V0SilentPaymentDestination SilentPaymentDescriptorScriptPubKeyMan::GetLabeledDestination(uint64_t index)\n+{\n+    AssertLockHeld(cs_desc_man);\n+\n+    const auto provider{GetSPProvider()};\n+    V0SilentPaymentDestination main_dest;\n+    main_dest.m_scan_pubkey = provider.sp_keys.first.GetPubKey();\n+    main_dest.m_spend_pubkey = provider.sp_keys.second;\n+    // Generate label tweak\n+    auto label_data = bip352::CreateLabelTweak(provider.sp_keys.first, index);\n+    m_map_label_tweaks.insert(label_data);\n+    V0SilentPaymentDestination label_dest = bip352::GenerateSilentPaymentLabeledAddress(main_dest, label_data.second);\n+    return label_dest;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetNewLabeledDestination(uint64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    auto dest = GetLabeledDestination(m_wallet_descriptor.next_index);\n+    index = m_wallet_descriptor.next_index; // Return the index for this destination\n+    m_wallet_descriptor.next_index++;\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    return CTxDestination{dest};\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    if (m_map_spk_tweaks.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+isminetype SilentPaymentDescriptorScriptPubKeyMan::IsMine(const std::vector<XOnlyPubKey>& output_keys, const bip352::PublicData& public_data)\n+{\n+    LOCK(cs_desc_man);\n+    if (m_wallet_descriptor.descriptor->GetOutputType() != OutputType::SILENT_PAYMENTS) {\n+        return ISMINE_NO;\n+    }\n+\n+    const auto provider{GetSPProvider()};\n+    auto tweaks{bip352::ScanForSilentPaymentOutputs(\n+        provider.sp_keys.first, public_data, provider.sp_keys.second, output_keys, m_map_label_tweaks)};\n+    if (!tweaks.has_value()) {\n+        return ISMINE_NO;\n+    }\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.TxnBegin()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot start db transaction wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    for (const auto& tweak : *tweaks) {\n+        if (!TopUpWithDB(batch, tweak.tweak)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing tweak failed\");\n+        }\n+    }\n+    if (!batch.TxnCommit()) {\n+        throw std::runtime_error(strprintf(\"Error during descriptors tweak top up. Cannot commit changes for wallet %s\", m_storage.GetDisplayName()));\n+    }\n+    return ISMINE_SPENDABLE;\n+}\n+\n+util::Result<CTxDestination> SilentPaymentDescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index)\n+{\n+    LOCK(cs_desc_man);\n+    // Destination at index 0 is the change destination\n+    auto op_dest = GetLabeledDestination(0);\n+    return CTxDestination{op_dest};\n+}\n+\n+bool SilentPaymentDescriptorScriptPubKeyMan::TopUp(const uint256& tweak)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1,
      "original_position": 120,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "0be7ce20f417a0741fa1a47863daa30f40fbf53a",
      "in_reply_to_id": 2207788108,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated",
      "created_at": "2025-07-20T08:17:23Z",
      "updated_at": "2025-07-20T08:17:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217694788",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217694788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217694846",
      "pull_request_review_id": 3035891163,
      "id": 2217694846,
      "node_id": "PRRC_kwDOABII586EL1Z-",
      "diff_hunk": "@@ -62,6 +62,12 @@ class FoundBlock\n     //! Read block data from disk. If the block exists but doesn't have data\n     //! (for example due to pruning), the CBlock variable will be set to null.\n     FoundBlock& data(CBlock& data) { m_data = &data; return *this; }\n+    //! Read block's undo data from disk.",
      "path": "src/interfaces/chain.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "fc6552281265312a5552b9e9ed0111725f5dbf09",
      "in_reply_to_id": 2207805827,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I broke this into 3 commits.",
      "created_at": "2025-07-20T08:17:40Z",
      "updated_at": "2025-07-20T08:17:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217694846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217694846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217695331",
      "pull_request_review_id": 3035892060,
      "id": 2217695331,
      "node_id": "PRRC_kwDOABII586EL1hj",
      "diff_hunk": "@@ -1464,9 +1466,30 @@ void CWallet::blockConnected(ChainstateRole role, const interfaces::BlockInfo& b\n     // Uses chain max time and twice the grace period to adjust time for block time variability.\n     if (block.chain_time_max < m_birth_time.load() - (TIMESTAMP_WINDOW * 2)) return;\n \n+    // Retrieve the undo data from disk\n+    // Although BlockInfo has a field for the undo data, it actually is not provided by blockConnected,\n+    // so we need to pull it up from disk.\n+    // Since blocks with only one tx do not have any relevant undo data, we can avoid unnecessary disk I/O\n+    // by skipping this step for those blocks.\n+    CBlockUndo block_undo;\n+    if (block.data->vtx.size() > 0 && IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENTS)) {\n+        chain().findBlock(block.hash, FoundBlock().undoData(block_undo));\n+    }\n+\n     // Scan block\n     bool wallet_updated = false;\n     for (size_t index = 0; index < block.data->vtx.size(); index++) {\n+        CTransactionRef tx{block.data->vtx.at(index)};",
      "path": "src/wallet/wallet.cpp",
      "position": 1,
      "original_position": 80,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "fc6552281265312a5552b9e9ed0111725f5dbf09",
      "in_reply_to_id": 2207809025,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I ended up leaving the reference and used it in 2 other locations. The code looks slightly cleaner this way.",
      "created_at": "2025-07-20T08:19:26Z",
      "updated_at": "2025-07-20T08:19:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2217695331",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2217695331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2218671774",
      "pull_request_review_id": 3037289235,
      "id": 2218671774,
      "node_id": "PRRC_kwDOABII586EPj6e",
      "diff_hunk": "@@ -358,6 +358,7 @@ static RPCHelpMan createwallet()\n             {\"descriptors\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"If set, must be \\\"true\\\"\"},\n             {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n             {\"external_signer\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n+            {\"silent_payments\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Enable creating and receiving with a silent payments address. Will disable fast rescans with block filters\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "89831dace9d21456eb4a019d86164304e22f458e",
      "in_reply_to_id": 2204657999,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIUC The silent payments wallet needs to scan entire blocks since it doesn't know ahead of time which `scriptPubKeys` to use in a GCS filter. Since we can't skip blocks, fast rescans shouldn't provide any advantages here.\r\n\r\nEDIT\r\nIt might also be possible to use fast rescan when importing descriptors if none of the descriptors are silent payment descriptors. Is this what you were referring to @josibake?",
      "created_at": "2025-07-21T09:43:34Z",
      "updated_at": "2025-07-21T10:51:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2218671774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2218671774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2219082048",
      "pull_request_review_id": 3037913984,
      "id": 2219082048,
      "node_id": "PRRC_kwDOABII586ERIFA",
      "diff_hunk": "@@ -358,6 +358,7 @@ static RPCHelpMan createwallet()\n             {\"descriptors\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"If set, must be \\\"true\\\"\"},\n             {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n             {\"external_signer\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n+            {\"silent_payments\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Enable creating and receiving with a silent payments address. Will disable fast rescans with block filters\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "89831dace9d21456eb4a019d86164304e22f458e",
      "in_reply_to_id": 2204657999,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The silent payments wallet needs to scan entire blocks since it doesn't know ahead of time which scriptPubKeys to use in a GCS filter.\r\n\r\nThis makes sense. Is it documented anywhere so we don't forget by the next review round? :-)\r\n\r\n> It might also be possible to use fast rescan when importing descriptors if none of the descriptors are silent payment descriptors.\r\n\r\nIt wasn't referring to that and I wouldn't worry about this. Somewhere in the RPC documentation (createwallet and/or importdescriptors) we should warn that silent payments disables fast rescan. But `-blockfilterindex` isn't on by default and so it's probably only advanced users that will run into this.",
      "created_at": "2025-07-21T12:36:41Z",
      "updated_at": "2025-07-21T12:37:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2219082048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2219082048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2219135907",
      "pull_request_review_id": 3037990074,
      "id": 2219135907,
      "node_id": "PRRC_kwDOABII586ERVOj",
      "diff_hunk": "@@ -358,6 +358,7 @@ static RPCHelpMan createwallet()\n             {\"descriptors\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"If set, must be \\\"true\\\"\"},\n             {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n             {\"external_signer\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n+            {\"silent_payments\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Enable creating and receiving with a silent payments address. Will disable fast rescans with block filters\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "89831dace9d21456eb4a019d86164304e22f458e",
      "in_reply_to_id": 2204657999,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> This makes sense. Is it documented anywhere so we don't forget by the next review round? :-)\r\n\r\nI added a separate commit that disables fast rescan and I added an explanation to the commit message. Will push soon.\r\n\r\nEDIT\r\nsee https://github.com/bitcoin/bitcoin/pull/32966/commits/82db7ccaa60a4e1dc0dac6b8f0368ff933303e39",
      "created_at": "2025-07-21T12:55:04Z",
      "updated_at": "2025-07-21T20:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2219135907",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2219135907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2221476916",
      "pull_request_review_id": 3041503851,
      "id": 2221476916,
      "node_id": "PRRC_kwDOABII586EaQw0",
      "diff_hunk": "@@ -358,6 +358,7 @@ static RPCHelpMan createwallet()\n             {\"descriptors\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"If set, must be \\\"true\\\"\"},\n             {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n             {\"external_signer\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n+            {\"silent_payments\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Enable creating and receiving with a silent payments address. Will disable fast rescans with block filters\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "89831dace9d21456eb4a019d86164304e22f458e",
      "in_reply_to_id": 2204657999,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The silent payments wallet needs to scan entire blocks since it doesn't know ahead of time which scriptPubKeys to use in a GCS filter\r\n\r\nThis is correct. I was imagining a world where we can pre-compute the scriptPubKeys, but realised we have to iterate the blocks anyways to get the tweaks so its likely faster to just check directly. In the future, if the wallet has some sort of silent payments index, then I think fast rescans would be possible (and beneficial).",
      "created_at": "2025-07-22T07:23:11Z",
      "updated_at": "2025-07-22T07:23:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2221476916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2221476916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231169665",
      "pull_request_review_id": 3055528177,
      "id": 2231169665,
      "node_id": "PRRC_kwDOABII586E_PKB",
      "diff_hunk": "@@ -147,7 +147,30 @@ def do_nothing():\n \n         self.log.info(\"Wallet persistence verified successfully\")\n \n-    def test_import_rescan(self):\n+    def test_import_descriptors(self):\n+        self.log.info(\"Check import silent payments descriptor into blank wallet\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"import_blank\", blank=True, silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"import_blank\")\n+\n+        descriptor = \"sp([eea23daf/352h/0h/0h/1h/0]cRCGWnoELVHTr9oZWz1TUp7jmdBJPS3Kx8UCaHvfpxL6KiVSHH1A,[eea23daf/352h/0h/0h/0h/0]cUxxbQ67tepsEn3AUKSCWAKrvLwP6MPk55DAptcqxqDiXN6yKkNW)#q42ue5dg\"\n+        res = wallet.importdescriptors([{\n+            \"desc\": descriptor,\n+            \"active\": True,\n+            \"next_index\": 0,",
      "path": "test/functional/wallet_silentpayments_receiving.py",
      "position": 1,
      "original_position": 15,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "5be304dfa50bcfd3b0a92eff52bac3d8023ce523",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "5be304dfa50bcfd3b0a92eff52bac3d8023ce523 nit: no need to set `next_index` during import",
      "created_at": "2025-07-25T14:03:37Z",
      "updated_at": "2025-07-25T14:09:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2231169665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231169665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231883781",
      "pull_request_review_id": 3056616801,
      "id": 2231883781,
      "node_id": "PRRC_kwDOABII586FB9gF",
      "diff_hunk": "@@ -1772,6 +1899,62 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (scan_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+        if (!Const(\",\", expr)) {\n+            error = strprintf(\"sp(): expected ',', got '%c'\", expr.size() > 0 ? expr[0] : ')');\n+            return {};\n+        }\n+        ++key_exp_index;\n+\n+        auto spend_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (spend_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+\n+        std::set<CKeyID> scan_keys_rm;\n+        for (auto& scan_pubkey : scan_pubkeys) {\n+            CKeyID scan_keyId;\n+            if (auto root_pubkey{scan_pubkey->GetRootPubKey()}) {\n+                scan_keyId = root_pubkey->GetID();\n+            } else if (auto root_extpubkey{scan_pubkey->GetRootExtPubKey()}) {\n+                scan_keyId = root_extpubkey->pubkey.GetID();\n+            }\n+            if (scan_keyId.IsNull()) {\n+                error = \"sp(): could not get scan key ID\";\n+                return {};\n+            }\n+\n+            auto it{out.keys.find(scan_keyId)};\n+            scan_keys_rm.insert(scan_keyId);\n+\n+            if (it == out.keys.end()) {\n+                error = \"sp(): requires the scan priv key\";\n+                return {};\n+            }\n+\n+            for (auto& spend_pubkey : spend_pubkeys) {\n+                ret.emplace_back(std::make_unique<SpDescriptor>(std::move(scan_pubkey), std::move(spend_pubkey), std::move(it->second)));\n+            }\n+        }\n+\n+        // Remove all scan private keys to allow\n+        // importation of sp descriptors into watch-only wallets\n+        for (auto keyId : scan_keys_rm) {\n+            out.keys.erase(keyId);\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 279,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": null,
      "user": {
        "login": "macgyver13",
        "id": 4712150,
        "node_id": "MDQ6VXNlcjQ3MTIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4712150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/macgyver13",
        "html_url": "https://github.com/macgyver13",
        "followers_url": "https://api.github.com/users/macgyver13/followers",
        "following_url": "https://api.github.com/users/macgyver13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/macgyver13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/macgyver13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/macgyver13/subscriptions",
        "organizations_url": "https://api.github.com/users/macgyver13/orgs",
        "repos_url": "https://api.github.com/users/macgyver13/repos",
        "events_url": "https://api.github.com/users/macgyver13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/macgyver13/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this change is breaking the ability to import sp descriptor with private keys defined for scan and spend\r\nThis is the warning I receive when using importdescriptors:\r\n\"Not all private keys provided. Some wallet functionality may return unexpected errors\"",
      "created_at": "2025-07-25T19:39:45Z",
      "updated_at": "2025-07-25T19:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2231883781",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231883781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1946,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231890541",
      "pull_request_review_id": 3056616801,
      "id": 2231890541,
      "node_id": "PRRC_kwDOABII586FB_Jt",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+#!/usr/bin/env python3\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class SilentPaymentsReceivingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_encrypt_and_decrypt(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted and decrypted\")\n+        self.log.info(\"Create encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_encrypted\", passphrase=\"unsigned integer\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_encrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that we can scan without the wallet being unlocked\")\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_encrypting_unencrypted(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted after creation\")\n+        self.log.info(\"Create un-encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_unencrypted\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_unencrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Add a passphrase to the wallet\")\n+        wallet.encryptwallet(passphrase=\"unsigned integer\")\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_createwallet(self):\n+        self.log.info(\"Check createwallet silent payments option\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"sp\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"non_sp\", silent_payments=False)\n+        wallet = self.nodes[0].get_wallet_rpc(\"non_sp\")\n+        assert_raises_rpc_error(-12, \"Error: No silent-payments addresses available\", wallet.getnewaddress, address_type=\"silent-payments\")\n+\n+    def test_basic(self):\n+        self.log.info(\"Basic receive and send\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"basic\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        addr_again = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr == addr_again\n+        txid = self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 10)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test change address\")\n+        change_addr = wallet.getrawchangeaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+        txid = self.def_wallet.sendtoaddress(change_addr, 5)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer is detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()))\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({change_addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer to change address is not detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()) == False)\n+\n+        wallet.sendall([self.def_wallet.getnewaddress()])\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 0)\n+\n+    def test_wallet_persistence(self):\n+        self.log.info(\"Test silent payments wallet persistence after closing and reopening\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"persistence_test\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        send_amount = 15\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        self.generate(self.nodes[0], 1)\n+\n+        # verify the wallet received the correct amount\n+        assert_equal(wallet.getbalance(), send_amount)\n+        tx = wallet.gettransaction(txid)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount)\n+        loaded_tx = wallet.gettransaction(txid)\n+        assert_equal(tx, loaded_tx)\n+\n+        self.disconnect_nodes(0, 1)\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        raw_tx = self.nodes[0].getrawtransaction(txid)\n+        def do_nothing():\n+            pass\n+        self.nodes[1].sendrawtransaction(raw_tx)\n+        self.generate(self.nodes[1], 1, sync_fun=do_nothing)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        self.connect_nodes(0, 1)\n+        self.sync_blocks()\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount * 2)\n+\n+        self.log.info(\"Wallet persistence verified successfully\")\n+\n+    def test_import_descriptors(self):\n+        self.log.info(\"Check import silent payments descriptor into blank wallet\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"import_blank\", blank=True, silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"import_blank\")\n+\n+        descriptor = \"sp([eea23daf/352h/0h/0h/1h/0]cRCGWnoELVHTr9oZWz1TUp7jmdBJPS3Kx8UCaHvfpxL6KiVSHH1A,[eea23daf/352h/0h/0h/0h/0]cUxxbQ67tepsEn3AUKSCWAKrvLwP6MPk55DAptcqxqDiXN6yKkNW)#q42ue5dg\"",
      "path": "test/functional/wallet_silentpayments_receiving.py",
      "position": 1,
      "original_position": 156,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": null,
      "user": {
        "login": "macgyver13",
        "id": 4712150,
        "node_id": "MDQ6VXNlcjQ3MTIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4712150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/macgyver13",
        "html_url": "https://github.com/macgyver13",
        "followers_url": "https://api.github.com/users/macgyver13/followers",
        "following_url": "https://api.github.com/users/macgyver13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/macgyver13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/macgyver13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/macgyver13/subscriptions",
        "organizations_url": "https://api.github.com/users/macgyver13/orgs",
        "repos_url": "https://api.github.com/users/macgyver13/repos",
        "events_url": "https://api.github.com/users/macgyver13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/macgyver13/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't the coin_type be different for regtest/signet? /352h/1h instead of /352h/0h",
      "created_at": "2025-07-25T19:44:45Z",
      "updated_at": "2025-07-25T19:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2231890541",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231890541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2233730246",
      "pull_request_review_id": 3059120432,
      "id": 2233730246,
      "node_id": "PRRC_kwDOABII586FJATG",
      "diff_hunk": "@@ -1772,6 +1899,62 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (scan_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+        if (!Const(\",\", expr)) {\n+            error = strprintf(\"sp(): expected ',', got '%c'\", expr.size() > 0 ? expr[0] : ')');\n+            return {};\n+        }\n+        ++key_exp_index;\n+\n+        auto spend_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (spend_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+\n+        std::set<CKeyID> scan_keys_rm;\n+        for (auto& scan_pubkey : scan_pubkeys) {\n+            CKeyID scan_keyId;\n+            if (auto root_pubkey{scan_pubkey->GetRootPubKey()}) {\n+                scan_keyId = root_pubkey->GetID();\n+            } else if (auto root_extpubkey{scan_pubkey->GetRootExtPubKey()}) {\n+                scan_keyId = root_extpubkey->pubkey.GetID();\n+            }\n+            if (scan_keyId.IsNull()) {\n+                error = \"sp(): could not get scan key ID\";\n+                return {};\n+            }\n+\n+            auto it{out.keys.find(scan_keyId)};\n+            scan_keys_rm.insert(scan_keyId);\n+\n+            if (it == out.keys.end()) {\n+                error = \"sp(): requires the scan priv key\";\n+                return {};\n+            }\n+\n+            for (auto& spend_pubkey : spend_pubkeys) {\n+                ret.emplace_back(std::make_unique<SpDescriptor>(std::move(scan_pubkey), std::move(spend_pubkey), std::move(it->second)));\n+            }\n+        }\n+\n+        // Remove all scan private keys to allow\n+        // importation of sp descriptors into watch-only wallets\n+        for (auto keyId : scan_keys_rm) {\n+            out.keys.erase(keyId);\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 279,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231883781,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@macgyver13  Did you use the same private key for scan and spend?",
      "created_at": "2025-07-27T05:38:20Z",
      "updated_at": "2025-07-27T05:38:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2233730246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2233730246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1946,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2234032395",
      "pull_request_review_id": 3059594273,
      "id": 2234032395,
      "node_id": "PRRC_kwDOABII586FKKEL",
      "diff_hunk": "@@ -1772,6 +1899,62 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (scan_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+        if (!Const(\",\", expr)) {\n+            error = strprintf(\"sp(): expected ',', got '%c'\", expr.size() > 0 ? expr[0] : ')');\n+            return {};\n+        }\n+        ++key_exp_index;\n+\n+        auto spend_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (spend_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+\n+        std::set<CKeyID> scan_keys_rm;\n+        for (auto& scan_pubkey : scan_pubkeys) {\n+            CKeyID scan_keyId;\n+            if (auto root_pubkey{scan_pubkey->GetRootPubKey()}) {\n+                scan_keyId = root_pubkey->GetID();\n+            } else if (auto root_extpubkey{scan_pubkey->GetRootExtPubKey()}) {\n+                scan_keyId = root_extpubkey->pubkey.GetID();\n+            }\n+            if (scan_keyId.IsNull()) {\n+                error = \"sp(): could not get scan key ID\";\n+                return {};\n+            }\n+\n+            auto it{out.keys.find(scan_keyId)};\n+            scan_keys_rm.insert(scan_keyId);\n+\n+            if (it == out.keys.end()) {\n+                error = \"sp(): requires the scan priv key\";\n+                return {};\n+            }\n+\n+            for (auto& spend_pubkey : spend_pubkeys) {\n+                ret.emplace_back(std::make_unique<SpDescriptor>(std::move(scan_pubkey), std::move(spend_pubkey), std::move(it->second)));\n+            }\n+        }\n+\n+        // Remove all scan private keys to allow\n+        // importation of sp descriptors into watch-only wallets\n+        for (auto keyId : scan_keys_rm) {\n+            out.keys.erase(keyId);\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 279,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231883781,
      "user": {
        "login": "macgyver13",
        "id": 4712150,
        "node_id": "MDQ6VXNlcjQ3MTIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4712150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/macgyver13",
        "html_url": "https://github.com/macgyver13",
        "followers_url": "https://api.github.com/users/macgyver13/followers",
        "following_url": "https://api.github.com/users/macgyver13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/macgyver13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/macgyver13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/macgyver13/subscriptions",
        "organizations_url": "https://api.github.com/users/macgyver13/orgs",
        "repos_url": "https://api.github.com/users/macgyver13/repos",
        "events_url": "https://api.github.com/users/macgyver13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/macgyver13/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is the format I used to import scan and spend private keys:\r\nsp([fingerprint/352'/1'/0'/1'/0]WIF(private scan key),[fingerprint/352'/1'/0'/0'/0]WIF(private spend key)#checksum",
      "created_at": "2025-07-27T15:32:33Z",
      "updated_at": "2025-07-27T15:32:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2234032395",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2234032395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1946,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2236729580",
      "pull_request_review_id": 3063068020,
      "id": 2236729580,
      "node_id": "PRRC_kwDOABII586FUcjs",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+#!/usr/bin/env python3\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class SilentPaymentsReceivingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_encrypt_and_decrypt(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted and decrypted\")\n+        self.log.info(\"Create encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_encrypted\", passphrase=\"unsigned integer\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_encrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that we can scan without the wallet being unlocked\")\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_encrypting_unencrypted(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted after creation\")\n+        self.log.info(\"Create un-encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_unencrypted\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_unencrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Add a passphrase to the wallet\")\n+        wallet.encryptwallet(passphrase=\"unsigned integer\")\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_createwallet(self):\n+        self.log.info(\"Check createwallet silent payments option\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"sp\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"non_sp\", silent_payments=False)\n+        wallet = self.nodes[0].get_wallet_rpc(\"non_sp\")\n+        assert_raises_rpc_error(-12, \"Error: No silent-payments addresses available\", wallet.getnewaddress, address_type=\"silent-payments\")\n+\n+    def test_basic(self):\n+        self.log.info(\"Basic receive and send\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"basic\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        addr_again = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr == addr_again\n+        txid = self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 10)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test change address\")\n+        change_addr = wallet.getrawchangeaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+        txid = self.def_wallet.sendtoaddress(change_addr, 5)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer is detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()))\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({change_addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer to change address is not detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()) == False)\n+\n+        wallet.sendall([self.def_wallet.getnewaddress()])\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 0)\n+\n+    def test_wallet_persistence(self):\n+        self.log.info(\"Test silent payments wallet persistence after closing and reopening\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"persistence_test\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        send_amount = 15\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        self.generate(self.nodes[0], 1)\n+\n+        # verify the wallet received the correct amount\n+        assert_equal(wallet.getbalance(), send_amount)\n+        tx = wallet.gettransaction(txid)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount)\n+        loaded_tx = wallet.gettransaction(txid)\n+        assert_equal(tx, loaded_tx)\n+\n+        self.disconnect_nodes(0, 1)\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        raw_tx = self.nodes[0].getrawtransaction(txid)\n+        def do_nothing():\n+            pass\n+        self.nodes[1].sendrawtransaction(raw_tx)\n+        self.generate(self.nodes[1], 1, sync_fun=do_nothing)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        self.connect_nodes(0, 1)\n+        self.sync_blocks()\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount * 2)\n+\n+        self.log.info(\"Wallet persistence verified successfully\")\n+\n+    def test_import_descriptors(self):\n+        self.log.info(\"Check import silent payments descriptor into blank wallet\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"import_blank\", blank=True, silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"import_blank\")\n+\n+        descriptor = \"sp([eea23daf/352h/0h/0h/1h/0]cRCGWnoELVHTr9oZWz1TUp7jmdBJPS3Kx8UCaHvfpxL6KiVSHH1A,[eea23daf/352h/0h/0h/0h/0]cUxxbQ67tepsEn3AUKSCWAKrvLwP6MPk55DAptcqxqDiXN6yKkNW)#q42ue5dg\"",
      "path": "test/functional/wallet_silentpayments_receiving.py",
      "position": 1,
      "original_position": 156,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231890541,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "User descriptor keys do not follow any derivation specification. They can import descriptors with keys derived using any path.",
      "created_at": "2025-07-28T14:28:28Z",
      "updated_at": "2025-07-28T14:28:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2236729580",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2236729580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237520358",
      "pull_request_review_id": 3064137922,
      "id": 2237520358,
      "node_id": "PRRC_kwDOABII586FXdnm",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+#!/usr/bin/env python3\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class SilentPaymentsReceivingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_encrypt_and_decrypt(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted and decrypted\")\n+        self.log.info(\"Create encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_encrypted\", passphrase=\"unsigned integer\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_encrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that we can scan without the wallet being unlocked\")\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_encrypting_unencrypted(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted after creation\")\n+        self.log.info(\"Create un-encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_unencrypted\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_unencrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Add a passphrase to the wallet\")\n+        wallet.encryptwallet(passphrase=\"unsigned integer\")\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_createwallet(self):\n+        self.log.info(\"Check createwallet silent payments option\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"sp\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"non_sp\", silent_payments=False)\n+        wallet = self.nodes[0].get_wallet_rpc(\"non_sp\")\n+        assert_raises_rpc_error(-12, \"Error: No silent-payments addresses available\", wallet.getnewaddress, address_type=\"silent-payments\")\n+\n+    def test_basic(self):\n+        self.log.info(\"Basic receive and send\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"basic\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        addr_again = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr == addr_again\n+        txid = self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 10)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test change address\")\n+        change_addr = wallet.getrawchangeaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+        txid = self.def_wallet.sendtoaddress(change_addr, 5)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer is detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()))\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({change_addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer to change address is not detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()) == False)\n+\n+        wallet.sendall([self.def_wallet.getnewaddress()])\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 0)\n+\n+    def test_wallet_persistence(self):\n+        self.log.info(\"Test silent payments wallet persistence after closing and reopening\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"persistence_test\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        send_amount = 15\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        self.generate(self.nodes[0], 1)\n+\n+        # verify the wallet received the correct amount\n+        assert_equal(wallet.getbalance(), send_amount)\n+        tx = wallet.gettransaction(txid)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount)\n+        loaded_tx = wallet.gettransaction(txid)\n+        assert_equal(tx, loaded_tx)\n+\n+        self.disconnect_nodes(0, 1)\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        raw_tx = self.nodes[0].getrawtransaction(txid)\n+        def do_nothing():\n+            pass\n+        self.nodes[1].sendrawtransaction(raw_tx)\n+        self.generate(self.nodes[1], 1, sync_fun=do_nothing)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        self.connect_nodes(0, 1)\n+        self.sync_blocks()\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount * 2)\n+\n+        self.log.info(\"Wallet persistence verified successfully\")\n+\n+    def test_import_descriptors(self):\n+        self.log.info(\"Check import silent payments descriptor into blank wallet\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"import_blank\", blank=True, silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"import_blank\")\n+\n+        descriptor = \"sp([eea23daf/352h/0h/0h/1h/0]cRCGWnoELVHTr9oZWz1TUp7jmdBJPS3Kx8UCaHvfpxL6KiVSHH1A,[eea23daf/352h/0h/0h/0h/0]cUxxbQ67tepsEn3AUKSCWAKrvLwP6MPk55DAptcqxqDiXN6yKkNW)#q42ue5dg\"",
      "path": "test/functional/wallet_silentpayments_receiving.py",
      "position": 1,
      "original_position": 156,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231890541,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Per the BIP, it does specify `coin_type` (which is defined in BIP44). BIP44 does reserve `1` as a registered coin type for Bitcoin test networks (i.e., testnet, signet). Revisiting the language in the BIP, I'm realising this is not worded strongly enough and should be updated. \r\n\r\nI do think we should follow the convention of deriving mainnet keys and test keys from distinct chains in our tests. This also matches what we do in other functional tests, e.g., `wallet_descriptor.py`.",
      "created_at": "2025-07-28T18:26:46Z",
      "updated_at": "2025-07-28T18:26:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2237520358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237520358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237526035",
      "pull_request_review_id": 3064145939,
      "id": 2237526035,
      "node_id": "PRRC_kwDOABII586FXfAT",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+#!/usr/bin/env python3\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class SilentPaymentsReceivingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_encrypt_and_decrypt(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted and decrypted\")\n+        self.log.info(\"Create encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_encrypted\", passphrase=\"unsigned integer\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_encrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that we can scan without the wallet being unlocked\")\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_encrypting_unencrypted(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted after creation\")\n+        self.log.info(\"Create un-encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_unencrypted\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_unencrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Add a passphrase to the wallet\")\n+        wallet.encryptwallet(passphrase=\"unsigned integer\")\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_createwallet(self):\n+        self.log.info(\"Check createwallet silent payments option\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"sp\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"non_sp\", silent_payments=False)\n+        wallet = self.nodes[0].get_wallet_rpc(\"non_sp\")\n+        assert_raises_rpc_error(-12, \"Error: No silent-payments addresses available\", wallet.getnewaddress, address_type=\"silent-payments\")\n+\n+    def test_basic(self):\n+        self.log.info(\"Basic receive and send\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"basic\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        addr_again = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr == addr_again\n+        txid = self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 10)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test change address\")\n+        change_addr = wallet.getrawchangeaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+        txid = self.def_wallet.sendtoaddress(change_addr, 5)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer is detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()))\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({change_addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer to change address is not detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()) == False)\n+\n+        wallet.sendall([self.def_wallet.getnewaddress()])\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 0)\n+\n+    def test_wallet_persistence(self):\n+        self.log.info(\"Test silent payments wallet persistence after closing and reopening\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"persistence_test\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        send_amount = 15\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        self.generate(self.nodes[0], 1)\n+\n+        # verify the wallet received the correct amount\n+        assert_equal(wallet.getbalance(), send_amount)\n+        tx = wallet.gettransaction(txid)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount)\n+        loaded_tx = wallet.gettransaction(txid)\n+        assert_equal(tx, loaded_tx)\n+\n+        self.disconnect_nodes(0, 1)\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        raw_tx = self.nodes[0].getrawtransaction(txid)\n+        def do_nothing():\n+            pass\n+        self.nodes[1].sendrawtransaction(raw_tx)\n+        self.generate(self.nodes[1], 1, sync_fun=do_nothing)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        self.connect_nodes(0, 1)\n+        self.sync_blocks()\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount * 2)\n+\n+        self.log.info(\"Wallet persistence verified successfully\")\n+\n+    def test_import_descriptors(self):\n+        self.log.info(\"Check import silent payments descriptor into blank wallet\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"import_blank\", blank=True, silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"import_blank\")\n+\n+        descriptor = \"sp([eea23daf/352h/0h/0h/1h/0]cRCGWnoELVHTr9oZWz1TUp7jmdBJPS3Kx8UCaHvfpxL6KiVSHH1A,[eea23daf/352h/0h/0h/0h/0]cUxxbQ67tepsEn3AUKSCWAKrvLwP6MPk55DAptcqxqDiXN6yKkNW)#q42ue5dg\"",
      "path": "test/functional/wallet_silentpayments_receiving.py",
      "position": 1,
      "original_position": 156,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231890541,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's definitely a good idea. Some hardware wallets may even refuse to sign if the coin type derivation is wrong, e.g. to prevent a testnet app from moving mainnet coins.",
      "created_at": "2025-07-28T18:30:04Z",
      "updated_at": "2025-07-28T18:30:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2237526035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237526035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2242296189",
      "pull_request_review_id": 3070939590,
      "id": 2242296189,
      "node_id": "PRRC_kwDOABII586Fprl9",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+#!/usr/bin/env python3\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class SilentPaymentsReceivingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_encrypt_and_decrypt(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted and decrypted\")\n+        self.log.info(\"Create encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_encrypted\", passphrase=\"unsigned integer\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_encrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that we can scan without the wallet being unlocked\")\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_encrypting_unencrypted(self):\n+        self.log.info(\"Check that a silent payments wallet can be encrypted after creation\")\n+        self.log.info(\"Create un-encrypted wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"sp_unencrypted\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp_unencrypted\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(wallet.getbalance(), 10)\n+        self.log.info(\"Add a passphrase to the wallet\")\n+        wallet.encryptwallet(passphrase=\"unsigned integer\")\n+        self.log.info(\"Check that we get an error if trying to send with the wallet locked\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wallet.sendtoaddress, addr, 9)\n+        wallet.walletpassphrase(passphrase=\"unsigned integer\", timeout=3)\n+        self.log.info(\"Unlock wallet and send\")\n+        wallet.sendtoaddress(addr, 9)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 10, 0.0001)\n+\n+    def test_createwallet(self):\n+        self.log.info(\"Check createwallet silent payments option\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"sp\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"sp\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"non_sp\", silent_payments=False)\n+        wallet = self.nodes[0].get_wallet_rpc(\"non_sp\")\n+        assert_raises_rpc_error(-12, \"Error: No silent-payments addresses available\", wallet.getnewaddress, address_type=\"silent-payments\")\n+\n+    def test_basic(self):\n+        self.log.info(\"Basic receive and send\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"basic\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        addr_again = wallet.getnewaddress(address_type=\"silent-payments\")\n+        assert addr == addr_again\n+        txid = self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 10)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test change address\")\n+        change_addr = wallet.getrawchangeaddress(address_type=\"silent-payments\")\n+        assert addr.startswith(\"sp\")\n+        txid = self.def_wallet.sendtoaddress(change_addr, 5)\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15)\n+        wallet.gettransaction(txid)\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer is detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()))\n+\n+        self.log.info(\"Test self-transfer\")\n+        txid = wallet.send({change_addr: 5})['txid']\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(wallet.getbalance(), 15, 0.0001)\n+        assert(wallet.gettransaction(txid))\n+        self.log.info(\"Check that self-transfer to change address is not detected by listtransactions\")\n+        assert(any(tx[\"txid\"] == txid for tx in wallet.listtransactions()) == False)\n+\n+        wallet.sendall([self.def_wallet.getnewaddress()])\n+        self.generate(self.nodes[0], 1)\n+\n+        assert_equal(wallet.getbalance(), 0)\n+\n+    def test_wallet_persistence(self):\n+        self.log.info(\"Test silent payments wallet persistence after closing and reopening\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"persistence_test\", silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        addr = wallet.getnewaddress(address_type=\"silent-payments\")\n+        send_amount = 15\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        self.generate(self.nodes[0], 1)\n+\n+        # verify the wallet received the correct amount\n+        assert_equal(wallet.getbalance(), send_amount)\n+        tx = wallet.gettransaction(txid)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount)\n+        loaded_tx = wallet.gettransaction(txid)\n+        assert_equal(tx, loaded_tx)\n+\n+        self.disconnect_nodes(0, 1)\n+        txid = self.def_wallet.sendtoaddress(addr, send_amount)\n+        raw_tx = self.nodes[0].getrawtransaction(txid)\n+        def do_nothing():\n+            pass\n+        self.nodes[1].sendrawtransaction(raw_tx)\n+        self.generate(self.nodes[1], 1, sync_fun=do_nothing)\n+        self.nodes[0].unloadwallet(\"persistence_test\")\n+        self.nodes[0].loadwallet(\"persistence_test\")\n+        self.connect_nodes(0, 1)\n+        self.sync_blocks()\n+        wallet = self.nodes[0].get_wallet_rpc(\"persistence_test\")\n+        assert_equal(wallet.getbalance(), send_amount * 2)\n+\n+        self.log.info(\"Wallet persistence verified successfully\")\n+\n+    def test_import_descriptors(self):\n+        self.log.info(\"Check import silent payments descriptor into blank wallet\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"import_blank\", blank=True, silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"import_blank\")\n+\n+        descriptor = \"sp([eea23daf/352h/0h/0h/1h/0]cRCGWnoELVHTr9oZWz1TUp7jmdBJPS3Kx8UCaHvfpxL6KiVSHH1A,[eea23daf/352h/0h/0h/0h/0]cUxxbQ67tepsEn3AUKSCWAKrvLwP6MPk55DAptcqxqDiXN6yKkNW)#q42ue5dg\"",
      "path": "test/functional/wallet_silentpayments_receiving.py",
      "position": 1,
      "original_position": 156,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231890541,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've changed this to use to `/352h/1h`. I also edited `GenerateWalletDescriptor` to use `/352h/1h` for test chain. ",
      "created_at": "2025-07-30T11:12:09Z",
      "updated_at": "2025-07-30T11:12:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2242296189",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2242296189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2242297337",
      "pull_request_review_id": 3070940949,
      "id": 2242297337,
      "node_id": "PRRC_kwDOABII586Fpr35",
      "diff_hunk": "@@ -147,7 +147,30 @@ def do_nothing():\n \n         self.log.info(\"Wallet persistence verified successfully\")\n \n-    def test_import_rescan(self):\n+    def test_import_descriptors(self):\n+        self.log.info(\"Check import silent payments descriptor into blank wallet\")\n+\n+        self.nodes[0].createwallet(wallet_name=\"import_blank\", blank=True, silent_payments=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"import_blank\")\n+\n+        descriptor = \"sp([eea23daf/352h/0h/0h/1h/0]cRCGWnoELVHTr9oZWz1TUp7jmdBJPS3Kx8UCaHvfpxL6KiVSHH1A,[eea23daf/352h/0h/0h/0h/0]cUxxbQ67tepsEn3AUKSCWAKrvLwP6MPk55DAptcqxqDiXN6yKkNW)#q42ue5dg\"\n+        res = wallet.importdescriptors([{\n+            \"desc\": descriptor,\n+            \"active\": True,\n+            \"next_index\": 0,",
      "path": "test/functional/wallet_silentpayments_receiving.py",
      "position": 1,
      "original_position": 15,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "5be304dfa50bcfd3b0a92eff52bac3d8023ce523",
      "in_reply_to_id": 2231169665,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-30T11:12:39Z",
      "updated_at": "2025-07-30T11:12:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2242297337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2242297337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273059963",
      "pull_request_review_id": 3115386902,
      "id": 2273059963,
      "node_id": "PRRC_kwDOABII586HfCR7",
      "diff_hunk": "@@ -1772,6 +1899,62 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (scan_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+        if (!Const(\",\", expr)) {\n+            error = strprintf(\"sp(): expected ',', got '%c'\", expr.size() > 0 ? expr[0] : ')');\n+            return {};\n+        }\n+        ++key_exp_index;\n+\n+        auto spend_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (spend_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+\n+        std::set<CKeyID> scan_keys_rm;\n+        for (auto& scan_pubkey : scan_pubkeys) {\n+            CKeyID scan_keyId;\n+            if (auto root_pubkey{scan_pubkey->GetRootPubKey()}) {\n+                scan_keyId = root_pubkey->GetID();\n+            } else if (auto root_extpubkey{scan_pubkey->GetRootExtPubKey()}) {\n+                scan_keyId = root_extpubkey->pubkey.GetID();\n+            }\n+            if (scan_keyId.IsNull()) {\n+                error = \"sp(): could not get scan key ID\";\n+                return {};\n+            }\n+\n+            auto it{out.keys.find(scan_keyId)};\n+            scan_keys_rm.insert(scan_keyId);\n+\n+            if (it == out.keys.end()) {\n+                error = \"sp(): requires the scan priv key\";\n+                return {};\n+            }\n+\n+            for (auto& spend_pubkey : spend_pubkeys) {\n+                ret.emplace_back(std::make_unique<SpDescriptor>(std::move(scan_pubkey), std::move(spend_pubkey), std::move(it->second)));\n+            }\n+        }\n+\n+        // Remove all scan private keys to allow\n+        // importation of sp descriptors into watch-only wallets\n+        for (auto keyId : scan_keys_rm) {\n+            out.keys.erase(keyId);\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 279,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231883781,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@macgyver13 I changed the implementation and succeeded in removing the need for this code entirely",
      "created_at": "2025-08-13T11:24:07Z",
      "updated_at": "2025-08-13T11:24:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2273059963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273059963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1946,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273967149",
      "pull_request_review_id": 3116741400,
      "id": 2273967149,
      "node_id": "PRRC_kwDOABII586Hifwt",
      "diff_hunk": "@@ -1772,6 +1899,62 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (scan_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+        if (!Const(\",\", expr)) {\n+            error = strprintf(\"sp(): expected ',', got '%c'\", expr.size() > 0 ? expr[0] : ')');\n+            return {};\n+        }\n+        ++key_exp_index;\n+\n+        auto spend_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (spend_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+\n+        std::set<CKeyID> scan_keys_rm;\n+        for (auto& scan_pubkey : scan_pubkeys) {\n+            CKeyID scan_keyId;\n+            if (auto root_pubkey{scan_pubkey->GetRootPubKey()}) {\n+                scan_keyId = root_pubkey->GetID();\n+            } else if (auto root_extpubkey{scan_pubkey->GetRootExtPubKey()}) {\n+                scan_keyId = root_extpubkey->pubkey.GetID();\n+            }\n+            if (scan_keyId.IsNull()) {\n+                error = \"sp(): could not get scan key ID\";\n+                return {};\n+            }\n+\n+            auto it{out.keys.find(scan_keyId)};\n+            scan_keys_rm.insert(scan_keyId);\n+\n+            if (it == out.keys.end()) {\n+                error = \"sp(): requires the scan priv key\";\n+                return {};\n+            }\n+\n+            for (auto& spend_pubkey : spend_pubkeys) {\n+                ret.emplace_back(std::make_unique<SpDescriptor>(std::move(scan_pubkey), std::move(spend_pubkey), std::move(it->second)));\n+            }\n+        }\n+\n+        // Remove all scan private keys to allow\n+        // importation of sp descriptors into watch-only wallets\n+        for (auto keyId : scan_keys_rm) {\n+            out.keys.erase(keyId);\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 279,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231883781,
      "user": {
        "login": "macgyver13",
        "id": 4712150,
        "node_id": "MDQ6VXNlcjQ3MTIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4712150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/macgyver13",
        "html_url": "https://github.com/macgyver13",
        "followers_url": "https://api.github.com/users/macgyver13/followers",
        "following_url": "https://api.github.com/users/macgyver13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/macgyver13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/macgyver13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/macgyver13/subscriptions",
        "organizations_url": "https://api.github.com/users/macgyver13/orgs",
        "repos_url": "https://api.github.com/users/macgyver13/repos",
        "events_url": "https://api.github.com/users/macgyver13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/macgyver13/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I can confirm the import warning is resolved.  👏 \r\n\r\nHowever when I try to generate a silent-payments address after importdescriptor I do generate an exception **Error: No silent-payments addresses available. (-12)**\r\n`imported_wallet.getnewaddress(address_type=\"silent-payments\")`\r\n",
      "created_at": "2025-08-13T16:23:03Z",
      "updated_at": "2025-08-13T16:23:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2273967149",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273967149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1946,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2275797719",
      "pull_request_review_id": 3119441346,
      "id": 2275797719,
      "node_id": "PRRC_kwDOABII586HperX",
      "diff_hunk": "@@ -1772,6 +1899,62 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (scan_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+        if (!Const(\",\", expr)) {\n+            error = strprintf(\"sp(): expected ',', got '%c'\", expr.size() > 0 ? expr[0] : ')');\n+            return {};\n+        }\n+        ++key_exp_index;\n+\n+        auto spend_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (spend_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+\n+        std::set<CKeyID> scan_keys_rm;\n+        for (auto& scan_pubkey : scan_pubkeys) {\n+            CKeyID scan_keyId;\n+            if (auto root_pubkey{scan_pubkey->GetRootPubKey()}) {\n+                scan_keyId = root_pubkey->GetID();\n+            } else if (auto root_extpubkey{scan_pubkey->GetRootExtPubKey()}) {\n+                scan_keyId = root_extpubkey->pubkey.GetID();\n+            }\n+            if (scan_keyId.IsNull()) {\n+                error = \"sp(): could not get scan key ID\";\n+                return {};\n+            }\n+\n+            auto it{out.keys.find(scan_keyId)};\n+            scan_keys_rm.insert(scan_keyId);\n+\n+            if (it == out.keys.end()) {\n+                error = \"sp(): requires the scan priv key\";\n+                return {};\n+            }\n+\n+            for (auto& spend_pubkey : spend_pubkeys) {\n+                ret.emplace_back(std::make_unique<SpDescriptor>(std::move(scan_pubkey), std::move(spend_pubkey), std::move(it->second)));\n+            }\n+        }\n+\n+        // Remove all scan private keys to allow\n+        // importation of sp descriptors into watch-only wallets\n+        for (auto keyId : scan_keys_rm) {\n+            out.keys.erase(keyId);\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 279,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231883781,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't been able to reproduce the error. Can you share the following information:\r\n- Your wallet creation parameters\r\n- Your `importdescriptors` parameters (without the private keys) and response\r\n?",
      "created_at": "2025-08-14T07:58:01Z",
      "updated_at": "2025-08-14T07:58:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2275797719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2275797719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1946,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277212074",
      "pull_request_review_id": 3121396746,
      "id": 2277212074,
      "node_id": "PRRC_kwDOABII586Hu3-q",
      "diff_hunk": "@@ -1772,6 +1899,62 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (scan_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+        if (!Const(\",\", expr)) {\n+            error = strprintf(\"sp(): expected ',', got '%c'\", expr.size() > 0 ? expr[0] : ')');\n+            return {};\n+        }\n+        ++key_exp_index;\n+\n+        auto spend_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};\n+        if (spend_pubkeys.empty()) {\n+            error = strprintf(\"sp(): %s\", error);\n+            return {};\n+        }\n+\n+        std::set<CKeyID> scan_keys_rm;\n+        for (auto& scan_pubkey : scan_pubkeys) {\n+            CKeyID scan_keyId;\n+            if (auto root_pubkey{scan_pubkey->GetRootPubKey()}) {\n+                scan_keyId = root_pubkey->GetID();\n+            } else if (auto root_extpubkey{scan_pubkey->GetRootExtPubKey()}) {\n+                scan_keyId = root_extpubkey->pubkey.GetID();\n+            }\n+            if (scan_keyId.IsNull()) {\n+                error = \"sp(): could not get scan key ID\";\n+                return {};\n+            }\n+\n+            auto it{out.keys.find(scan_keyId)};\n+            scan_keys_rm.insert(scan_keyId);\n+\n+            if (it == out.keys.end()) {\n+                error = \"sp(): requires the scan priv key\";\n+                return {};\n+            }\n+\n+            for (auto& spend_pubkey : spend_pubkeys) {\n+                ret.emplace_back(std::make_unique<SpDescriptor>(std::move(scan_pubkey), std::move(spend_pubkey), std::move(it->second)));\n+            }\n+        }\n+\n+        // Remove all scan private keys to allow\n+        // importation of sp descriptors into watch-only wallets\n+        for (auto keyId : scan_keys_rm) {\n+            out.keys.erase(keyId);\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 279,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "587c63e06955ce5c5f2d64f1c1700ca8628572cf",
      "in_reply_to_id": 2231883781,
      "user": {
        "login": "macgyver13",
        "id": 4712150,
        "node_id": "MDQ6VXNlcjQ3MTIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4712150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/macgyver13",
        "html_url": "https://github.com/macgyver13",
        "followers_url": "https://api.github.com/users/macgyver13/followers",
        "following_url": "https://api.github.com/users/macgyver13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/macgyver13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/macgyver13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/macgyver13/subscriptions",
        "organizations_url": "https://api.github.com/users/macgyver13/orgs",
        "repos_url": "https://api.github.com/users/macgyver13/repos",
        "events_url": "https://api.github.com/users/macgyver13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/macgyver13/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Great news, I was able to use dynamic descriptor creation -> export -> import using private keys and confirmed `imported_wallet.getnewaddress(address_type=\"silent-payments\")` now works as expected.\r\n\r\nStill have 1 issue when trying to use `sender.send(outputs={sp_addr: TOTAL_SPEND}, options=options)` in a different test - you can review the test [here](https://github.com/Eunovo/bitcoin/pull/2)",
      "created_at": "2025-08-14T17:02:58Z",
      "updated_at": "2025-08-14T17:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2277212074",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277212074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1946,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278902423",
      "pull_request_review_id": 3123737293,
      "id": 2278902423,
      "node_id": "PRRC_kwDOABII586H1UqX",
      "diff_hunk": "@@ -886,7 +886,7 @@ class DescriptorImpl : public Descriptor\n     }\n \n     // NOLINTNEXTLINE(misc-no-recursion)\n-    bool IsRange() const final\n+    bool IsRange() const override",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We shouldn't need to mark this as override, considering IsRange on the DescriptorImpl is wrapping a lower IsRange call:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/bd7e9026af484a0b0df4ef40800969860ffb5949/src/script/descriptor.cpp#L889-L898\r\n\r\n",
      "created_at": "2025-08-15T12:26:50Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278902423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278902423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 889,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278903781",
      "pull_request_review_id": 3123737293,
      "id": 2278903781,
      "node_id": "PRRC_kwDOABII586H1U_l",
      "diff_hunk": "@@ -776,7 +776,7 @@ class DescriptorImpl : public Descriptor\n     }\n \n     // NOLINTNEXTLINE(misc-no-recursion)\n-    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const final\n+    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const override",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "cb44e3812c741e3a939a64799130bbf0787ef89a",
      "in_reply_to_id": 2207667539,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Confirmed, considering we don't need ExpandPrivate anymore, this can remain `const final`.",
      "created_at": "2025-08-15T12:27:59Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278903781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278903781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1003,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278930453",
      "pull_request_review_id": 3123737293,
      "id": 2278930453,
      "node_id": "PRRC_kwDOABII586H1bgV",
      "diff_hunk": "@@ -1646,6 +1646,56 @@ class RawTRDescriptor final : public DescriptorImpl\n     }\n };\n \n+/** A parsed sp(...) descriptor */\n+class SpDescriptor final : public DescriptorImpl\n+{\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, std::span<const CScript>, FlatSigningProvider&) const override { return std::vector<CScript>(); }\n+\n+public:\n+    SpDescriptor(std::unique_ptr<PubkeyProvider> scan_pubkey, std::unique_ptr<PubkeyProvider> spend_key) : DescriptorImpl(Vector(std::move(scan_pubkey), std::move(spend_key)), \"sp\") {};\n+\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::SILENT_PAYMENTS; }\n+\n+    bool IsRange() const final { return false; }\n+\n+    bool IsSingleType() const final { return true; }\n+\n+    bool IsSolvable() const override { return false; }\n+\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const override\n+    {\n+        FlatSigningProvider dummy;\n+        std::string scan_key;\n+        bool has_scan_key{m_pubkey_args.at(0)->ToPrivateString(dummy, scan_key)};\n+        assert(has_scan_key); // The ScankeyPubkeyProvider always has the scan key\n+        std::string ret{m_name + \"(\" + scan_key + \",\"};\n+        auto& spend_pubkey{m_pubkey_args.at(1)};\n+        std::string tmp;\n+        switch (type) {\n+        case StringType::NORMALIZED:\n+            if (!spend_pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n+            break;\n+        case StringType::PRIVATE:\n+            if (!spend_pubkey->ToPrivateString(*arg, tmp)) return false;\n+            break;\n+        case StringType::PUBLIC:\n+            tmp = spend_pubkey->ToString();\n+            break;\n+        case StringType::COMPAT:\n+            tmp = spend_pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+            break;\n+        }\n+        out = std::move(ret) + std::move(tmp) + \")\";\n+        return true;\n+    }\n+\n+    std::unique_ptr<DescriptorImpl> Clone() const override\n+    {\n+        return std::make_unique<SpDescriptor>(m_pubkey_args.at(0)->Clone(), m_pubkey_args.at(1)->Clone());\n+    }\n+};",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 70,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I was finding this function hard to follow while reviewing. I think something like this would be slightly more readable:\r\n\r\n```diff\r\ndiff --git a/src/script/descriptor.cpp b/src/script/descriptor.cpp\r\nindex 0bd2251e13..fb3252f398 100644\r\n--- a/src/script/descriptor.cpp\r\n+++ b/src/script/descriptor.cpp\r\n@@ -1674,26 +1674,28 @@ public:\r\n     {\r\n         FlatSigningProvider dummy;\r\n         std::string scan_key;\r\n-        bool has_scan_key{m_pubkey_args.at(0)->ToPrivateString(dummy, scan_key)};\r\n-        assert(has_scan_key); // The ScankeyPubkeyProvider always has the scan key\r\n-        std::string ret{m_name + \"(\" + scan_key + \",\"};\r\n-        auto& spend_pubkey{m_pubkey_args.at(1)};\r\n-        std::string tmp;\r\n+        // This should never fail, since the ScankeyPubkeyProvider will always contain\r\n+        // the scan key.\r\n+        //\r\n+        // The scan key is stored at m_pubkey_args[0], the spend key at m_pubkey_args[1]\r\n+        if (!m_pubkey_args.at(0)->ToPrivateString(dummy, scan_key)) return false;\r\n+        std::string scan_key_str{m_name + \"(\" + scan_key + \",\"};\r\n+        std::string spend_key_str;\r\n         switch (type) {\r\n         case StringType::NORMALIZED:\r\n-            if (!spend_pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\r\n+            if (!m_pubkey_args.at(1)->ToNormalizedString(*arg, spend_key_str, cache)) return false;\r\n             break;\r\n         case StringType::PRIVATE:\r\n-            if (!spend_pubkey->ToPrivateString(*arg, tmp)) return false;\r\n+            if (!m_pubkey_args.at(1)->ToPrivateString(*arg, spend_key_str)) return false;\r\n             break;\r\n         case StringType::PUBLIC:\r\n-            tmp = spend_pubkey->ToString();\r\n+            spend_key_str = m_pubkey_args.at(1)->ToString();\r\n             break;\r\n         case StringType::COMPAT:\r\n-            tmp = spend_pubkey->ToString(PubkeyProvider::StringType::COMPAT);\r\n+            spend_key_str = m_pubkey_args.at(1)->ToString(PubkeyProvider::StringType::COMPAT);\r\n             break;\r\n         }\r\n-        out = std::move(ret) + std::move(tmp) + \")\";\r\n+        out = std::move(scan_key_str) + std::move(spend_key_str) + \")\";\r\n         return true;\r\n     }\r\n```",
      "created_at": "2025-08-15T12:47:12Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278930453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278930453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1666,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1708,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278944819",
      "pull_request_review_id": 3123737293,
      "id": 2278944819,
      "node_id": "PRRC_kwDOABII586H1fAz",
      "diff_hunk": "@@ -1826,8 +1878,15 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n         if (key.IsValid()) {\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n+                auto provider{std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, ctx == ParseScriptContext::P2TR)};\n+\n+                if (is_scan_key) {\n+                    ret.emplace_back(std::make_unique<ScankeyPubkeyProvider>(key_exp_index, key, std::move(provider)));\n+                    return ret;\n+                }\n+\n                 out.keys.emplace(pubkey.GetID(), key);\n-                ret.emplace_back(std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, ctx == ParseScriptContext::P2TR));\n+                ret.emplace_back(std::move(provider));",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 113,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since we are creating the provider a few lines up, I think push_back is more appropriate here:\r\n\r\n```suggestion\r\n                ret.push_back(std::move(provider));\r\n```",
      "created_at": "2025-08-15T12:56:41Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278944819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278944819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278945918",
      "pull_request_review_id": 3123737293,
      "id": 2278945918,
      "node_id": "PRRC_kwDOABII586H1fR-",
      "diff_hunk": "@@ -1844,6 +1903,44 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n     std::vector<KeyPath> paths;\n     DeriveType type = ParseDeriveType(split, apostrophe);\n     if (!ParseKeyPath(split, paths, apostrophe, error, /*allow_multipath=*/true)) return {};\n+    if (ctx == ParseScriptContext::SP) {\n+        for (const auto& path : paths) {\n+            KeyOriginInfo origin;\n+            CKeyID id = extkey.key.IsValid() ? extkey.key.GetPubKey().GetID() : extpubkey.pubkey.GetID();\n+            std::copy(id.begin(), id.begin() + 4, origin.fingerprint);\n+            auto tmp_extkey{extkey};\n+            auto tmp_extpubkey{extpubkey};\n+            for (auto entry : path) {\n+                origin.path.push_back(entry);\n+                if (tmp_extkey.key.IsValid() && !tmp_extkey.Derive(tmp_extkey, entry)) {\n+                    error = strprintf(\"key '%s' is not valid\", str);\n+                    return {};\n+                }\n+                if (tmp_extpubkey.pubkey.IsValid() && !tmp_extpubkey.Derive(tmp_extpubkey, entry)) {\n+                    error = strprintf(\"key '%s' is not valid\", str);\n+                    return {};\n+                }\n+            }\n+\n+            if (tmp_extkey.key.IsValid()) tmp_extpubkey = tmp_extkey.Neuter();\n+            auto pubkey{std::make_unique<ConstPubkeyProvider>(key_exp_index, tmp_extpubkey.pubkey, false)};\n+            auto origin_pubkey{std::make_unique<OriginPubkeyProvider>(key_exp_index, origin, std::move(pubkey), apostrophe)};\n+\n+            if (is_scan_key) {\n+                if (!tmp_extkey.key.IsValid()) {\n+                    error = strprintf(\"key '%s' is not valid\", str);\n+                    return {};\n+                }\n+                ret.emplace_back(std::make_unique<ScankeyPubkeyProvider>(key_exp_index, tmp_extkey.key, std::move(origin_pubkey)));\n+                continue;\n+            }\n+\n+            if (tmp_extkey.key.IsValid()) out.keys.emplace(tmp_extpubkey.pubkey.GetID(), tmp_extkey.key);\n+            ret.emplace_back(std::move(origin_pubkey));",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 154,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same comment regarding push_back vs emplace_back",
      "created_at": "2025-08-15T12:57:24Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278945918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278945918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278949369",
      "pull_request_review_id": 3123737293,
      "id": 2278949369,
      "node_id": "PRRC_kwDOABII586H1gH5",
      "diff_hunk": "@@ -2192,6 +2289,36 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};",
      "path": "src/script/descriptor.cpp",
      "position": 199,
      "original_position": 167,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Probably fine to leave all of these as plurals for now, e.g., `scan_pubkeys`, but I think its more appropriate to have these be `scan_pubkey` and `spend_pubkey` and have a comment explaining the silent payments descriptor does not support multipath descriptors. We could even add an assert for this, since we expect a silent payments descriptor to only ever have one scan key and one spend key.",
      "created_at": "2025-08-15T12:59:42Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278949369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278949369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2292,
      "original_line": 2292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278956651",
      "pull_request_review_id": 3123737293,
      "id": 2278956651,
      "node_id": "PRRC_kwDOABII586H1h5r",
      "diff_hunk": "@@ -1026,16 +1026,23 @@ class DescriptorImpl : public Descriptor\n     std::optional<int64_t> MaxSatisfactionElems() const override { return {}; }\n \n     // NOLINTNEXTLINE(misc-no-recursion)\n-    void GetPubKeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    void GetPubKeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs, std::vector<CKey>& scankeys) const override",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "9252ffc4e2bc5be11a46de27ef66368f5525717e",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't have a better alternative to recommend, but this feels a bit off. As discussed offline, an alternative we can look into is subclassing the Descriptor class, e.g., `SilentPaymentsDescriptor` and adding a new method just for getting the scan key.\r\n\r\nPerhaps another direction worth considering is modelling the scan key as an `ExtPubKey`, where the scan key is saved as a member (similar to how the chaincode is treated).",
      "created_at": "2025-08-15T13:05:11Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278956651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278956651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278959426",
      "pull_request_review_id": 3123737293,
      "id": 2278959426,
      "node_id": "PRRC_kwDOABII586H1ilC",
      "diff_hunk": "@@ -1026,16 +1026,23 @@ class DescriptorImpl : public Descriptor\n     std::optional<int64_t> MaxSatisfactionElems() const override { return {}; }\n \n     // NOLINTNEXTLINE(misc-no-recursion)\n-    void GetPubKeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    void GetPubKeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs, std::vector<CKey>& scankeys) const override",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "9252ffc4e2bc5be11a46de27ef66368f5525717e",
      "in_reply_to_id": 2278956651,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Another idea: add a new method to the descriptor class , `GetPubKeyProviders` ? This avoids needing to subclass just for silent payments, and may prove to be a generally useful method. This way, we can return the ScankeyPubkeyProvider and access the scan \"private\" key directly from that.",
      "created_at": "2025-08-15T13:07:12Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278959426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278959426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278966398",
      "pull_request_review_id": 3123737293,
      "id": 2278966398,
      "node_id": "PRRC_kwDOABII586H1kR-",
      "diff_hunk": "@@ -62,6 +62,12 @@ class FoundBlock\n     //! Read block data from disk. If the block exists but doesn't have data\n     //! (for example due to pruning), the CBlock variable will be set to null.\n     FoundBlock& data(CBlock& data) { m_data = &data; return *this; }\n+    //! Read block's undo data from disk.\n+    FoundBlock& undoData(CBlockUndo& undo)",
      "path": "src/interfaces/chain.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "7fa9eace9c6b3962474c7e4236706b392f0cfab4",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm curious if there is another use case for undoData outside of Silent payments. If so, we could break this out into its own commit. Might be worth doing anyways, even if silent payments is (currently) the only use case.",
      "created_at": "2025-08-15T13:12:11Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278966398",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278966398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278968358",
      "pull_request_review_id": 3123737293,
      "id": 2278968358,
      "node_id": "PRRC_kwDOABII586H1kwm",
      "diff_hunk": "@@ -73,28 +75,41 @@ WalletDescriptor GenerateWalletDescriptor(const CExtPubKey& master_key, const Ou\n         desc_prefix = \"tr(\" + xpub + \"/86h\";\n         break;\n     }\n+    case OutputType::SILENT_PAYMENTS: {\n+        // The actual scan and spend keys will be derived from these XPRIVs\n+        // The actual XPRIV and the spend key will not be retained in the descriptor,\n+        // but the scan key will be.\n+        desc_str = \"sp(\" + xpriv + \"/352h/0h/0h/1h/0,\" + xpriv + \"/352h/0h/0h/0h/0)\";\n+        break;\n+    }\n     case OutputType::UNKNOWN: {\n         // We should never have a DescriptorScriptPubKeyMan for an UNKNOWN OutputType,\n         // so if we get to this point something is wrong\n         assert(false);\n     }\n     } // no default case, so the compiler can warn about missing cases\n-    assert(!desc_prefix.empty());\n+    assert(!desc_str.empty() || !desc_prefix.empty());\n \n-    // Mainnet derives at 0', testnet and regtest derive at 1'\n-    if (Params().IsTestChain()) {\n-        desc_prefix += \"/1h\";\n-    } else {\n-        desc_prefix += \"/0h\";\n-    }\n+    if (desc_str.empty()) {\n+        // Mainnet derives at 0', testnet and regtest derive at 1'\n+        if (Params().IsTestChain()) {\n+            desc_prefix += \"/1h\";\n+        } else {\n+            desc_prefix += \"/0h\";\n+        }\n \n-    std::string internal_path = internal ? \"/1\" : \"/0\";\n-    std::string desc_str = desc_prefix + \"/0h\" + internal_path + desc_suffix;\n+        std::string internal_path = internal ? \"/1\" : \"/0\";\n+        desc_str = desc_prefix + \"/0h\" + internal_path + desc_suffix;\n+    }\n \n     // Make the descriptor\n     FlatSigningProvider keys;\n     std::string error;\n     std::vector<std::unique_ptr<Descriptor>> desc = Parse(desc_str, keys, error, false);\n+    for (const auto& key : keys.keys) {\n+        out_keys.push_back(std::move(key.second));",
      "path": "src/wallet/walletutil.cpp",
      "position": 1,
      "original_position": 63,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "eb1196a5b8315454f1f59e814b6748a3200ccd73",
      "in_reply_to_id": 2207750518,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The alternative method seems preferable to me. I dont see any reason to treat the spend key differently from other keys in the wallet.",
      "created_at": "2025-08-15T13:13:37Z",
      "updated_at": "2025-08-15T13:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2278968358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278968358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2281685532",
      "pull_request_review_id": 3127352609,
      "id": 2281685532,
      "node_id": "PRRC_kwDOABII586H_8Ic",
      "diff_hunk": "@@ -886,7 +886,7 @@ class DescriptorImpl : public Descriptor\n     }\n \n     // NOLINTNEXTLINE(misc-no-recursion)\n-    bool IsRange() const final\n+    bool IsRange() const override",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": 2278902423,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-18T08:35:23Z",
      "updated_at": "2025-08-18T08:35:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2281685532",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2281685532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 889,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2281690340",
      "pull_request_review_id": 3127359484,
      "id": 2281690340,
      "node_id": "PRRC_kwDOABII586H_9Tk",
      "diff_hunk": "@@ -1646,6 +1646,56 @@ class RawTRDescriptor final : public DescriptorImpl\n     }\n };\n \n+/** A parsed sp(...) descriptor */\n+class SpDescriptor final : public DescriptorImpl\n+{\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, std::span<const CScript>, FlatSigningProvider&) const override { return std::vector<CScript>(); }\n+\n+public:\n+    SpDescriptor(std::unique_ptr<PubkeyProvider> scan_pubkey, std::unique_ptr<PubkeyProvider> spend_key) : DescriptorImpl(Vector(std::move(scan_pubkey), std::move(spend_key)), \"sp\") {};\n+\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::SILENT_PAYMENTS; }\n+\n+    bool IsRange() const final { return false; }\n+\n+    bool IsSingleType() const final { return true; }\n+\n+    bool IsSolvable() const override { return false; }\n+\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const override\n+    {\n+        FlatSigningProvider dummy;\n+        std::string scan_key;\n+        bool has_scan_key{m_pubkey_args.at(0)->ToPrivateString(dummy, scan_key)};\n+        assert(has_scan_key); // The ScankeyPubkeyProvider always has the scan key\n+        std::string ret{m_name + \"(\" + scan_key + \",\"};\n+        auto& spend_pubkey{m_pubkey_args.at(1)};\n+        std::string tmp;\n+        switch (type) {\n+        case StringType::NORMALIZED:\n+            if (!spend_pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n+            break;\n+        case StringType::PRIVATE:\n+            if (!spend_pubkey->ToPrivateString(*arg, tmp)) return false;\n+            break;\n+        case StringType::PUBLIC:\n+            tmp = spend_pubkey->ToString();\n+            break;\n+        case StringType::COMPAT:\n+            tmp = spend_pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+            break;\n+        }\n+        out = std::move(ret) + std::move(tmp) + \")\";\n+        return true;\n+    }\n+\n+    std::unique_ptr<DescriptorImpl> Clone() const override\n+    {\n+        return std::make_unique<SpDescriptor>(m_pubkey_args.at(0)->Clone(), m_pubkey_args.at(1)->Clone());\n+    }\n+};",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 70,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": 2278930453,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-18T08:36:23Z",
      "updated_at": "2025-08-18T08:36:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2281690340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2281690340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": 1666,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1708,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2281694874",
      "pull_request_review_id": 3127365302,
      "id": 2281694874,
      "node_id": "PRRC_kwDOABII586H_-aa",
      "diff_hunk": "@@ -1826,8 +1878,15 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n         if (key.IsValid()) {\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n+                auto provider{std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, ctx == ParseScriptContext::P2TR)};\n+\n+                if (is_scan_key) {\n+                    ret.emplace_back(std::make_unique<ScankeyPubkeyProvider>(key_exp_index, key, std::move(provider)));\n+                    return ret;\n+                }\n+\n                 out.keys.emplace(pubkey.GetID(), key);\n-                ret.emplace_back(std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, ctx == ParseScriptContext::P2TR));\n+                ret.emplace_back(std::move(provider));",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 113,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": 2278944819,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-18T08:37:52Z",
      "updated_at": "2025-08-18T08:37:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2281694874",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2281694874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2281695254",
      "pull_request_review_id": 3127365770,
      "id": 2281695254,
      "node_id": "PRRC_kwDOABII586H_-gW",
      "diff_hunk": "@@ -1844,6 +1903,44 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n     std::vector<KeyPath> paths;\n     DeriveType type = ParseDeriveType(split, apostrophe);\n     if (!ParseKeyPath(split, paths, apostrophe, error, /*allow_multipath=*/true)) return {};\n+    if (ctx == ParseScriptContext::SP) {\n+        for (const auto& path : paths) {\n+            KeyOriginInfo origin;\n+            CKeyID id = extkey.key.IsValid() ? extkey.key.GetPubKey().GetID() : extpubkey.pubkey.GetID();\n+            std::copy(id.begin(), id.begin() + 4, origin.fingerprint);\n+            auto tmp_extkey{extkey};\n+            auto tmp_extpubkey{extpubkey};\n+            for (auto entry : path) {\n+                origin.path.push_back(entry);\n+                if (tmp_extkey.key.IsValid() && !tmp_extkey.Derive(tmp_extkey, entry)) {\n+                    error = strprintf(\"key '%s' is not valid\", str);\n+                    return {};\n+                }\n+                if (tmp_extpubkey.pubkey.IsValid() && !tmp_extpubkey.Derive(tmp_extpubkey, entry)) {\n+                    error = strprintf(\"key '%s' is not valid\", str);\n+                    return {};\n+                }\n+            }\n+\n+            if (tmp_extkey.key.IsValid()) tmp_extpubkey = tmp_extkey.Neuter();\n+            auto pubkey{std::make_unique<ConstPubkeyProvider>(key_exp_index, tmp_extpubkey.pubkey, false)};\n+            auto origin_pubkey{std::make_unique<OriginPubkeyProvider>(key_exp_index, origin, std::move(pubkey), apostrophe)};\n+\n+            if (is_scan_key) {\n+                if (!tmp_extkey.key.IsValid()) {\n+                    error = strprintf(\"key '%s' is not valid\", str);\n+                    return {};\n+                }\n+                ret.emplace_back(std::make_unique<ScankeyPubkeyProvider>(key_exp_index, tmp_extkey.key, std::move(origin_pubkey)));\n+                continue;\n+            }\n+\n+            if (tmp_extkey.key.IsValid()) out.keys.emplace(tmp_extpubkey.pubkey.GetID(), tmp_extkey.key);\n+            ret.emplace_back(std::move(origin_pubkey));",
      "path": "src/script/descriptor.cpp",
      "position": 1,
      "original_position": 154,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": 2278945918,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-18T08:38:01Z",
      "updated_at": "2025-08-18T08:38:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2281695254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2281695254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325246885",
      "pull_request_review_id": 3189588826,
      "id": 2325246885,
      "node_id": "PRRC_kwDOABII586KmHOl",
      "diff_hunk": "@@ -789,6 +789,50 @@ class MuSigPubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+class ScankeyPubkeyProvider final : public PubkeyProvider",
      "path": "src/script/descriptor.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "f60836f197f2b1d20c24a28d242ff8778fd2537f",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You mention it in the commit message, but I think its worth adding a detailed comment above that:\r\n\r\n* Explains the nuance around `m_scan_key`\r\n* Explains why we are using a `PubKeyProvider`, e.g., getting origin information without needing to write custom code\r\n\r\nI think a comment is slightly better than a commit message as I imagine this will trip people up in the future who are looking at this code and surprised to see a private key as a member field inside a pubkey provider.",
      "created_at": "2025-09-05T14:23:29Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325246885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325246885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 792,
      "original_line": 792,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325253065",
      "pull_request_review_id": 3189588826,
      "id": 2325253065,
      "node_id": "PRRC_kwDOABII586KmIvJ",
      "diff_hunk": "@@ -789,6 +789,50 @@ class MuSigPubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+class ScankeyPubkeyProvider final : public PubkeyProvider\n+{\n+    CKey m_scan_key;\n+    std::unique_ptr<PubkeyProvider> m_provider;\n+\n+public:\n+    ScankeyPubkeyProvider(uint32_t exp_index, const CKey& scankey, std::unique_ptr<PubkeyProvider> provider): PubkeyProvider(exp_index), m_scan_key(scankey), m_provider(std::move(provider)) {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        return m_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+    }\n+    bool IsRange() const override { return false; }\n+    size_t GetSize() const override { return m_provider->GetSize(); }\n+    bool IsBIP32() const override { return false; }\n+    std::string ToString(StringType type) const override { return m_provider->ToString(); }\n+    bool ToPrivateString(const SigningProvider&, std::string& ret) const override\n+    {\n+        FlatSigningProvider arg;\n+        arg.keys.emplace(m_scan_key.GetPubKey().GetID(), m_scan_key);\n+        return m_provider->ToPrivateString(arg, ret);\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n+    {\n+        return m_provider->ToNormalizedString(arg, ret, cache);\n+    }\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override",
      "path": "src/script/descriptor.cpp",
      "position": 30,
      "original_position": 30,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "f60836f197f2b1d20c24a28d242ff8778fd2537f",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In `ToPrivateString` above , you omit the argument name to indicate its not used; should do the same here:\r\n\r\n```suggestion\r\n    void GetPrivKey(int, const SigningProvider&, FlatSigningProvider& out) const override\r\n```",
      "created_at": "2025-09-05T14:25:54Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325253065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325253065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 818,
      "original_line": 818,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325262802",
      "pull_request_review_id": 3189588826,
      "id": 2325262802,
      "node_id": "PRRC_kwDOABII586KmLHS",
      "diff_hunk": "@@ -2192,6 +2289,36 @@ std::vector<std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index\n         }\n         return ret;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sp\", expr)) {\n+        auto scan_pubkeys{ParsePubkey(key_exp_index, Expr(expr), ParseScriptContext::SP, out, error)};",
      "path": "src/script/descriptor.cpp",
      "position": 199,
      "original_position": 167,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bd7e9026af484a0b0df4ef40800969860ffb5949",
      "in_reply_to_id": 2278949369,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Revisiting this, it would be nice to if we enforce that an SP descriptor cannot be multipath. Beyond that, I think its fine to keep the plurals and for loops, since that matches the style of the rest of the wallet code.",
      "created_at": "2025-09-05T14:29:51Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325262802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325262802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2292,
      "original_line": 2292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325267495",
      "pull_request_review_id": 3189588826,
      "id": 2325267495,
      "node_id": "PRRC_kwDOABII586KmMQn",
      "diff_hunk": "@@ -1693,9 +1692,18 @@ class SpDescriptor final : public DescriptorImpl\n         return true;\n     }\n \n+    CKey GetScanKey() const override\n+    {\n+        FlatSigningProvider dummy, out;\n+        m_scan_pubkey->GetPrivKey(0, dummy, out);\n+        // The ScankeyPubkeyProvider will always contain the scan key\n+        assert(out.keys.size() == 1);\n+        return out.keys.begin()->second;\n+    }",
      "path": "src/script/descriptor.cpp",
      "position": 108,
      "original_position": 44,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "2c53d22b227dc1cd14e297d5b6b4a6c9b1d4fdfb",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm still curious if we could avoid the public SpDescriptor, since its only needed for this GetScanKey function. That being said, this also seems fine and does help avoid us needing to special case and write custom code in other places.",
      "created_at": "2025-09-05T14:31:40Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325267495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325267495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": 1695,
      "original_start_line": 1695,
      "start_side": "RIGHT",
      "line": 1702,
      "original_line": 1702,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325275304",
      "pull_request_review_id": 3189588826,
      "id": 2325275304,
      "node_id": "PRRC_kwDOABII586KmOKo",
      "diff_hunk": "@@ -279,6 +279,23 @@ std::optional<std::pair<XOnlyPubKey, bool>> XOnlyPubKey::CreateTapTweak(const ui\n     return ret;\n }\n \n+bool CPubKey::TweakAdd(const unsigned char* tweak32)",
      "path": "src/pubkey.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "958c1342461c31a0df74df15e90414a232f687a6",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is only used to recreate the silent payment taproot scriptpubkeys, i.e., $B_{spend} + tweak \\cdot G$. But since we already have the full scriptpubkey when scanning, we could just save the tweak and scriptpubkey to the database.\r\n\r\nThis means more storage, but then we can drop this `CPubKey::TweakAdd` method. This seems better to me because storage is cheap, this should make loading the wallet faster, and it removes a footgun from CPubKey (we dont really want to have a generic method for adding public keys in this codebase).",
      "created_at": "2025-09-05T14:34:37Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325275304",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325275304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 282,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325279070",
      "pull_request_review_id": 3189588826,
      "id": 2325279070,
      "node_id": "PRRC_kwDOABII586KmPFe",
      "diff_hunk": "@@ -128,6 +128,8 @@ class CKey\n     //! Generate a new private key using a cryptographic PRNG.\n     void MakeNewKey(bool fCompressed);\n \n+    bool TweakAdd(const unsigned char* tweak32);",
      "path": "src/key.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "958c1342461c31a0df74df15e90414a232f687a6",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think we could also remove this function by introducing a `SilentPaymentsSign` function (similar to how we have a taproot sign function). I'll dig into this a bit more, but it seems better to have a special signing function that can _only_ be used for silent payments, instead of a generic `CKey::TweakAdd` function that might be abused/footgunny.",
      "created_at": "2025-09-05T14:36:15Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325279070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325279070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 131,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325281936",
      "pull_request_review_id": 3189588826,
      "id": 2325281936,
      "node_id": "PRRC_kwDOABII586KmPyQ",
      "diff_hunk": "@@ -62,6 +62,12 @@ class FoundBlock\n     //! Read block data from disk. If the block exists but doesn't have data\n     //! (for example due to pruning), the CBlock variable will be set to null.\n     FoundBlock& data(CBlock& data) { m_data = &data; return *this; }\n+    //! Read block's undo data from disk.\n+    FoundBlock& undoData(CBlockUndo& undo)",
      "path": "src/interfaces/chain.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "7fa9eace9c6b3962474c7e4236706b392f0cfab4",
      "in_reply_to_id": 2278966398,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reiterating this point. I think I've seen a few PRs related to undodata recently, seems like a good time to bundle all of them as a well motivated refactor? cc @TheCharlatan ",
      "created_at": "2025-09-05T14:37:29Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325281936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325281936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325296901",
      "pull_request_review_id": 3189588826,
      "id": 2325296901,
      "node_id": "PRRC_kwDOABII586KmTcF",
      "diff_hunk": "@@ -1307,25 +1306,42 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n                 sp_dests[i] = *sp;\n             }\n         }\n+        size_t sp_change_index{sp_dests.size() > 0 ? sp_dests.rbegin()->first + 1 : 0};",
      "path": "src/wallet/spend.cpp",
      "position": 251,
      "original_position": 56,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bdee098f993bb1b8df610ade625c6befa2ed6125",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not quite sure why this is necessary? ",
      "created_at": "2025-09-05T14:43:39Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325296901",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325296901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1311,
      "original_line": 1309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325303247",
      "pull_request_review_id": 3189588826,
      "id": 2325303247,
      "node_id": "PRRC_kwDOABII586KmU_P",
      "diff_hunk": "@@ -1134,6 +1134,7 @@ std::optional<std::map<size_t, WitnessV1Taproot>> CreateSilentPaymentOutputs(\n static util::Result<CreatedTransactionResult> CreateTransactionInternal(",
      "path": "src/wallet/spend.cpp",
      "position": 166,
      "original_position": 1,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "4c7baadea28fd203b3d5e261abb9161e0169c900",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not a comment for this commit specifically, but I do think we should document either in a commit or in a commit message the entire logic and flow of using silent payments for change. Its a bit complicated and without a clear understanding of all of the cases we need to cover, these changes are a bit hard to follow.",
      "created_at": "2025-09-05T14:45:54Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325303247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325303247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1134,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325305066",
      "pull_request_review_id": 3189588826,
      "id": 2325305066,
      "node_id": "PRRC_kwDOABII586KmVbq",
      "diff_hunk": "@@ -1134,6 +1134,7 @@ std::optional<std::map<size_t, WitnessV1Taproot>> CreateSilentPaymentOutputs(\n static util::Result<CreatedTransactionResult> CreateTransactionInternal(",
      "path": "src/wallet/spend.cpp",
      "position": 166,
      "original_position": 1,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "4c7baadea28fd203b3d5e261abb9161e0169c900",
      "in_reply_to_id": 2325303247,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Even better, if we dont have one already, we can create a test case for all of the possible change scenarios and document there.",
      "created_at": "2025-09-05T14:46:25Z",
      "updated_at": "2025-09-05T14:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325305066",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325305066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1134,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325317749",
      "pull_request_review_id": 3189689313,
      "id": 2325317749,
      "node_id": "PRRC_kwDOABII586KmYh1",
      "diff_hunk": "@@ -1693,9 +1692,18 @@ class SpDescriptor final : public DescriptorImpl\n         return true;\n     }\n \n+    CKey GetScanKey() const override\n+    {\n+        FlatSigningProvider dummy, out;\n+        m_scan_pubkey->GetPrivKey(0, dummy, out);\n+        // The ScankeyPubkeyProvider will always contain the scan key\n+        assert(out.keys.size() == 1);\n+        return out.keys.begin()->second;\n+    }",
      "path": "src/script/descriptor.cpp",
      "position": 108,
      "original_position": 44,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "2c53d22b227dc1cd14e297d5b6b4a6c9b1d4fdfb",
      "in_reply_to_id": 2325267495,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe we can use a namespace?",
      "created_at": "2025-09-05T14:51:01Z",
      "updated_at": "2025-09-05T14:51:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325317749",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325317749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": 1695,
      "original_start_line": 1695,
      "start_side": "RIGHT",
      "line": 1702,
      "original_line": 1702,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325328988",
      "pull_request_review_id": 3189705173,
      "id": 2325328988,
      "node_id": "PRRC_kwDOABII586KmbRc",
      "diff_hunk": "@@ -1307,25 +1306,42 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n                 sp_dests[i] = *sp;\n             }\n         }\n+        size_t sp_change_index{sp_dests.size() > 0 ? sp_dests.rbegin()->first + 1 : 0};",
      "path": "src/wallet/spend.cpp",
      "position": 251,
      "original_position": 56,
      "commit_id": "7150948e694a3ec8420a39ff9530b70e0a8d6c07",
      "original_commit_id": "bdee098f993bb1b8df610ade625c6befa2ed6125",
      "in_reply_to_id": 2325296901,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We need it to extract the `change_dest` from the results of `CreateSilentPaymentOutputs`. ",
      "created_at": "2025-09-05T14:55:45Z",
      "updated_at": "2025-09-05T14:55:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32966#discussion_r2325328988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325328988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1311,
      "original_line": 1309,
      "side": "RIGHT"
    }
  ]
}