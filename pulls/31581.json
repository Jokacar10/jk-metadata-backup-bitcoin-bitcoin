{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581",
    "id": 2255637174,
    "node_id": "PR_kwDOABII586Gckq2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31581",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31581.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31581.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31581",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31581/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/04249682e381f976de6ba56bb4fb2996dfa194ab",
    "number": 31581,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "test: have miner_tests use  Mining interface",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Needed for both #31283 and #31564.\r\n\r\nBy using the Mining interface in `miner_tests.cpp` we increase its coverage in unit tests.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2024-12-30T16:34:31Z",
    "updated_at": "2025-01-04T13:07:29Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "1881c97c683e3d6685b8b3ffb0d3fab730fc3bf1",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "Sjors:2024/12/miner_tests",
      "ref": "2024/12/miner_tests",
      "sha": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 92390696,
        "node_id": "MDEwOlJlcG9zaXRvcnk5MjM5MDY5Ng==",
        "name": "bitcoin",
        "full_name": "Sjors/bitcoin",
        "owner": {
          "login": "Sjors",
          "id": 10217,
          "node_id": "MDQ6VXNlcjEwMjE3",
          "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Sjors",
          "html_url": "https://github.com/Sjors",
          "followers_url": "https://api.github.com/users/Sjors/followers",
          "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
          "organizations_url": "https://api.github.com/users/Sjors/orgs",
          "repos_url": "https://api.github.com/users/Sjors/repos",
          "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Sjors/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Sjors/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Sjors/bitcoin",
        "archive_url": "https://api.github.com/repos/Sjors/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Sjors/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Sjors/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Sjors/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Sjors/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Sjors/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Sjors/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Sjors/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Sjors/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Sjors/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Sjors/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Sjors/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Sjors/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Sjors/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Sjors/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Sjors/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Sjors/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Sjors/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Sjors/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Sjors/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Sjors/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Sjors/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Sjors/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Sjors/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Sjors/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Sjors/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Sjors/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Sjors/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Sjors/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Sjors/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Sjors/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Sjors/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Sjors/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Sjors/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Sjors/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Sjors/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Sjors/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Sjors/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Sjors/bitcoin/hooks",
        "svn_url": "https://github.com/Sjors/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 11,
        "stargazers_count": 9,
        "watchers_count": 9,
        "size": 254445,
        "default_branch": "sv2",
        "open_issues_count": 11,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-04T13:43:40Z",
        "created_at": "2017-05-25T10:05:54Z",
        "updated_at": "2024-12-20T03:15:06Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "228aba2c4d9ac0b2ca3edd3c2cdf0a92e55f669b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36473,
        "stargazers_count": 81049,
        "watchers_count": 81049,
        "size": 273906,
        "default_branch": "master",
        "open_issues_count": 690,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-03T18:58:26Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-01-04T13:47:54Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 118,
    "deletions": 77,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 15,
    "comments": 4
  },
  "events": [
    {
      "event": "commented",
      "id": 2565693442,
      "node_id": "IC_kwDOABII586Y7WAC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2565693442",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T16:34:33Z",
      "updated_at": "2025-01-03T23:31:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31581.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/31581#pullrequestreview-2529323093), [vasild](https://github.com/bitcoin/bitcoin/pull/31581#pullrequestreview-2529550479), [tdb3](https://github.com/bitcoin/bitcoin/pull/31581#pullrequestreview-2529729064) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31564](https://github.com/bitcoin/bitcoin/pull/31564) (Add checkblock RPC and checkBlock() to Mining interface by Sjors)\n* [#31283](https://github.com/bitcoin/bitcoin/pull/31283) (Add waitNext() to BlockTemplate interface by Sjors)\n* [#30391](https://github.com/bitcoin/bitcoin/pull/30391) (BlockAssembler: return selected packages virtual size and fee by ismaelsadeeq)\n* [#30157](https://github.com/bitcoin/bitcoin/pull/30157) (Fee Estimation via Fee rate Forecasters by ismaelsadeeq)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#issuecomment-2565693442",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31581"
    },
    {
      "event": "labeled",
      "id": 15785704222,
      "node_id": "LE_lADOABII586ktsT3zwAAAAOs5rse",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15785704222",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T16:34:36Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "renamed",
      "id": 15786545979,
      "node_id": "RTE_lADOABII586ktsT3zwAAAAOs85M7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15786545979",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T19:18:01Z",
      "rename": {
        "from": "test: have miner_tests use  Mining interface and fewer cs_main locks",
        "to": "test: have miner_tests use  Mining interface"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15786547323,
      "node_id": "HRFPE_lADOABII586ktsT3zwAAAAOs85h7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15786547323",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9af14f25683af866b348ccd9d6638ccfe2369190",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/9af14f25683af866b348ccd9d6638ccfe2369190",
      "created_at": "2024-12-30T19:18:17Z"
    },
    {
      "event": "commented",
      "id": 2565835622,
      "node_id": "IC_kwDOABII586Y74tm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2565835622",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T19:19:28Z",
      "updated_at": "2024-12-30T20:40:41Z",
      "author_association": "MEMBER",
      "body": "I dropped the second commit, as I was confused. This PR should now be very easy to review. Also rebased on #31563.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#issuecomment-2565835622",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31581"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15786713300,
      "node_id": "HRFPE_lADOABII586ktsT3zwAAAAOs9iDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15786713300",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "created_at": "2024-12-30T19:54:03Z"
    },
    {
      "event": "reviewed",
      "id": 2527647194,
      "node_id": "PRR_kwDOABII586WqNXa",
      "url": null,
      "actor": null,
      "commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK e4e76f27d73646d887ed8b660c67da4b4b785d8e. Pretty straightforward test updates that add some more coverage. I left some comments below but none are very important.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#pullrequestreview-2527647194",
      "submitted_at": "2025-01-02T15:30:14Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA0MjQ5NjgyZTM4MWY5NzZkZTZiYTU2YmI0ZmIyOTk2ZGZhMTk0YWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04249682e381f976de6ba56bb4fb2996dfa194ab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/04249682e381f976de6ba56bb4fb2996dfa194ab",
      "tree": {
        "sha": "23b83f2969d400cd5d41126625828a69bb1d4857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23b83f2969d400cd5d41126625828a69bb1d4857"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 23b83f2969d400cd5d41126625828a69bb1d4857\nparent 228aba2c4d9ac0b2ca3edd3c2cdf0a92e55f669b\nauthor Sjors Provoost <sjors@sprovoost.nl> 1735901282 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1735901285 +0100\n\ntest: use Mining interface in miner_tests\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmd3wGUACgkQV/+b28ww\nEAlz9g/+NCIt9pZXp9X4Kq3LMjg+UdtjDtxBJ2ScRBygrbTexsg+1NQYSjIv+vSe\nDYJYahWYpp15MRtchu8FGaAMqeRs9WlsEYnw9f8FlvuaVRBd07Qyz4UuuBx2gll7\nwMWq9knWUwEkZZB8gsyZKFAELgDr8m/ByMpGO4TcP9LggckVzXMsSwu7Z2vuUOQ6\nDFV7prd6JpacJcsZZ+zUn2cOlx21rmTa8pazq7rm3kbyP5zWO7foucmjA8hIE8w9\nykZ5y/D7bhMgzNzhQck8tvne3XznFXEaHVKZd1HaOJY3DfyIyxNP1A5NAPxuyWdC\nKA9TB5FU8VZK5sc351C8Inqo7eeFUdHtQ06NwtwsEgniqAaJW7qB5JqcVD6L21wB\ngLxMTa5d2z+QuvQ6iOlLMYhITsfxjcuISp4XAxMHauY3od9F/+pROZnRt6/P64lA\na0XQIb1QkNFbai0SEbmgc6f8yvwjsBiWIdU6vr97L9kcEsJS9lFahNXyjO6v8S98\nQIbkH6QoOz4h6fUl6cSIRlpKN5XmyzdoV7WinrViYosncY3ooIuEa74rUtbPaDyi\nP8ujTFIxAMECaC8SgV1QT5MHv4f6SHZczxNFJmVJWxKXoFuEDsI3YdBx2PAvvBCO\nhq7GIF28gzBj/KqEHoC8K+BgNh0Fx1zK9IMrlHWToTxoQaas2pU=\n=rBHG\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/228aba2c4d9ac0b2ca3edd3c2cdf0a92e55f669b",
          "sha": "228aba2c4d9ac0b2ca3edd3c2cdf0a92e55f669b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/228aba2c4d9ac0b2ca3edd3c2cdf0a92e55f669b"
        }
      ],
      "message": "test: use Mining interface in miner_tests",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-01-03T10:48:05Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-01-03T10:48:02Z"
      },
      "sha": "04249682e381f976de6ba56bb4fb2996dfa194ab"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15806356340,
      "node_id": "HRFPE_lADOABII586ktsT3zwAAAAOuIdt0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15806356340",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/04249682e381f976de6ba56bb4fb2996dfa194ab",
      "created_at": "2025-01-03T10:48:38Z"
    },
    {
      "event": "commented",
      "id": 2569034227,
      "node_id": "IC_kwDOABII586ZIFnz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2569034227",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-03T10:49:14Z",
      "updated_at": "2025-01-03T10:49:14Z",
      "author_association": "MEMBER",
      "body": "Rebased and addressed feedback.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#issuecomment-2569034227",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31581"
    },
    {
      "event": "reviewed",
      "id": 2529323093,
      "node_id": "PRR_kwDOABII586WwmhV",
      "url": null,
      "actor": null,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 04249682e381f976de6ba56bb4fb2996dfa194ab, just minor suggested changes (renames, comments, BOOST_REQUIREs) since last review and some more extra clarifications and checks added to the CreateNewBlock_validity test. The CreateNewBlock_validity changes seem clear and easy to understand now.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#pullrequestreview-2529323093",
      "submitted_at": "2025-01-03T15:56:55Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
    },
    {
      "event": "reviewed",
      "id": 2529550479,
      "node_id": "PRR_kwDOABII586WxeCP",
      "url": null,
      "actor": null,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 04249682e381f976de6ba56bb4fb2996dfa194ab\r\n\r\nNot in this PR, just an observation: given that we have two concepts: \"block\" and \"block template\", I find the below pattern a bit confusing:\r\n\r\n```\r\nblock_template = mining->createNewBlock()\r\nblock = block_template->getBlock()\r\n```\r\nbecause I would expect `createNewBlock()` to create a new block, but apparently it creates a new block template.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#pullrequestreview-2529550479",
      "submitted_at": "2025-01-03T18:45:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
    },
    {
      "event": "commented",
      "id": 2569731568,
      "node_id": "IC_kwDOABII586ZKv3w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2569731568",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-03T19:45:10Z",
      "updated_at": "2025-01-03T19:45:10Z",
      "author_association": "MEMBER",
      "body": "> because I would expect `createNewBlock()` to create a new block, but apparently it creates a new block template.\r\n\r\nIndeed, I could rename the interface method (different PR) to e.g. `newBlockTemplate()`. Though I'd rather avoid the code churn in my pile of PRs :-)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#issuecomment-2569731568",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31581"
    },
    {
      "event": "reviewed",
      "id": 2529729064,
      "node_id": "PRR_kwDOABII586WyJoo",
      "url": null,
      "actor": null,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 04249682e381f976de6ba56bb4fb2996dfa194ab\r\n\r\nNice updates. Left a minor non-blocking comment.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#pullrequestreview-2529729064",
      "submitted_at": "2025-01-03T21:21:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900922458",
      "pull_request_review_id": 2527647194,
      "id": 1900922458,
      "node_id": "PRRC_kwDOABII585xTcZa",
      "diff_hunk": "@@ -135,13 +137,12 @@ void MinerTestingSetup::TestPackageSelection(const CScript& scriptPubKey, const\n     Txid hashHighFeeTx = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(50000).Time(Now<NodeSeconds>()).SpendsCoinbase(false).FromTx(tx));\n \n-    BlockAssembler::Options options;\n-    options.coinbase_output_script = scriptPubKey;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 4U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n+    std::unique_ptr<BlockTemplate> block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};",
      "path": "src/test/miner_tests.cpp",
      "position": 69,
      "original_position": 68,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: use Mining interface in miner_tests\" (e4e76f27d73646d887ed8b660c67da4b4b785d8e)\r\n\r\nOther tests seem to add BOOST_REQUIRE(block_template); before this.",
      "created_at": "2025-01-02T14:18:18Z",
      "updated_at": "2025-01-02T15:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1900922458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900922458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900923460",
      "pull_request_review_id": 2527647194,
      "id": 1900923460,
      "node_id": "PRRC_kwDOABII585xTcpE",
      "diff_hunk": "@@ -594,62 +613,77 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};",
      "path": "src/test/miner_tests.cpp",
      "position": 311,
      "original_position": 309,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: use Mining interface in miner_tests\" (e4e76f27d73646d887ed8b660c67da4b4b785d8e)\r\n\r\nOther tests seem to add BOOST_REQUIRE(block_template); before this.",
      "created_at": "2025-01-02T14:19:26Z",
      "updated_at": "2025-01-02T15:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1900923460",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900923460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 619,
      "original_line": 619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900936095",
      "pull_request_review_id": 2527647194,
      "id": 1900936095,
      "node_id": "PRRC_kwDOABII585xTfuf",
      "diff_hunk": "@@ -106,6 +104,10 @@ static std::unique_ptr<CBlockIndex> CreateBlockIndex(int nHeight, CBlockIndex* a\n void MinerTestingSetup::TestPackageSelection(const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst)\n {\n     CTxMemPool& tx_mempool{MakeMempool()};\n+    auto miner{MakeMining()};",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: use Mining interface in miner_tests\" (e4e76f27d73646d887ed8b660c67da4b4b785d8e)\r\n\r\nIn other tests below this is followed by `BOOST_REQUIRE(miner);`. Seems fine to keep or drop, but would be good to be consistent.\r\n\r\nAlso I think it might be a little clearer if variable was called `mining` instead of `miner` since it's not a miner and can't mine blocks, it's just a pointer to the interface used for mining. But feel free to ignore this if you prefer the current name.",
      "created_at": "2025-01-02T14:32:20Z",
      "updated_at": "2025-01-02T15:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1900936095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900936095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900964589",
      "pull_request_review_id": 2527647194,
      "id": 1900964589,
      "node_id": "PRRC_kwDOABII585xTmrt",
      "diff_hunk": "@@ -594,62 +613,77 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto miner{MakeMining()};\n+    BOOST_REQUIRE(miner);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n     BlockAssembler::Options options;\n     options.coinbase_output_script = scriptPubKey;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock());\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        const int current_height{miner->getTip()->height};\n+\n+        // Simple block creation, nothing special yet:\n+        block_template = miner->createNewBlock(options);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n+        CMutableTransaction txCoinbase(*block.vtx[0]);\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n             txCoinbase.version = 1;\n-            txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n+            txCoinbase.vin[0].scriptSig = CScript{} << (current_height + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(txCoinbase);\n             if (txFirst.size() == 0)\n-                baseheight = m_node.chainman->ActiveChain().Height();\n+                baseheight = current_height;\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n+        }\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        // Alternate calls between Chainman's ProcessNewBlock and submitSolution\n+        // via the Mining interface.",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 386,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: use Mining interface in miner_tests\" (e4e76f27d73646d887ed8b660c67da4b4b785d8e)\r\n\r\nCan this comment be updated to say the reason for alternating between these? (e.g. to provide test coverage for net_processing code)\r\n\r\nI think it would also be clearer to drop the comments about this in the PR and commit descriptions:\r\n\r\n- \"We mainly call the createNewBlock() method, but also getTip()->height and submitSolution(). Calls to the latter are alternated with direct calls to Chainman's ProcessNewBlock, because e.g. net_processing.cpp uses that.\"\r\n- \"Use createNewBlock via the interface instead of using the BlockAssembler directly. The latter is always called via the interface in production code.\"\r\n\r\nThose comments were confusing to me without seeing context here. They also seem unrelated to all the other changes in this PR (unless I am not seeing a bigger connection). If those comments are just supposed to describe this `if` statement, it would be better to move them here.",
      "created_at": "2025-01-02T15:01:31Z",
      "updated_at": "2025-01-02T15:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1900964589",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900964589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": 675,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900973493",
      "pull_request_review_id": 2527647194,
      "id": 1900973493,
      "node_id": "PRRC_kwDOABII585xTo21",
      "diff_hunk": "@@ -594,62 +613,77 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto miner{MakeMining()};\n+    BOOST_REQUIRE(miner);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n     BlockAssembler::Options options;\n     options.coinbase_output_script = scriptPubKey;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock());\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        const int current_height{miner->getTip()->height};\n+\n+        // Simple block creation, nothing special yet:\n+        block_template = miner->createNewBlock(options);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n+        CMutableTransaction txCoinbase(*block.vtx[0]);\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n             txCoinbase.version = 1;\n-            txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n+            txCoinbase.vin[0].scriptSig = CScript{} << (current_height + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(txCoinbase);\n             if (txFirst.size() == 0)\n-                baseheight = m_node.chainman->ActiveChain().Height();\n+                baseheight = current_height;\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n+        }\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        // Alternate calls between Chainman's ProcessNewBlock and submitSolution\n+        // via the Mining interface.\n+        if (current_height % 2 == 0) {\n+            BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, /*force_processing=*/true, /*min_pow_checked=*/true, nullptr));\n+        } else {\n+            BOOST_REQUIRE(block_template->submitSolution(block.nVersion, block.nTime, block.nNonce, MakeTransactionRef(txCoinbase)));\n         }\n-        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, true, true, nullptr));\n-        pblock->hashPrevBlock = pblock->GetHash();\n+        // ProcessNewBlock and submitSolution do not check if the new block is\n+        // valid. If it is, they will wait for the tip to update. Therefore the",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 396,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: use Mining interface in miner_tests\" (e4e76f27d73646d887ed8b660c67da4b4b785d8e)\r\n\r\nUnless I'm misunderstanding something it doesn't seem accurate to say that these don't check if the new block is valid. Would seem more accurate to say they return true even if the block is invalid. Also it would seem be more accurate to say that they update the tip, rather than that they wait for the tip to update.",
      "created_at": "2025-01-02T15:10:56Z",
      "updated_at": "2025-01-02T15:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1900973493",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900973493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900981503",
      "pull_request_review_id": 2527647194,
      "id": 1900981503,
      "node_id": "PRRC_kwDOABII585xTqz_",
      "diff_hunk": "@@ -594,62 +613,77 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto miner{MakeMining()};\n+    BOOST_REQUIRE(miner);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n     BlockAssembler::Options options;\n     options.coinbase_output_script = scriptPubKey;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock());\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        const int current_height{miner->getTip()->height};\n+\n+        // Simple block creation, nothing special yet:\n+        block_template = miner->createNewBlock(options);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n+        CMutableTransaction txCoinbase(*block.vtx[0]);\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n             txCoinbase.version = 1;\n-            txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n+            txCoinbase.vin[0].scriptSig = CScript{} << (current_height + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(txCoinbase);\n             if (txFirst.size() == 0)\n-                baseheight = m_node.chainman->ActiveChain().Height();\n+                baseheight = current_height;\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n+        }\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        // Alternate calls between Chainman's ProcessNewBlock and submitSolution\n+        // via the Mining interface.\n+        if (current_height % 2 == 0) {\n+            BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, /*force_processing=*/true, /*min_pow_checked=*/true, nullptr));\n+        } else {\n+            BOOST_REQUIRE(block_template->submitSolution(block.nVersion, block.nTime, block.nNonce, MakeTransactionRef(txCoinbase)));\n         }\n-        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, true, true, nullptr));\n-        pblock->hashPrevBlock = pblock->GetHash();\n+        // ProcessNewBlock and submitSolution do not check if the new block is\n+        // valid. If it is, they will wait for the tip to update. Therefore the\n+        // following check will either return immediately, or be stuck indefinately.\n+        // It's mainly there to increase test coverage.\n+        miner->waitTipChanged(block.hashPrevBlock);",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 399,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: use Mining interface in miner_tests\" (e4e76f27d73646d887ed8b660c67da4b4b785d8e)\r\n\r\nSeems fine to call waitTipChange if idea is to add more test coverage for it, but wouldn't it be more direct to just check that the new tip matches the block hash if the idea is to check that the block was connected? This way if the block was not connected the test would fail instead of hanging indefinitely.",
      "created_at": "2025-01-02T15:19:29Z",
      "updated_at": "2025-01-02T15:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1900981503",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900981503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 686,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669070",
      "pull_request_review_id": 2528884057,
      "id": 1901669070,
      "node_id": "PRRC_kwDOABII585xWSrO",
      "diff_hunk": "@@ -594,62 +613,77 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto miner{MakeMining()};\n+    BOOST_REQUIRE(miner);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n     BlockAssembler::Options options;\n     options.coinbase_output_script = scriptPubKey;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock());\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        const int current_height{miner->getTip()->height};\n+\n+        // Simple block creation, nothing special yet:\n+        block_template = miner->createNewBlock(options);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n+        CMutableTransaction txCoinbase(*block.vtx[0]);\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n             txCoinbase.version = 1;\n-            txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n+            txCoinbase.vin[0].scriptSig = CScript{} << (current_height + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(txCoinbase);\n             if (txFirst.size() == 0)\n-                baseheight = m_node.chainman->ActiveChain().Height();\n+                baseheight = current_height;\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n+        }\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        // Alternate calls between Chainman's ProcessNewBlock and submitSolution\n+        // via the Mining interface.\n+        if (current_height % 2 == 0) {\n+            BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, /*force_processing=*/true, /*min_pow_checked=*/true, nullptr));\n+        } else {\n+            BOOST_REQUIRE(block_template->submitSolution(block.nVersion, block.nTime, block.nNonce, MakeTransactionRef(txCoinbase)));\n         }\n-        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, true, true, nullptr));\n-        pblock->hashPrevBlock = pblock->GetHash();\n+        // ProcessNewBlock and submitSolution do not check if the new block is\n+        // valid. If it is, they will wait for the tip to update. Therefore the\n+        // following check will either return immediately, or be stuck indefinately.\n+        // It's mainly there to increase test coverage.\n+        miner->waitTipChanged(block.hashPrevBlock);",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 399,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": 1900981503,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That makes sense, added an explicit check above the `waitTipChanged()` call.",
      "created_at": "2025-01-03T10:48:43Z",
      "updated_at": "2025-01-03T10:48:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1901669070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 686,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669119",
      "pull_request_review_id": 2528884117,
      "id": 1901669119,
      "node_id": "PRRC_kwDOABII585xWSr_",
      "diff_hunk": "@@ -594,62 +613,77 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto miner{MakeMining()};\n+    BOOST_REQUIRE(miner);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n     BlockAssembler::Options options;\n     options.coinbase_output_script = scriptPubKey;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock());\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        const int current_height{miner->getTip()->height};\n+\n+        // Simple block creation, nothing special yet:\n+        block_template = miner->createNewBlock(options);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n+        CMutableTransaction txCoinbase(*block.vtx[0]);\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n             txCoinbase.version = 1;\n-            txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n+            txCoinbase.vin[0].scriptSig = CScript{} << (current_height + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(txCoinbase);\n             if (txFirst.size() == 0)\n-                baseheight = m_node.chainman->ActiveChain().Height();\n+                baseheight = current_height;\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n+        }\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        // Alternate calls between Chainman's ProcessNewBlock and submitSolution\n+        // via the Mining interface.\n+        if (current_height % 2 == 0) {\n+            BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, /*force_processing=*/true, /*min_pow_checked=*/true, nullptr));\n+        } else {\n+            BOOST_REQUIRE(block_template->submitSolution(block.nVersion, block.nTime, block.nNonce, MakeTransactionRef(txCoinbase)));\n         }\n-        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, true, true, nullptr));\n-        pblock->hashPrevBlock = pblock->GetHash();\n+        // ProcessNewBlock and submitSolution do not check if the new block is\n+        // valid. If it is, they will wait for the tip to update. Therefore the",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 396,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": 1900973493,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I dropped this comment.",
      "created_at": "2025-01-03T10:48:45Z",
      "updated_at": "2025-01-03T10:48:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1901669119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669167",
      "pull_request_review_id": 2528884208,
      "id": 1901669167,
      "node_id": "PRRC_kwDOABII585xWSsv",
      "diff_hunk": "@@ -594,62 +613,77 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto miner{MakeMining()};\n+    BOOST_REQUIRE(miner);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n     BlockAssembler::Options options;\n     options.coinbase_output_script = scriptPubKey;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock());\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        const int current_height{miner->getTip()->height};\n+\n+        // Simple block creation, nothing special yet:\n+        block_template = miner->createNewBlock(options);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n+        CMutableTransaction txCoinbase(*block.vtx[0]);\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n             txCoinbase.version = 1;\n-            txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n+            txCoinbase.vin[0].scriptSig = CScript{} << (current_height + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(txCoinbase);\n             if (txFirst.size() == 0)\n-                baseheight = m_node.chainman->ActiveChain().Height();\n+                baseheight = current_height;\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n+        }\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        // Alternate calls between Chainman's ProcessNewBlock and submitSolution\n+        // via the Mining interface.",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 386,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": 1900964589,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, I dropped them for the commit and PR description and updated the code comment.",
      "created_at": "2025-01-03T10:48:49Z",
      "updated_at": "2025-01-03T10:48:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1901669167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": 675,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669229",
      "pull_request_review_id": 2528884298,
      "id": 1901669229,
      "node_id": "PRRC_kwDOABII585xWStt",
      "diff_hunk": "@@ -106,6 +104,10 @@ static std::unique_ptr<CBlockIndex> CreateBlockIndex(int nHeight, CBlockIndex* a\n void MinerTestingSetup::TestPackageSelection(const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst)\n {\n     CTxMemPool& tx_mempool{MakeMempool()};\n+    auto miner{MakeMining()};",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": 1900936095,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Renamed.",
      "created_at": "2025-01-03T10:48:54Z",
      "updated_at": "2025-01-03T10:48:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1901669229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669273",
      "pull_request_review_id": 2528884375,
      "id": 1901669273,
      "node_id": "PRRC_kwDOABII585xWSuZ",
      "diff_hunk": "@@ -135,13 +137,12 @@ void MinerTestingSetup::TestPackageSelection(const CScript& scriptPubKey, const\n     Txid hashHighFeeTx = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(50000).Time(Now<NodeSeconds>()).SpendsCoinbase(false).FromTx(tx));\n \n-    BlockAssembler::Options options;\n-    options.coinbase_output_script = scriptPubKey;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 4U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n+    std::unique_ptr<BlockTemplate> block_template = miner->createNewBlock(options);\n+    CBlock block{block_template->getBlock()};",
      "path": "src/test/miner_tests.cpp",
      "position": 69,
      "original_position": 68,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "e4e76f27d73646d887ed8b660c67da4b4b785d8e",
      "in_reply_to_id": 1900922458,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A failing `BOOST_REQUIRE` produces an easier to debug failure than dereferencing nullptr, so it's always a good one to add.\r\n\r\nI updated the test to do this after every `miner->createNewBlock()` call.\r\n\r\nSimilarly `BOOST_REQUIRE` stops the test immedidately, so I replaced a few `BOOST_CHECK` calls with it. ",
      "created_at": "2025-01-03T10:48:58Z",
      "updated_at": "2025-01-03T10:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1901669273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901669273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1902065107",
      "pull_request_review_id": 2529550479,
      "id": 1902065107,
      "node_id": "PRRC_kwDOABII585xXzXT",
      "diff_hunk": "@@ -594,62 +614,83 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = mining->createNewBlock(options);\n+    BOOST_REQUIRE(block_template);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto mining{MakeMining()};\n+    BOOST_REQUIRE(mining);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n     BlockAssembler::Options options;\n     options.coinbase_output_script = scriptPubKey;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock());\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        const int current_height{mining->getTip()->height};\n+\n+        // Simple block creation, nothing special yet:\n+        block_template = mining->createNewBlock(options);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n+        CMutableTransaction txCoinbase(*block.vtx[0]);\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n             txCoinbase.version = 1;\n-            txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n+            txCoinbase.vin[0].scriptSig = CScript{} << (current_height + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(txCoinbase);\n             if (txFirst.size() == 0)\n-                baseheight = m_node.chainman->ActiveChain().Height();\n+                baseheight = current_height;\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n+        }\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        // Alternate calls between Chainman's ProcessNewBlock and submitSolution\n+        // via the Mining interface. The former is used by net_processing as well\n+        // as the submitblock RPC.\n+        if (current_height % 2 == 0) {\n+            BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, /*force_processing=*/true, /*min_pow_checked=*/true, nullptr));\n+        } else {\n+            BOOST_REQUIRE(block_template->submitSolution(block.nVersion, block.nTime, block.nNonce, MakeTransactionRef(txCoinbase)));",
      "path": "src/test/miner_tests.cpp",
      "position": 393,
      "original_position": 393,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Feel free to ignore: could use `block.vtx[0]` here instead of `MakeTransactionRef(txCoinbase)`:\r\n\r\n```suggestion\r\n            BOOST_REQUIRE(block_template->submitSolution(block.nVersion, block.nTime, block.nNonce, block.vtx[0]));\r\n```\r\nand reduce the scope of `txCoinbase` to only inside the above `{` `}` block.",
      "created_at": "2025-01-03T18:41:34Z",
      "updated_at": "2025-01-03T18:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1902065107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1902065107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 683,
      "original_line": 683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1902108458",
      "pull_request_review_id": 2529622798,
      "id": 1902108458,
      "node_id": "PRRC_kwDOABII585xX98q",
      "diff_hunk": "@@ -594,62 +614,83 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = mining->createNewBlock(options);\n+    BOOST_REQUIRE(block_template);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto mining{MakeMining()};\n+    BOOST_REQUIRE(mining);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n     BlockAssembler::Options options;\n     options.coinbase_output_script = scriptPubKey;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock());\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        const int current_height{mining->getTip()->height};\n+\n+        // Simple block creation, nothing special yet:\n+        block_template = mining->createNewBlock(options);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n+        CMutableTransaction txCoinbase(*block.vtx[0]);\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n             txCoinbase.version = 1;\n-            txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n+            txCoinbase.vin[0].scriptSig = CScript{} << (current_height + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(txCoinbase);\n             if (txFirst.size() == 0)\n-                baseheight = m_node.chainman->ActiveChain().Height();\n+                baseheight = current_height;\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n+        }\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        // Alternate calls between Chainman's ProcessNewBlock and submitSolution\n+        // via the Mining interface. The former is used by net_processing as well\n+        // as the submitblock RPC.\n+        if (current_height % 2 == 0) {\n+            BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, /*force_processing=*/true, /*min_pow_checked=*/true, nullptr));\n+        } else {\n+            BOOST_REQUIRE(block_template->submitSolution(block.nVersion, block.nTime, block.nNonce, MakeTransactionRef(txCoinbase)));",
      "path": "src/test/miner_tests.cpp",
      "position": 393,
      "original_position": 393,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "in_reply_to_id": 1902065107,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, will consider if I need to retouch. Though I think `txCoinbase` is more clear than `block.vtx[0]` and limiting the scope isn't that important.",
      "created_at": "2025-01-03T19:42:26Z",
      "updated_at": "2025-01-03T19:42:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1902108458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1902108458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 683,
      "original_line": 683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1902173650",
      "pull_request_review_id": 2529729064,
      "id": 1902173650,
      "node_id": "PRRC_kwDOABII585xYN3S",
      "diff_hunk": "@@ -158,11 +160,13 @@ void MinerTestingSetup::TestPackageSelection(const CScript& scriptPubKey, const\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     Txid hashLowFeeTx = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(feeToUse).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n+    block_template = mining->createNewBlock(options);\n+    BOOST_REQUIRE(block_template);\n+    block = block_template->getBlock();",
      "path": "src/test/miner_tests.cpp",
      "position": 84,
      "original_position": 84,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This pattern is repeated throughout the file.\r\nUnless I'm missing something, seems like a good opportunity to de-duplicate with something like:\r\n\r\n```c++\r\nCBlock CreateAndGetBlock(const node::BlockCreateOptions& options)\r\n{\r\n    auto mining{MakeMining()};\r\n    BOOST_REQUIRE(mining);\r\n    std::unique_ptr<BlockTemplate> block_template = mining->createNewBlock(options);\r\n    BOOST_REQUIRE(block_template);\r\n    return block_template->getBlock();\r\n}\r\n```",
      "created_at": "2025-01-03T21:17:21Z",
      "updated_at": "2025-01-03T21:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1902173650",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1902173650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": 163,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1903096882",
      "pull_request_review_id": 2530734371,
      "id": 1903096882,
      "node_id": "PRRC_kwDOABII585xbvQy",
      "diff_hunk": "@@ -158,11 +160,13 @@ void MinerTestingSetup::TestPackageSelection(const CScript& scriptPubKey, const\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     Txid hashLowFeeTx = tx.GetHash();\n     AddToMempool(tx_mempool, entry.Fee(feeToUse).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(tx_mempool, options).CreateNewBlock();\n+    block_template = mining->createNewBlock(options);\n+    BOOST_REQUIRE(block_template);\n+    block = block_template->getBlock();",
      "path": "src/test/miner_tests.cpp",
      "position": 84,
      "original_position": 84,
      "commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "original_commit_id": "04249682e381f976de6ba56bb4fb2996dfa194ab",
      "in_reply_to_id": 1902173650,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That makes sense. Will do if I need to retouch.",
      "created_at": "2025-01-04T13:07:29Z",
      "updated_at": "2025-01-04T13:07:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1903096882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1903096882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31581"
        }
      },
      "start_line": 163,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    }
  ]
}