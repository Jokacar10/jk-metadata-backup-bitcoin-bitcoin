{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535",
    "id": 1990010941,
    "node_id": "PR_kwDOABII5852nSg9",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30535",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30535.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30535.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/58914ab459c46c518c47c5082aec25ac0d03ab11",
    "number": 30535,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "feefrac: add support for evaluating at given size",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The `FeeFrac` type represents a fraction, intended to be used for sats/vbyte or sats/WU. This PR adds functionality to evaluate that feerate for a given size, in order to obtain the fee it corresponds with (rounding down, or rounding up).\r\n\r\nThe motivation here is being able to do accurate feerate evaluations in cluster mempool block building heuristics (where rounding down is needed), but in principle this makes it possible to use `FeeFrac` as a more accurate replacement for `CFeeRate` (where for feerate estimation rounding up is desirable). Because of this, both rounding modes are implemented.\r\n\r\nUnit tests are included for known-correct values, plus a fuzz test that verifies the result using `arith_uint256`.",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2024-07-26T19:34:23Z",
    "updated_at": "2025-04-07T22:00:09Z",
    "closed_at": "2025-04-07T22:00:09Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2025-04-07T22:00:08Z",
    "merged_by": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "cfe025ff0e1dcf984179a5a9b01dc8b865d95409",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "sipa:202407_feefrac_eval",
      "ref": "202407_feefrac_eval",
      "sha": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 20,
        "stargazers_count": 90,
        "watchers_count": 90,
        "size": 258799,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-07T22:35:03Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2025-02-27T11:11:39Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "0dc74c92c0650a171e1c6f5bea1c15e13584e799",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37011,
        "stargazers_count": 82803,
        "watchers_count": 82803,
        "size": 279369,
        "default_branch": "master",
        "open_issues_count": 698,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-07T22:00:04Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-04-07T22:00:11Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 310,
    "deletions": 60,
    "changed_files": 4,
    "commits": 7,
    "review_comments": 84,
    "comments": 26
  },
  "events": [
    {
      "event": "commented",
      "id": 2253351478,
      "node_id": "IC_kwDOABII586GT2o2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2253351478",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T19:34:25Z",
      "updated_at": "2025-04-07T21:28:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30535.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2783702063), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2747297153), [glozow](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2748153258) |\n| Concept ACK | [tdb3](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2203550219), [ceffikhan](https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2255356768), [brunoerg](https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2271271424), [Christewart](https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2394374445), [murchandamus](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2596789900), [instagibbs](https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2640044728), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2769591235) |\n| Stale ACK | [laanwj](https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2598982998) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2253351478",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13665925904,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMujXsQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13665925904",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "42ee8b474f0aea3c602144b2f057006b4864a4da",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/42ee8b474f0aea3c602144b2f057006b4864a4da",
      "created_at": "2024-07-26T20:45:57Z"
    },
    {
      "event": "reviewed",
      "id": 2202748071,
      "node_id": "PRR_kwDOABII586DS0Sn",
      "url": null,
      "actor": null,
      "commit_id": "42ee8b474f0aea3c602144b2f057006b4864a4da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI think we should also have  `GetFeePerK` or `GetFeePerS` method in `FeeFrac` similar to `CFeeRate`",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2202748071",
      "submitted_at": "2024-07-26T21:03:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "commented",
      "id": 2254263266,
      "node_id": "IC_kwDOABII586GXVPi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2254263266",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T21:52:47Z",
      "updated_at": "2024-07-27T21:52:47Z",
      "author_association": "MEMBER",
      "body": "@ismaelsadeeq It's a possibility, if we'd want to replace CFeeRate entirely. Another possibility is keeping CFeeRate and its interface, but make it be an encapsulated FeeFrac object (that e.g. on serialization converts to sats/kvb, but that otherwise keeps exact fractions).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2254263266",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 13669593603,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMuxXID",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13669593603",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T21:52:48Z"
    },
    {
      "event": "subscribed",
      "id": 13669593604,
      "node_id": "SE_lADOABII586RAm30zwAAAAMuxXIE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13669593604",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T21:52:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13671553870,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMu41tO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13671553870",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "created_at": "2024-07-28T15:25:20Z"
    },
    {
      "event": "reviewed",
      "id": 2203550219,
      "node_id": "PRR_kwDOABII586DV4IL",
      "url": null,
      "actor": null,
      "commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\nSeems like a helpful improvement.\r\nWould like to circle back to take a deeper look.\r\nOut of curiosity, why the adjustment from 0x200000004 to 0x200000000? (nothing immediately popped out to me)",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2203550219",
      "submitted_at": "2024-07-28T18:32:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "commented",
      "id": 2254607456,
      "node_id": "IC_kwDOABII586GYpRg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2254607456",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-28T18:41:17Z",
      "updated_at": "2024-07-28T18:41:17Z",
      "author_association": "MEMBER",
      "body": "@tdb3 0x200000004 is the more accurate number (it equals floor((2^64-1)/(2^31-1))) but 0x200000000 obviously also works, and:\n\n* It compiles to slightly simpler asm code (it computes fee >> 33, rather than comparing fee with a literal).\n* The difference is so small that it shouldn't matter.\n* I would think it's more obviously correct to a reviewer.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2254607456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 13671898973,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMu6J9d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13671898973",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-28T18:41:18Z"
    },
    {
      "event": "subscribed",
      "id": 13671898976,
      "node_id": "SE_lADOABII586RAm30zwAAAAMu6J9g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13671898976",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-28T18:41:18Z"
    },
    {
      "event": "reviewed",
      "id": 2203559483,
      "node_id": "PRR_kwDOABII586DV6Y7",
      "url": null,
      "actor": null,
      "commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I think we could make the code more testable by extracting the 96 bit division like we did for the multiplication",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2203559483",
      "submitted_at": "2024-07-29T06:57:11Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "commented",
      "id": 2255356768,
      "node_id": "IC_kwDOABII586GbgNg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2255356768",
      "actor": {
        "login": "ceffikhan",
        "id": 170189412,
        "node_id": "U_kgDOCiTiZA",
        "avatar_url": "https://avatars.githubusercontent.com/u/170189412?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ceffikhan",
        "html_url": "https://github.com/ceffikhan",
        "followers_url": "https://api.github.com/users/ceffikhan/followers",
        "following_url": "https://api.github.com/users/ceffikhan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ceffikhan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ceffikhan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ceffikhan/subscriptions",
        "organizations_url": "https://api.github.com/users/ceffikhan/orgs",
        "repos_url": "https://api.github.com/users/ceffikhan/repos",
        "events_url": "https://api.github.com/users/ceffikhan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ceffikhan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T08:47:14Z",
      "updated_at": "2024-07-29T08:47:14Z",
      "author_association": "NONE",
      "body": "Concept ACK",
      "user": {
        "login": "ceffikhan",
        "id": 170189412,
        "node_id": "U_kgDOCiTiZA",
        "avatar_url": "https://avatars.githubusercontent.com/u/170189412?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ceffikhan",
        "html_url": "https://github.com/ceffikhan",
        "followers_url": "https://api.github.com/users/ceffikhan/followers",
        "following_url": "https://api.github.com/users/ceffikhan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ceffikhan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ceffikhan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ceffikhan/subscriptions",
        "organizations_url": "https://api.github.com/users/ceffikhan/orgs",
        "repos_url": "https://api.github.com/users/ceffikhan/repos",
        "events_url": "https://api.github.com/users/ceffikhan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ceffikhan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2255356768",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "commented",
      "id": 2255984388,
      "node_id": "IC_kwDOABII586Gd5cE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2255984388",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T13:41:49Z",
      "updated_at": "2024-07-29T13:41:49Z",
      "author_association": "MEMBER",
      "body": "> The motivation here is being able to do accurate feerate evaluations in cluster mempool block building heuristics\r\n\r\nfor end-of-block packing reasons I assume?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2255984388",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2205359436,
      "node_id": "PRR_kwDOABII586Dcx1M",
      "url": null,
      "actor": null,
      "commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK \r\n\r\nAlso concept ack to changing `CFeeRate` to use a `FeeFrac` internally. Did it locally to see what the quirks are - `CFeeRate` rounds up, is that maybe worth matching?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2205359436",
      "submitted_at": "2024-07-29T15:51:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13685887877,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMvvhOF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13685887877",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "42ee8b474f0aea3c602144b2f057006b4864a4da",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/42ee8b474f0aea3c602144b2f057006b4864a4da",
      "created_at": "2024-07-29T20:19:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13685894516,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMvvi10",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13685894516",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "99770d6958f4046fcba92d6ee767c3b4f2dd6200",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/99770d6958f4046fcba92d6ee767c3b4f2dd6200",
      "created_at": "2024-07-29T20:20:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13685903626,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMvvlEK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13685903626",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "174a0ec896fccc86c6b976e0b8bb297a7e75cba6",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/174a0ec896fccc86c6b976e0b8bb297a7e75cba6",
      "created_at": "2024-07-29T20:21:13Z"
    },
    {
      "event": "commented",
      "id": 2257062432,
      "node_id": "IC_kwDOABII586GiAog",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257062432",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:57Z",
      "updated_at": "2024-07-29T21:43:57Z",
      "author_association": "MEMBER",
      "body": "I've made a number of changes, mostly in response to @paplorinc's [suggestion](https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694594826), which involves:\r\n* Rewriting all of `feefrac`'s fuzz tests to test against `arith_uint256` (rather than using its own ad-hoc 128-bit bigint logic), which also involved adding an `arith_uint256::operator<=>`.\r\n* Separating out a `FeeFrac::Div` (with `FeeFrac::DivFallback`, like `Mul`) for 96-bit division, which is tested directly.\r\n* Writing `FeeFrac::Evaluate` in terms of `FeeFrac::Div` and `FeeFrac::Mul`.\r\n\r\nIn addition, a bunch of comment change and code simplifications.\r\n\r\n---\r\n\r\n@instagibbs \r\n\r\n> > The motivation here is being able to do accurate feerate evaluations in cluster mempool block building heuristics\r\n> \r\n> for end-of-block packing reasons I assume?\r\n\r\nThe thing I have in mind, is the following algorithm for finding out an upper bound on the maximum fee a block template can gather (assuming optimally-linearized clusters):\r\n\r\n```python\r\nweight_left = 4000000\r\nfee_collected = 0\r\nfor chunk in sorted(mempool.all_chunks, by_decreasing_feerate):\r\n    if chunk.weight <= weight_left:\r\n        weight_left -= chunk.weight\r\n        fee_collected += chunk.fee\r\n    else:\r\n        fee_collected += chunk.Evaluate(weight)\r\n        break\r\n```\r\n\r\nAssuming optimally-linearized clusters, this gives a correct upper bound on total collectable fee, which may be useful in heuristics to determine whether it's worth spending time on searching more for example, or in statistics. It's really a super simple operation, but the multiplication being able to exceed 64-bit integers makes it a whole lot more complicated.\r\n\r\n---\r\n\r\n@glozow \r\n\r\n> Concept ACK\r\n> \r\n> Also concept ack to changing `CFeeRate` to use a `FeeFrac` internally. Did it locally to see what the quirks are - `CFeeRate` rounds up, is that maybe worth matching?\r\n\r\nHa, nice catch. See above why I do actually want rounding-down behavior here. Perhaps we'll need to add a boolean argument for controlling up/down rounding behavior?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2257062432",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 13687043851,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMvz7cL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043851",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "subscribed",
      "id": 13687043863,
      "node_id": "SE_lADOABII586RAm30zwAAAAMvz7cX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043863",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "mentioned",
      "id": 13687043882,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMvz7cq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043882",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "subscribed",
      "id": 13687043892,
      "node_id": "SE_lADOABII586RAm30zwAAAAMvz7c0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043892",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "mentioned",
      "id": 13687043910,
      "node_id": "MEE_lADOABII586RAm30zwAAAAMvz7dG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043910",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "subscribed",
      "id": 13687043916,
      "node_id": "SE_lADOABII586RAm30zwAAAAMvz7dM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13687043916",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T21:43:58Z"
    },
    {
      "event": "labeled",
      "id": 13690854167,
      "node_id": "LE_lADOABII586RAm30zwAAAAMwCdsX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13690854167",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T06:48:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13695796313,
      "node_id": "UNLE_lADOABII586RAm30zwAAAAMwVURZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13695796313",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T13:10:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13698244217,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMwep55",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13698244217",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/1cc0d5475a578a8299c24c008c0080a6006cae28",
      "created_at": "2024-07-30T16:00:17Z"
    },
    {
      "event": "commented",
      "id": 2258696371,
      "node_id": "IC_kwDOABII586GoPiz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258696371",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T16:01:28Z",
      "updated_at": "2024-07-30T16:01:28Z",
      "author_association": "MEMBER",
      "body": "I have added a commit that splits `FeeFrac::Evaluate` into an `EvaluateDown` and an `EvaluateUp`, corresponding to the rounding modes they implement (plus tests for both behaviors).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2258696371",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2210747435,
      "node_id": "PRR_kwDOABII586DxVQr",
      "url": null,
      "actor": null,
      "commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 1cc0d5475a578a8299c24c008c0080a6006cae28\r\n\r\nI left a few recommendations and questions, was really fun reviewing this change - though it took me a lot of time.\r\n\r\nIf you think our contributions have affected the change, please consider adding us as co-authors.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2210747435",
      "submitted_at": "2024-07-31T20:36:42Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "review_requested",
      "id": 13715953964,
      "node_id": "RRE_lADOABII586RAm30zwAAAAMxiNks",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13715953964",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T20:36:46Z",
      "requested_reviewer": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13715954303,
      "node_id": "RRE_lADOABII586RAm30zwAAAAMxiNp_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13715954303",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T20:36:46Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13715954491,
      "node_id": "RRE_lADOABII586RAm30zwAAAAMxiNs7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13715954491",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T20:36:47Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13716830683,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAMxljnb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13716830683",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "created_at": "2024-07-31T22:12:52Z"
    },
    {
      "event": "commented",
      "id": 2262283174,
      "node_id": "IC_kwDOABII586G17Om",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2262283174",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T07:50:20Z",
      "updated_at": "2024-08-01T07:50:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2262283174",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "labeled",
      "id": 13742870916,
      "node_id": "LE_lADOABII586RAm30zwAAAAMzI5GE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13742870916",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T14:40:14Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2271271424,
      "node_id": "IC_kwDOABII586HYNoA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2271271424",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T13:16:39Z",
      "updated_at": "2024-08-06T13:16:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2271271424",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "commented",
      "id": 2273601377,
      "node_id": "IC_kwDOABII586HhGdh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2273601377",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-07T14:22:53Z",
      "updated_at": "2024-08-07T14:22:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "I didn't review it in depth but I used this PR to test my \"mutation testing tool\", which creates mutations based on diff, and the tests are REALLY great! The only two mutants that were not killed seems to be \"equivalent mutants\", so we can ignore them. See:\r\n\r\n------------------------------\r\n#### Bitcoin Core (#30535 - feefrac: add support for evaluating at given size)\r\n\r\n* `make && ./src/test/test_bitcoin --run_test=feefrac_tests` \r\n\r\n* Mutation score: **94.4%** (**Excelent**)\r\n\r\n--------------------------------------------\r\n\r\n#### MUTANTS NOT KILLED\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.22.h\r\nindex dbb03bbccc..0930d12846 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.22.h\r\n@@ -201,7 +201,7 @@ struct FeeFrac\r\n     {\r\n         Assume(size > 0);\r\n         Assume(at_size >= 0);\r\n-        if (fee >= 0 && fee < 0x200000000) [[likely]] {\r\n+        if (fee >= 0 && fee <= 0x200000000) [[likely]] {\r\n             // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.13.h\r\nindex dbb03bbccc..71cb90757e 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.13.h\r\n@@ -201,7 +201,7 @@ struct FeeFrac\r\n     {\r\n         Assume(size > 0);\r\n         Assume(at_size >= 0);\r\n-        if (fee >= 0 && fee < 0x200000000) [[likely]] {\r\n+        if (fee > 0 && fee < 0x200000000) [[likely]] {\r\n             // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n\r\n```\r\n\r\n--------------------------------------------\r\n\r\n<details>\r\n<summary>Killed mutants</summary>\r\n<br>\r\n\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.27.h\r\nindex dbb03bbccc..1f9ca50a5e 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.27.h\r\n@@ -69,7 +69,7 @@ struct FeeFrac\r\n         // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n         // correction.\r\n-        int64_t quot_low = n_low / d;\r\n+                int64_t quot_low = (n_low / d) + 1;\r\n         int32_t mod_low = n_low % d;\r\n         quot_low += (mod_low > 0) - (mod_low && round_down);\r\n         // Combine and return the result\r\n\r\n```\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.29.h\r\nindex dbb03bbccc..96f39cdd74 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.29.h\r\n@@ -92,7 +92,7 @@ struct FeeFrac\r\n     {\r\n         Assume(d > 0);\r\n         // Compute the division.\r\n-        int64_t quot = n / d;\r\n+                int64_t quot = (n / d) + 1;\r\n         int32_t mod = n % d;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n         return quot + (mod > 0) - (mod && round_down);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.23.h\r\nindex dbb03bbccc..eb87c9c3b6 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.23.h\r\n@@ -201,7 +201,7 @@ struct FeeFrac\r\n     {\r\n         Assume(size > 0);\r\n         Assume(at_size >= 0);\r\n-        if (fee >= 0 && fee < 0x200000000) [[likely]] {\r\n+                if (fee >= 0 && fee > 0x200000000) [[likely]] {\r\n             // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.0.h\r\nindex dbb03bbccc..41599bcccd 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.0.h\r\n@@ -216,7 +216,7 @@ struct FeeFrac\r\n \r\n public:\r\n     /** Compute the fee for a given size `at_size` using this object's feerate, rounding down. */\r\n-    int64_t EvaluateDown(int32_t at_size) const noexcept { return Evaluate<true>(at_size); }\r\n+        int64_t EvaluateDown(int32_t at_size) const noexcept { return Evaluate<false>(at_size); }\r\n     /** Compute the fee for a given size `at_size` using this object's feerate, rounding up. */\r\n     int64_t EvaluateUp(int32_t at_size) const noexcept { return Evaluate<false>(at_size); }\r\n };\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.33.h\r\nindex dbb03bbccc..7776bb61da 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.33.h\r\n@@ -69,7 +69,7 @@ struct FeeFrac\r\n         // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n         // correction.\r\n-        int64_t quot_low = n_low / d;\r\n+                int64_t quot_low = (n_low / d) - 1;\r\n         int32_t mod_low = n_low % d;\r\n         quot_low += (mod_low > 0) - (mod_low && round_down);\r\n         // Combine and return the result\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.16.h\r\nindex dbb03bbccc..ec3adc87bf 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.16.h\r\n@@ -71,7 +71,7 @@ struct FeeFrac\r\n         // correction.\r\n         int64_t quot_low = n_low / d;\r\n         int32_t mod_low = n_low % d;\r\n-        quot_low += (mod_low > 0) - (mod_low && round_down);\r\n+                quot_low += (mod_low > 0) - (mod_low || round_down);\r\n         // Combine and return the result\r\n         return (quot_high << 32) + quot_low;\r\n     }\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.12.h\r\nindex dbb03bbccc..92848b64d3 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.12.h\r\n@@ -201,7 +201,7 @@ struct FeeFrac\r\n     {\r\n         Assume(size > 0);\r\n         Assume(at_size >= 0);\r\n-        if (fee >= 0 && fee < 0x200000000) [[likely]] {\r\n+                if (fee <= 0 && fee < 0x200000000) [[likely]] {\r\n             // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.18.h\r\nindex dbb03bbccc..08f5b1fd81 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.18.h\r\n@@ -201,7 +201,7 @@ struct FeeFrac\r\n     {\r\n         Assume(size > 0);\r\n         Assume(at_size >= 0);\r\n-        if (fee >= 0 && fee < 0x200000000) [[likely]] {\r\n+                if (fee >= 0 || fee < 0x200000000) [[likely]] {\r\n             // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.4.h\r\nindex dbb03bbccc..2177b00401 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.4.h\r\n@@ -92,7 +92,7 @@ struct FeeFrac\r\n     {\r\n         Assume(d > 0);\r\n         // Compute the division.\r\n-        int64_t quot = n / d;\r\n+                int64_t quot = n * d;\r\n         int32_t mod = n % d;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n         return quot + (mod > 0) - (mod && round_down);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.24.h\r\nindex dbb03bbccc..ac4672aa71 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.24.h\r\n@@ -201,7 +201,7 @@ struct FeeFrac\r\n     {\r\n         Assume(size > 0);\r\n         Assume(at_size >= 0);\r\n-        if (fee >= 0 && fee < 0x200000000) [[likely]] {\r\n+                if (fee >= 0 && fee >= 0x200000000) [[likely]] {\r\n             // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.20.h\r\nindex dbb03bbccc..abc34f1f78 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.20.h\r\n@@ -95,7 +95,7 @@ struct FeeFrac\r\n         int64_t quot = n / d;\r\n         int32_t mod = n % d;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n-        return quot + (mod > 0) - (mod && round_down);\r\n+                return quot + (mod > 0) + (mod && round_down);\r\n     }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.15.h\r\nindex dbb03bbccc..ce3a513935 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.15.h\r\n@@ -95,7 +95,7 @@ struct FeeFrac\r\n         int64_t quot = n / d;\r\n         int32_t mod = n % d;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n-        return quot + (mod > 0) - (mod && round_down);\r\n+                return quot + (mod <= 0) - (mod && round_down);\r\n     }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.9.h\r\nindex dbb03bbccc..b3563eb3a6 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.9.h\r\n@@ -71,7 +71,7 @@ struct FeeFrac\r\n         // correction.\r\n         int64_t quot_low = n_low / d;\r\n         int32_t mod_low = n_low % d;\r\n-        quot_low += (mod_low > 0) - (mod_low && round_down);\r\n+                quot_low += (mod_low >= 0) - (mod_low && round_down);\r\n         // Combine and return the result\r\n         return (quot_high << 32) + quot_low;\r\n     }\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.3.h\r\nindex dbb03bbccc..001523cad9 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.3.h\r\n@@ -69,7 +69,7 @@ struct FeeFrac\r\n         // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n         // correction.\r\n-        int64_t quot_low = n_low / d;\r\n+                int64_t quot_low = n_low * d;\r\n         int32_t mod_low = n_low % d;\r\n         quot_low += (mod_low > 0) - (mod_low && round_down);\r\n         // Combine and return the result\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.30.h\r\nindex dbb03bbccc..814f0fc845 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.30.h\r\n@@ -93,7 +93,7 @@ struct FeeFrac\r\n         Assume(d > 0);\r\n         // Compute the division.\r\n         int64_t quot = n / d;\r\n-        int32_t mod = n % d;\r\n+                int32_t mod = (n % d) + 1;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n         return quot + (mod > 0) - (mod && round_down);\r\n     }\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.7.h\r\nindex dbb03bbccc..13bbadc2e3 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.7.h\r\n@@ -71,7 +71,7 @@ struct FeeFrac\r\n         // correction.\r\n         int64_t quot_low = n_low / d;\r\n         int32_t mod_low = n_low % d;\r\n-        quot_low += (mod_low > 0) - (mod_low && round_down);\r\n+                quot_low += (mod_low < 0) - (mod_low && round_down);\r\n         // Combine and return the result\r\n         return (quot_high << 32) + quot_low;\r\n     }\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.34.h\r\nindex dbb03bbccc..00f6e048f6 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.34.h\r\n@@ -70,7 +70,7 @@ struct FeeFrac\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n         // correction.\r\n         int64_t quot_low = n_low / d;\r\n-        int32_t mod_low = n_low % d;\r\n+                int32_t mod_low = (n_low % d) - 1;\r\n         quot_low += (mod_low > 0) - (mod_low && round_down);\r\n         // Combine and return the result\r\n         return (quot_high << 32) + quot_low;\r\n\r\n```\r\n11.h\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.11.h\r\nindex dbb03bbccc..eb87c9c3b6 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.11.h\r\n@@ -201,7 +201,7 @@ struct FeeFrac\r\n     {\r\n         Assume(size > 0);\r\n         Assume(at_size >= 0);\r\n-        if (fee >= 0 && fee < 0x200000000) [[likely]] {\r\n+                if (fee >= 0 && fee > 0x200000000) [[likely]] {\r\n             // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.25.h\r\nindex dbb03bbccc..0c3ddaee86 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.25.h\r\n@@ -61,7 +61,7 @@ struct FeeFrac\r\n         // Compute quot_high = n.first / d, so the result becomes\r\n         // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\r\n         // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\r\n-        int64_t quot_high = n.first / d;\r\n+                int64_t quot_high = (n.first / d) + 1;\r\n         // Evaluate the parenthesized expression above, so the result becomes\r\n         // n_low / d + (quot_high * 2**32)\r\n         int64_t n_low = ((n.first % d) << 32) + n.second;\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.21.h\r\nindex dbb03bbccc..657f9144d4 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.21.h\r\n@@ -206,7 +206,7 @@ struct FeeFrac\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n             } else {\r\n-                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\r\n+                                return (uint64_t(fee) * at_size + size + 1U) / uint32_t(size);\r\n             }\r\n         } else {\r\n             // Otherwise, use Mul and Div.\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.14.h\r\nindex dbb03bbccc..e5cdb1f96f 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.14.h\r\n@@ -71,7 +71,7 @@ struct FeeFrac\r\n         // correction.\r\n         int64_t quot_low = n_low / d;\r\n         int32_t mod_low = n_low % d;\r\n-        quot_low += (mod_low > 0) - (mod_low && round_down);\r\n+                quot_low += (mod_low <= 0) - (mod_low && round_down);\r\n         // Combine and return the result\r\n         return (quot_high << 32) + quot_low;\r\n     }\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.31.h\r\nindex dbb03bbccc..fcddd25bb4 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.31.h\r\n@@ -61,7 +61,7 @@ struct FeeFrac\r\n         // Compute quot_high = n.first / d, so the result becomes\r\n         // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\r\n         // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\r\n-        int64_t quot_high = n.first / d;\r\n+                int64_t quot_high = (n.first / d) - 1;\r\n         // Evaluate the parenthesized expression above, so the result becomes\r\n         // n_low / d + (quot_high * 2**32)\r\n         int64_t n_low = ((n.first % d) << 32) + n.second;\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.2.h\r\nindex dbb03bbccc..071fc90a19 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.2.h\r\n@@ -61,7 +61,7 @@ struct FeeFrac\r\n         // Compute quot_high = n.first / d, so the result becomes\r\n         // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\r\n         // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\r\n-        int64_t quot_high = n.first / d;\r\n+                int64_t quot_high = n.first * d;\r\n         // Evaluate the parenthesized expression above, so the result becomes\r\n         // n_low / d + (quot_high * 2**32)\r\n         int64_t n_low = ((n.first % d) << 32) + n.second;\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.8.h\r\nindex dbb03bbccc..084326c37d 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.8.h\r\n@@ -95,7 +95,7 @@ struct FeeFrac\r\n         int64_t quot = n / d;\r\n         int32_t mod = n % d;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n-        return quot + (mod > 0) - (mod && round_down);\r\n+                return quot + (mod < 0) - (mod && round_down);\r\n     }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n\r\n```\r\n35.h\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.35.h\r\nindex dbb03bbccc..ae18b13a15 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.35.h\r\n@@ -92,7 +92,7 @@ struct FeeFrac\r\n     {\r\n         Assume(d > 0);\r\n         // Compute the division.\r\n-        int64_t quot = n / d;\r\n+                int64_t quot = (n / d) - 1;\r\n         int32_t mod = n % d;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n         return quot + (mod > 0) - (mod && round_down);\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.6.h\r\nindex dbb03bbccc..6c98522329 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.6.h\r\n@@ -206,7 +206,7 @@ struct FeeFrac\r\n             if constexpr (RoundDown) {\r\n                 return (uint64_t(fee) * at_size) / uint32_t(size);\r\n             } else {\r\n-                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\r\n+                                return (uint64_t(fee) * at_size + size - 1U) * uint32_t(size);\r\n             }\r\n         } else {\r\n             // Otherwise, use Mul and Div.\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.10.h\r\nindex dbb03bbccc..92b2c76d10 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.10.h\r\n@@ -95,7 +95,7 @@ struct FeeFrac\r\n         int64_t quot = n / d;\r\n         int32_t mod = n % d;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n-        return quot + (mod > 0) - (mod && round_down);\r\n+                return quot + (mod >= 0) - (mod && round_down);\r\n     }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n\r\n```\r\n26.h\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.26.h\r\nindex dbb03bbccc..6b8d17594c 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.26.h\r\n@@ -64,7 +64,7 @@ struct FeeFrac\r\n         int64_t quot_high = n.first / d;\r\n         // Evaluate the parenthesized expression above, so the result becomes\r\n         // n_low / d + (quot_high * 2**32)\r\n-        int64_t n_low = ((n.first % d) << 32) + n.second;\r\n+                int64_t n_low = (((n.first % d) << 32) + n.second) + 1;\r\n         // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\r\n         // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.28.h\r\nindex dbb03bbccc..e1b7b34e80 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.28.h\r\n@@ -70,7 +70,7 @@ struct FeeFrac\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n         // correction.\r\n         int64_t quot_low = n_low / d;\r\n-        int32_t mod_low = n_low % d;\r\n+                int32_t mod_low = (n_low % d) + 1;\r\n         quot_low += (mod_low > 0) - (mod_low && round_down);\r\n         // Combine and return the result\r\n         return (quot_high << 32) + quot_low;\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.32.h\r\nindex dbb03bbccc..384b3f294d 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.32.h\r\n@@ -64,7 +64,7 @@ struct FeeFrac\r\n         int64_t quot_high = n.first / d;\r\n         // Evaluate the parenthesized expression above, so the result becomes\r\n         // n_low / d + (quot_high * 2**32)\r\n-        int64_t n_low = ((n.first % d) << 32) + n.second;\r\n+                int64_t n_low = (((n.first % d) << 32) + n.second) - 1;\r\n         // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\r\n         // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.1.h\r\nindex dbb03bbccc..f2991cb61f 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.1.h\r\n@@ -218,7 +218,7 @@ public:\r\n     /** Compute the fee for a given size `at_size` using this object's feerate, rounding down. */\r\n     int64_t EvaluateDown(int32_t at_size) const noexcept { return Evaluate<true>(at_size); }\r\n     /** Compute the fee for a given size `at_size` using this object's feerate, rounding up. */\r\n-    int64_t EvaluateUp(int32_t at_size) const noexcept { return Evaluate<false>(at_size); }\r\n+        int64_t EvaluateUp(int32_t at_size) const noexcept { return Evaluate<true>(at_size); }\r\n };\r\n \r\n /** Compare the feerate diagrams implied by the provided sorted chunks data.\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.17.h\r\nindex dbb03bbccc..b4f0590650 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.17.h\r\n@@ -95,7 +95,7 @@ struct FeeFrac\r\n         int64_t quot = n / d;\r\n         int32_t mod = n % d;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n-        return quot + (mod > 0) - (mod && round_down);\r\n+                return quot + (mod > 0) - (mod || round_down);\r\n     }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.19.h\r\nindex dbb03bbccc..c421f87da4 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.19.h\r\n@@ -71,7 +71,7 @@ struct FeeFrac\r\n         // correction.\r\n         int64_t quot_low = n_low / d;\r\n         int32_t mod_low = n_low % d;\r\n-        quot_low += (mod_low > 0) - (mod_low && round_down);\r\n+                quot_low += (mod_low > 0) + (mod_low && round_down);\r\n         // Combine and return the result\r\n         return (quot_high << 32) + quot_low;\r\n     }\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.36.h\r\nindex dbb03bbccc..3a52d4728e 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.36.h\r\n@@ -93,7 +93,7 @@ struct FeeFrac\r\n         Assume(d > 0);\r\n         // Compute the division.\r\n         int64_t quot = n / d;\r\n-        int32_t mod = n % d;\r\n+                int32_t mod = (n % d) - 1;\r\n         // Correct result if the / operator above rounded in the wrong direction.\r\n         return quot + (mod > 0) - (mod && round_down);\r\n     }\r\n\r\n```\r\n\r\n```diff\r\ndiff --git a/src/util/feefrac.h b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.5.h\r\nindex dbb03bbccc..587cfedecd 100644\r\n--- a/src/util/feefrac.h\r\n+++ b/Users/brunogarcia/projects/bitcoin-core-dev/muts-pr-30535-feefrac-h/feefrac.mutant.5.h\r\n@@ -204,7 +204,7 @@ struct FeeFrac\r\n         if (fee >= 0 && fee < 0x200000000) [[likely]] {\r\n             // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\r\n             if constexpr (RoundDown) {\r\n-                return (uint64_t(fee) * at_size) / uint32_t(size);\r\n+                                return (uint64_t(fee) * at_size) * uint32_t(size);\r\n             } else {\r\n                 return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\r\n             }\r\n\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2273601377",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "commented",
      "id": 2273637902,
      "node_id": "IC_kwDOABII586HhPYO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2273637902",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-07T14:39:04Z",
      "updated_at": "2024-08-07T14:39:04Z",
      "author_association": "MEMBER",
      "body": "@brunoerg Cool! ",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2273637902",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 13793607908,
      "node_id": "MEE_lADOABII586RAm30zwAAAAM2KcDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13793607908",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-07T14:39:06Z"
    },
    {
      "event": "subscribed",
      "id": 13793607930,
      "node_id": "SE_lADOABII586RAm30zwAAAAM2KcD6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13793607930",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-07T14:39:06Z"
    },
    {
      "event": "reviewed",
      "id": 2227244550,
      "node_id": "PRR_kwDOABII586EwQ4G",
      "url": null,
      "actor": null,
      "commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 9590cdd1afc78ff73fdccd2d016075bf40b6b0e2\r\n\r\n\r\n\r\n> @ismaelsadeeq It's a possibility, if we'd want to replace CFeeRate entirely. Another possibility is keeping CFeeRate and its interface, but make it be an encapsulated FeeFrac object (that e.g. on serialization converts to sats/kvb, but that otherwise keeps exact fractions).\r\n\r\nI prefer the idea of encapsulating `FeeFrac` within `CFeeRate` given how widely `CFeeRate` is relied upon. I’ve attempt to implement this approach on top of this PR.\r\nIf this aligns with your idea, I can create a PR for it although the test currently assumes `CFeeRate` represents a fee rate per kb rather than a fraction, so I had to touch the test a bit.\r\n\r\nNote: A few mempool tests are failing with this diff, which I haven’t yet investigated.\r\n\r\n<details>\r\n<summary>see diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/policy/feerate.cpp b/src/policy/feerate.cpp\r\nindex eb0cba5c67a..05b4905b5e3 100644\r\n--- a/src/policy/feerate.cpp\r\n+++ b/src/policy/feerate.cpp\r\n@@ -9,37 +9,24 @@\r\n \r\n #include <cmath>\r\n \r\n-CFeeRate::CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes)\r\n+CAmount CFeeRate::GetFee(uint32_t num_bytes) const\r\n {\r\n-    const int64_t nSize{num_bytes};\r\n-\r\n-    if (nSize > 0) {\r\n-        nSatoshisPerK = nFeePaid * 1000 / nSize;\r\n-    } else {\r\n-        nSatoshisPerK = 0;\r\n-    }\r\n+    return feerate.EvaluateUp(num_bytes);\r\n }\r\n \r\n-CAmount CFeeRate::GetFee(uint32_t num_bytes) const\r\n+CAmount CFeeRate::GetFeePerK() const\r\n {\r\n-    const int64_t nSize{num_bytes};\r\n-\r\n-    // Be explicit that we're converting from a double to int64_t (CAmount) here.\r\n-    // We've previously had issues with the silent double->int64_t conversion.\r\n-    CAmount nFee{static_cast<CAmount>(std::ceil(nSatoshisPerK * nSize / 1000.0))};\r\n-\r\n-    if (nFee == 0 && nSize != 0) {\r\n-        if (nSatoshisPerK > 0) nFee = CAmount(1);\r\n-        if (nSatoshisPerK < 0) nFee = CAmount(-1);\r\n+    if (feerate.size > 0) {\r\n+        return feerate.fee * kvb / feerate.size;\r\n     }\r\n-\r\n-    return nFee;\r\n+    return 0;\r\n }\r\n \r\n std::string CFeeRate::ToString(const FeeEstimateMode& fee_estimate_mode) const\r\n {\r\n+    CAmount nSatoshisPerK = GetFeePerK();\r\n     switch (fee_estimate_mode) {\r\n-    case FeeEstimateMode::SAT_VB: return strprintf(\"%d.%03d %s/vB\", nSatoshisPerK / 1000, nSatoshisPerK % 1000, CURRENCY_ATOM);\r\n+    case FeeEstimateMode::SAT_VB: return strprintf(\"%d.%03d %s/vB\", nSatoshisPerK / kvb, nSatoshisPerK % kvb, CURRENCY_ATOM);\r\n     default:                      return strprintf(\"%d.%08d %s/kvB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\r\n     }\r\n }\r\ndiff --git a/src/policy/feerate.h b/src/policy/feerate.h\r\nindex 2e501729148..16c76fa71e5 100644\r\n--- a/src/policy/feerate.h\r\n+++ b/src/policy/feerate.h\r\n@@ -8,6 +8,7 @@\r\n \r\n #include <consensus/amount.h>\r\n #include <serialize.h>\r\n+#include <util/feefrac.h>\r\n \r\n \r\n #include <cstdint>\r\n@@ -26,20 +27,21 @@ enum class FeeEstimateMode {\r\n     SAT_VB,       //!< Use sat/vB fee rate unit\r\n };\r\n \r\n+const int32_t kvb{1000};\r\n /**\r\n  * Fee rate in satoshis per kilovirtualbyte: CAmount / kvB\r\n  */\r\n class CFeeRate\r\n {\r\n private:\r\n-    /** Fee rate in sat/kvB (satoshis per 1000 virtualbytes) */\r\n-    CAmount nSatoshisPerK;\r\n+    FeeFrac feerate;\r\n \r\n public:\r\n     /** Fee rate of 0 satoshis per kvB */\r\n-    CFeeRate() : nSatoshisPerK(0) { }\r\n+    CFeeRate() : feerate(0, kvb) { }\r\n+    /** Fee rate of _nSatoshisPerK satoshis per kvB */\r\n     template<typename I>\r\n-    explicit CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {\r\n+    explicit CFeeRate(const I _nSatoshisPerK): feerate(_nSatoshisPerK, kvb) {\r\n         // We've previously had bugs creep in from silent double->int conversion...\r\n         static_assert(std::is_integral<I>::value, \"CFeeRate should be used without floats\");\r\n     }\r\n@@ -50,7 +52,7 @@ public:\r\n      * param@[in]   nFeePaid    The fee paid by a transaction, in satoshis\r\n      * param@[in]   num_bytes   The vsize of a transaction, in vbytes\r\n      */\r\n-    CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes);\r\n+    CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes) : feerate(nFeePaid, num_bytes) {};\r\n \r\n     /**\r\n      * Return the fee in satoshis for the given vsize in vbytes.\r\n@@ -62,19 +64,19 @@ public:\r\n     /**\r\n      * Return the fee in satoshis for a vsize of 1000 vbytes\r\n      */\r\n-    CAmount GetFeePerK() const { return nSatoshisPerK; }\r\n-    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\r\n-    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\r\n-    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\r\n-    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\r\n-    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\r\n-    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }\r\n-    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\r\n+    CAmount GetFeePerK() const;\r\n+    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.feerate < b.feerate; }\r\n+    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.feerate > b.feerate; }\r\n+    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.feerate == b.feerate; }\r\n+    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.feerate <= b.feerate; }\r\n+    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.feerate >= b.feerate; }\r\n+    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.feerate != b.feerate; }\r\n+    CFeeRate& operator+=(const CFeeRate& a) { feerate += a.feerate; return *this; }\r\n     std::string ToString(const FeeEstimateMode& fee_estimate_mode = FeeEstimateMode::BTC_KVB) const;\r\n-    friend CFeeRate operator*(const CFeeRate& f, int a) { return CFeeRate(a * f.nSatoshisPerK); }\r\n-    friend CFeeRate operator*(int a, const CFeeRate& f) { return CFeeRate(a * f.nSatoshisPerK); }\r\n+    friend CFeeRate operator*(const CFeeRate& f, int a) { return CFeeRate(a * f.GetFeePerK()); }\r\n+    friend CFeeRate operator*(int a, const CFeeRate& f) { return CFeeRate(a * f.GetFeePerK()); }\r\n \r\n-    SERIALIZE_METHODS(CFeeRate, obj) { READWRITE(obj.nSatoshisPerK); }\r\n+    SERIALIZE_METHODS(CFeeRate, obj) { READWRITE(obj.GetFeePerK()); }\r\n };\r\n \r\n #endif // BITCOIN_POLICY_FEERATE_H\r\ndiff --git a/src/test/amount_tests.cpp b/src/test/amount_tests.cpp\r\nindex e5ab1cfb902..ce8aa7f7515 100644\r\n--- a/src/test/amount_tests.cpp\r\n+++ b/src/test/amount_tests.cpp\r\n@@ -50,7 +50,7 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\r\n     feeRate = CFeeRate(123);\r\n     // Rounds up the result, if not integer\r\n     BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\r\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(8), CAmount(1)); // Special case: returns 1 instead of 0\r\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(8), CAmount(1)); // returns 1 instead of 0; because we are rounding up\r\n     BOOST_CHECK_EQUAL(feeRate.GetFee(9), CAmount(2));\r\n     BOOST_CHECK_EQUAL(feeRate.GetFee(121), CAmount(15));\r\n     BOOST_CHECK_EQUAL(feeRate.GetFee(122), CAmount(16));\r\n@@ -61,7 +61,7 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\r\n     feeRate = CFeeRate(-123);\r\n     // Truncates the result, if not integer\r\n     BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\r\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(8), CAmount(-1)); // Special case: returns -1 instead of 0\r\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(8), CAmount(0));\r\n     BOOST_CHECK_EQUAL(feeRate.GetFee(9), CAmount(-1));\r\n \r\n     // check alternate constructor\r\n@@ -70,21 +70,21 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\r\n     BOOST_CHECK_EQUAL(feeRate.GetFee(100), altFeeRate.GetFee(100));\r\n \r\n     // Check full constructor\r\n-    BOOST_CHECK(CFeeRate(CAmount(-1), 0) == CFeeRate(0));\r\n-    BOOST_CHECK(CFeeRate(CAmount(0), 0) == CFeeRate(0));\r\n-    BOOST_CHECK(CFeeRate(CAmount(1), 0) == CFeeRate(0));\r\n+    BOOST_CHECK(CFeeRate(CAmount(-1)).GetFeePerK() == -1);\r\n+    BOOST_CHECK(CFeeRate(CAmount(0)).GetFeePerK() == 0);\r\n+    BOOST_CHECK(CFeeRate(CAmount(1), kvb).GetFeePerK() == 1);\r\n     // default value\r\n     BOOST_CHECK(CFeeRate(CAmount(-1), 1000) == CFeeRate(-1));\r\n     BOOST_CHECK(CFeeRate(CAmount(0), 1000) == CFeeRate(0));\r\n     BOOST_CHECK(CFeeRate(CAmount(1), 1000) == CFeeRate(1));\r\n     // lost precision (can only resolve satoshis per kB)\r\n-    BOOST_CHECK(CFeeRate(CAmount(1), 1001) == CFeeRate(0));\r\n-    BOOST_CHECK(CFeeRate(CAmount(2), 1001) == CFeeRate(1));\r\n+    BOOST_CHECK(CFeeRate(CAmount(1), 1001).GetFeePerK() == 0);\r\n+    BOOST_CHECK(CFeeRate(CAmount(2), 1001).GetFeePerK() == 1);\r\n     // some more integer checks\r\n-    BOOST_CHECK(CFeeRate(CAmount(26), 789) == CFeeRate(32));\r\n-    BOOST_CHECK(CFeeRate(CAmount(27), 789) == CFeeRate(34));\r\n+    BOOST_CHECK(CFeeRate(CAmount(26), 789).GetFeePerK() == CFeeRate(32).GetFeePerK());\r\n+    BOOST_CHECK(CFeeRate(CAmount(27), 789).GetFeePerK() == CFeeRate(34).GetFeePerK());\r\n     // Maximum size in bytes, should not crash\r\n-    CFeeRate(MAX_MONEY, std::numeric_limits<uint32_t>::max()).GetFeePerK();\r\n+    CFeeRate(MAX_MONEY, std::numeric_limits<int32_t>::max()).GetFeePerK();\r\n \r\n     // check multiplication operator\r\n     // check multiplying by zero\r\n@@ -105,8 +105,8 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\r\n     // check boundary values\r\n     int maxInt = std::numeric_limits<int>::max();\r\n     feeRate = CFeeRate(maxInt);\r\n-    BOOST_CHECK(feeRate * 2 == CFeeRate(static_cast<int64_t>(maxInt) * 2));\r\n-    BOOST_CHECK(2 * feeRate == CFeeRate(static_cast<int64_t>(maxInt) * 2));\r\n+    BOOST_CHECK((feeRate * 2).GetFeePerK() == CFeeRate(static_cast<int64_t>(maxInt) * 2).GetFeePerK());\r\n+    BOOST_CHECK((2 * feeRate).GetFeePerK() == CFeeRate(static_cast<int64_t>(maxInt) * 2).GetFeePerK());\r\n     // check with zero fee rate\r\n     feeRate = CFeeRate(0);\r\n     BOOST_CHECK(feeRate * 5 == CFeeRate(0));\r\n@@ -125,9 +125,9 @@ BOOST_AUTO_TEST_CASE(BinaryOperatorTest)\r\n     BOOST_CHECK(a <= a);\r\n     BOOST_CHECK(b >= a);\r\n     BOOST_CHECK(b >= b);\r\n-    // a should be 0.00000002 BTC/kvB now\r\n+    // a is still 0.00000001 BTC/kvB because the size is added also\r\n     a += a;\r\n-    BOOST_CHECK(a == b);\r\n+    BOOST_CHECK_EQUAL(a.GetFeePerK(), a.GetFeePerK());\r\n }\r\n \r\n BOOST_AUTO_TEST_CASE(ToStringTest)\r\n\r\n```\r\n</details>\r\n",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2227244550",
      "submitted_at": "2024-08-08T12:33:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "review_requested",
      "id": 13806186340,
      "node_id": "RRE_lADOABII586RAm30zwAAAAM26a9k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13806186340",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T12:33:12Z",
      "requested_reviewer": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2227871157,
      "node_id": "PRR_kwDOABII586Eyp21",
      "url": null,
      "actor": null,
      "commit_id": "c8b7cc23006fc3404c14e5c7052c4c09b31bc537",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2227871157",
      "submitted_at": "2024-08-08T13:23:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "reviewed",
      "id": 2227934628,
      "node_id": "PRR_kwDOABII586Ey5Wk",
      "url": null,
      "actor": null,
      "commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2227934628",
      "submitted_at": "2024-08-08T13:46:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "review_requested",
      "id": 13807284437,
      "node_id": "RRE_lADOABII586RAm30zwAAAAM2-nDV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13807284437",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T13:46:16Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2228294278,
      "node_id": "PRR_kwDOABII586E0RKG",
      "url": null,
      "actor": null,
      "commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2228294278",
      "submitted_at": "2024-08-08T15:55:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13915780062,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAM9cfPe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13915780062",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eff5bf7d673c797d63c5ad15ac18b8316dea5ffe",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/eff5bf7d673c797d63c5ad15ac18b8316dea5ffe",
      "created_at": "2024-08-16T20:55:05Z"
    },
    {
      "event": "commented",
      "id": 2294805824,
      "node_id": "IC_kwDOABII586Ix_VA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2294805824",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-17T09:24:01Z",
      "updated_at": "2024-08-17T09:24:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK eff5bf7d673c797d63c5ad15ac18b8316dea5ffe\r\n(diff only contains `Evaluate*` -> `EvaluateFee*` changes)",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2294805824",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "review_requested",
      "id": 13919412854,
      "node_id": "RRE_lADOABII586RAm30zwAAAAM9qWJ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13919412854",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-17T09:24:05Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2244970458,
      "node_id": "PRR_kwDOABII586Fz4fa",
      "url": null,
      "actor": null,
      "commit_id": "eff5bf7d673c797d63c5ad15ac18b8316dea5ffe",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK eff5bf7d673c797d63c5ad15ac18b8316dea5ffe",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2244970458",
      "submitted_at": "2024-08-19T08:49:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "labeled",
      "id": 14191124970,
      "node_id": "LE_lADOABII586RAm30zwAAAANN22Hq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14191124970",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T01:04:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14254988609,
      "node_id": "UNLE_lADOABII586RAm30zwAAAANRqd1B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14254988609",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T22:14:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2394374445,
      "node_id": "IC_kwDOABII586Ot0Et",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2394374445",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-04T18:51:55Z",
      "updated_at": "2024-10-04T18:51:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "concept ACK ",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2394374445",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "milestoned",
      "id": 16196663552,
      "node_id": "MIE_lADOABII586RAm30zwAAAAPFZXkA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16196663552",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T15:31:32Z",
      "milestone": {
        "title": "29.0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16198181855,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAPFfKPf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16198181855",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2efbef64f5934de04ebcc32139daaa87afd98ad2",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/2efbef64f5934de04ebcc32139daaa87afd98ad2",
      "created_at": "2025-02-05T17:17:00Z"
    },
    {
      "event": "commented",
      "id": 2637554110,
      "node_id": "IC_kwDOABII586dNeG-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2637554110",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T17:19:15Z",
      "updated_at": "2025-02-05T17:19:15Z",
      "author_association": "MEMBER",
      "body": "Rebased because of datedness.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2637554110",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2596619215,
      "node_id": "PRR_kwDOABII586axUPP",
      "url": null,
      "actor": null,
      "commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Rebase didn't result in any code change, but CI compiles fuzzing for every commit now",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2596619215",
      "submitted_at": "2025-02-05T18:20:57Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16199084471,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAPFimm3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16199084471",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5600091e8384a69cfc7e95a7aea816e7a9076917",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/5600091e8384a69cfc7e95a7aea816e7a9076917",
      "created_at": "2025-02-05T18:30:33Z"
    },
    {
      "event": "labeled",
      "id": 16199086218,
      "node_id": "LE_lADOABII586RAm30zwAAAAPFinCK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16199086218",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T18:30:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2637729330,
      "node_id": "IC_kwDOABII586dOI4y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2637729330",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T18:39:10Z",
      "updated_at": "2025-02-05T18:39:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 5600091e8384a69cfc7e95a7aea816e7a9076917\r\n\r\nBuild failure will likely be resolved by retriggering it later",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2637729330",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "review_requested",
      "id": 16199183258,
      "node_id": "RRE_lADOABII586RAm30zwAAAAPFi-ua",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16199183258",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T18:39:17Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16199222040,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAPFjIMY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16199222040",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/f6aa28cf8fad6a3240498b500524bb380855b18e",
      "created_at": "2025-02-05T18:42:43Z"
    },
    {
      "event": "commented",
      "id": 2637740773,
      "node_id": "IC_kwDOABII586dOLrl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2637740773",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T18:44:47Z",
      "updated_at": "2025-02-05T18:44:47Z",
      "author_association": "MEMBER",
      "body": "Added a few commit messages to explain the rationale for the changes more.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2637740773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "commented",
      "id": 2637792608,
      "node_id": "IC_kwDOABII586dOYVg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2637792608",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T19:04:59Z",
      "updated_at": "2025-02-05T19:04:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK f6aa28cf8fad6a3240498b500524bb380855b18e\r\n\r\nAdded build failure to https://github.com/bitcoin/bitcoin/issues/31797#issuecomment-2637727127 - should be retriggered later",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2637792608",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2596789900,
      "node_id": "PRR_kwDOABII586ax96M",
      "url": null,
      "actor": null,
      "commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, I also really like the idea of improving CFeeRate.\r\n\r\nACK up to 5147b5d602d1f55d7c9f497cf0cfc23263f5caf5, still mulling over the last three commits.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2596789900",
      "submitted_at": "2025-02-05T19:26:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "unlabeled",
      "id": 16199891878,
      "node_id": "UNLE_lADOABII586RAm30zwAAAAPFlrum",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16199891878",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T19:38:37Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2637909965,
      "node_id": "IC_kwDOABII586dO0_N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2637909965",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T20:02:37Z",
      "updated_at": "2025-02-05T20:02:54Z",
      "author_association": "MEMBER",
      "body": "@murchandamus \r\n\r\n> Concept ACK, I also really like the idea of improving CFeeRate.\r\n\r\nYou will also like https://github.com/bitcoin/bitcoin/pull/31363/commits/46ffaf98503c7f6c8a8d9b9a188f541d77e08b1a\r\n\r\n> If this aligns with your idea, I can create a PR for it although the test currently assumes `CFeeRate` represents a fee rate per kb rather than a fraction, so I had to touch the test a bit.\r\n\r\n\r\n\r\nI think after this and #31363 making `CFeeRate` a wrapper around `FeePerVSize` will be a good follow-up.\r\n",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2637909965",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 16200149232,
      "node_id": "MEE_lADOABII586RAm30zwAAAAPFmqjw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16200149232",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T20:02:39Z"
    },
    {
      "event": "subscribed",
      "id": 16200149275,
      "node_id": "SE_lADOABII586RAm30zwAAAAPFmqkb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16200149275",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T20:02:40Z"
    },
    {
      "event": "commented",
      "id": 2639947796,
      "node_id": "IC_kwDOABII586dWmgU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2639947796",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-06T14:14:54Z",
      "updated_at": "2025-02-06T14:14:54Z",
      "author_association": "MEMBER",
      "body": "I did some *very* light fuzzing against `CFeeRate` results to make sure the \"gap\" between the two values is never huge, would there be some value in adding coverage to confirm that results aren't wildly off from what we have today if we use it more widely?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2639947796",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "commented",
      "id": 2639972637,
      "node_id": "IC_kwDOABII586dWskd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2639972637",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-06T14:25:02Z",
      "updated_at": "2025-02-06T14:25:02Z",
      "author_association": "MEMBER",
      "body": "> would there be some value in adding coverage to confirm that results aren't wildly off from what we have today if we use it more widely?\r\n\r\nSure, happy to add a commit for tests with that.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2639972637",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "commented",
      "id": 2640044728,
      "node_id": "IC_kwDOABII586dW-K4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2640044728",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-06T14:51:11Z",
      "updated_at": "2025-02-06T14:51:11Z",
      "author_association": "MEMBER",
      "body": "https://github.com/instagibbs/bitcoin/commit/ac2e55980bb4841a55b9396070af62cf3925e721\r\n\r\nBounding difference to \"100 sats\", seems to work ok to a 500BTC fee, feel free to take or leave it since these numbers are kind of made up.\r\n\r\nconcept ACK anyways",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2640044728",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2598982998,
      "node_id": "PRR_kwDOABII586a6VVW",
      "url": null,
      "actor": null,
      "commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK f6aa28cf8fad6a3240498b500524bb380855b18e, mul/division code looks correct, testing and fuzzing coverage seems very good",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2598982998",
      "submitted_at": "2025-02-06T15:13:42Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "review_requested",
      "id": 16211597865,
      "node_id": "RRE_lADOABII586RAm30zwAAAAPGSVop",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16211597865",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-06T15:13:46Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 16211598408,
      "node_id": "RRE_lADOABII586RAm30zwAAAAPGSVxI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16211598408",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-06T15:13:48Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2602064780,
      "node_id": "PRR_kwDOABII586bGFuM",
      "url": null,
      "actor": null,
      "commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2602064780",
      "submitted_at": "2025-02-07T15:32:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "reviewed",
      "id": 2602609661,
      "node_id": "PRR_kwDOABII586bIKv9",
      "url": null,
      "actor": null,
      "commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2602609661",
      "submitted_at": "2025-02-07T19:12:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16253114733,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAPIwtlt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16253114733",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e9f22e28e96ce0bb1d540592dbdb1395757e317f",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/e9f22e28e96ce0bb1d540592dbdb1395757e317f",
      "created_at": "2025-02-10T18:58:29Z"
    },
    {
      "event": "reviewed",
      "id": 2606931315,
      "node_id": "PRR_kwDOABII586bYp1z",
      "url": null,
      "actor": null,
      "commit_id": "e9f22e28e96ce0bb1d540592dbdb1395757e317f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2606931315",
      "submitted_at": "2025-02-10T19:21:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16253431247,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAPIx63P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16253431247",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "created_at": "2025-02-10T19:22:47Z"
    },
    {
      "event": "labeled",
      "id": 16253433346,
      "node_id": "LE_lADOABII586RAm30zwAAAAPIx7YC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16253433346",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T19:22:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2649019504,
      "node_id": "IC_kwDOABII586d5NRw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2649019504",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T19:22:55Z",
      "updated_at": "2025-02-10T19:22:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/36980187687</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2649019504",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2606987771,
      "node_id": "PRR_kwDOABII586bY3n7",
      "url": null,
      "actor": null,
      "commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK cf00540f54302e37f8af08f15fce16cbcab0f8c9\r\n\r\nAdded approximately floating point comparisons to fuzz tests and removed the lingering `[[maybe_unused]]` in `feefrac_tests.cpp`",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2606987771",
      "submitted_at": "2025-02-10T19:47:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "review_requested",
      "id": 16253772405,
      "node_id": "RRE_lADOABII586RAm30zwAAAAPIzOJ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16253772405",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T19:47:44Z",
      "requested_reviewer": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2649120502,
      "node_id": "IC_kwDOABII586d5l72",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2649120502",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T20:07:06Z",
      "updated_at": "2025-02-10T20:14:16Z",
      "author_association": "MEMBER",
      "body": "@instagibbs I incorporated a variant of your commit into the existing `feefrac_mul_div` fuzz test, with the tightest bounds I could make work.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2649120502",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 16254024113,
      "node_id": "MEE_lADOABII586RAm30zwAAAAPI0Lmx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16254024113",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T20:07:08Z"
    },
    {
      "event": "subscribed",
      "id": 16254024130,
      "node_id": "SE_lADOABII586RAm30zwAAAAPI0LnC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16254024130",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T20:07:08Z"
    },
    {
      "event": "unlabeled",
      "id": 16256590238,
      "node_id": "UNLE_lADOABII586RAm30zwAAAAPI9-Ge",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16256590238",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T23:31:44Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "demilestoned",
      "id": 16299840343,
      "node_id": "DEME_lADOABII586RAm30zwAAAAPLi9NX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16299840343",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T16:55:42Z",
      "milestone": {
        "title": "29.0"
      }
    },
    {
      "event": "commented",
      "id": 2769591235,
      "node_id": "IC_kwDOABII586lFJvD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2769591235",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T14:34:11Z",
      "updated_at": "2025-04-01T14:34:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "PR may be ready for merge if @ismaelsadeeq and @laanwj want to re-ack or others want to ACK",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2769591235",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "mentioned",
      "id": 17076761377,
      "node_id": "MEE_lADOABII586RAm30zwAAAAP52rMh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17076761377",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T14:34:13Z"
    },
    {
      "event": "subscribed",
      "id": 17076761394,
      "node_id": "SE_lADOABII586RAm30zwAAAAP52rMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17076761394",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T14:34:13Z"
    },
    {
      "event": "mentioned",
      "id": 17076761419,
      "node_id": "MEE_lADOABII586RAm30zwAAAAP52rNL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17076761419",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T14:34:13Z"
    },
    {
      "event": "subscribed",
      "id": 17076761446,
      "node_id": "SE_lADOABII586RAm30zwAAAAP52rNm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17076761446",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T14:34:13Z"
    },
    {
      "event": "commented",
      "id": 2772308849,
      "node_id": "IC_kwDOABII586lPhNx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2772308849",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-02T11:47:23Z",
      "updated_at": "2025-04-02T11:47:23Z",
      "author_association": "MEMBER",
      "body": "I will review soon.",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2772308849",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "reviewed",
      "id": 2746912075,
      "node_id": "PRR_kwDOABII586juo1L",
      "url": null,
      "actor": null,
      "commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK cf00540f54302e37f8af08f15fce16cbcab0f8c9\r\n\r\nI have reviewed each commit it looks good, my comments below are not serious just a question on last commit and some suggestions that improve doc, making fuzz test dry and improving commit message.",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2746912075",
      "submitted_at": "2025-04-07T14:39:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "review_requested",
      "id": 17155143287,
      "node_id": "RRE_lADOABII586RAm30zwAAAAP-hrZ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17155143287",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-07T14:40:09Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ2ZmY0MjIwYmZmMDE5NDRmNDM2ZTFjNDA1ZDAzODA4MmIyYzg3YWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46ff4220bff01944f436e1c405d038082b2c87af",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/46ff4220bff01944f436e1c405d038082b2c87af",
      "tree": {
        "sha": "6217ecc340642cee6d52efbffa5e70fdb6fc1fd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6217ecc340642cee6d52efbffa5e70fdb6fc1fd3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dc74c92c0650a171e1c6f5bea1c15e13584e799",
          "sha": "0dc74c92c0650a171e1c6f5bea1c15e13584e799",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0dc74c92c0650a171e1c6f5bea1c15e13584e799"
        }
      ],
      "message": "arith_uint256: modernize comparison operators\n\nSince C++20, operator!= is implicitly defaulted using operator==, and\noperator<, operator<=, operator>, and operator>= are defaulted using\noperator<=>, so it suffices to just provide these two.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-04-07T14:45:13Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T19:59:06Z"
      },
      "sha": "46ff4220bff01944f436e1c405d038082b2c87af"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZjZmUwMDhkYjI1ZWYxNGZkYjRkYzBlMTYyMGJkMDNjMDA2NWI4NDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcfe008db25ef14fdb4dc0e1620bd03c0065b840",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fcfe008db25ef14fdb4dc0e1620bd03c0065b840",
      "tree": {
        "sha": "afbd403cd7d3fc6303fa442067089a72a609c9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afbd403cd7d3fc6303fa442067089a72a609c9d0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46ff4220bff01944f436e1c405d038082b2c87af",
          "sha": "46ff4220bff01944f436e1c405d038082b2c87af",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/46ff4220bff01944f436e1c405d038082b2c87af"
        }
      ],
      "message": "feefrac fuzz: use arith_uint256 instead of ad-hoc multiply\n\nRather than use an ad-hoc reimplementation of wide multiplication inside the\nfuzz test, reuse arith_uint256, which already has this. It's larger than what we\nneed here, but performance isn't a concern in this test, and it does what we need.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-04-07T14:45:13Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T20:00:34Z"
      },
      "sha": "fcfe008db25ef14fdb4dc0e1620bd03c0065b840"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgwMGMwZGVhOWFmNzczYjc3Yjg5MjMzNTI4ZWZlMjY1ZmUxNTRkYjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/800c0dea9af773b77b89233528efe265fe154db1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/800c0dea9af773b77b89233528efe265fe154db1",
      "tree": {
        "sha": "a9c8179decb872b2d1769a7cc979d89d2a3075ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9c8179decb872b2d1769a7cc979d89d2a3075ff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcfe008db25ef14fdb4dc0e1620bd03c0065b840",
          "sha": "fcfe008db25ef14fdb4dc0e1620bd03c0065b840",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fcfe008db25ef14fdb4dc0e1620bd03c0065b840"
        }
      ],
      "message": "feefrac: rework comments around Mul/MulFallback",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-04-07T14:45:13Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T12:03:50Z"
      },
      "sha": "800c0dea9af773b77b89233528efe265fe154db1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc5NjNhZWNlYWQ5NjhkMTI2NTQ1ZDM3MzBkYTVkOTk0MmMzZjk1MTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7963aecead968d126545d3730da5d9942c3f9518",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7963aecead968d126545d3730da5d9942c3f9518",
      "tree": {
        "sha": "f1b680e7cd26cfce583c1892d4ec05359fb3a07d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1b680e7cd26cfce583c1892d4ec05359fb3a07d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/800c0dea9af773b77b89233528efe265fe154db1",
          "sha": "800c0dea9af773b77b89233528efe265fe154db1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/800c0dea9af773b77b89233528efe265fe154db1"
        }
      ],
      "message": "feefrac: add helper functions for 96-bit division\n\nThese functions are needed to implement FeeFrac evaluation later: given a\nFeeFrac{fee, size}, its fee at at_size is (fee * at_size / size).",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-04-07T14:50:56Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-26T19:04:05Z"
      },
      "sha": "7963aecead968d126545d3730da5d9942c3f9518"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVjZjk1NmVjOWQzYmFkZWI5NDBmODU1ODgwMDNhYWM0YzZkMjE5MGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecf956ec9d3badeb940f85588003aac4c6d2190b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ecf956ec9d3badeb940f85588003aac4c6d2190b",
      "tree": {
        "sha": "7b732ecb614ec6eac635a1c020d94e6ef3db98e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b732ecb614ec6eac635a1c020d94e6ef3db98e5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7963aecead968d126545d3730da5d9942c3f9518",
          "sha": "7963aecead968d126545d3730da5d9942c3f9518",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7963aecead968d126545d3730da5d9942c3f9518"
        }
      ],
      "message": "feefrac: add support for evaluating at given size",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-04-07T14:51:41Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-29T20:06:30Z"
      },
      "sha": "ecf956ec9d3badeb940f85588003aac4c6d2190b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBjNmJjZmQ4ZjczYmZkODUyNGMwMWIzMDJkYzRhMjc2NjVhYmY1YzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c6bcfd8f73bfd8524c01b302dc4a27665abf5c3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0c6bcfd8f73bfd8524c01b302dc4a27665abf5c3",
      "tree": {
        "sha": "483bfe8f9d43d2a821bfdf73c07c175ef0da66aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/483bfe8f9d43d2a821bfdf73c07c175ef0da66aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecf956ec9d3badeb940f85588003aac4c6d2190b",
          "sha": "ecf956ec9d3badeb940f85588003aac4c6d2190b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ecf956ec9d3badeb940f85588003aac4c6d2190b"
        }
      ],
      "message": "feefrac: support both rounding up and down for Evaluate\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-04-07T14:51:41Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-07-30T15:48:32Z"
      },
      "sha": "0c6bcfd8f73bfd8524c01b302dc4a27665abf5c3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU4OTE0YWI0NTljNDZjNTE4YzQ3YzUwODJhZWMyNWFjMGQwM2FiMTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58914ab459c46c518c47c5082aec25ac0d03ab11",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/58914ab459c46c518c47c5082aec25ac0d03ab11",
      "tree": {
        "sha": "231d5aeb5f31d0dc67c4e07a9edd76542851abc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/231d5aeb5f31d0dc67c4e07a9edd76542851abc8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c6bcfd8f73bfd8524c01b302dc4a27665abf5c3",
          "sha": "0c6bcfd8f73bfd8524c01b302dc4a27665abf5c3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0c6bcfd8f73bfd8524c01b302dc4a27665abf5c3"
        }
      ],
      "message": "fuzz: assert min diff between FeeFrac and CFeeRate\n\nCo-Authored-By: Greg Sanders <gsanders87@gmail.com>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-04-07T14:51:41Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-02-10T18:57:39Z"
      },
      "sha": "58914ab459c46c518c47c5082aec25ac0d03ab11"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17155367747,
      "node_id": "HRFPE_lADOABII586RAm30zwAAAAP-iiND",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17155367747",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/58914ab459c46c518c47c5082aec25ac0d03ab11",
      "created_at": "2025-04-07T14:51:50Z"
    },
    {
      "event": "reviewed",
      "id": 2747136888,
      "node_id": "PRR_kwDOABII586jvft4",
      "url": null,
      "actor": null,
      "commit_id": "c71afe6a041e557b403159d0a974965a06b6fc43",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2747136888",
      "submitted_at": "2025-04-07T14:52:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "commented",
      "id": 2783702063,
      "node_id": "IC_kwDOABII586l6-wv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2783702063",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-07T15:18:33Z",
      "updated_at": "2025-04-07T15:18:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 58914ab459c46c518c47c5082aec25ac0d03ab11\r\n\r\nRebased, changing mostly `Span` to `std::span` - and a minor comment update.\r\n\r\n<details>\r\n<summary>patch</summary>\r\n\r\n```patch\r\ndiff --git a/src/util/feefrac.h b/src/util/feefrac.h\r\n--- a/src/util/feefrac.h(revision a9f419ef8aa2d518de1ad87603b82248bf88f864)\r\n+++ b/src/util/feefrac.h(date 1744038722170)\r\n@@ -84,7 +84,8 @@\r\n         return __int128{a} * b;\r\n     }\r\n \r\n-    /** Helper function for 96/32 signed division, rounding towards negative infinity. This is a\r\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\r\n+     *  round_down), or towards positive infinity (if !round_down). This is a\r\n      *  version relying on __int128.\r\n      *\r\n      * The result must fit in an int64_t, and d must be strictly positive. */\r\n```\r\n\r\n</details>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#issuecomment-2783702063",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30535"
    },
    {
      "event": "review_requested",
      "id": 17155841449,
      "node_id": "RRE_lADOABII586RAm30zwAAAAP-kV2p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17155841449",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-07T15:18:41Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2747297153,
      "node_id": "PRR_kwDOABII586jwG2B",
      "url": null,
      "actor": null,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK  58914ab459c46c518c47c5082aec25ac0d03ab11",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2747297153",
      "submitted_at": "2025-04-07T15:39:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "reviewed",
      "id": 2747930555,
      "node_id": "PRR_kwDOABII586jyhe7",
      "url": null,
      "actor": null,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2747930555",
      "submitted_at": "2025-04-07T19:39:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "reviewed",
      "id": 2748153258,
      "node_id": "PRR_kwDOABII586jzX2q",
      "url": null,
      "actor": null,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "light code review ACK 58914ab459c46c518c47c5082aec25ac0d03ab11",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#pullrequestreview-2748153258",
      "submitted_at": "2025-04-07T21:28:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
    },
    {
      "event": "merged",
      "id": 17161043661,
      "node_id": "ME_lADOABII586RAm30zwAAAAP-4L7N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17161043661",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cfe025ff0e1dcf984179a5a9b01dc8b865d95409",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe025ff0e1dcf984179a5a9b01dc8b865d95409",
      "created_at": "2025-04-07T22:00:09Z"
    },
    {
      "event": "closed",
      "id": 17161043775,
      "node_id": "CE_lADOABII586RAm30zwAAAAP-4L8_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17161043775",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-07T22:00:09Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694308284",
      "pull_request_review_id": 2203559483,
      "id": 1694308284,
      "node_id": "PRRC_kwDOABII585k_Re8",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This",
      "path": "src/util/feefrac.h",
      "position": 89,
      "original_position": 10,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: if you think the preconditions already stated in the Assumes is worth repeating in the comments, consider swapping their order to match the order in the code.",
      "created_at": "2024-07-28T19:14:59Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694308284",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694308284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 197,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694594826",
      "pull_request_review_id": 2203559483,
      "id": 1694594826,
      "node_id": "PRRC_kwDOABII585lAXcK",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;\n+            // Evaluate the division so the result becomes low64_div + high64_div * 2**32. We need\n+            // this division to round down however, while the / operator rounds towards zero. In\n+            // case low64 is negative and not a multiple of size, we thus need a correction.\n+            int64_t low64_div = low64 / size;\n+            low64_div -= (low64 % size) < 0;\n+            // Evaluate and return the result\n+            return (high64_div << 32) + low64_div;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 38,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would it make sense to extract this into a DivFallback - and test it independently, like we do with `MulFallback`? This would make it independently testable and we could extend it to 128 bit division seamlessly, e.g.:\r\n```patch\r\ndiff --git a/src/util/feefrac.h b/src/util/feefrac.h\r\n--- a/src/util/feefrac.h\t(revision 5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc)\r\n+++ b/src/util/feefrac.h\t(date 1722234628938)\r\n@@ -41,23 +41,56 @@\r\n      *\r\n      * Separate to permit testing on platforms where it isn't actually needed.\r\n      */\r\n-    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\r\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t high, int32_t low) noexcept\r\n     {\r\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\r\n-        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\r\n-        int64_t high = (a >> 32) * b;\r\n-        return {high + (low >> 32), static_cast<uint32_t>(low)};\r\n+        // Emulate 96-bit multiplication using two 64-bit multiplies.\r\n+        int64_t low_mul = int64_t{static_cast<uint32_t>(high)} * low;\r\n+        int64_t high_mul = (high >> 32) * low;\r\n+        return {high_mul + (low_mul >> 32), static_cast<uint32_t>(low_mul)};\r\n+    }\r\n+\r\n+    /** Fallback version for Div (see below).\r\n+     *\r\n+     * Separate to permit testing on platforms where it isn't actually needed.\r\n+     */\r\n+    static inline int64_t DivFallback(int64_t high, uint32_t low, int32_t divisor) noexcept\r\n+    {\r\n+        Assume(divisor != 0);\r\n+        // Compute high / divisor, so the result becomes\r\n+        // (low + (high - high_div * divisor) * 2**32) / divisor + (high_div * 2**32).\r\n+        int64_t high_div = high / divisor;\r\n+        // Evaluate the parenthesized expression above, so the result becomes\r\n+        // low64 / divisor + (high_div * 2**32)\r\n+        int64_t low64 = ((high - high_div * divisor) << 32) | low;\r\n+        // Evaluate the division so the result becomes low64_div + high_div * 2**32.\r\n+        int64_t low64_div = low64 / divisor;\r\n+        // Round towards negative infinity\r\n+        low64_div -= (low64 % divisor) < 0;\r\n+        return (high_div << 32) + low64_div;\r\n     }\r\n \r\n     // Compute a * b, returning an unspecified but totally ordered type.\r\n #ifdef __SIZEOF_INT128__\r\n     static inline __int128 Mul(int64_t a, int32_t b) noexcept\r\n     {\r\n-        // If __int128 is available, use 128-bit wide multiply.\r\n         return __int128{a} * b;\r\n     }\r\n+\r\n+    // Compute product / divisor, rounding towards negative infinity.\r\n+    static inline int64_t Div(__int128 product, int32_t divisor) noexcept\r\n+    {\r\n+        auto quotient = product / divisor;\r\n+        // Round towards negative infinity\r\n+        quotient -= (product % divisor) < 0;\r\n+        return quotient;\r\n+    }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n+    // Compute (high << 64 | low) / divisor, rounding towards negative infinity.\r\n+    static inline int64_t Div(std::pair<int64_t, uint32_t> product, int32_t divisor) noexcept\r\n+    {\r\n+        return DivFallback(product.first, product.second, divisor);\r\n+    }\r\n #endif\r\n \r\n     int64_t fee;\r\n@@ -162,23 +195,7 @@\r\n             return (uint64_t(fee) * at_size) / uint32_t(size);\r\n         } else {\r\n             // If not, use a custom 96-bit division.\r\n-\r\n-            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\r\n-            // as (low32 + high64 * 2**32) / this->size.\r\n-            auto [high64, low32] = MulFallback(fee, at_size);\r\n-            // Compute high64 / this->size, so the result becomes\r\n-            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\r\n-            int64_t high64_div = high64 / size;\r\n-            // Evaluate the parenthesized expression above, so the result becomes\r\n-            // low64 / this->size + (high64_div * 2**32)\r\n-            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;\r\n-            // Evaluate the division so the result becomes low64_div + high64_div * 2**32. We need\r\n-            // this division to round down however, while the / operator rounds towards zero. In\r\n-            // case low64 is negative and not a multiple of size, we thus need a correction.\r\n-            int64_t low64_div = low64 / size;\r\n-            low64_div -= (low64 % size) < 0;\r\n-            // Evaluate and return the result\r\n-            return (high64_div << 32) + low64_div;\r\n+            return Div(Mul(fee, at_size), size);\r\n         }\r\n     }\r\n };\r\n```",
      "created_at": "2024-07-29T05:43:11Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694594826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694594826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 169,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694662631",
      "pull_request_review_id": 2203559483,
      "id": 1694662631,
      "node_id": "PRRC_kwDOABII585lAn_n",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 31,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: while the return value needs a `+`, I think this would work with a ` | low32` as well (which would provide better documentation about them not overlapping)",
      "created_at": "2024-07-29T06:41:17Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694662631",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694662631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694678834",
      "pull_request_review_id": 2203559483,
      "id": 1694678834,
      "node_id": "PRRC_kwDOABII585lAr8y",
      "diff_hunk": "@@ -17,6 +17,27 @@ BOOST_AUTO_TEST_CASE(feefrac_operators)\n     FeeFrac empty{0, 0};\n     FeeFrac zero_fee{0, 1}; // zero-fee allowed\n \n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(1), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(1000000), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(0x7fffffff), 0);\n+\n+    BOOST_CHECK_EQUAL(p1.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(1), 10);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(100000000), 1000000000);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(0x7fffffff), int64_t(0x7fffffff) * 10);\n+\n+    FeeFrac neg{-1001, 100};\n+    BOOST_CHECK_EQUAL(neg.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(neg.Evaluate(1), -11);",
      "path": "src/test/feefrac_tests.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "how often would we get negative fee in reality? If rounding towards negative infinity just a theoretical exercise or is it an important usecase?",
      "created_at": "2024-07-29T06:53:41Z",
      "updated_at": "2024-07-29T06:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1694678834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694678834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695810620",
      "pull_request_review_id": 2205913700,
      "id": 1695810620,
      "node_id": "PRRC_kwDOABII585lFAQ8",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This",
      "path": "src/util/feefrac.h",
      "position": 89,
      "original_position": 10,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": 1694308284,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-07-29T20:21:16Z",
      "updated_at": "2024-07-29T20:21:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1695810620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695810620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 197,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695811930",
      "pull_request_review_id": 2205915925,
      "id": 1695811930,
      "node_id": "PRRC_kwDOABII585lFAla",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;\n+            // Evaluate the division so the result becomes low64_div + high64_div * 2**32. We need\n+            // this division to round down however, while the / operator rounds towards zero. In\n+            // case low64 is negative and not a multiple of size, we thus need a correction.\n+            int64_t low64_div = low64 / size;\n+            low64_div -= (low64 % size) < 0;\n+            // Evaluate and return the result\n+            return (high64_div << 32) + low64_div;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 38,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": 1694594826,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I didn't do something like this initially, as the `Evaluate` / `Div` operations are far less performance critical than `Mul`, but I've now adopted code like this (plus adding an `__int128`-based `Div` as well) for consistency and testability.",
      "created_at": "2024-07-29T20:22:40Z",
      "updated_at": "2024-07-29T20:22:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1695811930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695811930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 169,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695813177",
      "pull_request_review_id": 2205917912,
      "id": 1695813177,
      "node_id": "PRRC_kwDOABII585lFA45",
      "diff_hunk": "@@ -144,6 +144,43 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(at_size >= 0);\n+        Assume(size > 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            return (uint64_t(fee) * at_size) / uint32_t(size);\n+        } else {\n+            // If not, use a custom 96-bit division.\n+\n+            // Write (this->fee * at_size) as (low32 + high64 * 2**32), so the result can be stated\n+            // as (low32 + high64 * 2**32) / this->size.\n+            auto [high64, low32] = MulFallback(fee, at_size);\n+            // Compute high64 / this->size, so the result becomes\n+            // (low32 + (high64 - high64_div * size) * 2**32) / this->size + (high64_div * 2**32).\n+            int64_t high64_div = high64 / size;\n+            // Evaluate the parenthesized expression above, so the result becomes\n+            // low64 / this->size + (high64_div * 2**32)\n+            int64_t low64 = ((high64 - high64_div * size) << 32) + low32;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 31,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": 1694662631,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd rather not. I find the use of bitwise operations with signed integers a bit unintuitive. ",
      "created_at": "2024-07-29T20:23:57Z",
      "updated_at": "2024-07-29T20:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1695813177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695813177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695821070",
      "pull_request_review_id": 2205927581,
      "id": 1695821070,
      "node_id": "PRRC_kwDOABII585lFC0O",
      "diff_hunk": "@@ -17,6 +17,27 @@ BOOST_AUTO_TEST_CASE(feefrac_operators)\n     FeeFrac empty{0, 0};\n     FeeFrac zero_fee{0, 1}; // zero-fee allowed\n \n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(1), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(1000000), 0);\n+    BOOST_CHECK_EQUAL(zero_fee.Evaluate(0x7fffffff), 0);\n+\n+    BOOST_CHECK_EQUAL(p1.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(1), 10);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(100000000), 1000000000);\n+    BOOST_CHECK_EQUAL(p1.Evaluate(0x7fffffff), int64_t(0x7fffffff) * 10);\n+\n+    FeeFrac neg{-1001, 100};\n+    BOOST_CHECK_EQUAL(neg.Evaluate(0), 0);\n+    BOOST_CHECK_EQUAL(neg.Evaluate(1), -11);",
      "path": "src/test/feefrac_tests.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "5a4c01c4b29b7a2542e43222fa64cdb4ca6ee3dc",
      "in_reply_to_id": 1694678834,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I only added the logic for rounding towards negative infinity because of consistency, not because of a hard requirement. I've added a comment too.\r\n\r\nBut just to clarify, without the correction step, the behavior is essentially arbitrary for negative fees. `low64` (now renamed to `n_low`) can be both positive or negative with negative `n` (positive when `n.second` is positive, and `n.first` is a multiple of `d`; negative when `n.first` is non-multiple of `d`). That's just too hard to specify and test.",
      "created_at": "2024-07-29T20:27:50Z",
      "updated_at": "2024-07-29T20:27:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1695821070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695821070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698863718",
      "pull_request_review_id": 2210747435,
      "id": 1698863718,
      "node_id": "PRRC_kwDOABII585lQppm",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 45,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks like this isn't covered by dedicated tests - only by fuzz and on platforms where `!__SIZEOF_INT128__`, right?\r\n\r\nSince the rounding should be the same for both implementations, we could consider pulling the rounding into `Evaluate` to make sure these lines are always tested:\r\n```patch\r\ndiff --git a/src/util/feefrac.h b/src/util/feefrac.h\r\n--- a/src/util/feefrac.h\t(revision 1cc0d5475a578a8299c24c008c0080a6006cae28)\r\n+++ b/src/util/feefrac.h\t(date 1722450548560)\r\n@@ -55,7 +55,7 @@\r\n      * to be consistent for testability reasons.\r\n      *\r\n      * The result must fit in an int64_t, and d must be strictly positive. */\r\n-    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\r\n+    static inline std::pair<int64_t, int64_t> DivFallback(std::pair<int64_t, uint32_t> n, int32_t d) noexcept\r\n     {\r\n         Assume(d > 0);\r\n         // Compute quot_high = n.first / d, so the result becomes\r\n@@ -69,13 +69,7 @@\r\n         // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\r\n         // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\r\n         // correction.\r\n-        int64_t quot_low = n_low / d;\r\n-        int64_t mod_low = n_low % d;\r\n-        if (mod_low) [[likely]] {\r\n-            quot_low += (mod_low > 0) - round_down;\r\n-        }\r\n-        // Combine and return the result\r\n-        return (quot_high << 32) + quot_low;\r\n+        return {(quot_high << 32) + n_low / d, n_low % d};\r\n     }\r\n \r\n #ifdef __SIZEOF_INT128__\r\n@@ -90,17 +84,10 @@\r\n      *  version relying on __int128.\r\n      *\r\n      * The result must fit in an int64_t, and d must be strictly positive. */\r\n-    static inline int64_t Div(__int128 n, int32_t d, bool round_down) noexcept\r\n+    static inline std::pair<int64_t, int32_t> Div(__int128 n, int32_t d) noexcept\r\n     {\r\n         Assume(d > 0);\r\n-        // Compute the division.\r\n-        int64_t quot = n / d;\r\n-        int32_t mod = n % d;\r\n-        // Correct result if the / operator above rounded in the wrong direction.\r\n-        if (mod) [[likely]] {\r\n-            quot += (mod > 0) - round_down;\r\n-        }\r\n-        return quot;\r\n+        return {n / d, n % d};\r\n     }\r\n #else\r\n     static constexpr auto Mul = MulFallback;\r\n@@ -216,7 +203,9 @@\r\n             }\r\n         } else {\r\n             // Otherwise, use Mul and Div.\r\n-            return Div(Mul(fee, at_size), size, RoundDown);\r\n+            auto [quot, mod] = Div(Mul(fee, at_size), size);\r\n+            auto round = (mod > 0) - (mod && RoundDown);\r\n+            return quot + round;\r\n         }\r\n     }\r\n ```\r\n\r\n----\r\n\r\nIt seems to me both are already using combined division/modulo anyway (i.e. `__divmodti4` on gcc), so the performance should be similar https://godbolt.org/z/Es5o8b3qo.",
      "created_at": "2024-07-31T17:27:05Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1698863718",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698863718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698947273",
      "pull_request_review_id": 2210747435,
      "id": 1698947273,
      "node_id": "PRRC_kwDOABII585lQ-DJ",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;\n+        }\n+        // Combine and return the result\n+        return (quot_high << 32) + quot_low;\n+    }\n+\n #ifdef __SIZEOF_INT128__\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a version relying on __int128. */\n     static inline __int128 Mul(int64_t a, int32_t b) noexcept\n     {\n-        // If __int128 is available, use 128-bit wide multiply.\n         return __int128{a} * b;\n     }\n+\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity. This is a\n+     *  version relying on __int128.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t Div(__int128 n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute the division.\n+        int64_t quot = n / d;\n+        int32_t mod = n % d;\n+        // Correct result if the / operator above rounded in the wrong direction.\n+        if (mod) [[likely]] {\n+            quot += (mod > 0) - round_down;\n+        }\n+        return quot;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 74,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we want to avoid branching  here, I think we can avoid the jump i.e.\r\n```ASM\r\n        test    eax, eax\r\n        je      .L4\r\n        setg    al\r\n        movzx   eax, al\r\n        sub     eax, ebx\r\n        cdqe\r\n        add     rbp, rax\r\n```\r\nby doing something like\r\n```suggestion\r\n        auto round = (mod > 0) - (mod && round_down);\r\n        return quot + round;\r\n```\r\nwhich looks like\r\n```ASM\r\n        test    eax, eax\r\n        setne   al\r\n        setg    bl\r\n        movzx   eax, al\r\n        and     eax, ecx\r\n        sub     ebx, eax\r\n        movsx   rbx, ebx\r\n        add     rbx, rdx\r\n```\r\n\r\n(see: https://godbolt.org/z/Es5o8b3qo)",
      "created_at": "2024-07-31T18:36:48Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1698947273",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698947273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699023683",
      "pull_request_review_id": 2210747435,
      "id": 1699023683,
      "node_id": "PRRC_kwDOABII585lRQtD",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 106,
      "original_position": 111,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "+1, `feefrac_tests` pass if I delete the first part of the if and use this for the small values as well! (would be nice if we could automate this)",
      "created_at": "2024-07-31T19:46:04Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699023683",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699023683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699026665",
      "pull_request_review_id": 2210747435,
      "id": 1699026665,
      "node_id": "PRRC_kwDOABII585lRRbp",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 186,
      "original_position": 169,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this is very useful way to test the big divisions - but it repeats the production code logic for the small ones.",
      "created_at": "2024-07-31T19:48:56Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699026665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699026665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 181,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699028624",
      "pull_request_review_id": 2210747435,
      "id": 1699028624,
      "node_id": "PRRC_kwDOABII585lRR6Q",
      "diff_hunk": "@@ -59,26 +48,20 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.\n+    auto mul_abs_a = Abs256(a1) * Abs256(a2), mul_abs_b = Abs256(b1) * Abs256(b2);\n \n     // Compute products of absolute values.\n-    auto mul_abs_a = Mul128(abs_a1, abs_a2);\n-    auto mul_abs_b = Mul128(abs_b1, abs_b2);\n     if (sign_a < 0) {\n-        return compare_arrays(mul_abs_b, mul_abs_a);\n+        return mul_abs_b <=> mul_abs_a;\n     } else {\n-        return compare_arrays(mul_abs_a, mul_abs_b);\n+        return mul_abs_a <=> mul_abs_b;\n     }\n }\n \n+/** The maximum absolute value of an int64_t, as an arith_uint256 (2^63). */\n+const auto MAX_ABS_INT64 = arith_uint256{1} << 63;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we move this to the top to make it available for `Abs256`?",
      "created_at": "2024-07-31T19:50:57Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699028624",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699028624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699028863",
      "pull_request_review_id": 2210747435,
      "id": 1699028863,
      "node_id": "PRRC_kwDOABII585lRR9_",
      "diff_hunk": "@@ -13,43 +14,31 @@\n \n namespace {\n \n-/** Compute a * b, represented in 4x32 bits, highest limb first. */\n-std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+/** Construct an arith_uint256 whose value equals abs(x). */\n+arith_uint256 Abs256(int64_t x)\n {\n-    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n-\n-    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n-    auto add_fn = [&](uint64_t v, int pos) {\n-        uint64_t accum{0};\n-        for (int i = 0; i + pos < 4; ++i) {\n-            // Add current value at limb pos in ret.\n-            accum += ret[3 - pos - i];\n-            // Add low or high half of v.\n-            if (i == 0) accum += v & 0xffffffff;\n-            if (i == 1) accum += v >> 32;\n-            // Store lower half of result in limb pos in ret.\n-            ret[3 - pos - i] = accum & 0xffffffff;\n-            // Leave carry in accum.\n-            accum >>= 32;\n-        }\n-        // Make sure no overflow.\n-        assert(accum == 0);\n-    };\n-\n-    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^32).\n-    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n-    add_fn((a >> 32) * (b & 0xffffffff), 1);\n-    add_fn((a & 0xffffffff) * (b >> 32), 1);\n-    add_fn((a >> 32) * (b >> 32), 2);\n-    return ret;\n+    if (x >= 0) {\n+        // For positive numbers, pass through the value.\n+        return arith_uint256{static_cast<uint64_t>(x)};\n+    } else if (x > std::numeric_limits<int64_t>::min()) {\n+        // For negative numbers, negate first.\n+        return arith_uint256{static_cast<uint64_t>(-x)};\n+    } else {\n+        // Special case for x == -2^63 (for which -x results in integer overflow).\n+        return arith_uint256{1} << 63;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        return MAX_ABS_INT64;\r\n```",
      "created_at": "2024-07-31T19:51:14Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699028863",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699028863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699033322",
      "pull_request_review_id": 2210747435,
      "id": 1699033322,
      "node_id": "PRRC_kwDOABII585lRTDq",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 88,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit (sounds a bit weird to me):\r\n```suggestion\r\n    /** Compute the fee for a given `at_size` using this object's feerate.\r\n```",
      "created_at": "2024-07-31T19:55:52Z",
      "updated_at": "2024-07-31T20:38:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699033322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699033322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699035586",
      "pull_request_review_id": 2210747435,
      "id": 1699035586,
      "node_id": "PRRC_kwDOABII585lRTnC",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 167,
      "original_position": 150,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "how are we testing both? Not on the same platform, right? And we're also testing the small value calculations here, right?",
      "created_at": "2024-07-31T19:58:09Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699035586",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699035586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 161,
      "original_start_line": 145,
      "start_side": "RIGHT",
      "line": 162,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699037207",
      "pull_request_review_id": 2210747435,
      "id": 1699037207,
      "node_id": "PRRC_kwDOABII585lRUAX",
      "diff_hunk": "@@ -210,13 +211,8 @@ class base_uint\n     friend inline base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n     friend inline base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n     friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n-    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n-    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n-    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n-    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n-    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n+    friend inline std::strong_ordering operator<=>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <=> 0; }",
      "path": "src/arith_uint256.h",
      "position": 17,
      "original_position": 17,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nice!",
      "created_at": "2024-07-31T19:59:51Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699037207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699037207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 216,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699057136",
      "pull_request_review_id": 2210747435,
      "id": 1699057136,
      "node_id": "PRRC_kwDOABII585lRY3w",
      "diff_hunk": "@@ -59,23 +48,14 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 95,
      "original_position": 86,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "bcf879056d871a398f33c436aa34617642d9392d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is it important to distinguish the 0 values from the positive ones when comparing the signs?\r\nIf not, maybe we can simplify a bit:\r\n```C++\r\n    // Compute and compare signs.\r\n    int sign_a = (a1 < 0) ^ (a2 < 0) ? -1 : 1;\r\n    int sign_b = (b1 < 0) ^ (b2 < 0) ? -1 : 1;\r\n    if (sign_a != sign_b) return sign_a <=> sign_b;\r\n\r\n    auto result = Abs256(a1) * Abs256(a2) <=> Abs256(b1) * Abs256(b2);\r\n    return (sign_a >= 0) ? result : 0 <=> result;",
      "created_at": "2024-07-31T20:16:59Z",
      "updated_at": "2024-07-31T21:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699057136",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699057136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 54,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699072776",
      "pull_request_review_id": 2210747435,
      "id": 1699072776,
      "node_id": "PRRC_kwDOABII585lRcsI",
      "diff_hunk": "@@ -182,6 +182,27 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {",
      "path": "src/util/feefrac.h",
      "position": 97,
      "original_position": 17,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "80711ef01b7639c5eae60b879798c8980860858c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would it make sense to add non-fuzz `0x1ffffffff`, `0x200000000` and `0x200000001` test cases for this boundary?",
      "created_at": "2024-07-31T20:32:55Z",
      "updated_at": "2024-07-31T20:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699072776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699072776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 205,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699088984",
      "pull_request_review_id": 2211104916,
      "id": 1699088984,
      "node_id": "PRRC_kwDOABII585lRgpY",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 186,
      "original_position": 169,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699026665,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't understand what you mean by big and small divisions.",
      "created_at": "2024-07-31T20:47:28Z",
      "updated_at": "2024-07-31T20:47:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699088984",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699088984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 181,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699093137",
      "pull_request_review_id": 2211112029,
      "id": 1699093137,
      "node_id": "PRRC_kwDOABII585lRhqR",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 45,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1698863718,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Looks like this isn't covered by dedicated tests - only by fuzz and on platforms where !__SIZEOF_INT128__, right?\r\n\r\nThe `feefrac_mul_div` fuzz test tests this code on every platform (only for `n` inputs which are themselves the product of a 32-bit integer times a 64-bit integer, but given that those are the only ones that matter for production that seems sufficient to me).\r\n\r\nAlso note that we build fuzz corpora only on platforms that support libfuzzer, but the constructed fuzz inputs then do get tested (in CI even) on other test environments too.",
      "created_at": "2024-07-31T20:51:49Z",
      "updated_at": "2024-07-31T20:51:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699093137",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699093137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699094186",
      "pull_request_review_id": 2211113728,
      "id": 1699094186,
      "node_id": "PRRC_kwDOABII585lRh6q",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 106,
      "original_position": 111,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699023683,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That is what the `feefrac_mul_div` test does effectively.",
      "created_at": "2024-07-31T20:52:54Z",
      "updated_at": "2024-07-31T20:52:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699094186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699094186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699095841",
      "pull_request_review_id": 2211116395,
      "id": 1699095841,
      "node_id": "PRRC_kwDOABII585lRiUh",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 186,
      "original_position": 169,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699026665,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I meant that in https://github.com/bitcoin/bitcoin/pull/30535/files#diff-09e6cf871236bf03d32cca9405837d9b7927690b2296a2de17c9be6ea0e75959R215 we're using the same `A + (B - 1) / B` equation for rounding, i.e. the test and production code may be too similar.\r\nI think it's fine since the big fee rounding is the more complicated one.",
      "created_at": "2024-07-31T20:54:37Z",
      "updated_at": "2024-07-31T20:54:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699095841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699095841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 181,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699095973",
      "pull_request_review_id": 2211116638,
      "id": 1699095973,
      "node_id": "PRRC_kwDOABII585lRiWl",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 167,
      "original_position": 150,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699035586,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The test directly invokes both `Div(Mul(mul64, mul32), div)` and `DivFallback(MulFallback(mul64, mul32), div)`.",
      "created_at": "2024-07-31T20:54:46Z",
      "updated_at": "2024-07-31T20:54:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699095973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699095973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 161,
      "original_start_line": 145,
      "start_side": "RIGHT",
      "line": 162,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699098055",
      "pull_request_review_id": 2211119892,
      "id": 1699098055,
      "node_id": "PRRC_kwDOABII585lRi3H",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 186,
      "original_position": 169,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699026665,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, I see, yes. I mean it's really the only way of implementing a rounding-up division that I know. And while conceptually the algorithm is the same, it is being done on `arith_uint256` rather than the types used in production.",
      "created_at": "2024-07-31T20:56:58Z",
      "updated_at": "2024-07-31T20:56:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699098055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699098055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 181,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699099507",
      "pull_request_review_id": 2211122360,
      "id": 1699099507,
      "node_id": "PRRC_kwDOABII585lRjNz",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 106,
      "original_position": 111,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699023683,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does it test `return Div(Mul(fee, at_size), size, RoundDown)` when `fee < 0x200000000`?\r\nI don't think that can happen in reality, I just tested it to make sure it's correct for small values as well.",
      "created_at": "2024-07-31T20:58:11Z",
      "updated_at": "2024-07-31T20:58:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699099507",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699099507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699100246",
      "pull_request_review_id": 2211123677,
      "id": 1699100246,
      "node_id": "PRRC_kwDOABII585lRjZW",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 167,
      "original_position": 150,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699035586,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My mistake, thanks for clarifying",
      "created_at": "2024-07-31T20:58:59Z",
      "updated_at": "2024-07-31T20:59:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699100246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699100246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 161,
      "original_start_line": 145,
      "start_side": "RIGHT",
      "line": 162,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699101675",
      "pull_request_review_id": 2211126073,
      "id": 1699101675,
      "node_id": "PRRC_kwDOABII585lRjvr",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 106,
      "original_position": 111,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699023683,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, it invokes `Div(Mul(mul64, mul32), div)`, which is effectively that.\r\n\r\nIt's not running this exact line **inside** `Evaluate`, but instead contains a copy of the code we want to behave correctly. But please, it's one line.",
      "created_at": "2024-07-31T21:00:38Z",
      "updated_at": "2024-07-31T21:00:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699101675",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699101675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699114332",
      "pull_request_review_id": 2211145005,
      "id": 1699114332,
      "node_id": "PRRC_kwDOABII585lRm1c",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 106,
      "original_position": 111,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699023683,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">  But please, it's one line.\r\n\r\n+1 meant that I like this, maybe I should use a 👍  next time :)",
      "created_at": "2024-07-31T21:14:08Z",
      "updated_at": "2024-07-31T21:14:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699114332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699114332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699116156",
      "pull_request_review_id": 2211148049,
      "id": 1699116156,
      "node_id": "PRRC_kwDOABII585lRnR8",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 106,
      "original_position": 111,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699023683,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My line of commenting here was in response to your \"(would be nice if we could automate this)\". My point is that to a large extent, the `feefrac_mul_div` test does this (even for small values), with the minor limitation that it does it by effectively copying the line rather than invoking it directly (so over time it's possible in theory that the two diverge, and this doesn't remain tested; but right now you need but look at the test and see it does the same thing to get confidence Div/Mul also work for this purpose for small values).",
      "created_at": "2024-07-31T21:16:18Z",
      "updated_at": "2024-07-31T21:22:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699116156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699116156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699122437",
      "pull_request_review_id": 2211158035,
      "id": 1699122437,
      "node_id": "PRRC_kwDOABII585lRo0F",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;\n+        }\n+        // Combine and return the result\n+        return (quot_high << 32) + quot_low;\n+    }\n+\n #ifdef __SIZEOF_INT128__\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a version relying on __int128. */\n     static inline __int128 Mul(int64_t a, int32_t b) noexcept\n     {\n-        // If __int128 is available, use 128-bit wide multiply.\n         return __int128{a} * b;\n     }\n+\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity. This is a\n+     *  version relying on __int128.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t Div(__int128 n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute the division.\n+        int64_t quot = n / d;\n+        int32_t mod = n % d;\n+        // Correct result if the / operator above rounded in the wrong direction.\n+        if (mod) [[likely]] {\n+            quot += (mod > 0) - round_down;\n+        }\n+        return quot;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 74,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1698947273,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Neat! Will incorporate.",
      "created_at": "2024-07-31T21:23:50Z",
      "updated_at": "2024-07-31T21:23:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699122437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699122437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699124231",
      "pull_request_review_id": 2211161115,
      "id": 1699124231,
      "node_id": "PRRC_kwDOABII585lRpQH",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 45,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1698863718,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Since the rounding should be the same for both implementations, we could consider pulling the rounding into Evaluate to make sure these lines are always tested:\r\n\r\nI like that idea, but it's a bigger change than I'm willing to make to this code now.",
      "created_at": "2024-07-31T21:25:55Z",
      "updated_at": "2024-07-31T21:25:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699124231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699124231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699126028",
      "pull_request_review_id": 2211163823,
      "id": 1699126028,
      "node_id": "PRRC_kwDOABII585lRpsM",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {\n+            // Common case where (this->fee * at_size) is guaranteed to fit in a uint64_t.\n+            if constexpr (RoundDown) {\n+                return (uint64_t(fee) * at_size) / uint32_t(size);\n+            } else {\n+                return (uint64_t(fee) * at_size + size - 1U) / uint32_t(size);\n+            }\n+        } else {\n+            // Otherwise, use Mul and Div.\n+            return Div(Mul(fee, at_size), size, RoundDown);",
      "path": "src/util/feefrac.h",
      "position": 106,
      "original_position": 111,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699023683,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks!",
      "created_at": "2024-07-31T21:27:58Z",
      "updated_at": "2024-07-31T21:27:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699126028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699126028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699126895",
      "pull_request_review_id": 2211165224,
      "id": 1699126895,
      "node_id": "PRRC_kwDOABII585lRp5v",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, a positive 31-bit\n+    // divisor, and a rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down or positive and we rounding up, the absolute value of the quotient is the\n+    // rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (prod_abs + div_abs - 1) / div_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 186,
      "original_position": 169,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699026665,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed, thanks for checking",
      "created_at": "2024-07-31T21:29:05Z",
      "updated_at": "2024-07-31T21:29:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699126895",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699126895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 181,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699134260",
      "pull_request_review_id": 2211176501,
      "id": 1699134260,
      "node_id": "PRRC_kwDOABII585lRrs0",
      "diff_hunk": "@@ -59,23 +48,14 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 95,
      "original_position": 86,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "bcf879056d871a398f33c436aa34617642d9392d",
      "in_reply_to_id": 1699057136,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe that's correct, but it's less obviously correct than the existing code IMO, which I think is the more relevant criterion for tests.",
      "created_at": "2024-07-31T21:38:23Z",
      "updated_at": "2024-07-31T21:38:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699134260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699134260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 54,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699140823",
      "pull_request_review_id": 2211186506,
      "id": 1699140823,
      "node_id": "PRRC_kwDOABII585lRtTX",
      "diff_hunk": "@@ -59,23 +48,14 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 95,
      "original_position": 86,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "bcf879056d871a398f33c436aa34617642d9392d",
      "in_reply_to_id": 1699057136,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In that case consider only the second part of the suggestion:\r\n```C++\r\n    auto result = Abs256(a1) * Abs256(a2) <=> Abs256(b1) * Abs256(b2);\r\n    return (sign_a >= 0) ? result : 0 <=> result;\r\n```\r\n(obviously non-blocker)",
      "created_at": "2024-07-31T21:46:01Z",
      "updated_at": "2024-07-31T21:46:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699140823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699140823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 54,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699158929",
      "pull_request_review_id": 2211215759,
      "id": 1699158929,
      "node_id": "PRRC_kwDOABII585lRxuR",
      "diff_hunk": "@@ -59,23 +48,14 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 95,
      "original_position": 86,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "bcf879056d871a398f33c436aa34617642d9392d",
      "in_reply_to_id": 1699057136,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Or a local lambda, for the first part to make it cleaner:\r\n```C++\r\n    auto sign = [](int64_t x) { return x == 0 ? 0 : x < 0 ? -1 : 1; };\r\n    int sign_a = sign(a1) * sign(a2);\r\n    int sign_b = sign(b1) * sign(b2);\r\n    if (sign_a != sign_b) return sign_a <=> sign_b;\r\n```",
      "created_at": "2024-07-31T22:10:51Z",
      "updated_at": "2024-07-31T22:10:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699158929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699158929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 54,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699160619",
      "pull_request_review_id": 2211218133,
      "id": 1699160619,
      "node_id": "PRRC_kwDOABII585lRyIr",
      "diff_hunk": "@@ -37,27 +37,74 @@\n  */\n struct FeeFrac\n {\n-    /** Fallback version for Mul (see below).\n-     *\n-     * Separate to permit testing on platforms where it isn't actually needed.\n-     */\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a fallback version, separate so it can be tested on platforms where\n+     *  it isn't actually needed. */\n     static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n     {\n-        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n         int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n         int64_t high = (a >> 32) * b;\n         return {high + (low >> 32), static_cast<uint32_t>(low)};\n     }\n \n-    // Compute a * b, returning an unspecified but totally ordered type.\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity (if\n+     *  round_down) or positive infinity (if !round_down). This is a fallback version, separate so\n+     *  that it can be tested on platforms where it isn't actually needed.\n+     *\n+     * The exact behavior with negative n does not really matter, but this implementation chooses\n+     * to be consistent for testability reasons.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t DivFallback(std::pair<int64_t, uint32_t> n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute quot_high = n.first / d, so the result becomes\n+        // (n.second + (n.first - quot_high * d) * 2**32) / d + (quot_high * 2**32), or\n+        // (n.second + (n.first % d) * 2**32) / d + (quot_high * 2**32).\n+        int64_t quot_high = n.first / d;\n+        // Evaluate the parenthesized expression above, so the result becomes\n+        // n_low / d + (quot_high * 2**32)\n+        int64_t n_low = ((n.first % d) << 32) + n.second;\n+        // Evaluate the division so the result becomes quot_low + quot_high * 2**32. It is possible\n+        // that the / operator here rounds in the wrong direction (if n_low is not a multiple of\n+        // size, and is (if round_down) negative, or (if !round_down) positive). If so, make a\n+        // correction.\n+        int64_t quot_low = n_low / d;\n+        int64_t mod_low = n_low % d;\n+        if (mod_low) [[likely]] {\n+            quot_low += (mod_low > 0) - round_down;\n+        }\n+        // Combine and return the result\n+        return (quot_high << 32) + quot_low;\n+    }\n+\n #ifdef __SIZEOF_INT128__\n+    /** Helper function for 32*64 signed multiplication, returning an unspecified but totally\n+     *  ordered type. This is a version relying on __int128. */\n     static inline __int128 Mul(int64_t a, int32_t b) noexcept\n     {\n-        // If __int128 is available, use 128-bit wide multiply.\n         return __int128{a} * b;\n     }\n+\n+    /** Helper function for 96/32 signed division, rounding towards negative infinity. This is a\n+     *  version relying on __int128.\n+     *\n+     * The result must fit in an int64_t, and d must be strictly positive. */\n+    static inline int64_t Div(__int128 n, int32_t d, bool round_down) noexcept\n+    {\n+        Assume(d > 0);\n+        // Compute the division.\n+        int64_t quot = n / d;\n+        int32_t mod = n % d;\n+        // Correct result if the / operator above rounded in the wrong direction.\n+        if (mod) [[likely]] {\n+            quot += (mod > 0) - round_down;\n+        }\n+        return quot;",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 74,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1698947273,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-07-31T22:13:20Z",
      "updated_at": "2024-07-31T22:13:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699160619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699160619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699160783",
      "pull_request_review_id": 2211218413,
      "id": 1699160783,
      "node_id": "PRRC_kwDOABII585lRyLP",
      "diff_hunk": "@@ -59,26 +48,20 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.\n+    auto mul_abs_a = Abs256(a1) * Abs256(a2), mul_abs_b = Abs256(b1) * Abs256(b2);\n \n     // Compute products of absolute values.\n-    auto mul_abs_a = Mul128(abs_a1, abs_a2);\n-    auto mul_abs_b = Mul128(abs_b1, abs_b2);\n     if (sign_a < 0) {\n-        return compare_arrays(mul_abs_b, mul_abs_a);\n+        return mul_abs_b <=> mul_abs_a;\n     } else {\n-        return compare_arrays(mul_abs_a, mul_abs_b);\n+        return mul_abs_a <=> mul_abs_b;\n     }\n }\n \n+/** The maximum absolute value of an int64_t, as an arith_uint256 (2^63). */\n+const auto MAX_ABS_INT64 = arith_uint256{1} << 63;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699028624,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-07-31T22:13:37Z",
      "updated_at": "2024-07-31T22:13:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699160783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699160783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699160894",
      "pull_request_review_id": 2211218558,
      "id": 1699160894,
      "node_id": "PRRC_kwDOABII585lRyM-",
      "diff_hunk": "@@ -13,43 +14,31 @@\n \n namespace {\n \n-/** Compute a * b, represented in 4x32 bits, highest limb first. */\n-std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+/** Construct an arith_uint256 whose value equals abs(x). */\n+arith_uint256 Abs256(int64_t x)\n {\n-    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n-\n-    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n-    auto add_fn = [&](uint64_t v, int pos) {\n-        uint64_t accum{0};\n-        for (int i = 0; i + pos < 4; ++i) {\n-            // Add current value at limb pos in ret.\n-            accum += ret[3 - pos - i];\n-            // Add low or high half of v.\n-            if (i == 0) accum += v & 0xffffffff;\n-            if (i == 1) accum += v >> 32;\n-            // Store lower half of result in limb pos in ret.\n-            ret[3 - pos - i] = accum & 0xffffffff;\n-            // Leave carry in accum.\n-            accum >>= 32;\n-        }\n-        // Make sure no overflow.\n-        assert(accum == 0);\n-    };\n-\n-    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^32).\n-    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n-    add_fn((a >> 32) * (b & 0xffffffff), 1);\n-    add_fn((a & 0xffffffff) * (b >> 32), 1);\n-    add_fn((a >> 32) * (b >> 32), 2);\n-    return ret;\n+    if (x >= 0) {\n+        // For positive numbers, pass through the value.\n+        return arith_uint256{static_cast<uint64_t>(x)};\n+    } else if (x > std::numeric_limits<int64_t>::min()) {\n+        // For negative numbers, negate first.\n+        return arith_uint256{static_cast<uint64_t>(-x)};\n+    } else {\n+        // Special case for x == -2^63 (for which -x results in integer overflow).\n+        return arith_uint256{1} << 63;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699028863,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-07-31T22:13:45Z",
      "updated_at": "2024-07-31T22:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699160894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699160894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699160963",
      "pull_request_review_id": 2211218656,
      "id": 1699160963,
      "node_id": "PRRC_kwDOABII585lRyOD",
      "diff_hunk": "@@ -144,6 +191,38 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+private:\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 88,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "1cc0d5475a578a8299c24c008c0080a6006cae28",
      "in_reply_to_id": 1699033322,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-07-31T22:13:51Z",
      "updated_at": "2024-07-31T22:13:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699160963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699160963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699161728",
      "pull_request_review_id": 2211219891,
      "id": 1699161728,
      "node_id": "PRRC_kwDOABII585lRyaA",
      "diff_hunk": "@@ -59,23 +48,14 @@ std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n     int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n     if (sign_a != sign_b) return sign_a <=> sign_b;\n \n-    // Compute absolute values.\n-    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n-    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n-    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n-    // intentional here.\n-    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n-    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n-    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n-    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+    // Compute absolute values of products.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 95,
      "original_position": 86,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "bcf879056d871a398f33c436aa34617642d9392d",
      "in_reply_to_id": 1699057136,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I prefer not changing this code except to the extent needed for the switch to `arith_uint256`. The existing code already works.",
      "created_at": "2024-07-31T22:14:38Z",
      "updated_at": "2024-07-31T22:14:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699161728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699161728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 54,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699161799",
      "pull_request_review_id": 2211219996,
      "id": 1699161799,
      "node_id": "PRRC_kwDOABII585lRybH",
      "diff_hunk": "@@ -182,6 +182,27 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute, at this object's feerate, how much fee does at_size correspond to.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {",
      "path": "src/util/feefrac.h",
      "position": 97,
      "original_position": 17,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "80711ef01b7639c5eae60b879798c8980860858c",
      "in_reply_to_id": 1699072776,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-07-31T22:14:44Z",
      "updated_at": "2024-07-31T22:14:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1699161799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699161799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 205,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1708977569",
      "pull_request_review_id": 2227244550,
      "id": 1708977569,
      "node_id": "PRRC_kwDOABII585l3O2h",
      "diff_hunk": "@@ -182,6 +182,27 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 13,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "97f319e68a689b271090298e645eb0bfcd7cbaa4",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: It might be worth renaming this to `EvaluateFee`. The helper function and fuzzing comments refer to Evaluate to explain the calculations.\r\nWhile it's clear they aren't the same, differentiating explicitly by stating whats being evaluated might be better.",
      "created_at": "2024-08-08T08:47:26Z",
      "updated_at": "2024-08-08T12:33:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1708977569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1708977569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709495436",
      "pull_request_review_id": 2227871157,
      "id": 1709495436,
      "node_id": "PRRC_kwDOABII585l5NSM",
      "diff_hunk": "@@ -210,13 +211,8 @@ class base_uint\n     friend inline base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n     friend inline base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n     friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n-    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n-    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n-    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n-    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n-    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n+    friend inline std::strong_ordering operator<=>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <=> 0; }\n     friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }\n-    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }",
      "path": "src/arith_uint256.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "c8b7cc23006fc3404c14e5c7052c4c09b31bc537",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you explain why you remove this line of code? IIUC, this means that `!=` with `uint64_t` will now go through the implicit constructor call, and then through the new `operator<=>`.\r\n\r\nIf it is intentional, then removing operator `==` with `uint64_t` should be done as well for the same reason? If not, it may be better to keep them?\r\n\r\nMostly a consistency style-question, feel free to ignore.",
      "created_at": "2024-08-08T13:23:49Z",
      "updated_at": "2024-08-08T13:23:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1709495436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709495436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 221,
      "original_line": 221,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709543030",
      "pull_request_review_id": 2227934628,
      "id": 1709543030,
      "node_id": "PRRC_kwDOABII585l5Y52",
      "diff_hunk": "@@ -186,23 +190,35 @@ struct FeeFrac\n     /** Compute the fee for a given size `at_size` using this object's feerate.\n      *\n      * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n-     * result rounded down (even for negative feerates).\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n      *\n      * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n      * is guaranteed to be the case when 0 <= at_size <= this->size.\n      */\n+    template<bool RoundDown>",
      "path": "src/util/feefrac.h",
      "position": 92,
      "original_position": 67,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Question: why did you make this a templated function instead of adding a bool parameter? Is it a compile-time optimization?",
      "created_at": "2024-08-08T13:45:31Z",
      "updated_at": "2024-08-08T13:46:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1709543030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709543030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709562802",
      "pull_request_review_id": 2227961407,
      "id": 1709562802,
      "node_id": "PRRC_kwDOABII585l5duy",
      "diff_hunk": "@@ -186,23 +190,35 @@ struct FeeFrac\n     /** Compute the fee for a given size `at_size` using this object's feerate.\n      *\n      * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n-     * result rounded down (even for negative feerates).\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n      *\n      * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n      * is guaranteed to be the case when 0 <= at_size <= this->size.\n      */\n+    template<bool RoundDown>",
      "path": "src/util/feefrac.h",
      "position": 92,
      "original_position": 67,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "in_reply_to_id": 1709543030,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, exactly. I think we want this function to be fast (and the rounding mode is always known at compile time anyway), while the `Div` functions are only needed in exceptional cases (negative fees, or >20 BTC fees) anyway.",
      "created_at": "2024-08-08T13:53:52Z",
      "updated_at": "2024-08-08T13:53:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1709562802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709562802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709566877",
      "pull_request_review_id": 2227967036,
      "id": 1709566877,
      "node_id": "PRRC_kwDOABII585l5eud",
      "diff_hunk": "@@ -186,23 +190,35 @@ struct FeeFrac\n     /** Compute the fee for a given size `at_size` using this object's feerate.\n      *\n      * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n-     * result rounded down (even for negative feerates).\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n      *\n      * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n      * is guaranteed to be the case when 0 <= at_size <= this->size.\n      */\n+    template<bool RoundDown>",
      "path": "src/util/feefrac.h",
      "position": 92,
      "original_position": 67,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "in_reply_to_id": 1709543030,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Makes sense!",
      "created_at": "2024-08-08T13:55:30Z",
      "updated_at": "2024-08-08T13:55:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1709566877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709566877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709591119",
      "pull_request_review_id": 2228000011,
      "id": 1709591119,
      "node_id": "PRRC_kwDOABII585l5kpP",
      "diff_hunk": "@@ -210,13 +211,8 @@ class base_uint\n     friend inline base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n     friend inline base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n     friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n-    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n-    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n-    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n-    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n-    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n+    friend inline std::strong_ordering operator<=>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <=> 0; }\n     friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }\n-    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }",
      "path": "src/arith_uint256.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "c8b7cc23006fc3404c14e5c7052c4c09b31bc537",
      "in_reply_to_id": 1709495436,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think so: https://godbolt.org/z/vYr4Tsbde\r\n\r\nThe implicitly-defined `operator!=` falls back to using `operator==`. Only the implicitly defined `operator<`, `operator>`, `operator<=`, `operator>=` fall back to using `operator<=>`.",
      "created_at": "2024-08-08T14:07:05Z",
      "updated_at": "2024-08-08T14:07:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1709591119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709591119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 221,
      "original_line": 221,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709821764",
      "pull_request_review_id": 2228294278,
      "id": 1709821764,
      "node_id": "PRRC_kwDOABII585l6c9E",
      "diff_hunk": "@@ -144,6 +186,39 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {",
      "path": "src/util/feefrac.h",
      "position": 97,
      "original_position": 96,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Was curious how much difference using `[[likely]]` may/may-not have, as I've seen mixed discussions around it's usage. For a single call to `EvaluateDown` (from the profile_estimate pass):\r\n\r\n![combined](https://github.com/user-attachments/assets/83eb899c-e4b2-4bff-a402-f4a45109a3f2)\r\n",
      "created_at": "2024-08-08T15:55:42Z",
      "updated_at": "2024-08-08T15:55:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1709821764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709821764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 205,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710012397",
      "pull_request_review_id": 2228520967,
      "id": 1710012397,
      "node_id": "PRRC_kwDOABII585l7Lft",
      "diff_hunk": "@@ -144,6 +186,39 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {",
      "path": "src/util/feefrac.h",
      "position": 97,
      "original_position": 96,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "in_reply_to_id": 1709821764,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was also wondering, checked the actual execution for both paths (with & without `[[likely]]`), and if the benchmarks are accurate, AppleClang 15 doesn't seem to make any change in this case (yet?).\r\n\r\n<details><summary>FeeFracEvaluate bench</summary>\r\n\r\n> cmake --build build && ./build/src/bench/bench_bitcoin -filter='FeeFracEvaluate.*' --min-time=10000\r\n\r\n// tried a few different ways of testing it, none of them showed any difference\r\n\r\n```C++\r\n#include <bench/bench.h>\r\n#include <util/feefrac.h>\r\n#include <random.h>\r\n#include <vector>\r\n\r\nstatic void FeeFracEvaluate_likely(benchmark::Bench& bench)\r\n{\r\n    FastRandomContext rng(true);\r\n\r\n    constexpr size_t NUM_SAMPLES = 1'000'000;\r\n    std::vector<int64_t> fees(NUM_SAMPLES);\r\n    std::vector<int32_t> sizes(NUM_SAMPLES);\r\n    std::vector<int32_t> at_sizes(NUM_SAMPLES);\r\n\r\n    for (size_t i = 0; i < NUM_SAMPLES; ++i) {\r\n        fees[i] = rng.randrange(0x200000000);\r\n        sizes[i] = 1 + rng.randrange(INT32_MAX - 1);\r\n        at_sizes[i] = rng.randrange(INT32_MAX);\r\n    }\r\n\r\n    bench.run([&] {\r\n        for (size_t i = 0; i < NUM_SAMPLES; ++i) {\r\n            FeeFrac ff{fees[i], sizes[i]};\r\n            auto fee = i % 2 ? ff.EvaluateDown(at_sizes[i]) : ff.EvaluateUp(at_sizes[i]);\r\n            ankerl::nanobench::doNotOptimizeAway(fee);\r\n        }\r\n    });\r\n}\r\n\r\nstatic void FeeFracEvaluate_unlikely(benchmark::Bench& bench)\r\n{\r\n    FastRandomContext rng(true);\r\n\r\n    constexpr size_t NUM_SAMPLES = 1'000'000;\r\n    std::vector<int64_t> fees(NUM_SAMPLES);\r\n    std::vector<int32_t> sizes(NUM_SAMPLES);\r\n    std::vector<int32_t> at_sizes(NUM_SAMPLES);\r\n\r\n    for (size_t i = 0; i < NUM_SAMPLES; ++i) {\r\n        fees[i] = 0x200000000 + rng.randrange(0x200000000);\r\n        sizes[i] = 1 + rng.randrange(INT32_MAX - 1);\r\n        at_sizes[i] = rng.randrange(INT32_MAX);\r\n    }\r\n\r\n    bench.run([&] {\r\n        for (size_t i = 0; i < NUM_SAMPLES; ++i) {\r\n            FeeFrac ff{fees[i], sizes[i]};\r\n            auto fee = i % 2 ? ff.EvaluateDown(at_sizes[i]) : ff.EvaluateUp(at_sizes[i]);\r\n            ankerl::nanobench::doNotOptimizeAway(fee);\r\n        }\r\n    });\r\n}\r\n\r\nBENCHMARK(FeeFracEvaluate_likely, benchmark::PriorityLevel::HIGH);\r\nBENCHMARK(FeeFracEvaluate_unlikely, benchmark::PriorityLevel::HIGH);\r\n```\r\n</details> \r\n\r\n------\r\n\r\n> with [[likely]] (2x):\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        1,133,642.20 |              882.11 |    0.1% |     11.01 | `FeeFracEvaluate_likely`\r\n|        6,809,775.64 |              146.85 |    0.1% |     10.62 | `FeeFracEvaluate_unlikely`\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        1,132,721.68 |              882.83 |    0.0% |     11.00 | `FeeFracEvaluate_likely`\r\n|        6,811,900.44 |              146.80 |    0.1% |     10.62 | `FeeFracEvaluate_unlikely`\r\n\r\n\r\n> without any attributes (2x):\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        1,133,687.15 |              882.08 |    0.1% |     11.00 | `FeeFracEvaluate_likely`\r\n|        6,807,422.74 |              146.90 |    0.0% |     10.62 | `FeeFracEvaluate_unlikely`\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        1,133,233.44 |              882.43 |    0.1% |     11.04 | `FeeFracEvaluate_likely`\r\n|        6,809,800.59 |              146.85 |    0.1% |     10.63 | `FeeFracEvaluate_unlikely`\r\n\r\n",
      "created_at": "2024-08-08T17:53:06Z",
      "updated_at": "2024-08-08T18:34:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1710012397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710012397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 205,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710070948",
      "pull_request_review_id": 2228520967,
      "id": 1710070948,
      "node_id": "PRRC_kwDOABII585l7Zyk",
      "diff_hunk": "@@ -210,13 +211,8 @@ class base_uint\n     friend inline base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n     friend inline base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n     friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n-    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n-    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n-    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n-    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n-    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n+    friend inline std::strong_ordering operator<=>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <=> 0; }\n     friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }\n-    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }",
      "path": "src/arith_uint256.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "c8b7cc23006fc3404c14e5c7052c4c09b31bc537",
      "in_reply_to_id": 1709495436,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Checked the same with a simple logging to make sure the reproducer is representative:\r\n```diff\r\ndiff --git a/src/arith_uint256.h b/src/arith_uint256.h\r\nindex d91689c3b3..0198edbbbe 100644\r\n--- a/src/arith_uint256.h\r\n+++ b/src/arith_uint256.h\r\n@@ -12,6 +12,7 @@\r\n #include <limits>\r\n #include <stdexcept>\r\n #include <string>\r\n+#include <iostream>\r\n \r\n class uint256;\r\n \r\n@@ -212,7 +213,10 @@ public:\r\n     friend inline base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\r\n     friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\r\n     friend inline std::strong_ordering operator<=>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <=> 0; }\r\n-    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }\r\n+    friend inline bool operator==(const base_uint& a, uint64_t b) {\r\n+        std::cout << \"base_uint::operator==(const base_uint& a, uint64_t b)\" << std::endl;\r\n+        return a.EqualTo(b);\r\n+    }\r\n \r\n     std::string GetHex() const;\r\n     std::string ToString() const;\r\ndiff --git a/src/test/feefrac_tests.cpp b/src/test/feefrac_tests.cpp\r\nindex 3bbc7450ea..255e96af01 100644\r\n--- a/src/test/feefrac_tests.cpp\r\n+++ b/src/test/feefrac_tests.cpp\r\n@@ -6,9 +6,19 @@\r\n #include <random.h>\r\n \r\n #include <boost/test/unit_test.hpp>\r\n+#include \"arith_uint256.h\"\r\n+#include <iostream>\r\n \r\n BOOST_AUTO_TEST_SUITE(feefrac_tests)\r\n \r\n+BOOST_AUTO_TEST_CASE(feefrac_operators_ne)\r\n+{\r\n+    auto x = arith_uint256{};\r\n+    std::cout << x.ToString() << std::endl;\r\n+    std::cout << (x == uint64_t(123)) << std::endl;\r\n+    std::cout << (x != uint64_t(123)) << std::endl;\r\n+}\r\n+\r\n BOOST_AUTO_TEST_CASE(feefrac_operators)\r\n {\r\n     FeeFrac p1{1000, 100}, p2{500, 300};\r\n```\r\n\r\n>  % make -j10 && src/test/test_bitcoin --run_test=feefrac_tests/feefrac_operators_ne\r\n\r\nwhich prints:\r\n> 0000000000000000000000000000000000000000000000000000000000000000\r\nbase_uint::operator==(const base_uint& a, uint64_t b)\r\n0\r\nbase_uint::operator==(const base_uint& a, uint64_t b)\r\n1\r\n",
      "created_at": "2024-08-08T18:32:57Z",
      "updated_at": "2024-08-08T18:34:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1710070948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710070948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 221,
      "original_line": 221,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720284745",
      "pull_request_review_id": 2243447673,
      "id": 1720284745,
      "node_id": "PRRC_kwDOABII585miXZJ",
      "diff_hunk": "@@ -144,6 +186,39 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {",
      "path": "src/util/feefrac.h",
      "position": 97,
      "original_position": 96,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "in_reply_to_id": 1709821764,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looking at the actual code generated by GCC 14.2 (https://godbolt.org/z/8oTfPKE4q), I get the following diff from adding `[[likely]]`:\r\n\r\n```diff\r\n@@ -1,6 +1,13 @@\r\n         mov     rax, rdi\r\n         shr     rax, 33\r\n-        je      .L8\r\n+        jne     .L2\r\n+        movsx   rax, edx\r\n+        mov     esi, esi\r\n+        xor     edx, edx\r\n+        imul    rax, rdi\r\n+        div     rsi\r\n+        ret\r\n+.L2:\r\n         movsx   r10, edx\r\n         sub     rsp, 24\r\n         mov     rax, r10\r\n@@ -24,10 +31,3 @@\r\n         adc     rax, -1\r\n         add     rsp, 24\r\n         ret\r\n-.L8:\r\n-        movsx   rax, edx\r\n-        mov     esi, esi\r\n-        xor     edx, edx\r\n-        imul    rax, rdi\r\n-        div     rsi\r\n-        ret\r\n```\r\n\r\nwhich is exactly what I'd expect. The default branch prediction (before observations are available) is to assume that a conditional jump backwards will happen, while a conditional jump forward will not happen, so we want the likely branch to be emitted first; adding the `[[likely]]` does indeed result in that.\r\n\r\nIt may be hard to observe this effect in a micro-benchmark as we expect that after a few iterations the CPU branch predictor will guess 100% correctly anyway.\r\n\r\nI think that's sufficient reason to keep the `[[likely]]` here because (1) it is semantically correct (it is the only branch relevant in production code) (2) it documents this fact to human readers (3) it does not measurably worsen the code and (4) it appears to make at least some compilers produce marginally better code, but if people feel it should only be used when backed by observably better benchmarks, I'm okay with dropping it.",
      "created_at": "2024-08-16T19:46:59Z",
      "updated_at": "2024-08-16T19:46:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1720284745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720284745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 205,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720294520",
      "pull_request_review_id": 2243462324,
      "id": 1720294520,
      "node_id": "PRRC_kwDOABII585miZx4",
      "diff_hunk": "@@ -144,6 +186,39 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded towards negative infinity (if RoundDown) or towards positive infinity\n+     * (if !RoundDown).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    template<bool RoundDown>\n+    int64_t Evaluate(int32_t at_size) const noexcept\n+    {\n+        Assume(size > 0);\n+        Assume(at_size >= 0);\n+        if (fee >= 0 && fee < 0x200000000) [[likely]] {",
      "path": "src/util/feefrac.h",
      "position": 97,
      "original_position": 96,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "9590cdd1afc78ff73fdccd2d016075bf40b6b0e2",
      "in_reply_to_id": 1709821764,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I personally view it as documentation and would definitely keep it here",
      "created_at": "2024-08-16T19:59:08Z",
      "updated_at": "2024-08-16T19:59:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1720294520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720294520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 205,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720339477",
      "pull_request_review_id": 2243533832,
      "id": 1720339477,
      "node_id": "PRRC_kwDOABII585mikwV",
      "diff_hunk": "@@ -182,6 +182,27 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the\n+     * result rounded down (even for negative feerates).\n+     *\n+     * Requires this->size > 0, at_size >= 0, and that the correct result fits in a int64_t. This\n+     * is guaranteed to be the case when 0 <= at_size <= this->size.\n+     */\n+    int64_t Evaluate(int32_t at_size) const noexcept",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 13,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "97f319e68a689b271090298e645eb0bfcd7cbaa4",
      "in_reply_to_id": 1708977569,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done!",
      "created_at": "2024-08-16T20:55:22Z",
      "updated_at": "2024-08-16T20:55:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1720339477",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720339477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943451470",
      "pull_request_review_id": 2596619215,
      "id": 1943451470,
      "node_id": "PRRC_kwDOABII585z1rdO",
      "diff_hunk": "@@ -13,43 +14,34 @@\n \n namespace {\n \n-/** Compute a * b, represented in 4x32 bits, highest limb first. */\n-std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+/** The maximum absolute value of an int64_t, as an arith_uint256 (2^63). */\n+const auto MAX_ABS_INT64 = arith_uint256{1} << 63;\n+\n+/** Construct an arith_uint256 whose value equals abs(x). */\n+arith_uint256 Abs256(int64_t x)\n {\n-    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n-\n-    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n-    auto add_fn = [&](uint64_t v, int pos) {\n-        uint64_t accum{0};\n-        for (int i = 0; i + pos < 4; ++i) {\n-            // Add current value at limb pos in ret.\n-            accum += ret[3 - pos - i];\n-            // Add low or high half of v.\n-            if (i == 0) accum += v & 0xffffffff;\n-            if (i == 1) accum += v >> 32;\n-            // Store lower half of result in limb pos in ret.\n-            ret[3 - pos - i] = accum & 0xffffffff;\n-            // Leave carry in accum.\n-            accum >>= 32;\n-        }\n-        // Make sure no overflow.\n-        assert(accum == 0);\n-    };\n-\n-    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^32).\n-    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n-    add_fn((a >> 32) * (b & 0xffffffff), 1);\n-    add_fn((a & 0xffffffff) * (b >> 32), 1);\n-    add_fn((a >> 32) * (b >> 32), 2);\n-    return ret;\n+    if (x >= 0) {\n+        // For positive numbers, pass through the value.\n+        return arith_uint256{static_cast<uint64_t>(x)};\n+    } else if (x > std::numeric_limits<int64_t>::min()) {\n+        // For negative numbers, negate first.\n+        return arith_uint256{static_cast<uint64_t>(-x)};\n+    } else {\n+        // Special case for x == -2^63 (for which -x results in integer overflow).\n+        return MAX_ABS_INT64;\n+    }\n }\n \n-/* comparison helper for std::array */\n-std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n-    for (size_t i = 0; i < a.size(); ++i) {\n-        if (a[i] != b[i]) return a[i] <=> b[i];\n+/** Construct an arith_uint256 whose value equals abs(x), for 96-bit x. */\n+arith_uint256 Abs256(std::pair<int64_t, uint32_t> x)",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 69,
      "original_position": 63,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "b4a1cee76eea0af1715b1122fc26d107317507a2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now that Fuzz is always compiled, this should likely be move to `feefrac: add helper functions for 96-bit division` (see https://github.com/bitcoin/bitcoin/actions/runs/13162889382/job/36735875466?pr=30535#step:6:2772)",
      "created_at": "2025-02-05T18:19:31Z",
      "updated_at": "2025-02-05T18:20:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1943451470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943451470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943467899",
      "pull_request_review_id": 2596648146,
      "id": 1943467899,
      "node_id": "PRRC_kwDOABII585z1vd7",
      "diff_hunk": "@@ -13,43 +14,34 @@\n \n namespace {\n \n-/** Compute a * b, represented in 4x32 bits, highest limb first. */\n-std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+/** The maximum absolute value of an int64_t, as an arith_uint256 (2^63). */\n+const auto MAX_ABS_INT64 = arith_uint256{1} << 63;\n+\n+/** Construct an arith_uint256 whose value equals abs(x). */\n+arith_uint256 Abs256(int64_t x)\n {\n-    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n-\n-    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n-    auto add_fn = [&](uint64_t v, int pos) {\n-        uint64_t accum{0};\n-        for (int i = 0; i + pos < 4; ++i) {\n-            // Add current value at limb pos in ret.\n-            accum += ret[3 - pos - i];\n-            // Add low or high half of v.\n-            if (i == 0) accum += v & 0xffffffff;\n-            if (i == 1) accum += v >> 32;\n-            // Store lower half of result in limb pos in ret.\n-            ret[3 - pos - i] = accum & 0xffffffff;\n-            // Leave carry in accum.\n-            accum >>= 32;\n-        }\n-        // Make sure no overflow.\n-        assert(accum == 0);\n-    };\n-\n-    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^32).\n-    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n-    add_fn((a >> 32) * (b & 0xffffffff), 1);\n-    add_fn((a & 0xffffffff) * (b >> 32), 1);\n-    add_fn((a >> 32) * (b >> 32), 2);\n-    return ret;\n+    if (x >= 0) {\n+        // For positive numbers, pass through the value.\n+        return arith_uint256{static_cast<uint64_t>(x)};\n+    } else if (x > std::numeric_limits<int64_t>::min()) {\n+        // For negative numbers, negate first.\n+        return arith_uint256{static_cast<uint64_t>(-x)};\n+    } else {\n+        // Special case for x == -2^63 (for which -x results in integer overflow).\n+        return MAX_ABS_INT64;\n+    }\n }\n \n-/* comparison helper for std::array */\n-std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n-    for (size_t i = 0; i < a.size(); ++i) {\n-        if (a[i] != b[i]) return a[i] <=> b[i];\n+/** Construct an arith_uint256 whose value equals abs(x), for 96-bit x. */\n+arith_uint256 Abs256(std::pair<int64_t, uint32_t> x)",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 69,
      "original_position": 63,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "b4a1cee76eea0af1715b1122fc26d107317507a2",
      "in_reply_to_id": 1943451470,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-02-05T18:30:45Z",
      "updated_at": "2025-02-05T18:30:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1943467899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943467899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1946720144",
      "pull_request_review_id": 2602064780,
      "id": 1946720144,
      "node_id": "PRRC_kwDOABII5850CJeQ",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 135,
      "original_position": 129,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "in_reply_to_id": null,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "At first glance this is confusing.  It looks like `quot_abs` is being computed differently depending on if `num_high` is negative or not, although it's not apparent why right away.  Maybe I will take these fuzz tests for a spin and look at some example values.  As a side note, it's interesting that fuzz tests are used to test for program correctness where I thought the main objective for fuzz tests was to find crashes and panics. ",
      "created_at": "2025-02-07T15:32:55Z",
      "updated_at": "2025-02-07T15:32:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1946720144",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1946720144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947042506",
      "pull_request_review_id": 2602600039,
      "id": 1947042506,
      "node_id": "PRRC_kwDOABII5850DYLK",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 135,
      "original_position": 129,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "in_reply_to_id": 1946720144,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Modern C++ integer division always [truncates toward zero](https://en.cppreference.com/w/c/language/operator_arithmetic#Division). For positive numbers, that’s equivalent to rounding down, but for negatives it rounds up.\r\nSince we need controlled rounding (toward negative infinity when `round_down` is true, or toward positive infinity otherwise), we need to take the sign of the numerator into account to adjust the result when necessary\r\n\r\nFor example, in [feefrac_tests.cpp](https://github.com/bitcoin/bitcoin/blob/f6aa28cf8fad6a3240498b500524bb380855b18e/src/test/feefrac_tests.cpp#L14-L56), tests like the following verify the rounding behavior:\r\n> For a positive fee (`p1` initialized as {1000, 100}):\r\n```C++\r\nBOOST_CHECK_EQUAL(p1.EvaluateFeeDown(1), 10);\r\nBOOST_CHECK_EQUAL(p1.EvaluateFeeUp(1), 10);\r\n```\r\n\r\n> For a negative fee (`neg` initialized as {-1001, 100}):\r\n```C++\r\nBOOST_CHECK_EQUAL(neg.EvaluateFeeDown(1), -11);\r\nBOOST_CHECK_EQUAL(neg.EvaluateFeeUp(1), -10);\r\n```\r\n\r\nWhich would result for the same absolute values in:\r\n```C++\r\nBOOST_AUTO_TEST_CASE(feefrac_operators)\r\n{\r\n    FeeFrac p1{1001, 100};\r\n\r\n    BOOST_CHECK_EQUAL(p1.EvaluateFeeDown(1), 10);\r\n    BOOST_CHECK_EQUAL(p1.EvaluateFeeUp(1), 11);\r\n\r\n    FeeFrac neg{-1001, 100};\r\n    BOOST_CHECK_EQUAL(neg.EvaluateFeeDown(1), -11);\r\n    BOOST_CHECK_EQUAL(neg.EvaluateFeeUp(1), -10);\r\n}\r\n```",
      "created_at": "2025-02-07T19:09:36Z",
      "updated_at": "2025-02-07T19:09:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1947042506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947042506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947049915",
      "pull_request_review_id": 2602609661,
      "id": 1947049915,
      "node_id": "PRRC_kwDOABII5850DZ-7",
      "diff_hunk": "@@ -17,6 +17,44 @@ BOOST_AUTO_TEST_CASE(feefrac_operators)\n     FeeFrac empty{0, 0};\n     [[maybe_unused]] FeeFrac zero_fee{0, 1}; // zero-fee allowed",
      "path": "src/test/feefrac_tests.cpp",
      "position": null,
      "original_position": 2,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: This is [always used now](https://github.com/bitcoin/bitcoin/commit/0606e66fdbb914f984433d8950f0c32b5fb871f3#diff-eca436ae09a12f8a59ac888c7f4ee6f36e4d12f38c2dab47fee0377ce69fe660R18), right?",
      "created_at": "2025-02-07T19:12:44Z",
      "updated_at": "2025-02-07T19:13:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1947049915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947049915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947178260",
      "pull_request_review_id": 2602818704,
      "id": 1947178260,
      "node_id": "PRRC_kwDOABII5850D5UU",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 135,
      "original_position": 129,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "in_reply_to_id": 1946720144,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right. The variables this code operates on are `arith_uint256`, which represent integers in range $[0, 2^{256}-1]$, and whose division operator rounds down (whether that means towards $-\\infty$ or towards 0 does not matter, since only non-negative numbers can be represented anyway).\r\n\r\nHowever, these values reason about the *absolute value* of what `Div` is expected to do. If we want to round down (towards $-\\infty$), but the value being divided is negative, that means the absolute value of the result is rounded up (e.g. -5/3 = -1.6, if we want to round down would be -2, whose absolute value is 2, which is the rounded-*up* value of 5/3).",
      "created_at": "2025-02-07T20:53:16Z",
      "updated_at": "2025-02-07T20:53:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1947178260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947178260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947184910",
      "pull_request_review_id": 2602829053,
      "id": 1947184910,
      "node_id": "PRRC_kwDOABII5850D68O",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 135,
      "original_position": 129,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "in_reply_to_id": 1946720144,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> As a side note, it's interesting that fuzz tests are used to test for program correctness where I thought the main objective for fuzz tests was to find crashes and panics.\r\n\r\nThey're an amazing tool for this purpose. Any time you write a well-contained, well-specified piece of code, you can essentially write a less efficient simulator for its behavior, and compare the two in a fuzz test. We have many such examples in the codebase.",
      "created_at": "2025-02-07T20:58:34Z",
      "updated_at": "2025-02-07T20:58:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1947184910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947184910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947389283",
      "pull_request_review_id": 2603169086,
      "id": 1947389283,
      "node_id": "PRRC_kwDOABII5850Es1j",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 135,
      "original_position": 129,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "in_reply_to_id": 1946720144,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> They're an amazing tool for this purpose. Any time you write a well-contained, well-specified piece of code, you can essentially write a less efficient simulator for its behavior, and compare the two in a fuzz test. We have many such examples in the codebase.\r\n\r\nHowever property tests, which like fuzz tests generate random input, although the inputs are truly random, which may be desirable for testing program correctness.  From what I understand about fuzz tests, the random inputs are generated in such a way that new code paths are discovered with the goal of producing an overflow or crash.",
      "created_at": "2025-02-08T01:09:55Z",
      "updated_at": "2025-02-08T01:09:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1947389283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1947389283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949710626",
      "pull_request_review_id": 2606875236,
      "id": 1949710626,
      "node_id": "PRRC_kwDOABII5850Njki",
      "diff_hunk": "@@ -17,6 +17,44 @@ BOOST_AUTO_TEST_CASE(feefrac_operators)\n     FeeFrac empty{0, 0};\n     [[maybe_unused]] FeeFrac zero_fee{0, 1}; // zero-fee allowed",
      "path": "src/test/feefrac_tests.cpp",
      "position": null,
      "original_position": 2,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "in_reply_to_id": 1947049915,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Gone.",
      "created_at": "2025-02-10T18:58:35Z",
      "updated_at": "2025-02-10T18:58:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949710626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949710626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949719629",
      "pull_request_review_id": 2606890259,
      "id": 1949719629,
      "node_id": "PRRC_kwDOABII5850NlxN",
      "diff_hunk": "@@ -121,3 +104,89 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 135,
      "original_position": 129,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "f6aa28cf8fad6a3240498b500524bb380855b18e",
      "in_reply_to_id": 1946720144,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fuzzing is still random, it's just biased towards increasing coverage. It's not specifically intended to trigger bugs, it just aims to maximize coverage (code coverage, branch coverage, and \"values being compared\" coverage). And typically, this is exactly what you want in correctness tests too, as it may result in far more edge/special cases being exercised than uniformly random inputs may trigger.\r\n\r\nAlso note that coverage include the test harness itself, so if you add branches/cases to the test code, those too will be biased towards. In a way, this removes (or at least reduces, in typical cases) the need for the test designer to reason about what probability distributions of inputs are likely to trigger bugs.",
      "created_at": "2025-02-10T19:05:19Z",
      "updated_at": "2025-02-10T19:06:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949719629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949719629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949745452",
      "pull_request_review_id": 2606931315,
      "id": 1949745452,
      "node_id": "PRRC_kwDOABII5850NsEs",
      "diff_hunk": "@@ -121,3 +106,128 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = round_down ? std::floorl(num_high * 4294967296.0L + num_low) / den\n+                                    : std::ceill(num_high * 4294967296.0L + num_low) / den;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 150,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "e9f22e28e96ce0bb1d540592dbdb1395757e317f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to me that `std::floor` and `std::ceil` already have overloads for `long double`, which we could use instead to appease the CI gods:\r\n\r\n> feefrac.cpp:144:44: error: ‘floorl’ is not a member of ‘std’; did you mean ‘floor’?",
      "created_at": "2025-02-10T19:21:41Z",
      "updated_at": "2025-02-10T19:38:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949745452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949745452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 144,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949777887",
      "pull_request_review_id": 2606987771,
      "id": 1949777887,
      "node_id": "PRRC_kwDOABII5850Nz_f",
      "diff_hunk": "@@ -121,3 +106,128 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = round_down ? std::floor(num_high * 4294967296.0L + num_low) / den\n+                                    : std::ceil(num_high * 4294967296.0L + num_low) / den;\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 151,
      "original_position": 151,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was wondering if we could measure [ULP tolerance](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition) here instead to better control the step sizes - or if that would be too much effort in this context.",
      "created_at": "2025-02-10T19:43:23Z",
      "updated_at": "2025-02-10T19:47:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949777887",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949777887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949791787",
      "pull_request_review_id": 2607010115,
      "id": 1949791787,
      "node_id": "PRRC_kwDOABII5850N3Yr",
      "diff_hunk": "@@ -121,3 +106,128 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = round_down ? std::floor(num_high * 4294967296.0L + num_low) / den\n+                                    : std::ceil(num_high * 4294967296.0L + num_low) / den;\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 151,
      "original_position": 151,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "in_reply_to_id": 1949777887,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Honestly, I think the code I included here already is more complicated than what I think was worth writing. But it's just test code, and it's already written, and it works.\r\n\r\nIts added value is adding confidence for anyone looking at the test who has difficulty following, the exact `arith_uint256`-based test code, or otherwise doubts its correctness. The exact precision used here won't make much difference I think - it should just be enough so someone can a single glance say \"ok, if this test doesn't fail, at least the result won't be wildly off from what i expect it to do\".",
      "created_at": "2025-02-10T19:54:46Z",
      "updated_at": "2025-02-10T19:54:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949791787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949791787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949807125",
      "pull_request_review_id": 2607036111,
      "id": 1949807125,
      "node_id": "PRRC_kwDOABII5850N7IV",
      "diff_hunk": "@@ -121,3 +106,128 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = round_down ? std::floorl(num_high * 4294967296.0L + num_low) / den\n+                                    : std::ceill(num_high * 4294967296.0L + num_low) / den;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 150,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "e9f22e28e96ce0bb1d540592dbdb1395757e317f",
      "in_reply_to_id": 1949745452,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-02-10T20:06:20Z",
      "updated_at": "2025-02-10T20:06:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949807125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949807125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": 144,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949815030",
      "pull_request_review_id": 2607049118,
      "id": 1949815030,
      "node_id": "PRRC_kwDOABII5850N9D2",
      "diff_hunk": "@@ -121,3 +106,128 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = round_down ? std::floor(num_high * 4294967296.0L + num_low) / den\n+                                    : std::ceil(num_high * 4294967296.0L + num_low) / den;\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 151,
      "original_position": 151,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "in_reply_to_id": 1949777887,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think there's also some value in knowing we're not diverging wildly from what already exists if we're planning on swapping functionality later. Agreed on the rest.",
      "created_at": "2025-02-10T20:12:28Z",
      "updated_at": "2025-02-10T20:12:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949815030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949815030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949816655",
      "pull_request_review_id": 2607051911,
      "id": 1949816655,
      "node_id": "PRRC_kwDOABII5850N9dP",
      "diff_hunk": "@@ -121,3 +106,128 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = round_down ? std::floor(num_high * 4294967296.0L + num_low) / den\n+                                    : std::ceil(num_high * 4294967296.0L + num_low) / den;\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 151,
      "original_position": 151,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "in_reply_to_id": 1949777887,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@instagibbs Note that this is about a separate addition I made, which compares the behaviour with a pure floating-point simulation. The comparison with `CFeeRate` is elsewhere.",
      "created_at": "2025-02-10T20:14:03Z",
      "updated_at": "2025-02-10T20:14:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949816655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949816655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949817770",
      "pull_request_review_id": 2607053746,
      "id": 1949817770,
      "node_id": "PRRC_kwDOABII5850N9uq",
      "diff_hunk": "@@ -121,3 +106,128 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, a positive 31-bit value den, and rounding mode.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+    auto round_down = provider.ConsumeBool();\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative and we are\n+    // rounding down, or positive and we are rounding up, the absolute value of the quotient is\n+    // the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = (is_negative == round_down) ?\n+        (num_abs + den_abs - 1) / den_abs :\n+        num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den, round_down);\n+    assert(res == 0 || (res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = round_down ? std::floor(num_high * 4294967296.0L + num_low) / den\n+                                    : std::ceil(num_high * 4294967296.0L + num_low) / den;\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 151,
      "original_position": 151,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "in_reply_to_id": 1949777887,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oh right, I conflated the two threads here",
      "created_at": "2025-02-10T20:15:04Z",
      "updated_at": "2025-02-10T20:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r1949817770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949817770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031294810",
      "pull_request_review_id": 2746912075,
      "id": 2031294810,
      "node_id": "PRRC_kwDOABII5855Exla",
      "diff_hunk": "@@ -32,6 +33,18 @@ arith_uint256 Abs256(int64_t x)\n     }\n }\n ",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 63,
      "original_position": 11,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "c71afe6a041e557b403159d0a974965a06b6fc43",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"feefrac: add helper functions for 96-bit division\" c71afe6a041e557b403159d0a974965a06b6fc43\r\n\r\ntypo in commit message \r\n\r\n> (given a\r\nFeeFrac{fee, size}, its fee at at_size is (fee * at_size / at_size).\r\n\r\nshould be \r\n\r\n> (given a\r\nFeeFrac{fee, size}, its fee at at_size is (fee * at_size / size).\r\n",
      "created_at": "2025-04-07T13:51:25Z",
      "updated_at": "2025-04-07T14:39:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031294810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031294810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031298208",
      "pull_request_review_id": 2746912075,
      "id": 2031298208,
      "node_id": "PRRC_kwDOABII5855Eyag",
      "diff_hunk": "@@ -92,3 +105,98 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, and positive 31-bit value den.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative, the absolute\n+    // value of the quotient is the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = is_negative ? (num_abs + den_abs - 1) / den_abs : num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den);\n+    assert((res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = std::floorl(num_high * 4294967296.0L + num_low) / den;\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.\n+    if (expect == 0.0L) {\n+        assert(res >= -1 && res <= 1);\n+    } else if (expect > 0.0L) {\n+        assert(res >= expect * 0.999999999999999L - 1.0L);\n+        assert(res <= expect * 1.000000000000001L + 1.0L);\n+    } else {\n+        assert(res >= expect * 1.000000000000001L - 1.0L);\n+        assert(res <= expect * 0.999999999999999L + 1.0L);\n+    }\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, and a positive 31-bit\n+    // divisor.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative, the absolute\n+    // value of the quotient is the rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = is_negative ? (prod_abs + div_abs - 1) / div_abs : prod_abs / div_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        // If 0 <= mul32 <= div, then the result is guaranteed to be representable.\n+        assert(mul32 < 0 || mul32 > div);\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::Mul + FeeFrac::Div.\n+    auto res = FeeFrac::Div(FeeFrac::Mul(mul64, mul32), div);\n+    assert((res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Verify the behavior of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    auto res_fallback = FeeFrac::DivFallback(FeeFrac::MulFallback(mul64, mul32), div);\n+    assert(res == res_fallback);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = std::floorl(static_cast<long double>(mul32) * mul64 / div);\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.\n+    if (expect == 0.0L) {\n+        assert(res >= -1 && res <= 1);\n+    } else if (expect > 0.0L) {\n+        assert(res >= expect * 0.999999999999999L - 1.0L);\n+        assert(res <= expect * 1.000000000000001L + 1.0L);\n+    } else {\n+        assert(res >= expect * 1.000000000000001L - 1.0L);\n+        assert(res <= expect * 0.999999999999999L + 1.0L);\n+    }",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 218,
      "original_position": 124,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "c71afe6a041e557b403159d0a974965a06b6fc43",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in \"feefrac: add helper functions for 96-bit division\" c71afe6a041e557b403159d0a974965a06b6fc43\r\ncan be a util function since exact same thing is repeated twice.",
      "created_at": "2025-04-07T13:53:01Z",
      "updated_at": "2025-04-07T14:39:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031298208",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031298208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 205,
      "original_start_line": 193,
      "start_side": "RIGHT",
      "line": 213,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031315797",
      "pull_request_review_id": 2746912075,
      "id": 2031315797,
      "node_id": "PRRC_kwDOABII5855E2tV",
      "diff_hunk": "@@ -85,13 +88,14 @@ struct FeeFrac\n      *  version relying on __int128.\n      *\n      * The result must fit in an int64_t, and d must be strictly positive. */\n-    static inline int64_t Div(__int128 n, int32_t d) noexcept\n+    static inline int64_t Div(__int128 n, int32_t d, bool round_down) noexcept",
      "path": "src/util/feefrac.h",
      "position": 63,
      "original_position": 43,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "486e816bd7d68f4411b35330907ce42812c5c71b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"feefrac: support both rounding up and down for Evaluate\"  486e816bd7d68f4411b35330907ce42812c5c71b\r\n\r\n`Div` method description needs to be updated we round toward positive infinity when round down is false.",
      "created_at": "2025-04-07T13:59:40Z",
      "updated_at": "2025-04-07T14:39:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031315797",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031315797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031387746",
      "pull_request_review_id": 2746912075,
      "id": 2031387746,
      "node_id": "PRRC_kwDOABII5855FIRi",
      "diff_hunk": "@@ -217,5 +218,16 @@ FUZZ_TARGET(feefrac_mul_div)\n             FeeFrac{mul64, div}.EvaluateFeeDown(mul32) :\n             FeeFrac{mul64, div}.EvaluateFeeUp(mul32);\n         assert(res == res_fee);\n+\n+        // Compare approximately with CFeeRate.\n+        if (mul64 <= std::numeric_limits<int64_t>::max() / 1000 &&\n+            mul64 >= std::numeric_limits<int64_t>::min() / 1000 &&\n+            quot_abs <= arith_uint256{std::numeric_limits<int64_t>::max() / 1000}) {\n+            CFeeRate feerate(mul64, (uint32_t)div);\n+            CAmount feerate_fee{feerate.GetFee(mul32)};\n+            auto allowed_gap = static_cast<int64_t>(mul32 / 1000 + 3 + round_down);",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 233,
      "original_position": 19,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"fuzz: assert min diff between FeeFrac and CFeeRate\"  cf00540f54302e37f8af08f15fce16cbcab0f8c9 \r\n\r\nI could not comprehend the computation. how did you come up with this gap.",
      "created_at": "2025-04-07T14:35:35Z",
      "updated_at": "2025-04-07T14:40:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031387746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031387746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 228,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031427691",
      "pull_request_review_id": 2747135473,
      "id": 2031427691,
      "node_id": "PRRC_kwDOABII5855FSBr",
      "diff_hunk": "@@ -32,6 +33,18 @@ arith_uint256 Abs256(int64_t x)\n     }\n }\n ",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 63,
      "original_position": 11,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "c71afe6a041e557b403159d0a974965a06b6fc43",
      "in_reply_to_id": 2031294810,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-04-07T14:51:54Z",
      "updated_at": "2025-04-07T14:51:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031427691",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031427691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031428162",
      "pull_request_review_id": 2747136210,
      "id": 2031428162,
      "node_id": "PRRC_kwDOABII5855FSJC",
      "diff_hunk": "@@ -92,3 +105,98 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, and positive 31-bit value den.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative, the absolute\n+    // value of the quotient is the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = is_negative ? (num_abs + den_abs - 1) / den_abs : num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::DivFallback.\n+    auto res = FeeFrac::DivFallback(num, den);\n+    assert((res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = std::floorl(num_high * 4294967296.0L + num_low) / den;\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.\n+    if (expect == 0.0L) {\n+        assert(res >= -1 && res <= 1);\n+    } else if (expect > 0.0L) {\n+        assert(res >= expect * 0.999999999999999L - 1.0L);\n+        assert(res <= expect * 1.000000000000001L + 1.0L);\n+    } else {\n+        assert(res >= expect * 1.000000000000001L - 1.0L);\n+        assert(res <= expect * 0.999999999999999L + 1.0L);\n+    }\n+}\n+\n+FUZZ_TARGET(feefrac_mul_div)\n+{\n+    // Verify the behavior of:\n+    // - The combination of FeeFrac::Mul + FeeFrac::Div.\n+    // - The combination of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    // - FeeFrac::Evaluate.\n+\n+    // Construct a 32-bit signed multiplicand, a 64-bit signed multiplicand, and a positive 31-bit\n+    // divisor.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto mul32 = provider.ConsumeIntegral<int32_t>();\n+    auto mul64 = provider.ConsumeIntegral<int64_t>();\n+    auto div = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+\n+    // Predict the sign of the overall result.\n+    bool is_negative = ((mul32 < 0) && (mul64 > 0)) || ((mul32 > 0) && (mul64 < 0));\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative, the absolute\n+    // value of the quotient is the rounded-up quotient of the absolute values.\n+    auto prod_abs = Abs256(mul32) * Abs256(mul64);\n+    auto div_abs = Abs256(div);\n+    auto quot_abs = is_negative ? (prod_abs + div_abs - 1) / div_abs : prod_abs / div_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        // If 0 <= mul32 <= div, then the result is guaranteed to be representable.\n+        assert(mul32 < 0 || mul32 > div);\n+        return;\n+    }\n+\n+    // Verify the behavior of FeeFrac::Mul + FeeFrac::Div.\n+    auto res = FeeFrac::Div(FeeFrac::Mul(mul64, mul32), div);\n+    assert((res < 0) == is_negative);\n+    assert(Abs256(res) == quot_abs);\n+\n+    // Verify the behavior of FeeFrac::MulFallback + FeeFrac::DivFallback.\n+    auto res_fallback = FeeFrac::DivFallback(FeeFrac::MulFallback(mul64, mul32), div);\n+    assert(res == res_fallback);\n+\n+    // Compare approximately with floating-point.\n+    long double expect = std::floorl(static_cast<long double>(mul32) * mul64 / div);\n+    // Expect to be accurate within 50 bits of precision, +- 1 sat.\n+    if (expect == 0.0L) {\n+        assert(res >= -1 && res <= 1);\n+    } else if (expect > 0.0L) {\n+        assert(res >= expect * 0.999999999999999L - 1.0L);\n+        assert(res <= expect * 1.000000000000001L + 1.0L);\n+    } else {\n+        assert(res >= expect * 1.000000000000001L - 1.0L);\n+        assert(res <= expect * 0.999999999999999L + 1.0L);\n+    }",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 218,
      "original_position": 124,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "c71afe6a041e557b403159d0a974965a06b6fc43",
      "in_reply_to_id": 2031298208,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That seems a bit excessive for just two lines.",
      "created_at": "2025-04-07T14:52:07Z",
      "updated_at": "2025-04-07T14:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031428162",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031428162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": 205,
      "original_start_line": 193,
      "start_side": "RIGHT",
      "line": 213,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031428643",
      "pull_request_review_id": 2747136888,
      "id": 2031428643,
      "node_id": "PRRC_kwDOABII5855FSQj",
      "diff_hunk": "@@ -92,3 +105,98 @@ FUZZ_TARGET(feefrac)\n     assert((fr1 == fr2) == std::is_eq(cmp_total));\n     assert((fr1 != fr2) == std::is_neq(cmp_total));\n }\n+\n+FUZZ_TARGET(feefrac_div_fallback)\n+{\n+    // Verify the behavior of FeeFrac::DivFallback over all possible inputs.\n+\n+    // Construct a 96-bit signed value num, and positive 31-bit value den.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto num_high = provider.ConsumeIntegral<int64_t>();\n+    auto num_low = provider.ConsumeIntegral<uint32_t>();\n+    std::pair<int64_t, uint32_t> num{num_high, num_low};\n+    auto den = provider.ConsumeIntegralInRange<int32_t>(1, std::numeric_limits<int32_t>::max());\n+\n+    // Predict the sign of the actual result.\n+    bool is_negative = num_high < 0;\n+    // Evaluate absolute value using arith_uint256. If the actual result is negative, the absolute\n+    // value of the quotient is the rounded-up quotient of the absolute values.\n+    auto num_abs = Abs256(num);\n+    auto den_abs = Abs256(den);\n+    auto quot_abs = is_negative ? (num_abs + den_abs - 1) / den_abs : num_abs / den_abs;\n+\n+    // If the result is not representable by an int64_t, bail out.\n+    if ((is_negative && quot_abs > MAX_ABS_INT64) || (!is_negative && quot_abs >= MAX_ABS_INT64)) {\n+        return;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 140,
      "original_position": 53,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "c71afe6a041e557b403159d0a974965a06b6fc43",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you suggest code?",
      "created_at": "2025-04-07T14:52:19Z",
      "updated_at": "2025-04-07T14:52:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031428643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031428643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031429023",
      "pull_request_review_id": 2747137477,
      "id": 2031429023,
      "node_id": "PRRC_kwDOABII5855FSWf",
      "diff_hunk": "@@ -85,13 +88,14 @@ struct FeeFrac\n      *  version relying on __int128.\n      *\n      * The result must fit in an int64_t, and d must be strictly positive. */\n-    static inline int64_t Div(__int128 n, int32_t d) noexcept\n+    static inline int64_t Div(__int128 n, int32_t d, bool round_down) noexcept",
      "path": "src/util/feefrac.h",
      "position": 63,
      "original_position": 43,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "486e816bd7d68f4411b35330907ce42812c5c71b",
      "in_reply_to_id": 2031315797,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-04-07T14:52:31Z",
      "updated_at": "2025-04-07T14:52:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031429023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031429023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031431081",
      "pull_request_review_id": 2747141172,
      "id": 2031431081,
      "node_id": "PRRC_kwDOABII5855FS2p",
      "diff_hunk": "@@ -217,5 +218,16 @@ FUZZ_TARGET(feefrac_mul_div)\n             FeeFrac{mul64, div}.EvaluateFeeDown(mul32) :\n             FeeFrac{mul64, div}.EvaluateFeeUp(mul32);\n         assert(res == res_fee);\n+\n+        // Compare approximately with CFeeRate.\n+        if (mul64 <= std::numeric_limits<int64_t>::max() / 1000 &&\n+            mul64 >= std::numeric_limits<int64_t>::min() / 1000 &&\n+            quot_abs <= arith_uint256{std::numeric_limits<int64_t>::max() / 1000}) {\n+            CFeeRate feerate(mul64, (uint32_t)div);\n+            CAmount feerate_fee{feerate.GetFee(mul32)};\n+            auto allowed_gap = static_cast<int64_t>(mul32 / 1000 + 3 + round_down);",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 233,
      "original_position": 19,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "cf00540f54302e37f8af08f15fce16cbcab0f8c9",
      "in_reply_to_id": 2031387746,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I just tried things until the tests pass. As pointed out elsewhere, I don't think the exact accuracy promises are all that relevant - the point is convincing a reviewer (who isn't convinced by the other tests) that the result is never going to be hugely off.",
      "created_at": "2025-04-07T14:53:34Z",
      "updated_at": "2025-04-07T14:53:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031431081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031431081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 228,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031900410",
      "pull_request_review_id": 2747930555,
      "id": 2031900410,
      "node_id": "PRRC_kwDOABII5855HFb6",
      "diff_hunk": "@@ -144,6 +187,39 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the",
      "path": "src/util/feefrac.h",
      "position": 85,
      "original_position": 85,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "in_reply_to_id": null,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Wouldn't it save some confusion if there was a type for `WU` and a type for vbytes?  If for example a `FeeFrac` is created as {sats /vbytes} then one wouldn't want to accidentally pass an argument calculated using a `wu` metric for `at_size` param (possibly).  In that case one would want to div by 4 first to get corresponding vbytes metric, however if there where strong types, then it could be converted automagically.",
      "created_at": "2025-04-07T19:39:55Z",
      "updated_at": "2025-04-07T19:39:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031900410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031900410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031906083",
      "pull_request_review_id": 2747940252,
      "id": 2031906083,
      "node_id": "PRRC_kwDOABII5855HG0j",
      "diff_hunk": "@@ -144,6 +187,39 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the",
      "path": "src/util/feefrac.h",
      "position": 85,
      "original_position": 85,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "in_reply_to_id": 2031900410,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See the `FeePerVSize` and `FeePerWeight` types below, which are `FeeFrac` wrappers that provide some basic type-safety.\r\n\r\nI don't think going as far as having separate types for weights/vsize itself is realistic, given how much they're used in the codebase already (and in any case, this is unrelated to this PR).",
      "created_at": "2025-04-07T19:43:56Z",
      "updated_at": "2025-04-07T19:48:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031906083",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031906083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031938222",
      "pull_request_review_id": 2747995564,
      "id": 2031938222,
      "node_id": "PRRC_kwDOABII5855HOqu",
      "diff_hunk": "@@ -144,6 +187,39 @@ struct FeeFrac\n         std::swap(a.fee, b.fee);\n         std::swap(a.size, b.size);\n     }\n+\n+    /** Compute the fee for a given size `at_size` using this object's feerate.\n+     *\n+     * This effectively corresponds to evaluating (this->fee * at_size) / this->size, with the",
      "path": "src/util/feefrac.h",
      "position": 85,
      "original_position": 85,
      "commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "original_commit_id": "58914ab459c46c518c47c5082aec25ac0d03ab11",
      "in_reply_to_id": 2031900410,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> See the FeePerVSize and FeePerWeight types below, which are FeeFrac wrappers that provide some basic type-safety.\r\n\r\nThanks, I didn't notice the wrappers.  Maybe they would enhance some of the tests if they where incorporated.\r\n\r\n> I don't think going as far as having separate types for weights/vsize itself is realistic, given how much they're used in the codebase already (and in any case, this is unrelated to this PR).\r\n\r\nPersonally I've wished for these types when working in the wallet coin-selection test suit for example.  Although, this discussion can be saved for elsewhere though since it's not strictly on topic.\r\n",
      "created_at": "2025-04-07T20:09:12Z",
      "updated_at": "2025-04-07T20:09:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30535#discussion_r2031938222",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2031938222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30535"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    }
  ]
}