{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533",
    "id": 2242801623,
    "node_id": "PR_kwDOABII586Frm_X",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31533",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31533.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31533.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31533",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31533/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/3d53859074108551d86971a37677c33ec896d86b",
    "number": 31533,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "fuzz: Add fuzz target for block index tree and related validation events",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This adds a fuzz target for the block index and various events in validation that interact with it.\r\n\r\nIt can create arbitrary tree-like structure of block indexes, simulating (so far) the following events:\r\n- Adding a header\r\n- Receiving the full block (may be valid or not)\r\n- `ActivateBestChain()` - Reorging the chain to a new chain tip (possibly encountering invalid blocks on the way)\r\n- Pruning\r\n\r\nIt might be interesting / possible to extend this to more events, such as dealing with more than one chainstate (assumeutxo).\r\n\r\nThe test skips all actual validation of header/ block / transaction data by just simulating the outcome, and also doesn't interact with the data directory.\r\nThe main goal is to ensure the integrity of the block index tree in all fuzzed constellations, by calling `CheckBlockIndex()` at the end of each iteration.\r\n\r\nCompared to #29158 this approach has a more limited scope (by skipping all actual validation), but it is fast - it doesn't do a full init sequence on each iteration, but \"cleans up\" after itself by resetting the global validation state after each iteration.\r\nOne downside of this approach is that it needs to have public access to a few members / functions in `Chainstate(Manager)` / `BlockManager`.\r\n\r\nLooking for conceptual feedback for now, so will leave as draft for a bit - this was helpful while working on #31405 and found the problem described in #31512.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2024-12-18T17:53:26Z",
    "updated_at": "2025-06-17T15:57:46Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "dacf486c1bd22262d5b2987f7e52a33d721287c4",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "mzumsande:202412_fuzz_checkblockindex_pr",
      "ref": "202412_fuzz_checkblockindex_pr",
      "sha": "3d53859074108551d86971a37677c33ec896d86b",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 187673073,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODc2NzMwNzM=",
        "name": "bitcoin",
        "full_name": "mzumsande/bitcoin",
        "owner": {
          "login": "mzumsande",
          "id": 48763452,
          "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
          "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mzumsande",
          "html_url": "https://github.com/mzumsande",
          "followers_url": "https://api.github.com/users/mzumsande/followers",
          "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
          "organizations_url": "https://api.github.com/users/mzumsande/orgs",
          "repos_url": "https://api.github.com/users/mzumsande/repos",
          "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/mzumsande/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/mzumsande/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/mzumsande/bitcoin",
        "archive_url": "https://api.github.com/repos/mzumsande/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/mzumsande/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/mzumsande/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/mzumsande/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/mzumsande/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/mzumsande/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/mzumsande/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/mzumsande/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/mzumsande/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/mzumsande/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/mzumsande/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/mzumsande/bitcoin/events",
        "forks_url": "https://api.github.com/repos/mzumsande/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/mzumsande/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/mzumsande/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/mzumsande/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/mzumsande/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/mzumsande/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/mzumsande/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/mzumsande/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/mzumsande/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/mzumsande/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/mzumsande/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/mzumsande/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/mzumsande/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:mzumsande/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/mzumsande/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/mzumsande/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/mzumsande/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/mzumsande/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/mzumsande/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/mzumsande/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/mzumsande/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/mzumsande/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/mzumsande/bitcoin/hooks",
        "svn_url": "https://github.com/mzumsande/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 263175,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-16T21:20:14Z",
        "created_at": "2019-05-20T16:03:10Z",
        "updated_at": "2025-04-24T18:53:18Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "26747d9f3e3fac4ff01d136b11252d70650c58cd",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37386,
        "stargazers_count": 84194,
        "watchers_count": 84194,
        "size": 284231,
        "default_branch": "master",
        "open_issues_count": 750,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-17T12:11:37Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-06-17T14:56:46Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 216,
    "deletions": 3,
    "changed_files": 5,
    "commits": 1,
    "review_comments": 12,
    "comments": 3
  },
  "events": [
    {
      "event": "commented",
      "id": 2551941878,
      "node_id": "IC_kwDOABII586YG4r2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2551941878",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T17:53:29Z",
      "updated_at": "2025-06-17T15:54:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31533.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/31533#pullrequestreview-2931888182), [Crypt-iQ](https://github.com/bitcoin/bitcoin/pull/31533#pullrequestreview-2936239326) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32427](https://github.com/bitcoin/bitcoin/pull/32427) ((RFC) kernel: Replace leveldb-based BlockTreeDB with flat-file based store by TheCharlatan)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- “at least much chain work as we had at the start” -> “at least as much chain work as we had at the start” [missing “as” after “at least”]\n\n<sup>drahtbot_id_4_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#issuecomment-2551941878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31533"
    },
    {
      "event": "labeled",
      "id": 15707020361,
      "node_id": "LE_lADOABII586j0ZifzwAAAAOoNhxJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707020361",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T17:53:32Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "convert_to_draft",
      "id": 15707124651,
      "node_id": "CTDE_lADOABII586j0ZifzwAAAAOoN7Or",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707124651",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T18:03:27Z"
    },
    {
      "event": "labeled",
      "id": 16033083745,
      "node_id": "LE_lADOABII586j0ZifzwAAAAO7pXFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16033083745",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T18:14:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16049115812,
      "node_id": "HRFPE_lADOABII586j0ZifzwAAAAO8mhKk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16049115812",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "98d68e00c25c68cdcb9863b75fc10af3e81ad239",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/98d68e00c25c68cdcb9863b75fc10af3e81ad239",
      "created_at": "2025-01-23T19:51:44Z"
    },
    {
      "event": "unlabeled",
      "id": 16049880991,
      "node_id": "UNLE_lADOABII586j0ZifzwAAAAO8pb-f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16049880991",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T21:07:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2594613872,
      "node_id": "PRR_kwDOABII586apqpw",
      "url": null,
      "actor": null,
      "commit_id": "98d68e00c25c68cdcb9863b75fc10af3e81ad239",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#pullrequestreview-2594613872",
      "submitted_at": "2025-02-05T06:09:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16200576655,
      "node_id": "HRFPE_lADOABII586j0ZifzwAAAAPFoS6P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16200576655",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "907e1257de30e594f82bc64076920ed288af8971",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/907e1257de30e594f82bc64076920ed288af8971",
      "created_at": "2025-02-05T20:44:50Z"
    },
    {
      "event": "labeled",
      "id": 16201663363,
      "node_id": "LE_lADOABII586j0ZifzwAAAAPFscOD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16201663363",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T22:44:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16212425117,
      "node_id": "HRFPE_lADOABII586j0ZifzwAAAAPGVfmd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16212425117",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7dd613b26870d628d84787b2f8a1c745931f97a6",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/7dd613b26870d628d84787b2f8a1c745931f97a6",
      "created_at": "2025-02-06T16:07:07Z"
    },
    {
      "event": "unlabeled",
      "id": 16213986216,
      "node_id": "UNLE_lADOABII586j0ZifzwAAAAPGbcuo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16213986216",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-06T17:57:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2655085738,
      "node_id": "PRR_kwDOABII586eQWSq",
      "url": null,
      "actor": null,
      "commit_id": "7dd613b26870d628d84787b2f8a1c745931f97a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#pullrequestreview-2655085738",
      "submitted_at": "2025-03-03T19:30:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17133430309,
      "node_id": "HRFPE_lADOABII586j0ZifzwAAAAP9O2Yl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17133430309",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c5b723623ca94dfa531a590580a538a3ddfb1277",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/c5b723623ca94dfa531a590580a538a3ddfb1277",
      "created_at": "2025-04-04T17:03:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17157668747,
      "node_id": "HRFPE_lADOABII586j0ZifzwAAAAP-rT-L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17157668747",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/9622aab3892c6241e5640c2179434b64899505ca",
      "created_at": "2025-04-07T17:22:54Z"
    },
    {
      "event": "labeled",
      "id": 17694237977,
      "node_id": "LE_lADOABII586j0ZifzwAAAAQeqKUZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17694237977",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-16T20:37:45Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 17700639873,
      "node_id": "UNLE_lADOABII586j0ZifzwAAAAQfClSB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700639873",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:18:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18157387174,
      "node_id": "LE_lADOABII586j0ZifzwAAAAQ6Q72m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18157387174",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-15T15:55:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2974134453,
      "node_id": "IC_kwDOABII586xRbC1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2974134453",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-15T15:55:19Z",
      "updated_at": "2025-06-15T15:55:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/40120572487</sub>\n<sub>LLM reason (✨ experimental): Missing or undefined member 'm_failed_blocks' in 'ChainstateManager' caused compilation error, leading to CI failure.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#issuecomment-2974134453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31533"
    },
    {
      "event": "reviewed",
      "id": 2931888182,
      "node_id": "PRR_kwDOABII586uwRA2",
      "url": null,
      "actor": null,
      "commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nSimple implementation, comments below are just a suggestions for minor improvements",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#pullrequestreview-2931888182",
      "submitted_at": "2025-06-16T12:30:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNkNTM4NTkwNzQxMDg1NTFkODY5NzFhMzc2NzdjMzNlYzg5NmQ4NmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d53859074108551d86971a37677c33ec896d86b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3d53859074108551d86971a37677c33ec896d86b",
      "tree": {
        "sha": "e0a1ca896560930bc7e68d5a8cc7be7531bf7ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0a1ca896560930bc7e68d5a8cc7be7531bf7ef6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26747d9f3e3fac4ff01d136b11252d70650c58cd",
          "sha": "26747d9f3e3fac4ff01d136b11252d70650c58cd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/26747d9f3e3fac4ff01d136b11252d70650c58cd"
        }
      ],
      "message": "fuzz: Add fuzzer for block index\n\nThis fuzz target creates arbitrary tree-like structure of indices,\nsimulating the following events:\n- Adding a header to the block tree db\n- Receiving the full block (may be valid or not)\n- Reorging to a new chain tip (possibly encountering invalid blocks on\n  the way)\n- pruning\nThe test skips all actual validation of header/ block / transaction data\nby just simulating the outcome, and also doesn't interact with the data directory.\n\nThe main goal is to test the integrity of the block index tree in\nall fuzzed constellations, by calling CheckBlockIndex()\nat the end of each iteration.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2025-06-16T21:19:45Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-10-30T18:59:37Z"
      },
      "sha": "3d53859074108551d86971a37677c33ec896d86b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18178616901,
      "node_id": "HRFPE_lADOABII586j0ZifzwAAAAQ7h65F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18178616901",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/3d53859074108551d86971a37677c33ec896d86b",
      "created_at": "2025-06-16T21:20:16Z"
    },
    {
      "event": "commented",
      "id": 2978189755,
      "node_id": "IC_kwDOABII586xg5G7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2978189755",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T21:22:06Z",
      "updated_at": "2025-06-16T21:22:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased due to silent conflict with #31405 and to address feedback by @ismaelsadeeq (thanks!). I think I'll fuzz this for a few more days and take it out of draft then.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#issuecomment-2978189755",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31533"
    },
    {
      "event": "mentioned",
      "id": 18178647641,
      "node_id": "MEE_lADOABII586j0ZifzwAAAAQ7iCZZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18178647641",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T21:22:44Z"
    },
    {
      "event": "subscribed",
      "id": 18178647672,
      "node_id": "SE_lADOABII586j0ZifzwAAAAQ7iCZ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18178647672",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T21:22:44Z"
    },
    {
      "event": "reviewed",
      "id": 2934465960,
      "node_id": "PRR_kwDOABII586u6GWo",
      "url": null,
      "actor": null,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#pullrequestreview-2934465960",
      "submitted_at": "2025-06-17T07:29:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
    },
    {
      "event": "reviewed",
      "id": 2936239326,
      "node_id": "PRR_kwDOABII586vA3Te",
      "url": null,
      "actor": null,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, will test out.\r\n\r\nI think both approaches (this PR and the i/o-based https://github.com/bitcoin/bitcoin/pull/29158) have their merits and could both be merged. I like that this PR focuses on the internal state we want to check. I also like that the other PR does round-trip reads/writes to disk since I think there should be asserts on i/o like this.",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#pullrequestreview-2936239326",
      "submitted_at": "2025-06-17T15:54:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942239943",
      "pull_request_review_id": 2594613872,
      "id": 1942239943,
      "node_id": "PRRC_kwDOABII585zxDrH",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.\n+                LOCK(cs_main);\n+                CBlockIndex* prev_block = PickValue(fuzzed_data_provider, blocks);",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": 59,
      "original_position": 56,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "98d68e00c25c68cdcb9863b75fc10af3e81ad239",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "98d68e0: shouldn't we have a `blocks.push_back(index)` in this block of code?\r\n\r\nright now, only genesis block gets inserted into `std::vector<CBlockIndex*> blocks` and we don't enter into the interesting test cases.",
      "created_at": "2025-02-05T04:46:22Z",
      "updated_at": "2025-02-05T06:09:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r1942239943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942239943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943642068",
      "pull_request_review_id": 2596939749,
      "id": 1943642068,
      "node_id": "PRRC_kwDOABII585z2Z_U",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.\n+                LOCK(cs_main);\n+                CBlockIndex* prev_block = PickValue(fuzzed_data_provider, blocks);",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": 59,
      "original_position": 56,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "98d68e00c25c68cdcb9863b75fc10af3e81ad239",
      "in_reply_to_id": 1942239943,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point - fixed, and also cleared `blocks` in the end!\r\nWhile working /testing this branch I directly did picked a value from blockman.m_block_index and introduced `blocks` right before pushing because picking from a `std::unordered_map` mad runs non-deterministic.",
      "created_at": "2025-02-05T20:47:21Z",
      "updated_at": "2025-02-05T20:47:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r1943642068",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943642068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1978075230",
      "pull_request_review_id": 2655085738,
      "id": 1978075230,
      "node_id": "PRRC_kwDOABII58515whe",
      "diff_hunk": "@@ -0,0 +1,204 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.\n+                LOCK(cs_main);\n+                CBlockIndex* prev_block = PickValue(fuzzed_data_provider, blocks);\n+                if (!(prev_block->nStatus & BLOCK_FAILED_MASK)) {\n+                    CBlockHeader header = ConsumeBlockHeader(fuzzed_data_provider, prev_block->GetBlockHash(), nonce_counter);\n+                    CBlockIndex* index = blockman.AddToBlockIndex(header, chainman.m_best_header);\n+                    assert(index->nStatus & BLOCK_VALID_TREE);\n+                    blocks.push_back(index);\n+                }\n+            },\n+            [&] {\n+                // Receive a full block (valid or invalid) for an existing header, but don't attempt to connect it yet\n+                LOCK(cs_main);\n+                CBlockIndex* index = PickValue(fuzzed_data_provider, blocks);\n+                // Must be new to us and not known to be invalid (e.g. because of an invalid ancestor).\n+                if (index->nTx == 0 && !(index->nStatus & BLOCK_FAILED_MASK)) {\n+                    if (fuzzed_data_provider.ConsumeBool()) { // Invalid\n+                        BlockValidationState state;\n+                        state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"consensus-invalid\");\n+                        chainman.ActiveChainstate().InvalidBlockFound(index, state);\n+                    } else {\n+                        size_t nTx = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 1000);\n+                        CBlock block; // Dummy block, so that ReceivedBlockTransaction can infer a nTx value.\n+                        block.vtx = std::vector<CTransactionRef>(nTx);\n+                        FlatFilePos pos(0, fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1000));\n+                        chainman.ReceivedBlockTransactions(block, index, pos);\n+                        assert(index->nStatus & BLOCK_VALID_TRANSACTIONS);\n+                        assert(index->nStatus & BLOCK_HAVE_DATA);\n+                    }\n+                }\n+            },\n+            [&] {\n+                // Simplified ActivateBestChain(): Try to move to a chain with more work - with the possibility of finding blocks to be invalid on the way\n+                LOCK(cs_main);\n+                auto& chain = chainman.ActiveChain();\n+                CBlockIndex* old_tip = chain.Tip();\n+                assert(old_tip);\n+                do {\n+                    CBlockIndex* best_tip = chainman.ActiveChainstate().FindMostWorkChain();\n+                    assert(best_tip);                   // Should at least return current tip\n+                    if (best_tip == chain.Tip()) break; // Nothing to do",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": 98,
      "original_position": 95,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "7dd613b26870d628d84787b2f8a1c745931f97a6",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~~looks like we always break here since `old_tip`, `best_tip` and `chain.Tip()` is the genesis block initially.~~\r\nEDIT: oops no problem here, please mark as resolved! `best_tip` can be block at any height n. I got confused when I saw logs with lots of prune height = 0.",
      "created_at": "2025-03-03T19:30:57Z",
      "updated_at": "2025-03-04T06:55:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r1978075230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1978075230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2149856128",
      "pull_request_review_id": 2931888182,
      "id": 2149856128,
      "node_id": "PRRC_kwDOABII586AJDOA",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should also indicate why the nBits is static?",
      "created_at": "2025-06-16T12:11:02Z",
      "updated_at": "2025-06-16T12:30:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2149856128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2149856128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2149860140",
      "pull_request_review_id": 2931888182,
      "id": 2149860140,
      "node_id": "PRRC_kwDOABII586AJEMs",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+    bool abort_run{false};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        if (abort_run) break;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n                // Receive a header building on an existing valid one. This assumes headers are valid, so PoW is not relevant here.\r\n```",
      "created_at": "2025-06-16T12:12:07Z",
      "updated_at": "2025-06-16T12:30:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2149860140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2149860140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2149870395",
      "pull_request_review_id": 2931888182,
      "id": 2149870395,
      "node_id": "PRRC_kwDOABII586AJGs7",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+    bool abort_run{false};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        if (abort_run) break;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.\n+                LOCK(cs_main);\n+                CBlockIndex* prev_block = PickValue(fuzzed_data_provider, blocks);\n+                if (!(prev_block->nStatus & BLOCK_FAILED_MASK)) {\n+                    CBlockHeader header = ConsumeBlockHeader(fuzzed_data_provider, prev_block->GetBlockHash(), nonce_counter);\n+                    CBlockIndex* index = blockman.AddToBlockIndex(header, chainman.m_best_header);\n+                    assert(index->nStatus & BLOCK_VALID_TREE);",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": 63,
      "original_position": 63,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Assert that we connect to the picked index?",
      "created_at": "2025-06-16T12:14:56Z",
      "updated_at": "2025-06-16T12:30:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2149870395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2149870395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2149889347",
      "pull_request_review_id": 2931888182,
      "id": 2149889347,
      "node_id": "PRRC_kwDOABII586AJLVD",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+    bool abort_run{false};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        if (abort_run) break;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.\n+                LOCK(cs_main);\n+                CBlockIndex* prev_block = PickValue(fuzzed_data_provider, blocks);\n+                if (!(prev_block->nStatus & BLOCK_FAILED_MASK)) {\n+                    CBlockHeader header = ConsumeBlockHeader(fuzzed_data_provider, prev_block->GetBlockHash(), nonce_counter);\n+                    CBlockIndex* index = blockman.AddToBlockIndex(header, chainman.m_best_header);\n+                    assert(index->nStatus & BLOCK_VALID_TREE);\n+                    blocks.push_back(index);\n+                }\n+            },\n+            [&] {\n+                // Receive a full block (valid or invalid) for an existing header, but don't attempt to connect it yet\n+                LOCK(cs_main);\n+                CBlockIndex* index = PickValue(fuzzed_data_provider, blocks);\n+                // Must be new to us and not known to be invalid (e.g. because of an invalid ancestor).\n+                if (index->nTx == 0 && !(index->nStatus & BLOCK_FAILED_MASK)) {\n+                    if (fuzzed_data_provider.ConsumeBool()) { // Invalid\n+                        BlockValidationState state;\n+                        state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"consensus-invalid\");\n+                        chainman.ActiveChainstate().InvalidBlockFound(index, state);\n+                    } else {\n+                        size_t nTx = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 1000);\n+                        CBlock block; // Dummy block, so that ReceivedBlockTransaction can infer a nTx value.\n+                        block.vtx = std::vector<CTransactionRef>(nTx);\n+                        FlatFilePos pos(0, fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1000));\n+                        chainman.ReceivedBlockTransactions(block, index, pos);\n+                        assert(index->nStatus & BLOCK_VALID_TRANSACTIONS);\n+                        assert(index->nStatus & BLOCK_HAVE_DATA);\n+                    }\n+                }\n+            },\n+            [&] {\n+                // Simplified ActivateBestChain(): Try to move to a chain with more work - with the possibility of finding blocks to be invalid on the way\n+                LOCK(cs_main);\n+                auto& chain = chainman.ActiveChain();\n+                CBlockIndex* old_tip = chain.Tip();\n+                assert(old_tip);\n+                do {\n+                    CBlockIndex* best_tip = chainman.ActiveChainstate().FindMostWorkChain();\n+                    assert(best_tip);                   // Should at least return current tip\n+                    if (best_tip == chain.Tip()) break; // Nothing to do\n+                    // Rewind chain to forking point\n+                    const CBlockIndex* fork = chain.FindFork(best_tip);\n+                    // If we can't go back to the fork point due to pruned data, abort this run. In reality, a pruned node would also currently just crash in this scenario.\n+                    // This is very unlikely to happen due to the minimum pruning threshold of 550MiB.\n+                    CBlockIndex* it = chain.Tip();\n+                    while (it && it->nHeight != fork->nHeight) {\n+                        if (!(it->nStatus & BLOCK_HAVE_UNDO) && it->nHeight > 0) {\n+                            assert(blockman.m_have_pruned);\n+                            abort_run = true;\n+                            return;\n+                        }\n+                        it = it->pprev;\n+                    }\n+                    chain.SetTip(*chain[fork->nHeight]);\n+\n+                    // Prepare new blocks to connect\n+                    std::vector<CBlockIndex*> to_connect;\n+                    it = best_tip;\n+                    while (it && it->nHeight != fork->nHeight) {\n+                        to_connect.push_back(it);\n+                        it = it->pprev;\n+                    }\n+                    // Connect blocks, possibly fail\n+                    for (CBlockIndex* block : to_connect | std::views::reverse) {\n+                        assert(!(block->nStatus & BLOCK_FAILED_MASK));\n+                        assert(block->nStatus & BLOCK_HAVE_DATA);\n+                        if (!block->IsValid(BLOCK_VALID_SCRIPTS)) {\n+                            if (fuzzed_data_provider.ConsumeBool()) { // Invalid\n+                                BlockValidationState state;\n+                                state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"consensus-invalid\");\n+                                chainman.ActiveChainstate().InvalidBlockFound(block, state);\n+                                break;\n+                            } else {\n+                                block->RaiseValidity(BLOCK_VALID_SCRIPTS);\n+                                block->nStatus |= BLOCK_HAVE_UNDO;\n+                            }\n+                        }\n+                        chain.SetTip(*block);\n+                        chainman.ActiveChainstate().PruneBlockIndexCandidates();\n+                        // ABC may release cs_main / not connect all blocks in one go - but only if we have at least much chain work as we had at the start.\n+                        if (block->nChainWork > old_tip->nChainWork && fuzzed_data_provider.ConsumeBool()) {\n+                            break;\n+                        }\n+                    }\n+                } while (node::CBlockIndexWorkComparator()(chain.Tip(), old_tip));\n+                assert(chain.Tip()->nChainWork >= old_tip->nChainWork);\n+            },\n+            [&] {\n+                // Prune chain - dealing with block files is beyond the scope of this test, so just prune random blocks, making no assumptions what must\n+                // be together in a block file.\n+                // Also don't prune blocks outside of the chain for now - this would make the fuzzer crash because of the problem describted in",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": null,
      "original_position": 148,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe lil too early, but a nit when updating.\r\n```suggestion\r\n                // Also don't prune blocks outside of the chain for now - this would make the fuzzer crash because of the problem described in\r\n```",
      "created_at": "2025-06-16T12:25:33Z",
      "updated_at": "2025-06-16T12:30:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2149889347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2149889347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2150909117",
      "pull_request_review_id": 2933549492,
      "id": 2150909117,
      "node_id": "PRRC_kwDOABII586ANES9",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "in_reply_to_id": 2149856128,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2025-06-16T21:20:23Z",
      "updated_at": "2025-06-16T21:20:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2150909117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2150909117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2150909378",
      "pull_request_review_id": 2933549831,
      "id": 2150909378,
      "node_id": "PRRC_kwDOABII586ANEXC",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+    bool abort_run{false};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        if (abort_run) break;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "in_reply_to_id": 2149860140,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added",
      "created_at": "2025-06-16T21:20:34Z",
      "updated_at": "2025-06-16T21:20:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2150909378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2150909378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2150909728",
      "pull_request_review_id": 2933550346,
      "id": 2150909728,
      "node_id": "PRRC_kwDOABII586ANEcg",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+    bool abort_run{false};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        if (abort_run) break;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.\n+                LOCK(cs_main);\n+                CBlockIndex* prev_block = PickValue(fuzzed_data_provider, blocks);\n+                if (!(prev_block->nStatus & BLOCK_FAILED_MASK)) {\n+                    CBlockHeader header = ConsumeBlockHeader(fuzzed_data_provider, prev_block->GetBlockHash(), nonce_counter);\n+                    CBlockIndex* index = blockman.AddToBlockIndex(header, chainman.m_best_header);\n+                    assert(index->nStatus & BLOCK_VALID_TREE);",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": 63,
      "original_position": 63,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "in_reply_to_id": 2149870395,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "good idea, added an assert",
      "created_at": "2025-06-16T21:20:50Z",
      "updated_at": "2025-06-16T21:20:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2150909728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2150909728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2150909995",
      "pull_request_review_id": 2933550666,
      "id": 2150909995,
      "node_id": "PRRC_kwDOABII586ANEgr",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits;\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+    bool abort_run{false};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        if (abort_run) break;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing one. This assumes headers are valid, so PoW is not relevant here.\n+                LOCK(cs_main);\n+                CBlockIndex* prev_block = PickValue(fuzzed_data_provider, blocks);\n+                if (!(prev_block->nStatus & BLOCK_FAILED_MASK)) {\n+                    CBlockHeader header = ConsumeBlockHeader(fuzzed_data_provider, prev_block->GetBlockHash(), nonce_counter);\n+                    CBlockIndex* index = blockman.AddToBlockIndex(header, chainman.m_best_header);\n+                    assert(index->nStatus & BLOCK_VALID_TREE);\n+                    blocks.push_back(index);\n+                }\n+            },\n+            [&] {\n+                // Receive a full block (valid or invalid) for an existing header, but don't attempt to connect it yet\n+                LOCK(cs_main);\n+                CBlockIndex* index = PickValue(fuzzed_data_provider, blocks);\n+                // Must be new to us and not known to be invalid (e.g. because of an invalid ancestor).\n+                if (index->nTx == 0 && !(index->nStatus & BLOCK_FAILED_MASK)) {\n+                    if (fuzzed_data_provider.ConsumeBool()) { // Invalid\n+                        BlockValidationState state;\n+                        state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"consensus-invalid\");\n+                        chainman.ActiveChainstate().InvalidBlockFound(index, state);\n+                    } else {\n+                        size_t nTx = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 1000);\n+                        CBlock block; // Dummy block, so that ReceivedBlockTransaction can infer a nTx value.\n+                        block.vtx = std::vector<CTransactionRef>(nTx);\n+                        FlatFilePos pos(0, fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1000));\n+                        chainman.ReceivedBlockTransactions(block, index, pos);\n+                        assert(index->nStatus & BLOCK_VALID_TRANSACTIONS);\n+                        assert(index->nStatus & BLOCK_HAVE_DATA);\n+                    }\n+                }\n+            },\n+            [&] {\n+                // Simplified ActivateBestChain(): Try to move to a chain with more work - with the possibility of finding blocks to be invalid on the way\n+                LOCK(cs_main);\n+                auto& chain = chainman.ActiveChain();\n+                CBlockIndex* old_tip = chain.Tip();\n+                assert(old_tip);\n+                do {\n+                    CBlockIndex* best_tip = chainman.ActiveChainstate().FindMostWorkChain();\n+                    assert(best_tip);                   // Should at least return current tip\n+                    if (best_tip == chain.Tip()) break; // Nothing to do\n+                    // Rewind chain to forking point\n+                    const CBlockIndex* fork = chain.FindFork(best_tip);\n+                    // If we can't go back to the fork point due to pruned data, abort this run. In reality, a pruned node would also currently just crash in this scenario.\n+                    // This is very unlikely to happen due to the minimum pruning threshold of 550MiB.\n+                    CBlockIndex* it = chain.Tip();\n+                    while (it && it->nHeight != fork->nHeight) {\n+                        if (!(it->nStatus & BLOCK_HAVE_UNDO) && it->nHeight > 0) {\n+                            assert(blockman.m_have_pruned);\n+                            abort_run = true;\n+                            return;\n+                        }\n+                        it = it->pprev;\n+                    }\n+                    chain.SetTip(*chain[fork->nHeight]);\n+\n+                    // Prepare new blocks to connect\n+                    std::vector<CBlockIndex*> to_connect;\n+                    it = best_tip;\n+                    while (it && it->nHeight != fork->nHeight) {\n+                        to_connect.push_back(it);\n+                        it = it->pprev;\n+                    }\n+                    // Connect blocks, possibly fail\n+                    for (CBlockIndex* block : to_connect | std::views::reverse) {\n+                        assert(!(block->nStatus & BLOCK_FAILED_MASK));\n+                        assert(block->nStatus & BLOCK_HAVE_DATA);\n+                        if (!block->IsValid(BLOCK_VALID_SCRIPTS)) {\n+                            if (fuzzed_data_provider.ConsumeBool()) { // Invalid\n+                                BlockValidationState state;\n+                                state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"consensus-invalid\");\n+                                chainman.ActiveChainstate().InvalidBlockFound(block, state);\n+                                break;\n+                            } else {\n+                                block->RaiseValidity(BLOCK_VALID_SCRIPTS);\n+                                block->nStatus |= BLOCK_HAVE_UNDO;\n+                            }\n+                        }\n+                        chain.SetTip(*block);\n+                        chainman.ActiveChainstate().PruneBlockIndexCandidates();\n+                        // ABC may release cs_main / not connect all blocks in one go - but only if we have at least much chain work as we had at the start.\n+                        if (block->nChainWork > old_tip->nChainWork && fuzzed_data_provider.ConsumeBool()) {\n+                            break;\n+                        }\n+                    }\n+                } while (node::CBlockIndexWorkComparator()(chain.Tip(), old_tip));\n+                assert(chain.Tip()->nChainWork >= old_tip->nChainWork);\n+            },\n+            [&] {\n+                // Prune chain - dealing with block files is beyond the scope of this test, so just prune random blocks, making no assumptions what must\n+                // be together in a block file.\n+                // Also don't prune blocks outside of the chain for now - this would make the fuzzer crash because of the problem describted in",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": null,
      "original_position": 148,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "9622aab3892c6241e5640c2179434b64899505ca",
      "in_reply_to_id": 2149889347,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2025-06-16T21:21:00Z",
      "updated_at": "2025-06-16T21:21:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2150909995",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2150909995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2151533101",
      "pull_request_review_id": 2934465960,
      "id": 2151533101,
      "node_id": "PRRC_kwDOABII586APcot",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <cstdint>\n+#include <flatfile.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <optional>\n+#include <ranges>\n+#include <validation.h>\n+#include <vector>\n+\n+const TestingSetup* g_setup;\n+\n+CBlockHeader ConsumeBlockHeader(FuzzedDataProvider& provider, uint256 prev_hash, int& nonce_counter)\n+{\n+    CBlockHeader header;\n+    header.nVersion = provider.ConsumeIntegral<decltype(header.nVersion)>();\n+    header.hashPrevBlock = prev_hash;\n+    header.hashMerkleRoot = uint256{}; // never used\n+    header.nTime = provider.ConsumeIntegral<decltype(header.nTime)>();\n+    header.nBits = Params().GenesisBlock().nBits; // not fuzzed because not used (validation is mocked).\n+    header.nNonce = nonce_counter++; // prevent creating multiple block headers with the same hash\n+    return header;\n+}\n+\n+void initialize_block_index_tree()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(block_index_tree, .init = initialize_block_index_tree)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    ChainstateManager& chainman = *g_setup->m_node.chainman;\n+    auto& blockman = chainman.m_blockman;\n+    CBlockIndex* genesis = chainman.ActiveChainstate().m_chain[0];\n+    int nonce_counter = 0;\n+    std::vector<CBlockIndex*> blocks;\n+    blocks.push_back(genesis);\n+    bool abort_run{false};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 1000)\n+    {\n+        if (abort_run) break;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                // Receive a header building on an existing valid one. This assumes headers are valid, so PoW is not relevant here.\n+                LOCK(cs_main);\n+                CBlockIndex* prev_block = PickValue(fuzzed_data_provider, blocks);\n+                if (!(prev_block->nStatus & BLOCK_FAILED_MASK)) {\n+                    CBlockHeader header = ConsumeBlockHeader(fuzzed_data_provider, prev_block->GetBlockHash(), nonce_counter);\n+                    CBlockIndex* index = blockman.AddToBlockIndex(header, chainman.m_best_header);\n+                    assert(index->nStatus & BLOCK_VALID_TREE);\n+                    assert(index->pprev == prev_block);\n+                    blocks.push_back(index);\n+                }\n+            },\n+            [&] {\n+                // Receive a full block (valid or invalid) for an existing header, but don't attempt to connect it yet\n+                LOCK(cs_main);\n+                CBlockIndex* index = PickValue(fuzzed_data_provider, blocks);\n+                // Must be new to us and not known to be invalid (e.g. because of an invalid ancestor).\n+                if (index->nTx == 0 && !(index->nStatus & BLOCK_FAILED_MASK)) {\n+                    if (fuzzed_data_provider.ConsumeBool()) { // Invalid\n+                        BlockValidationState state;\n+                        state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"consensus-invalid\");\n+                        chainman.ActiveChainstate().InvalidBlockFound(index, state);\n+                    } else {\n+                        size_t nTx = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 1000);\n+                        CBlock block; // Dummy block, so that ReceivedBlockTransaction can infer a nTx value.\n+                        block.vtx = std::vector<CTransactionRef>(nTx);\n+                        FlatFilePos pos(0, fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1000));\n+                        chainman.ReceivedBlockTransactions(block, index, pos);\n+                        assert(index->nStatus & BLOCK_VALID_TRANSACTIONS);\n+                        assert(index->nStatus & BLOCK_HAVE_DATA);\n+                    }\n+                }\n+            },\n+            [&] {\n+                // Simplified ActivateBestChain(): Try to move to a chain with more work - with the possibility of finding blocks to be invalid on the way\n+                LOCK(cs_main);\n+                auto& chain = chainman.ActiveChain();\n+                CBlockIndex* old_tip = chain.Tip();\n+                assert(old_tip);\n+                do {\n+                    CBlockIndex* best_tip = chainman.ActiveChainstate().FindMostWorkChain();\n+                    assert(best_tip);                   // Should at least return current tip\n+                    if (best_tip == chain.Tip()) break; // Nothing to do\n+                    // Rewind chain to forking point\n+                    const CBlockIndex* fork = chain.FindFork(best_tip);\n+                    // If we can't go back to the fork point due to pruned data, abort this run. In reality, a pruned node would also currently just crash in this scenario.\n+                    // This is very unlikely to happen due to the minimum pruning threshold of 550MiB.\n+                    CBlockIndex* it = chain.Tip();\n+                    while (it && it->nHeight != fork->nHeight) {\n+                        if (!(it->nStatus & BLOCK_HAVE_UNDO) && it->nHeight > 0) {\n+                            assert(blockman.m_have_pruned);\n+                            abort_run = true;\n+                            return;\n+                        }\n+                        it = it->pprev;\n+                    }\n+                    chain.SetTip(*chain[fork->nHeight]);\n+\n+                    // Prepare new blocks to connect\n+                    std::vector<CBlockIndex*> to_connect;\n+                    it = best_tip;\n+                    while (it && it->nHeight != fork->nHeight) {\n+                        to_connect.push_back(it);\n+                        it = it->pprev;\n+                    }\n+                    // Connect blocks, possibly fail\n+                    for (CBlockIndex* block : to_connect | std::views::reverse) {\n+                        assert(!(block->nStatus & BLOCK_FAILED_MASK));\n+                        assert(block->nStatus & BLOCK_HAVE_DATA);\n+                        if (!block->IsValid(BLOCK_VALID_SCRIPTS)) {\n+                            if (fuzzed_data_provider.ConsumeBool()) { // Invalid\n+                                BlockValidationState state;\n+                                state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"consensus-invalid\");\n+                                chainman.ActiveChainstate().InvalidBlockFound(block, state);\n+                                break;\n+                            } else {\n+                                block->RaiseValidity(BLOCK_VALID_SCRIPTS);\n+                                block->nStatus |= BLOCK_HAVE_UNDO;\n+                            }\n+                        }\n+                        chain.SetTip(*block);\n+                        chainman.ActiveChainstate().PruneBlockIndexCandidates();\n+                        // ABC may release cs_main / not connect all blocks in one go - but only if we have at least much chain work as we had at the start.",
      "path": "src/test/fuzz/block_index_tree.cpp",
      "position": 138,
      "original_position": 138,
      "commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "original_commit_id": "3d53859074108551d86971a37677c33ec896d86b",
      "in_reply_to_id": null,
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n    “at least much chain work as we had at the start” -> “at least as much chain work as we had at the start” [missing “as” after “at least”]\r\n",
      "created_at": "2025-06-17T07:29:40Z",
      "updated_at": "2025-06-17T07:29:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31533#discussion_r2151533101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2151533101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31533"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 138,
      "original_line": 138,
      "side": "RIGHT"
    }
  ]
}