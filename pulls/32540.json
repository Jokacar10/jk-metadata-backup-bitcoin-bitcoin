{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540",
    "id": 2525856907,
    "node_id": "PR_kwDOABII586WjYSL",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32540",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32540.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32540.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c48846ec4169f749d28da05de849c43a488c3a70",
    "number": 32540,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "rest: fetch spent transaction outputs by blockhash",
    "user": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Today, it is possible to fetch a block's spent prevouts in order to build an external index by using the `/rest/block/BLOCKHASH.json` endpoint. However, its performance is low due to JSON serialization overhead.\r\n\r\nWe can significantly optimize it by adding a new [REST API](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md) endpoint, using a binary response format (returning a collection of spent txout lists, one per each block transaction):\r\n\r\n```\r\n$ BLOCKHASH=00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054\r\n\r\n$ ab -k -c 1 -n 100 http://localhost:8332/rest/block/$BLOCKHASH.json\r\nDocument Length:        13278152 bytes\r\nRequests per second:    3.53 [#/sec] (mean)\r\nTime per request:       283.569 [ms] (mean)\r\n\r\n$ ab -k -c 1 -n 10000 http://localhost:8332/rest/spenttxouts/$BLOCKHASH.bin\r\nDocument Length:        195591 bytes\r\nRequests per second:    254.47 [#/sec] (mean)\r\nTime per request:       3.930 [ms] (mean)\r\n```\r\n\r\nCurrently, this PR is being used and tested by Bindex[^1].\r\n\r\nThis PR would allow to improve the performance of external indexers such as electrs[^2], ElectrumX[^3], Fulcrum[^4] and Blockbook[^5].\r\n\r\n[^1]: https://github.com/romanz/bindex-rs\r\n[^2]: https://github.com/romanz/electrs (also [blockstream.info](https://github.com/Blockstream/electrs) and [mempool.space](https://github.com/mempool/electrs) forks)\r\n[^3]: https://github.com/spesmilo/electrumx\r\n[^4]: https://github.com/cculianu/Fulcrum\r\n[^5]: https://github.com/trezor/blockbook\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2025-05-17T07:27:02Z",
    "updated_at": "2025-06-16T07:42:46Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "3f48f6b8bef8ae42b7e9bb0772c92c3ab24bcdce",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "tapcrafter",
        "id": 207358173,
        "node_id": "U_kgDODFwI3Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/207358173?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tapcrafter",
        "html_url": "https://github.com/tapcrafter",
        "followers_url": "https://api.github.com/users/tapcrafter/followers",
        "following_url": "https://api.github.com/users/tapcrafter/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tapcrafter/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tapcrafter/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tapcrafter/subscriptions",
        "organizations_url": "https://api.github.com/users/tapcrafter/orgs",
        "repos_url": "https://api.github.com/users/tapcrafter/repos",
        "events_url": "https://api.github.com/users/tapcrafter/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tapcrafter/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "romanz:spent-prevouts",
      "ref": "spent-prevouts",
      "sha": "c48846ec4169f749d28da05de849c43a488c3a70",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 125523455,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjU1MjM0NTU=",
        "name": "bitcoin",
        "full_name": "romanz/bitcoin",
        "owner": {
          "login": "romanz",
          "id": 9900,
          "node_id": "MDQ6VXNlcjk5MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/romanz",
          "html_url": "https://github.com/romanz",
          "followers_url": "https://api.github.com/users/romanz/followers",
          "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
          "organizations_url": "https://api.github.com/users/romanz/orgs",
          "repos_url": "https://api.github.com/users/romanz/repos",
          "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/romanz/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/romanz/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/romanz/bitcoin",
        "archive_url": "https://api.github.com/repos/romanz/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/romanz/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/romanz/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/romanz/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/romanz/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/romanz/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/romanz/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/romanz/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/romanz/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/romanz/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/romanz/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/romanz/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/romanz/bitcoin/events",
        "forks_url": "https://api.github.com/repos/romanz/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/romanz/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/romanz/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/romanz/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/romanz/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/romanz/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/romanz/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/romanz/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/romanz/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/romanz/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/romanz/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/romanz/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/romanz/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/romanz/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/romanz/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/romanz/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:romanz/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/romanz/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/romanz/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/romanz/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/romanz/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/romanz/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/romanz/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/romanz/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/romanz/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/romanz/bitcoin/hooks",
        "svn_url": "https://github.com/romanz/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 259485,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-15T18:20:37Z",
        "created_at": "2018-03-16T13:59:02Z",
        "updated_at": "2023-11-29T23:29:01Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e2174378aa8a339c7be8b4e91311513ed520a16d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37379,
        "stargazers_count": 84167,
        "watchers_count": 84167,
        "size": 283876,
        "default_branch": "master",
        "open_issues_count": 752,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-14T00:27:57Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-06-16T07:34:03Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 149,
    "deletions": 0,
    "changed_files": 4,
    "commits": 2,
    "review_comments": 29,
    "comments": 14
  },
  "events": [
    {
      "event": "commented",
      "id": 2888175145,
      "node_id": "IC_kwDOABII586sJg4p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2888175145",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T07:27:05Z",
      "updated_at": "2025-06-16T07:42:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32540.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2975395180), [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2930966893) |\n| Concept ACK | [adyshimony](https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2899720171) |\n| Stale ACK | [tapcrafter](https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2848945630) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2888175145",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "labeled",
      "id": 17697934865,
      "node_id": "LE_lADOABII5863BCN0zwAAAAQe4Q4R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17697934865",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T07:27:19Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "subscribed",
      "id": 17698976143,
      "node_id": "SE_lADOABII5863BCN0zwAAAAQe8PGP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17698976143",
      "actor": {
        "login": "dn4vzdx8xS15wUV0",
        "id": 211630628,
        "node_id": "U_kgDODJ06JA",
        "avatar_url": "https://avatars.githubusercontent.com/u/211630628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dn4vzdx8xS15wUV0",
        "html_url": "https://github.com/dn4vzdx8xS15wUV0",
        "followers_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/followers",
        "following_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/subscriptions",
        "organizations_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/orgs",
        "repos_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/repos",
        "events_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dn4vzdx8xS15wUV0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T12:23:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17699589547,
      "node_id": "HRFPE_lADOABII5863BCN0zwAAAAQe-k2r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17699589547",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ffe571f461930b7a05a3cf9f7128e843ea9f7e2d",
      "commit_url": "https://api.github.com/repos/romanz/bitcoin/commits/ffe571f461930b7a05a3cf9f7128e843ea9f7e2d",
      "created_at": "2025-05-17T15:47:07Z"
    },
    {
      "event": "commented",
      "id": 2888466453,
      "node_id": "IC_kwDOABII586sKoAV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2888466453",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T15:47:34Z",
      "updated_at": "2025-05-17T15:47:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to fix a typo in commit description.",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2888466453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "commented",
      "id": 2888533229,
      "node_id": "IC_kwDOABII586sK4Tt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2888533229",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T18:42:59Z",
      "updated_at": "2025-05-17T18:42:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice.  I wonder about just adding a content-type like option so that the api endpoint is the same but you simply say if you want binary or json content returned?  Maybe there's other endpoints that it could then be applied to as well..",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2888533229",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "commented",
      "id": 2888872800,
      "node_id": "IC_kwDOABII586sMLNg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2888872800",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-18T09:06:34Z",
      "updated_at": "2025-05-18T09:06:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Nice. \r\n\r\nThanks :)\r\n\r\n> I wonder about just adding a content-type like option so that the api endpoint is the same but you simply say if you want binary or json content returned? Maybe there's other endpoints that it could then be applied to as well.\r\n\r\nGood idea - would it be OK to implement it in a separate PR?\r\n\r\n",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2888872800",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "reviewed",
      "id": 2848945630,
      "node_id": "PRR_kwDOABII586pz3Xe",
      "url": null,
      "actor": null,
      "commit_id": "ffe571f461930b7a05a3cf9f7128e843ea9f7e2d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "tACK ffe571f461930b7a05a3cf9f7128e843ea9f7e2d\r\n\r\n<details>\r\n\r\n<summary>Test protocol</summary>\r\n\r\nRunning ffe571f461930b7a05a3cf9f7128e843ea9f7e2d:\r\n\r\n```shell\r\n$ ./build/bin/bitcoind -regtest -rpcallowip=::1 -rpcuser=u -rpcpassword=p -rest -txindex\r\n\r\n# Invalid extension:\r\n\r\n$ curl -v -g 'u:p@localhost:18443/rest/spentoutputs/4376e2f945afef224981b665778ec45ebe64745e7d768c2937a8e271b69d708a.json'\r\n\r\n* Host localhost:18443 was resolved.\r\n...\r\n< HTTP/1.1 404 Not Found\r\n< Content-Type: text/plain\r\n< Date: Sun, 18 May 2025 12:28:13 GMT\r\n< Content-Length: 47\r\n< \r\noutput format not found (available: bin, hex)\r\n* Connection #0 to host localhost left intact\r\n\r\n\r\n# Correct extension:\r\n\r\n$ curl -v -g 'u:p@localhost:18443/rest/spentoutputs/4376e2f945afef224981b665778ec45ebe64745e7d768c2937a8e271b69d708a.hex'\r\n* Host localhost:18443 was resolved.\r\n...\r\n< HTTP/1.1 200 OK\r\n< Content-Type: text/plain\r\n< Date: Sun, 18 May 2025 12:28:43 GMT\r\n< Content-Length: 75\r\n< \r\n02000100f2052a010000001976a914090454b16d8fd499365c53a2226373c6d8734b5188ac\r\n* Connection #0 to host localhost left intact\r\n\r\n# Which corresponds to the TxOut of the spent transaction:\r\n\r\n$ bitcoin-cli -regtest -rpcuser=u -rpcpassword=p decoderawtransaction 020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025500feffffff0200f2052a010000001976a914090454b16d8fd499365c53a2226373c6d8734b5188ac0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000004000000\r\n{\r\n  \"txid\": \"38e6ad741857df84af27a709c1d99397b6e33c5078b284d49da6ae74b78d9bc6\",\r\n  \"hash\": \"b254f236b5141afd961bf80918b1417aa1d7f7ced2cbdd7a3bfbd243748e2c6f\",\r\n  \"version\": 2,\r\n  \"size\": 170,\r\n  \"vsize\": 143,\r\n  \"weight\": 572,\r\n  \"locktime\": 4,\r\n  \"vin\": [\r\n    {\r\n      \"coinbase\": \"5500\",\r\n      \"txinwitness\": [\r\n        \"0000000000000000000000000000000000000000000000000000000000000000\"\r\n      ],\r\n      \"sequence\": 4294967294\r\n    }\r\n  ],\r\n  \"vout\": [\r\n    {\r\n      \"value\": 50.00000000,\r\n      \"n\": 0,\r\n      \"scriptPubKey\": {\r\n        \"asm\": \"OP_DUP OP_HASH160 090454b16d8fd499365c53a2226373c6d8734b51 OP_EQUALVERIFY OP_CHECKSIG\",\r\n        \"desc\": \"addr(mgLdZh69L6Zzs68mfvSkTcnz12XtgSQVJE)#ggfft2ks\",\r\n        \"hex\": \"76a914090454b16d8fd499365c53a2226373c6d8734b5188ac\",\r\n        \"address\": \"mgLdZh69L6Zzs68mfvSkTcnz12XtgSQVJE\",\r\n        \"type\": \"pubkeyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"value\": 0.00000000,\r\n      \"n\": 1,\r\n      \"scriptPubKey\": {\r\n        \"asm\": \"OP_RETURN aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9\",\r\n        \"desc\": \"raw(6a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9)#cav96mf3\",\r\n        \"hex\": \"6a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9\",\r\n        \"type\": \"nulldata\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```",
      "user": {
        "login": "tapcrafter",
        "id": 207358173,
        "node_id": "U_kgDODFwI3Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/207358173?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tapcrafter",
        "html_url": "https://github.com/tapcrafter",
        "followers_url": "https://api.github.com/users/tapcrafter/followers",
        "following_url": "https://api.github.com/users/tapcrafter/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tapcrafter/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tapcrafter/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tapcrafter/subscriptions",
        "organizations_url": "https://api.github.com/users/tapcrafter/orgs",
        "repos_url": "https://api.github.com/users/tapcrafter/repos",
        "events_url": "https://api.github.com/users/tapcrafter/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tapcrafter/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2848945630",
      "submitted_at": "2025-05-18T13:00:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
    },
    {
      "event": "comment_deleted",
      "id": 17703437461,
      "node_id": "CDE_lADOABII5863BCN0zwAAAAQfNQSV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17703437461",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-18T13:47:41Z"
    },
    {
      "event": "commented",
      "id": 2889002779,
      "node_id": "IC_kwDOABII586sMq8b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2889002779",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-18T13:50:00Z",
      "updated_at": "2025-05-18T13:50:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Good idea - would it be OK to implement it in a separate PR?\r\n\r\nSure, as you wish.  I'm no authority :)",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2889002779",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17707220351,
      "node_id": "HRFPE_lADOABII5863BCN0zwAAAAQfbr1_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17707220351",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8cb0465defdf96a86b7485ff098d2ba70843e942",
      "commit_url": "https://api.github.com/repos/romanz/bitcoin/commits/8cb0465defdf96a86b7485ff098d2ba70843e942",
      "created_at": "2025-05-19T05:08:47Z"
    },
    {
      "event": "commented",
      "id": 2899720171,
      "node_id": "IC_kwDOABII586s1jfr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2899720171",
      "actor": {
        "login": "adyshimony",
        "id": 6388409,
        "node_id": "MDQ6VXNlcjYzODg0MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6388409?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adyshimony",
        "html_url": "https://github.com/adyshimony",
        "followers_url": "https://api.github.com/users/adyshimony/followers",
        "following_url": "https://api.github.com/users/adyshimony/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adyshimony/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adyshimony/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adyshimony/subscriptions",
        "organizations_url": "https://api.github.com/users/adyshimony/orgs",
        "repos_url": "https://api.github.com/users/adyshimony/repos",
        "events_url": "https://api.github.com/users/adyshimony/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adyshimony/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-22T02:26:30Z",
      "updated_at": "2025-05-28T15:01:46Z",
      "author_association": "NONE",
      "body": "tACK \r\n\r\nhttps://github.com/romanz/bitcoin/commit/8cb0465defdf96a86b7485ff098d2ba70843e942\r\n\r\n\r\n\r\n\r\n\r\n<details><summary>Test</summary>\r\n<p>\r\n\r\n\r\n```\r\n$ ab -k -c 1 -n 100 http://localhost:8332/rest/spenttxouts/00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054.bin\r\nThis is ApacheBench, Version 2.3 <$Revision: 1903618 $>\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking localhost (be patient).....done\r\n\r\n\r\nServer Software:        \r\nServer Hostname:        localhost\r\nServer Port:            8332\r\n\r\nDocument Path:          /rest/spenttxouts/00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054.bin\r\nDocument Length:        195591 bytes\r\n\r\nConcurrency Level:      1\r\nTime taken for tests:   0.444 seconds\r\nComplete requests:      100\r\nFailed requests:        0\r\nKeep-Alive requests:    100\r\nTotal transferred:      19569800 bytes\r\nHTML transferred:       19559100 bytes\r\nRequests per second:    225.09 [#/sec] (mean)\r\nTime per request:       4.443 [ms] (mean)\r\nTime per request:       4.443 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          43016.55 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        0    0   0.0      0       0\r\nProcessing:     3    4   1.3      4       7\r\nWaiting:        3    4   1.3      4       7\r\nTotal:          3    4   1.3      4       7\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%      4\r\n  66%      5\r\n  75%      6\r\n  80%      6\r\n  90%      7\r\n  95%      7\r\n  98%      7\r\n  99%      7\r\n 100%      7 (longest request)\r\n\r\n\r\n\r\n\r\n\r\n\r\n```\r\n\r\n\r\nOn my machine there is a significant improvement , well done.\r\n\r\n```\r\n$ ab -k -c 1 -n 100 http://localhost:8332/rest/block/00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054.json\r\nThis is ApacheBench, Version 2.3 <$Revision: 1903618 $>\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking localhost (be patient).....done\r\n\r\n\r\nServer Software:        \r\nServer Hostname:        localhost\r\nServer Port:            8332\r\n\r\nDocument Path:          /rest/block/00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054.json\r\nDocument Length:        13278152 bytes\r\n\r\nConcurrency Level:      1\r\nTime taken for tests:   33.053 seconds\r\nComplete requests:      100\r\nFailed requests:        0\r\nKeep-Alive requests:    100\r\nTotal transferred:      1327825300 bytes\r\nHTML transferred:       1327815200 bytes\r\nRequests per second:    3.03 [#/sec] (mean)\r\nTime per request:       330.530 [ms] (mean)\r\nTime per request:       330.530 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          39231.07 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        0    0   0.0      0       0\r\nProcessing:   308  331  17.5    327     396\r\nWaiting:      297  315  16.7    310     386\r\nTotal:        308  331  17.5    327     396\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%    327\r\n  66%    334\r\n  75%    337\r\n  80%    339\r\n  90%    345\r\n  95%    377\r\n  98%    396\r\n  99%    396\r\n 100%    396 (longest request)\r\n\r\n\r\n```\r\n\r\n\r\n</p>\r\n</details> ",
      "user": {
        "login": "adyshimony",
        "id": 6388409,
        "node_id": "MDQ6VXNlcjYzODg0MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6388409?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adyshimony",
        "html_url": "https://github.com/adyshimony",
        "followers_url": "https://api.github.com/users/adyshimony/followers",
        "following_url": "https://api.github.com/users/adyshimony/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adyshimony/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adyshimony/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adyshimony/subscriptions",
        "organizations_url": "https://api.github.com/users/adyshimony/orgs",
        "repos_url": "https://api.github.com/users/adyshimony/repos",
        "events_url": "https://api.github.com/users/adyshimony/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adyshimony/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2899720171",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "reviewed",
      "id": 2860390650,
      "node_id": "PRR_kwDOABII586qfhj6",
      "url": null,
      "actor": null,
      "commit_id": "8cb0465defdf96a86b7485ff098d2ba70843e942",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Not sure we should export a custom binary format for undo data like this. At least there should be a JSON option?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2860390650",
      "submitted_at": "2025-05-22T09:00:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
    },
    {
      "event": "convert_to_draft",
      "id": 17774709049,
      "node_id": "CTDE_lADOABII5863BCN0zwAAAAQjdIk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17774709049",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-22T15:15:51Z"
    },
    {
      "event": "commented",
      "id": 2901770608,
      "node_id": "IC_kwDOABII586s9YFw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2901770608",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-22T15:58:42Z",
      "updated_at": "2025-05-22T17:14:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Not sure we should export a custom binary format for undo data like this.\r\n\r\nIn my opinion, using a binary format allows us to achieve significantly better performance when building [an external index](https://bit.ly/bindex-slides) (compared to using `/rest/block/HASH.json`). \r\n\r\nI have followed the example of the `/rest/getutxos/` endpoint, which also uses binary encoding when it returns a `std::vector<CCoin> outs`:\r\nhttps://github.com/bitcoin/bitcoin/blob/d2c9fc84e17120f186a54ef92bab76ea7e8d31b5/src/rest.cpp#L906\r\n\r\n\r\n\r\n",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2901770608",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "commented",
      "id": 2901770885,
      "node_id": "IC_kwDOABII586s9YKF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2901770885",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-22T15:58:48Z",
      "updated_at": "2025-05-22T16:11:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "> At least there should be a JSON option?\r\n\r\nSounds good, added in https://github.com/bitcoin/bitcoin/pull/32540/commits/9d7e23e2f505ce6cbe830fc607cf203b1a48ba0d:\r\n\r\nTested with:\r\n```sh\r\ncurl -s http://localhost:8332/rest/spenttxouts/00000000000034a32d25a4df37018194645cd62bf311b04ce322da9d800d4576.json | jq .\r\n```\r\n```json\r\n[\r\n  [],\r\n  [\r\n    {\r\n      \"value\": 19.9,\r\n      \"scriptPubKey\": {\r\n        \"asm\": \"OP_DUP OP_HASH160 9f1c396fc47b5e8127d8fca2cbe0da12fb65b18b OP_EQUALVERIFY OP_CHECKSIG\",\r\n        \"desc\": \"addr(1FWJFZiX8v1y6Mf14bzT2qTjzKgJ948gTN)#n6pdnxnu\",\r\n        \"hex\": \"76a9149f1c396fc47b5e8127d8fca2cbe0da12fb65b18b88ac\",\r\n        \"address\": \"1FWJFZiX8v1y6Mf14bzT2qTjzKgJ948gTN\",\r\n        \"type\": \"pubkeyhash\"\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    {\r\n      \"value\": 1.13,\r\n      \"scriptPubKey\": {\r\n        \"asm\": \"OP_DUP OP_HASH160 63ecfce5e3b086c6b4c9a8f68b64c70eaf4f579e OP_EQUALVERIFY OP_CHECKSIG\",\r\n        \"desc\": \"addr(1A7MoCV1q8L6K2k6sJLnPFDJSR3kmiyubF)#k7amcrpk\",\r\n        \"hex\": \"76a91463ecfce5e3b086c6b4c9a8f68b64c70eaf4f579e88ac\",\r\n        \"address\": \"1A7MoCV1q8L6K2k6sJLnPFDJSR3kmiyubF\",\r\n        \"type\": \"pubkeyhash\"\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    {\r\n      \"value\": 0.129,\r\n      \"scriptPubKey\": {\r\n        \"asm\": \"OP_DUP OP_HASH160 7c78cf144b8bf68372403cf5690aa49560275423 OP_EQUALVERIFY OP_CHECKSIG\",\r\n        \"desc\": \"addr(1CM9WjjPScLSfQaYXq9YY5VgqUh6bP87rw)#nrcg7jla\",\r\n        \"hex\": \"76a9147c78cf144b8bf68372403cf5690aa4956027542388ac\",\r\n        \"address\": \"1CM9WjjPScLSfQaYXq9YY5VgqUh6bP87rw\",\r\n        \"type\": \"pubkeyhash\"\r\n      }\r\n    }\r\n  ]\r\n]\r\n```\r\n",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2901770885",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "ready_for_review",
      "id": 17776485342,
      "node_id": "RFRE_lADOABII5863BCN0zwAAAAQjj6Pe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17776485342",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-22T17:04:07Z"
    },
    {
      "event": "commented",
      "id": 2906824816,
      "node_id": "IC_kwDOABII586tQqBw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2906824816",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-24T13:10:34Z",
      "updated_at": "2025-05-24T13:10:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "> would it be OK to implement it in a separate PR?\r\n\r\n\r\nI was thinking it might be not ideal to have this endpoint in addition to adding a content-type.  Unless the plan is to deprecate this after content type is added?  Maybe that's what is meant by the two conflicting types mentioned https://github.com/bitcoin/bitcoin/issues/32583#issuecomment-2901076206",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2906824816",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "commented",
      "id": 2906852632,
      "node_id": "IC_kwDOABII586tQw0Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2906852632",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-24T14:12:41Z",
      "updated_at": "2025-05-24T14:12:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I was thinking it might be not ideal to have this endpoint in addition to adding a content-type. Unless the plan is to deprecate this after content type is added? Maybe that's what is meant by the two conflicting types mentioned https://github.com/bitcoin/bitcoin/issues/32583#issuecomment-2901076206\r\n\r\nPlease disregard",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2906852632",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "reviewed",
      "id": 2867384351,
      "node_id": "PRR_kwDOABII586q6NAf",
      "url": null,
      "actor": null,
      "commit_id": "9d7e23e2f505ce6cbe830fc607cf203b1a48ba0d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits\r\n\r\nlgtm ACK 9d7e23e2f505ce6cbe830fc607cf203b1a48ba0d",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2867384351",
      "submitted_at": "2025-05-26T06:23:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
    },
    {
      "event": "review_requested",
      "id": 17808722261,
      "node_id": "RRE_lADOABII5863BCN0zwAAAAQle4lV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17808722261",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-26T06:24:02Z",
      "requested_reviewer": {
        "login": "tapcrafter",
        "id": 207358173,
        "node_id": "U_kgDODFwI3Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/207358173?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tapcrafter",
        "html_url": "https://github.com/tapcrafter",
        "followers_url": "https://api.github.com/users/tapcrafter/followers",
        "following_url": "https://api.github.com/users/tapcrafter/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tapcrafter/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tapcrafter/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tapcrafter/subscriptions",
        "organizations_url": "https://api.github.com/users/tapcrafter/orgs",
        "repos_url": "https://api.github.com/users/tapcrafter/repos",
        "events_url": "https://api.github.com/users/tapcrafter/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tapcrafter/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17808902879,
      "node_id": "HRFPE_lADOABII5863BCN0zwAAAAQlfkrf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17808902879",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "commit_url": "https://api.github.com/repos/romanz/bitcoin/commits/1e2b26e4f8498a08072104b12759d91ef8b410db",
      "created_at": "2025-05-26T06:36:52Z"
    },
    {
      "event": "commented",
      "id": 2908773615,
      "node_id": "IC_kwDOABII586tYFzv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2908773615",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-26T07:00:21Z",
      "updated_at": "2025-05-26T07:00:21Z",
      "author_association": "MEMBER",
      "body": "review ACK 1e2b26e4f8498a08072104b12759d91ef8b410db 👤\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: review ACK 1e2b26e4f8498a08072104b12759d91ef8b410db 👤\r\numcSMyJu+op/g4YObmcufkFh2Q/WLwQJSqCZJWjqXxYHLJJ8sJUi5i8pxOkmKaAisZihoMJKWGgqClMx/SwBCg==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2908773615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "reviewed",
      "id": 2868679170,
      "node_id": "PRR_kwDOABII586q_JIC",
      "url": null,
      "actor": null,
      "commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2868679170",
      "submitted_at": "2025-05-26T14:52:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
    },
    {
      "event": "convert_to_draft",
      "id": 17818695124,
      "node_id": "CTDE_lADOABII5863BCN0zwAAAAQmE7XU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17818695124",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-26T19:15:36Z"
    },
    {
      "event": "reviewed",
      "id": 2867457828,
      "node_id": "PRR_kwDOABII586q6e8k",
      "url": null,
      "actor": null,
      "commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2867457828",
      "submitted_at": "2025-05-27T06:22:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17854789044,
      "node_id": "HRFPE_lADOABII5863BCN0zwAAAAQoOnW0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17854789044",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d5828eadc39772bf825eb4141340a281f4a490a7",
      "commit_url": "https://api.github.com/repos/romanz/bitcoin/commits/d5828eadc39772bf825eb4141340a281f4a490a7",
      "created_at": "2025-05-28T16:56:28Z"
    },
    {
      "event": "ready_for_review",
      "id": 17871473619,
      "node_id": "RFRE_lADOABII5863BCN0zwAAAAQpOQvT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17871473619",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-29T16:26:51Z"
    },
    {
      "event": "review_requested",
      "id": 17871476094,
      "node_id": "RRE_lADOABII5863BCN0zwAAAAQpORV-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17871476094",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-29T16:27:02Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 17871476500,
      "node_id": "RRE_lADOABII5863BCN0zwAAAAQpORcU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17871476500",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-29T16:27:04Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17913732801,
      "node_id": "HRFPE_lADOABII5863BCN0zwAAAAQrvd7B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17913732801",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "62e68bd46726dc17b657c4c334b06351fc761868",
      "commit_url": "https://api.github.com/repos/romanz/bitcoin/commits/62e68bd46726dc17b657c4c334b06351fc761868",
      "created_at": "2025-06-01T12:35:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18027152545,
      "node_id": "HRFPE_lADOABII5863BCN0zwAAAAQygISh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18027152545",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "commit_url": "https://api.github.com/repos/romanz/bitcoin/commits/1e2b26e4f8498a08072104b12759d91ef8b410db",
      "created_at": "2025-06-06T18:31:06Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ0ZTIxMmU4YTY5ZWExMThhY2I2Y2FhMWE3ZWZlNjRhNzdiZGZkZDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2",
      "tree": {
        "sha": "fcde45ffaf4c08ed719841941f07628323f22473",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcde45ffaf4c08ed719841941f07628323f22473"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fcde45ffaf4c08ed719841941f07628323f22473\nparent c461d1528758df8a38b4c2c18b98591e1de8c9c0\nauthor Roman Zeyde <me@romanzey.de> 1719769911 +0300\ncommitter Roman Zeyde <me@romanzey.de> 1749316670 +0300\n\nrest: fetch spent transaction outputs by blockhash\n\nToday, it is possible to fetch a block's spent prevouts in order to\nbuild an external index by using the `/rest/block/HASH.json` endpoint.\nHowever, its performance is low due to JSON serialization overhead.\n\nWe can significantly optimize it by adding a new REST endpoint, using\na binary response format:\n\n```\n$ BLOCKHASH=00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054\n\n$ ab -k -c 1 -n 100 http://localhost:8332/rest/block/$BLOCKHASH.json\nDocument Length:        13278152 bytes\nRequests per second:    3.53 [#/sec] (mean)\nTime per request:       283.569 [ms] (mean)\n\n$ ab -k -c 1 -n 10000 http://localhost:8332/rest/spentoutputs/$BLOCKHASH.bin\nDocument Length:        195591 bytes\nRequests per second:    254.47 [#/sec] (mean)\nTime per request:       3.930 [ms] (mean)\n```\n\nCurrently, this PR is being used and tested by Bindex:\n\n * https://github.com/romanz/bindex-rs\n\nThis PR would allow to improve the performance of external indexers\nsuch as electrs, ElectrumX, Fulcrum and Blockbook:\n\n * https://github.com/romanz/electrs (also https://github.com/Blockstream/electrs and https://github.com/mempool/electrs)\n * https://github.com/spesmilo/electrumx\n * https://github.com/cculianu/Fulcrum\n * https://github.com/trezor/blockbook\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niIUEABMIAC0WIQQVyMNXSuTx4l8/NcWHyuX6RpF8uwUCaER0Qg8cbWVAcm9tYW56\nZXkuZGUACgkQh8rl+kaRfLtFCwD+M9yxnbHmOGxIPIl4fIOoYahj69G97DhWTwVK\nTONjNtYA/2ofbNH7oITDsw2ROr88WjOhmANLLUVS2OFSkN7NtrEA\n=fBXn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c461d1528758df8a38b4c2c18b98591e1de8c9c0",
          "sha": "c461d1528758df8a38b4c2c18b98591e1de8c9c0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c461d1528758df8a38b4c2c18b98591e1de8c9c0"
        }
      ],
      "message": "rest: fetch spent transaction outputs by blockhash\n\nToday, it is possible to fetch a block's spent prevouts in order to\nbuild an external index by using the `/rest/block/HASH.json` endpoint.\nHowever, its performance is low due to JSON serialization overhead.\n\nWe can significantly optimize it by adding a new REST endpoint, using\na binary response format:\n\n```\n$ BLOCKHASH=00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054\n\n$ ab -k -c 1 -n 100 http://localhost:8332/rest/block/$BLOCKHASH.json\nDocument Length:        13278152 bytes\nRequests per second:    3.53 [#/sec] (mean)\nTime per request:       283.569 [ms] (mean)\n\n$ ab -k -c 1 -n 10000 http://localhost:8332/rest/spentoutputs/$BLOCKHASH.bin\nDocument Length:        195591 bytes\nRequests per second:    254.47 [#/sec] (mean)\nTime per request:       3.930 [ms] (mean)\n```\n\nCurrently, this PR is being used and tested by Bindex:\n\n * https://github.com/romanz/bindex-rs\n\nThis PR would allow to improve the performance of external indexers\nsuch as electrs, ElectrumX, Fulcrum and Blockbook:\n\n * https://github.com/romanz/electrs (also https://github.com/Blockstream/electrs and https://github.com/mempool/electrs)\n * https://github.com/spesmilo/electrumx\n * https://github.com/cculianu/Fulcrum\n * https://github.com/trezor/blockbook",
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2025-06-07T17:17:50Z"
      },
      "author": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2024-06-30T17:51:51Z"
      },
      "sha": "d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18037838609,
      "node_id": "HRFPE_lADOABII5863BCN0zwAAAAQzI5MR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18037838609",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2",
      "commit_url": "https://api.github.com/repos/romanz/bitcoin/commits/d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2",
      "created_at": "2025-06-07T17:21:59Z"
    },
    {
      "event": "commented",
      "id": 2955934513,
      "node_id": "IC_kwDOABII586wL_sx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2955934513",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-09T14:17:07Z",
      "updated_at": "2025-06-09T14:17:07Z",
      "author_association": "MEMBER",
      "body": "Only change since my previous review is removing the cast.\r\n\r\nre-ACK d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2 🚘\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: re-ACK d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2 🚘\r\nVxfR7wSBgPaQX1vc+ro41f4+N2bwayfQpgVJ9S5SISkZPNToHtNZY3B+nnVzO87DK6EV+ID3Kdx4kTA7FdM2DA==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2955934513",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "reviewed",
      "id": 2929463856,
      "node_id": "PRR_kwDOABII586unBIw",
      "url": null,
      "actor": null,
      "commit_id": "d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2\r\n\r\nAnd I guess this should get a release note?",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2929463856",
      "submitted_at": "2025-06-15T13:18:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM0ODg0NmVjNDE2OWY3NDlkMjhkYTA1ZGU4NDljNDNhNDg4YzNhNzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c48846ec4169f749d28da05de849c43a488c3a70",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c48846ec4169f749d28da05de849c43a488c3a70",
      "tree": {
        "sha": "d5b4aa984169bd8e91f6c10376cfcdcaae09b701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5b4aa984169bd8e91f6c10376cfcdcaae09b701"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d5b4aa984169bd8e91f6c10376cfcdcaae09b701\nparent d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2\nauthor Roman Zeyde <me@romanzey.de> 1750011439 +0300\ncommitter Roman Zeyde <me@romanzey.de> 1750011617 +0300\n\ndoc: add release notes for #32540\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niIUEABMIAC0WIQQVyMNXSuTx4l8/NcWHyuX6RpF8uwUCaE8O4g8cbWVAcm9tYW56\nZXkuZGUACgkQh8rl+kaRfLttlgEAiD7ZqjZCmJFIiKUQkqbAmoHOeG4oLcJ5Dwp6\n6/TnASgA/i4K5vwVKHHvzjj9B3yoaxO6ZUYFJNFNhI/P21bTpvSS\n=4Lyg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2",
          "sha": "d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e212e8a69ea118acb6caa1a7efe64a77bdfdd2"
        }
      ],
      "message": "doc: add release notes for #32540",
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2025-06-15T18:20:17Z"
      },
      "author": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2025-06-15T18:17:19Z"
      },
      "sha": "c48846ec4169f749d28da05de849c43a488c3a70"
    },
    {
      "event": "commented",
      "id": 2974495708,
      "node_id": "IC_kwDOABII586xSzPc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2974495708",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-15T18:21:13Z",
      "updated_at": "2025-06-15T18:21:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Many thanks!\r\nAdded a release note in https://github.com/bitcoin/bitcoin/pull/32540/commits/c48846ec4169f749d28da05de849c43a488c3a70 - please let me know if it's OK :)",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2974495708",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "commented",
      "id": 2975395180,
      "node_id": "IC_kwDOABII586xWO1s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2975395180",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T07:26:03Z",
      "updated_at": "2025-06-16T07:26:03Z",
      "author_association": "MEMBER",
      "body": "re-ACK c48846ec4169f749d28da05de849c43a488c3a70 📶\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: re-ACK c48846ec4169f749d28da05de849c43a488c3a70 📶\r\nuGe86fOs2dFzU1UXO6ZFgLrq+AbqZ4rMcAlNYGwHYl6XqYjtam3F0q+pLXgYCFaqe9RI9XDXx/yPlH7m7HZXCA==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#issuecomment-2975395180",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32540"
    },
    {
      "event": "review_requested",
      "id": 18163879177,
      "node_id": "RRE_lADOABII5863BCN0zwAAAAQ6ps0J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18163879177",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T07:26:08Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2930966893,
      "node_id": "PRR_kwDOABII586uswFt",
      "url": null,
      "actor": null,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Re-ACK c48846ec4169f749d28da05de849c43a488c3a70",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#pullrequestreview-2930966893",
      "submitted_at": "2025-06-16T07:42:42Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094516153",
      "pull_request_review_id": 2848945630,
      "id": 2094516153,
      "node_id": "PRRC_kwDOABII585818e5",
      "diff_hunk": "@@ -281,6 +282,69 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+static bool rest_spent_outputs(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spentoutputs/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spentoutputs/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash)\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) return false;\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    DataStream ssSpentResponse{};\n+    WriteCompactSize(ssSpentResponse, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(ssSpentResponse, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(ssSpentResponse, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(ssSpentResponse);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "ffe571f461930b7a05a3cf9f7128e843ea9f7e2d",
      "in_reply_to_id": null,
      "user": {
        "login": "tapcrafter",
        "id": 207358173,
        "node_id": "U_kgDODFwI3Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/207358173?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tapcrafter",
        "html_url": "https://github.com/tapcrafter",
        "followers_url": "https://api.github.com/users/tapcrafter/followers",
        "following_url": "https://api.github.com/users/tapcrafter/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tapcrafter/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tapcrafter/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tapcrafter/subscriptions",
        "organizations_url": "https://api.github.com/users/tapcrafter/orgs",
        "repos_url": "https://api.github.com/users/tapcrafter/repos",
        "events_url": "https://api.github.com/users/tapcrafter/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tapcrafter/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there a way to document the output of this REST method?\r\nFrom the name alone I would've expected it to return a list of outpoints.\r\nBut it seems to return a list of transaction outputs (`CTxOut` or `Coin` depending on the context).\r\nWhich absolutely makes sense given the use case.\r\nSo perhaps a different name would help make that more clear? Perhaps `rest/spenttxouts`?",
      "created_at": "2025-05-18T12:53:36Z",
      "updated_at": "2025-05-18T13:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2094516153",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094516153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094845671",
      "pull_request_review_id": 2849395124,
      "id": 2094845671,
      "node_id": "PRRC_kwDOABII58583M7n",
      "diff_hunk": "@@ -281,6 +282,69 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+static bool rest_spent_outputs(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spentoutputs/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spentoutputs/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash)\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) return false;\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    DataStream ssSpentResponse{};\n+    WriteCompactSize(ssSpentResponse, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(ssSpentResponse, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(ssSpentResponse, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(ssSpentResponse);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "ffe571f461930b7a05a3cf9f7128e843ea9f7e2d",
      "in_reply_to_id": 2094516153,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> So perhaps a different name would help make that more clear? Perhaps rest/spenttxouts?\r\n\r\nSounds good, thanks!\r\nFixed in 8cb0465def.",
      "created_at": "2025-05-19T05:09:12Z",
      "updated_at": "2025-05-19T05:39:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2094845671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094845671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102026426",
      "pull_request_review_id": 2860390650,
      "id": 2102026426,
      "node_id": "PRRC_kwDOABII5859SmC6",
      "diff_hunk": "@@ -281,6 +282,69 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "8cb0465defdf96a86b7485ff098d2ba70843e942",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: braces required",
      "created_at": "2025-05-22T09:00:04Z",
      "updated_at": "2025-05-22T09:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2102026426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102026426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102866377",
      "pull_request_review_id": 2861723002,
      "id": 2102866377,
      "node_id": "PRRC_kwDOABII5859VzHJ",
      "diff_hunk": "@@ -281,6 +282,69 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "8cb0465defdf96a86b7485ff098d2ba70843e942",
      "in_reply_to_id": 2102026426,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, fixed in https://github.com/bitcoin/bitcoin/pull/32540/commits/9d7e23e2f505ce6cbe830fc607cf203b1a48ba0d.",
      "created_at": "2025-05-22T15:39:25Z",
      "updated_at": "2025-05-22T15:39:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2102866377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102866377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2106631113",
      "pull_request_review_id": 2867384351,
      "id": 2106631113,
      "node_id": "PRRC_kwDOABII5859kKPJ",
      "diff_hunk": "@@ -281,6 +282,111 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream &stream, const CBlockUndo &block_undo) {",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "9d7e23e2f505ce6cbe830fc607cf203b1a48ba0d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: clang-format new code?",
      "created_at": "2025-05-26T06:21:20Z",
      "updated_at": "2025-05-26T06:23:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2106631113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2106631113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2106654018",
      "pull_request_review_id": 2867418869,
      "id": 2106654018,
      "node_id": "PRRC_kwDOABII5859kP1C",
      "diff_hunk": "@@ -281,6 +282,111 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream &stream, const CBlockUndo &block_undo) {",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "9d7e23e2f505ce6cbe830fc607cf203b1a48ba0d",
      "in_reply_to_id": 2106631113,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! Fixed in 1e2b26e4f8.",
      "created_at": "2025-05-26T06:37:08Z",
      "updated_at": "2025-05-26T06:37:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2106654018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2106654018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2106681301",
      "pull_request_review_id": 2867457828,
      "id": 2106681301,
      "node_id": "PRRC_kwDOABII5859kWfV",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    switch (rf) {\n+    case RESTResponseFormat::BINARY: {\n+        DataStream ssSpentResponse{};\n+        SerializeBlockUndo(ssSpentResponse, block_undo);\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, std::as_bytes(std::span{ssSpentResponse}));",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can remove the casts",
      "created_at": "2025-05-26T06:55:49Z",
      "updated_at": "2025-05-27T06:22:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2106681301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2106681301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107503689",
      "pull_request_review_id": 2868679170,
      "id": 2107503689,
      "node_id": "PRRC_kwDOABII5859nfRJ",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would it be useful if we'd have a `ReadRawBlockUndo`? Similarly to `ReadRawBlock` it could just read the data without any hash integrity checks and without an extra serialization roundtrip. Our internal serialization just skips over the coinbase, but I don't feel like that would be surfacing too much detail either.",
      "created_at": "2025-05-26T14:51:40Z",
      "updated_at": "2025-05-26T14:52:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2107503689",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107503689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107711484",
      "pull_request_review_id": 2868970524,
      "id": 2107711484,
      "node_id": "PRRC_kwDOABII5859oR_8",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks @TheCharlatan! \r\nIt should indeed improve the read performance :)\r\n\r\nWould it be OK if I would open a separate PR for adding `ReadRawBlockUndo`?",
      "created_at": "2025-05-26T18:07:20Z",
      "updated_at": "2025-05-26T18:07:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2107711484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107711484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107740514",
      "pull_request_review_id": 2869010696,
      "id": 2107740514,
      "node_id": "PRRC_kwDOABII5859oZFi",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it would be ok, but we'd have to change the binary format here to skip over the empty `0` entry for the coinbase?",
      "created_at": "2025-05-26T18:43:53Z",
      "updated_at": "2025-05-26T18:43:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2107740514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107740514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107774051",
      "pull_request_review_id": 2869054239,
      "id": 2107774051,
      "node_id": "PRRC_kwDOABII5859ohRj",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> but we'd have to change the binary format here to skip over the empty 0 entry for the coinbase?\r\n\r\nYes - I'll adapt this PR to return the undo data from storage (with as little overhead as possible).\r\n\r\nIndeed, the binary format will be `vector<vector<Coin>>`[^1], for the all block's transactions (except the first one).\r\n\r\n[^1]: https://github.com/bitcoin/bitcoin/blob/638a4c0bd8b53766faeb437244b2aae4eed28dcf/src/undo.h#L51-L68",
      "created_at": "2025-05-26T19:11:03Z",
      "updated_at": "2025-05-26T19:11:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2107774051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107774051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108280953",
      "pull_request_review_id": 2867457828,
      "id": 2108280953,
      "node_id": "PRRC_kwDOABII5859qdB5",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I wonder if we really want to commit to the storage serialization on the rest interface. Currently in this pull, it will be re-serialized, so there is no dependency. However, with this suggestion, and a future change in the storage serialization, there will be a breaking change on the rest interface, or alternatively a re-serialization again (back to what this pull is doing).\r\n\r\nNo strong opinion, just mentioning it here.\r\n\r\nMaybe a benchmark could help to decide if it is worth it?",
      "created_at": "2025-05-27T06:22:36Z",
      "updated_at": "2025-05-27T06:22:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2108280953",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108280953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109843001",
      "pull_request_review_id": 2872062738,
      "id": 2109843001,
      "node_id": "PRRC_kwDOABII5859waY5",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Maybe a benchmark could help to decide if it is worth it?\r\n\r\nReading the undo data directly from storage (i.e. without re-serialization) results in ~3.2x requests per second, and even a bit less data sent over the network:\r\n```\r\nDocument Path:          /rest/spenttxouts/00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054.bin\r\nDocument Length:        184971 bytes\r\n\r\nConcurrency Level:      1\r\nTime taken for tests:   8.060 seconds\r\nComplete requests:      10000\r\nFailed requests:        0\r\nKeep-Alive requests:    10000\r\nTotal transferred:      1850780000 bytes\r\nHTML transferred:       1849710000 bytes\r\nRequests per second:    1240.71 [#/sec] (mean)\r\nTime per request:       0.806 [ms] (mean)\r\nTime per request:       0.806 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          224245.94 [Kbytes/sec] received\r\n```\r\n\r\nWith re-serialization (1e2b26e4f8):\r\n```\r\nDocument Path:          /rest/spenttxouts/00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054.bin\r\nDocument Length:        195591 bytes\r\n\r\nConcurrency Level:      1\r\nTime taken for tests:   26.052 seconds\r\nComplete requests:      10000\r\nFailed requests:        0\r\nKeep-Alive requests:    10000\r\nTotal transferred:      1956980000 bytes\r\nHTML transferred:       1955910000 bytes\r\nRequests per second:    383.84 [#/sec] (mean)\r\nTime per request:       2.605 [ms] (mean)\r\nTime per request:       2.605 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          73356.44 [Kbytes/sec] received\r\n```\r\n\r\nSo I am in favor of adding `ReadRawBlockUndo` :)",
      "created_at": "2025-05-27T18:07:44Z",
      "updated_at": "2025-05-28T05:05:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2109843001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109843001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109863900",
      "pull_request_review_id": 2872097036,
      "id": 2109863900,
      "node_id": "PRRC_kwDOABII5859wffc",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> However, with this suggestion, and a future change in the storage serialization, there will be a breaking change on the rest interface, or alternatively a re-serialization again (back to what this pull is doing).\r\n\r\nI think that non-stable REST output format ~is~ would be OK, in case it enables performant data retrieval.",
      "created_at": "2025-05-27T18:20:04Z",
      "updated_at": "2025-05-28T04:30:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2109863900",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109863900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109866540",
      "pull_request_review_id": 2872101370,
      "id": 2109866540,
      "node_id": "PRRC_kwDOABII5859wgIs",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    switch (rf) {\n+    case RESTResponseFormat::BINARY: {\n+        DataStream ssSpentResponse{};\n+        SerializeBlockUndo(ssSpentResponse, block_undo);\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, std::as_bytes(std::span{ssSpentResponse}));",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2106681301,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, good catch! Will update on the next rebase.",
      "created_at": "2025-05-27T18:21:21Z",
      "updated_at": "2025-05-27T18:21:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2109866540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109866540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2110009543",
      "pull_request_review_id": 2872322159,
      "id": 2110009543,
      "node_id": "PRRC_kwDOABII5859xDDH",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    switch (rf) {\n+    case RESTResponseFormat::BINARY: {\n+        DataStream ssSpentResponse{};\n+        SerializeBlockUndo(ssSpentResponse, block_undo);\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, std::as_bytes(std::span{ssSpentResponse}));",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2106681301,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(If you want, you can also remove them in other places in this file. This way, the file doesn't have to be touched again for that reason.)",
      "created_at": "2025-05-27T19:20:45Z",
      "updated_at": "2025-05-27T19:20:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2110009543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2110009543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2111303331",
      "pull_request_review_id": 2874162033,
      "id": 2111303331,
      "node_id": "PRRC_kwDOABII58591-6j",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Reading the undo data directly from storage (i.e. without re-serialization) results in ~3.2x requests per second, and even a bit less data sent over the network:\r\n\r\nHmm. I am not sure if this is representative of the end-to-end performance. Simply fetching the raw (compressed) data is missing the decompression overhead. The end product can probably not do much with the compressed data by itself, so the benchmark should include the decompression as well.",
      "created_at": "2025-05-28T08:48:24Z",
      "updated_at": "2025-05-28T08:48:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2111303331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2111303331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2114255993",
      "pull_request_review_id": 2878789136,
      "id": 2114255993,
      "node_id": "PRRC_kwDOABII585-BPx5",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have benchmarked both approaches (reading block undo data directly from storage and returning re-serialized spent txouts) using https://github.com/bitcoin/bitcoin/pull/32540/commits/d5828eadc39772bf825eb4141340a281f4a490a7 with https://github.com/romanz/bench-rest/commit/f90aaddf1c3a0c0687f373cc89b0c343e35df739:\r\n\r\n## Fetching block undo data (using `ReadRawBlockUndo`)\r\n```\r\n$ time cargo run --release --bin blockundo\r\n    Finished `release` profile [optimized] target(s) in 0.02s\r\n     Running `target/release/blockundo`\r\n[700000..701000) 1202[us/call] Stats { total: 5117052, value: 4220850331315943, by_type: [1545802, 2028814, 8, 5, 0, 0, 1542423] }\r\n[701000..702000) 1248[us/call] Stats { total: 5016564, value: 3238540334293590, by_type: [1485990, 2015971, 4, 7, 0, 0, 1514592] }\r\n[702000..703000) 1364[us/call] Stats { total: 5303401, value: 2664566072512831, by_type: [1586091, 2071826, 2, 4, 0, 0, 1645478] }\r\n[703000..704000) 1378[us/call] Stats { total: 5666124, value: 2400056525309041, by_type: [1671073, 2216971, 2, 10, 0, 1, 1778067] }\r\n[704000..705000) 1373[us/call] Stats { total: 5835815, value: 2765124924840842, by_type: [1607472, 2347087, 4, 17, 2, 1, 1881232] }\r\n[705000..706000) 1283[us/call] Stats { total: 5571989, value: 2720571523603325, by_type: [1438779, 2236071, 4, 8, 2, 0, 1897125] }\r\n[706000..707000) 1263[us/call] Stats { total: 5371702, value: 2113610858419429, by_type: [1416760, 2128942, 2, 4, 0, 1, 1825993] }\r\n[707000..708000) 1318[us/call] Stats { total: 5559416, value: 2439623089965085, by_type: [1492894, 2172092, 4, 10, 0, 2, 1894414] }\r\n[708000..709000) 1330[us/call] Stats { total: 5611331, value: 2946515191901043, by_type: [1406453, 2246277, 4, 11, 0, 1, 1958585] }\r\n[709000..710000) 1317[us/call] Stats { total: 5589581, value: 3176856863850345, by_type: [1289761, 2315330, 4, 12, 0, 0, 1984474] }\r\n\r\nreal\t0m14.856s\r\nuser\t0m8.244s\r\nsys\t0m1.835s\r\n```\r\n\r\n## Fetching re-serialized spent txouts (using `ReadBlockUndo`)\r\n```\r\n$ time cargo run --release --bin spenttxouts\r\n    Finished `release` profile [optimized] target(s) in 0.02s\r\n     Running `target/release/spenttxouts`\r\n[700000..701000) 3339[us/call] Stats { total: 5117052, value: 4220850331315943 }\r\n[701000..702000) 3200[us/call] Stats { total: 5016564, value: 3238540334293590 }\r\n[702000..703000) 3484[us/call] Stats { total: 5303401, value: 2664566072512831 }\r\n[703000..704000) 3664[us/call] Stats { total: 5666124, value: 2400056525309041 }\r\n[704000..705000) 3657[us/call] Stats { total: 5835815, value: 2765124924840842 }\r\n[705000..706000) 3564[us/call] Stats { total: 5571989, value: 2720571523603325 }\r\n[706000..707000) 3471[us/call] Stats { total: 5371702, value: 2113610858419429 }\r\n[707000..708000) 3597[us/call] Stats { total: 5559416, value: 2439623089965085 }\r\n[708000..709000) 3414[us/call] Stats { total: 5611331, value: 2946515191901043 }\r\n[709000..710000) 3560[us/call] Stats { total: 5589581, value: 3176856863850345 }\r\n\r\nreal\t0m37.479s\r\nuser\t0m5.743s\r\nsys\t0m3.111s\r\n```\r\nIndeed, decompression requires more work on the client side, but the overall latency improvement is still significant:\r\n- `ab` benchmark shows ~3.2x per-call latency improvement\r\n- this benchmark shows ~2.5x per-call latency improvement",
      "created_at": "2025-05-29T15:53:35Z",
      "updated_at": "2025-05-29T16:43:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2114255993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2114255993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2114618859",
      "pull_request_review_id": 2879398326,
      "id": 2114618859,
      "node_id": "PRRC_kwDOABII585-CoXr",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I do think it would be fine if the binary format changes, which given the compressor is fairly likely. If we assume users in the worst case can always use the kernel library to deserialize the undo data in the future, that would guarantee that they will have a  versioned decoder for it. Would this performance difference when using `ReadRawBlockUndo` be significant in the grand scheme when it comes to building an electrs index romanz?",
      "created_at": "2025-05-29T19:31:27Z",
      "updated_at": "2025-05-29T19:31:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2114618859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2114618859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2117417395",
      "pull_request_review_id": 2883540929,
      "id": 2117417395,
      "node_id": "PRRC_kwDOABII585-NTmz",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will prepare a benchmark to compare both formats :)",
      "created_at": "2025-05-31T06:41:02Z",
      "updated_at": "2025-05-31T06:41:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2117417395",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2117417395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2119135815",
      "pull_request_review_id": 2885615175,
      "id": 2119135815,
      "node_id": "PRRC_kwDOABII585-T3JH",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/pull/32540/commits/62e68bd46726dc17b657c4c334b06351fc761868, I have added `/blockundo/` REST endpoint (which is using `ReadBlockRawUndo` and **client-side** deserilalization).\r\n\r\nI have used https://github.com/romanz/bench-rest/commit/084e07764fdb76d4bc25d2090769c0ef3f0a44c5 to benchmark it against `/spenttxouts/` REST endpoint (which is using `ReadBlockUndo` and **server-side** deserialization) by reading 10k blocks from height=800000.\r\n\r\nIn addition, I have also benchmarked `/block/` REST endpoint which is needed to build an external address index (under development in [Bindex](https://github.com/romanz/bindex-rs), which should improve [electrs](https://github.com/electrs) index performance).\r\n\r\nEach benchmark was run 3 times.\r\nThe block & undo data was read from [Samsung 980 1 TB SSD NVMe M.2](https://www.samsung.com/us/computing/memory-storage/solid-state-drives/980-pcie-3-0-nvme-gaming-ssd-1tb-mz-v8v1t0b-am/).\r\n\r\n<details>\r\n\r\n<summary> /rest/blockundo/ takes ~1.6 ms/block & 58% client-side CPU </summary>\r\n\r\n```\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type block-undo --start 800000 --count 10000\r\n[2025-06-01T11:58:45Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T11:58:47Z INFO  bench] BlockUndo @801000 1523[us/call]\r\n[2025-06-01T11:58:48Z INFO  bench] BlockUndo @802000 1556[us/call]\r\n[2025-06-01T11:58:50Z INFO  bench] BlockUndo @803000 1527[us/call]\r\n[2025-06-01T11:58:52Z INFO  bench] BlockUndo @804000 1945[us/call]\r\n[2025-06-01T11:58:53Z INFO  bench] BlockUndo @805000 1583[us/call]\r\n[2025-06-01T11:58:55Z INFO  bench] BlockUndo @806000 1522[us/call]\r\n[2025-06-01T11:58:56Z INFO  bench] BlockUndo @807000 1477[us/call]\r\n[2025-06-01T11:58:58Z INFO  bench] BlockUndo @808000 1474[us/call]\r\n[2025-06-01T11:58:59Z INFO  bench] BlockUndo @809000 1472[us/call]\r\n[2025-06-01T11:59:01Z INFO  bench] BlockUndo @810000 1691[us/call]\r\n7.99user 1.42system 0:16.05elapsed 58%CPU (0avgtext+0avgdata 36676maxresident)k\r\n113416inputs+448outputs (144major+8848minor)pagefaults 0swaps\r\n\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type block-undo --start 800000 --count 10000\r\n[2025-06-01T11:59:14Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T11:59:16Z INFO  bench] BlockUndo @801000 1951[us/call]\r\n[2025-06-01T11:59:18Z INFO  bench] BlockUndo @802000 1670[us/call]\r\n[2025-06-01T11:59:20Z INFO  bench] BlockUndo @803000 1645[us/call]\r\n[2025-06-01T11:59:21Z INFO  bench] BlockUndo @804000 1418[us/call]\r\n[2025-06-01T11:59:23Z INFO  bench] BlockUndo @805000 1549[us/call]\r\n[2025-06-01T11:59:24Z INFO  bench] BlockUndo @806000 1509[us/call]\r\n[2025-06-01T11:59:26Z INFO  bench] BlockUndo @807000 1464[us/call]\r\n[2025-06-01T11:59:27Z INFO  bench] BlockUndo @808000 1476[us/call]\r\n[2025-06-01T11:59:29Z INFO  bench] BlockUndo @809000 1578[us/call]\r\n[2025-06-01T11:59:30Z INFO  bench] BlockUndo @810000 1792[us/call]\r\n8.09user 1.39system 0:16.33elapsed 58%CPU (0avgtext+0avgdata 36448maxresident)k\r\n113120inputs+0outputs (144major+8837minor)pagefaults 0swaps\r\n\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type block-undo --start 800000 --count 10000\r\n[2025-06-01T11:59:35Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T11:59:36Z INFO  bench] BlockUndo @801000 1599[us/call]\r\n[2025-06-01T11:59:38Z INFO  bench] BlockUndo @802000 1489[us/call]\r\n[2025-06-01T11:59:39Z INFO  bench] BlockUndo @803000 1522[us/call]\r\n[2025-06-01T11:59:41Z INFO  bench] BlockUndo @804000 1496[us/call]\r\n[2025-06-01T11:59:42Z INFO  bench] BlockUndo @805000 1529[us/call]\r\n[2025-06-01T11:59:44Z INFO  bench] BlockUndo @806000 1580[us/call]\r\n[2025-06-01T11:59:46Z INFO  bench] BlockUndo @807000 1546[us/call]\r\n[2025-06-01T11:59:47Z INFO  bench] BlockUndo @808000 1779[us/call]\r\n[2025-06-01T11:59:49Z INFO  bench] BlockUndo @809000 1453[us/call]\r\n[2025-06-01T11:59:51Z INFO  bench] BlockUndo @810000 1747[us/call]\r\n7.91user 1.28system 0:16.00elapsed 57%CPU (0avgtext+0avgdata 36828maxresident)k\r\n113120inputs+0outputs (144major+8845minor)pagefaults 0swaps\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary> /rest/spenttxouts/ takes ~4.6 ms/block & 18% client-side CPU </summary>\r\n\r\n```\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type spent-txouts --start 800000 --count 10000\r\n[2025-06-01T12:00:12Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T12:00:16Z INFO  bench] SpentTxouts @801000 4664[us/call]\r\n[2025-06-01T12:00:21Z INFO  bench] SpentTxouts @802000 4566[us/call]\r\n[2025-06-01T12:00:25Z INFO  bench] SpentTxouts @803000 4559[us/call]\r\n[2025-06-01T12:00:30Z INFO  bench] SpentTxouts @804000 4362[us/call]\r\n[2025-06-01T12:00:34Z INFO  bench] SpentTxouts @805000 4507[us/call]\r\n[2025-06-01T12:00:38Z INFO  bench] SpentTxouts @806000 4211[us/call]\r\n[2025-06-01T12:00:43Z INFO  bench] SpentTxouts @807000 4659[us/call]\r\n[2025-06-01T12:00:48Z INFO  bench] SpentTxouts @808000 4509[us/call]\r\n[2025-06-01T12:00:52Z INFO  bench] SpentTxouts @809000 4409[us/call]\r\n[2025-06-01T12:00:57Z INFO  bench] SpentTxouts @810000 5108[us/call]\r\n6.14user 2.24system 0:45.82elapsed 18%CPU (0avgtext+0avgdata 36628maxresident)k\r\n113408inputs+0outputs (144major+8873minor)pagefaults 0swaps\r\n\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type spent-txouts --start 800000 --count 10000\r\n[2025-06-01T12:01:13Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T12:01:18Z INFO  bench] SpentTxouts @801000 4603[us/call]\r\n[2025-06-01T12:01:23Z INFO  bench] SpentTxouts @802000 4644[us/call]\r\n[2025-06-01T12:01:27Z INFO  bench] SpentTxouts @803000 4480[us/call]\r\n[2025-06-01T12:01:32Z INFO  bench] SpentTxouts @804000 4709[us/call]\r\n[2025-06-01T12:01:36Z INFO  bench] SpentTxouts @805000 4472[us/call]\r\n[2025-06-01T12:01:41Z INFO  bench] SpentTxouts @806000 4549[us/call]\r\n[2025-06-01T12:01:46Z INFO  bench] SpentTxouts @807000 4642[us/call]\r\n[2025-06-01T12:01:50Z INFO  bench] SpentTxouts @808000 4535[us/call]\r\n[2025-06-01T12:01:54Z INFO  bench] SpentTxouts @809000 4035[us/call]\r\n[2025-06-01T12:01:59Z INFO  bench] SpentTxouts @810000 4491[us/call]\r\n6.10user 2.18system 0:45.43elapsed 18%CPU (0avgtext+0avgdata 36676maxresident)k\r\n113096inputs+0outputs (144major+8853minor)pagefaults 0swaps\r\n\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type spent-txouts --start 800000 --count 10000\r\n[2025-06-01T12:02:21Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T12:02:25Z INFO  bench] SpentTxouts @801000 4245[us/call]\r\n[2025-06-01T12:02:30Z INFO  bench] SpentTxouts @802000 4623[us/call]\r\n[2025-06-01T12:02:34Z INFO  bench] SpentTxouts @803000 4373[us/call]\r\n[2025-06-01T12:02:39Z INFO  bench] SpentTxouts @804000 4573[us/call]\r\n[2025-06-01T12:02:43Z INFO  bench] SpentTxouts @805000 4471[us/call]\r\n[2025-06-01T12:02:47Z INFO  bench] SpentTxouts @806000 4377[us/call]\r\n[2025-06-01T12:02:52Z INFO  bench] SpentTxouts @807000 4428[us/call]\r\n[2025-06-01T12:02:56Z INFO  bench] SpentTxouts @808000 4370[us/call]\r\n[2025-06-01T12:03:01Z INFO  bench] SpentTxouts @809000 4924[us/call]\r\n[2025-06-01T12:03:06Z INFO  bench] SpentTxouts @810000 4983[us/call]\r\n6.04user 2.29system 0:45.63elapsed 18%CPU (0avgtext+0avgdata 36672maxresident)k\r\n113168inputs+0outputs (144major+8872minor)pagefaults 0swaps\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary> /rest/block/ takes ~5.7 ms/block & 25% client-side CPU </summary>\r\n\r\n```\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type block --start 800000 --count 10000\r\n[2025-06-01T12:03:48Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T12:03:54Z INFO  bench] Block @801000 5623[us/call]\r\n[2025-06-01T12:03:59Z INFO  bench] Block @802000 5485[us/call]\r\n[2025-06-01T12:04:05Z INFO  bench] Block @803000 5545[us/call]\r\n[2025-06-01T12:04:10Z INFO  bench] Block @804000 5667[us/call]\r\n[2025-06-01T12:04:16Z INFO  bench] Block @805000 5541[us/call]\r\n[2025-06-01T12:04:22Z INFO  bench] Block @806000 5746[us/call]\r\n[2025-06-01T12:04:27Z INFO  bench] Block @807000 5445[us/call]\r\n[2025-06-01T12:04:33Z INFO  bench] Block @808000 5654[us/call]\r\n[2025-06-01T12:04:38Z INFO  bench] Block @809000 5632[us/call]\r\n[2025-06-01T12:04:44Z INFO  bench] Block @810000 5637[us/call]\r\n7.38user 6.91system 0:56.25elapsed 25%CPU (0avgtext+0avgdata 36612maxresident)k\r\n113656inputs+448outputs (144major+9675minor)pagefaults 0swaps\r\n\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type block --start 800000 --count 10000\r\n[2025-06-01T12:04:50Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T12:04:57Z INFO  bench] Block @801000 6722[us/call]\r\n[2025-06-01T12:05:03Z INFO  bench] Block @802000 5844[us/call]\r\n[2025-06-01T12:05:08Z INFO  bench] Block @803000 5566[us/call]\r\n[2025-06-01T12:05:14Z INFO  bench] Block @804000 5608[us/call]\r\n[2025-06-01T12:05:19Z INFO  bench] Block @805000 5539[us/call]\r\n[2025-06-01T12:05:25Z INFO  bench] Block @806000 5359[us/call]\r\n[2025-06-01T12:05:30Z INFO  bench] Block @807000 5490[us/call]\r\n[2025-06-01T12:05:36Z INFO  bench] Block @808000 5453[us/call]\r\n[2025-06-01T12:05:41Z INFO  bench] Block @809000 5689[us/call]\r\n[2025-06-01T12:05:47Z INFO  bench] Block @810000 5607[us/call]\r\n7.31user 6.80system 0:57.14elapsed 24%CPU (0avgtext+0avgdata 36760maxresident)k\r\n113160inputs+0outputs (145major+9640minor)pagefaults 0swaps\r\n\r\n$ echo 3 | sudo tee /proc/sys/vm/drop_caches; bash run.sh --type block --start 800000 --count 10000\r\n[2025-06-01T12:05:55Z INFO  bench] fetching 10000 blocks\r\n[2025-06-01T12:06:01Z INFO  bench] Block @801000 5781[us/call]\r\n[2025-06-01T12:06:07Z INFO  bench] Block @802000 5807[us/call]\r\n[2025-06-01T12:06:13Z INFO  bench] Block @803000 5456[us/call]\r\n[2025-06-01T12:06:18Z INFO  bench] Block @804000 5529[us/call]\r\n[2025-06-01T12:06:24Z INFO  bench] Block @805000 5888[us/call]\r\n[2025-06-01T12:06:30Z INFO  bench] Block @806000 5966[us/call]\r\n[2025-06-01T12:06:36Z INFO  bench] Block @807000 5912[us/call]\r\n[2025-06-01T12:06:42Z INFO  bench] Block @808000 5718[us/call]\r\n[2025-06-01T12:06:48Z INFO  bench] Block @809000 5994[us/call]\r\n[2025-06-01T12:06:54Z INFO  bench] Block @810000 6035[us/call]\r\n7.79user 7.71system 0:58.35elapsed 26%CPU (0avgtext+0avgdata 36732maxresident)k\r\n113416inputs+0outputs (144major+9652minor)pagefaults 0swaps\r\n```\r\n\r\n</details>\r\n\r\nAs @maflcko and @TheCharlatan suggested above, the overall indexing latency difference is not expected to be significantly improved by switching to using `ReadBlockRawUndo` instead of `ReadBlockUndo` - since IIUC the limiting factor in this case is fetching and parsing the block data.",
      "created_at": "2025-06-01T13:07:48Z",
      "updated_at": "2025-06-02T06:31:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2119135815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2119135815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2119137893",
      "pull_request_review_id": 2885619577,
      "id": 2119137893,
      "node_id": "PRRC_kwDOABII585-T3pl",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would it be OK to switch this PR back to use `/spenttxouts/` (i.e. removing 62e68bd467 and keeping 1e2b26e4f8)?",
      "created_at": "2025-06-01T13:11:20Z",
      "updated_at": "2025-06-01T13:11:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2119137893",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2119137893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131471717",
      "pull_request_review_id": 2903731471,
      "id": 2131471717,
      "node_id": "PRRC_kwDOABII585_C61l",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ping @TheCharlatan @maflcko :)",
      "created_at": "2025-06-06T04:23:41Z",
      "updated_at": "2025-06-06T04:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2131471717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131471717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2132074962",
      "pull_request_review_id": 2904725031,
      "id": 2132074962,
      "node_id": "PRRC_kwDOABII585_FOHS",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, is there a reason why blockundo takes only 1.6ms in total end-to-end when spenttxouts takes 4.6ms in total end-to-end, where about 2.6ms happen on the server (https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2109843001). So with spenttxouts, the client spends about 2ms with 18% CPU and with blockundo the client spends about .8ms with 58% CPU.\r\n\r\nJust wondering out of curiosity.\r\n\r\nPersonally I'd just go with `spenttxouts`, but no strong opinion.",
      "created_at": "2025-06-06T12:07:35Z",
      "updated_at": "2025-06-06T12:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2132074962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2132074962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2132482525",
      "pull_request_review_id": 2905402026,
      "id": 2132482525,
      "node_id": "PRRC_kwDOABII585_Gxnd",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {",
      "path": "src/rest.cpp",
      "position": 82,
      "original_position": 82,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2107503689,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">  Hmm, is there a reason why blockundo takes only 1.6ms in total end-to-end when spenttxouts takes 4.6ms in total end-to-end, where about 2.6ms happen on the server (https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2109843001). So with spenttxouts, the client spends about 2ms with 18% CPU and with blockundo the client spends about .8ms with 58% CPU.\r\n\r\nI would like to note that https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2109843001 was benchmarked using [ApacheBench](https://httpd.apache.org/docs/2.4/programs/ab.html), but https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2119135815 was benchmarked [a custom client tool](https://github.com/romanz/bench-rest/commit/084e07764fdb76d4bc25d2090769c0ef3f0a44c5) (based on [`ureq`](https://crates.io/crates/ureq)) - so the latencies' delta is also affected by the HTTP client performance differences.\r\n\r\nIf I understand correctly, the client-side handling of `spenttxouts` response takes `2ms * 18% = 360us` CPU time, which is indeed a bit better compared to client-side handling of `blockundo` response, which takes `0.8ms * 58% = 464us` CPU time.\r\n\r\nAlso, most of the scripts during electrs indexing don't require complex decompression,since most of compressed ones are [P2PKH and P2SH types](https://github.com/bitcoin/bitcoin/blob/ae024137bda9fe189f4e7ccf26dbaffd44cbbeb6/contrib/utxo-tools/utxo_to_sqlite.py#L75-L90) (see the `by_type` histogram below):\r\n```\r\n$ time cargo run --release --bin blockundo\r\n    Finished `release` profile [optimized] target(s) in 0.02s\r\n     Running `target/release/blockundo`\r\n[700000..701000) 1202[us/call] Stats { total: 5117052, value: 4220850331315943, by_type: [1545802, 2028814, 8, 5, 0, 0, 1542423] }\r\n[701000..702000) 1248[us/call] Stats { total: 5016564, value: 3238540334293590, by_type: [1485990, 2015971, 4, 7, 0, 0, 1514592] }\r\n[702000..703000) 1364[us/call] Stats { total: 5303401, value: 2664566072512831, by_type: [1586091, 2071826, 2, 4, 0, 0, 1645478] }\r\n[703000..704000) 1378[us/call] Stats { total: 5666124, value: 2400056525309041, by_type: [1671073, 2216971, 2, 10, 0, 1, 1778067] }\r\n[704000..705000) 1373[us/call] Stats { total: 5835815, value: 2765124924840842, by_type: [1607472, 2347087, 4, 17, 2, 1, 1881232] }\r\n[705000..706000) 1283[us/call] Stats { total: 5571989, value: 2720571523603325, by_type: [1438779, 2236071, 4, 8, 2, 0, 1897125] }\r\n[706000..707000) 1263[us/call] Stats { total: 5371702, value: 2113610858419429, by_type: [1416760, 2128942, 2, 4, 0, 1, 1825993] }\r\n[707000..708000) 1318[us/call] Stats { total: 5559416, value: 2439623089965085, by_type: [1492894, 2172092, 4, 10, 0, 2, 1894414] }\r\n[708000..709000) 1330[us/call] Stats { total: 5611331, value: 2946515191901043, by_type: [1406453, 2246277, 4, 11, 0, 1, 1958585] }\r\n[709000..710000) 1317[us/call] Stats { total: 5589581, value: 3176856863850345, by_type: [1289761, 2315330, 4, 12, 0, 0, 1984474] }\r\n\r\nreal\t0m14.856s\r\nuser\t0m8.244s\r\nsys\t0m1.835s\r\n```\r\n\r\n<details>\r\n\r\n<summary> Full chain indexing stats </summary>\r\n\r\n```\r\n@10000 { count: 625, count_by_type: [6, 0, 0, 0, 319, 300, 0] }\r\n@20000 { count: 532, count_by_type: [4, 0, 0, 0, 245, 283, 0] }\r\n@30000 { count: 1712, count_by_type: [40, 0, 0, 0, 876, 796, 0] }\r\n@40000 { count: 2208, count_by_type: [55, 0, 0, 0, 1093, 1060, 0] }\r\n@50000 { count: 4372, count_by_type: [191, 0, 0, 0, 2103, 2078, 0] }\r\n@60000 { count: 13608, count_by_type: [6408, 0, 0, 0, 3569, 3631, 0] }\r\n@70000 { count: 22269, count_by_type: [15653, 0, 0, 0, 3386, 3230, 0] }\r\n@80000 { count: 30428, count_by_type: [22242, 0, 0, 0, 4093, 4093, 0] }\r\n@90000 { count: 30269, count_by_type: [20322, 0, 0, 0, 5050, 4897, 0] }\r\n@100000 { count: 86340, count_by_type: [77381, 0, 0, 0, 4443, 4516, 0] }\r\n@110000 { count: 94901, count_by_type: [85488, 0, 0, 0, 4778, 4635, 0] }\r\n@120000 { count: 216635, count_by_type: [206244, 0, 0, 0, 5256, 5135, 0] }\r\n@130000 { count: 467230, count_by_type: [453412, 0, 0, 0, 6869, 6948, 1] }\r\n@140000 { count: 976449, count_by_type: [962537, 0, 0, 0, 6911, 7000, 1] }\r\n@150000 { count: 920621, count_by_type: [909053, 0, 0, 0, 5875, 5693, 0] }\r\n@160000 { count: 770334, count_by_type: [702686, 0, 0, 0, 5200, 62447, 1] }\r\n@170000 { count: 950547, count_by_type: [899533, 0, 95, 88, 3929, 46879, 23] }\r\n@180000 { count: 1198258, count_by_type: [1095960, 33, 359, 348, 3112, 98441, 5] }\r\n@190000 { count: 4185359, count_by_type: [4088500, 31, 316, 321, 2372, 93819, 0] }\r\n@200000 { count: 4339502, count_by_type: [4233624, 12, 373, 341, 2053, 103099, 0] }\r\n@210000 { count: 4441565, count_by_type: [4331440, 34, 560, 582, 1681, 107267, 1] }\r\n@220000 { count: 6371400, count_by_type: [6311580, 58, 620, 588, 1058, 56422, 1074] }\r\n@230000 { count: 7385694, count_by_type: [7337631, 26, 241, 254, 868, 45860, 814] }\r\n@240000 { count: 7630690, count_by_type: [7570439, 71, 71, 58, 442, 57704, 1905] }\r\n@250000 { count: 5437882, count_by_type: [5409041, 31, 146, 150, 413, 27769, 332] }\r\n@260000 { count: 6433106, count_by_type: [6421397, 148, 1492, 1745, 60, 8245, 19] }\r\n@270000 { count: 6655459, count_by_type: [6648335, 169, 742, 770, 239, 5155, 49] }\r\n@280000 { count: 9090816, count_by_type: [9084292, 802, 922, 940, 219, 3609, 32] }\r\n@290000 { count: 9979571, count_by_type: [9973322, 2192, 484, 559, 99, 1173, 1742] }\r\n@300000 { count: 10654043, count_by_type: [10641469, 5391, 214, 182, 74, 359, 6354] }\r\n@310000 { count: 10963860, count_by_type: [10952275, 8245, 153, 75, 59, 193, 2860] }\r\n@320000 { count: 11873101, count_by_type: [11854048, 14195, 106, 118, 21, 134, 4479] }\r\n@330000 { count: 14230246, count_by_type: [14181599, 42163, 55, 59, 39, 44, 6287] }\r\n@340000 { count: 17051600, count_by_type: [16915582, 128618, 49, 65, 12, 19, 7255] }\r\n@350000 { count: 18844424, count_by_type: [18555035, 286021, 61, 84, 12, 17, 3194] }\r\n@360000 { count: 20168255, count_by_type: [19716328, 448173, 101, 79, 19, 16, 3539] }\r\n@370000  { count: 25484802, count_by_type: [24460043, 799300, 1555, 326, 18, 21, 223539] }\r\n@380000  { count: 26632610, count_by_type: [25420272, 1132582, 990, 78308, 16, 16, 426] }\r\n@390000  { count: 29920038, count_by_type: [28007502, 1911310, 165, 399, 6, 10, 646] }\r\n@400000  { count: 33174951, count_by_type: [29994572, 3179220, 335, 546, 9, 8, 261] }\r\n@410000  { count: 35316148, count_by_type: [30938732, 4376693, 235, 348, 15, 17, 108] }\r\n@420000  { count: 36303753, count_by_type: [28968248, 7334817, 177, 235, 53, 33, 190] }\r\n@430000  { count: 35653677, count_by_type: [27595998, 8055172, 210, 364, 80, 78, 1775] }\r\n@440000  { count: 38766615, count_by_type: [32663128, 6092786, 6114, 4528, 4, 5, 50] }\r\n@450000  { count: 40971286, count_by_type: [33990735, 6940850, 22796, 16756, 59, 67, 23] }\r\n@460000  { count: 43714996, count_by_type: [34797370, 8769454, 78945, 68732, 29, 27, 439] }\r\n@470000  { count: 44793610, count_by_type: [36861662, 7893476, 17469, 13333, 125, 113, 7432] }\r\n@480000  { count: 43067356, count_by_type: [35001816, 8022393, 23940, 19081, 50, 68, 8] }\r\n@490000  { count: 41648952, count_by_type: [34331046, 7243408, 33811, 23866, 126, 103, 16592] }\r\n@500000  { count: 48152093, count_by_type: [39194969, 8699336, 45380, 21680, 126, 638, 189964] }\r\n@510000  { count: 51326853, count_by_type: [41648279, 9514253, 29313, 19764, 56, 56, 115132] }\r\n@520000  { count: 38282217, count_by_type: [26528958, 9846227, 55475, 37867, 8, 830, 1812852] }\r\n@530000  { count: 35641361, count_by_type: [21935229, 11658151, 73825, 63940, 5, 4, 1910207] }\r\n@540000  { count: 37925935, count_by_type: [22191957, 13021405, 59315, 69483, 3, 1, 2583771] }\r\n@550000  { count: 41406281, count_by_type: [22222938, 16756471, 65310, 62101, 0, 1, 2299460] }\r\n@560000  { count: 43870253, count_by_type: [22823642, 18214259, 70668, 63685, 13, 17, 2697969] }\r\n@570000  { count: 45559248, count_by_type: [23905511, 18634825, 65411, 59658, 7, 0, 2893836] }\r\n@580000  { count: 53162820, count_by_type: [28191011, 21458817, 120620, 62791, 2, 3, 3329576] }\r\n@590000  { count: 49851027, count_by_type: [25669849, 20537560, 87097, 68658, 20, 18, 3487825] }\r\n@600000  { count: 45488260, count_by_type: [21660173, 17924275, 70819, 76051, 1, 3, 5756938] }\r\n@610000  { count: 47894909, count_by_type: [22678756, 18364758, 69839, 72874, 13, 20, 6708649] }\r\n@620000  { count: 46658506, count_by_type: [20975983, 18233797, 66047, 69796, 0, 1, 7312882] }\r\n@630000  { count: 51374869, count_by_type: [24060911, 22276161, 69099, 76358, 12, 13, 4892315] }\r\n@640000  { count: 55236113, count_by_type: [25829996, 24292211, 77550, 63710, 4, 5, 4972637] }\r\n@650000  { count: 58526986, count_by_type: [27012329, 25968726, 70162, 42038, 1, 1, 5433729] }\r\n@660000  { count: 58860657, count_by_type: [27378085, 25013577, 44432, 27502, 31, 41, 6396989] }\r\n@670000  { count: 61278503, count_by_type: [28702102, 25080930, 42787, 23058, 50, 52, 7429524] }\r\n@680000  { count: 61777564, count_by_type: [27253460, 26312639, 44094, 23632, 28, 30, 8143681] }\r\n@690000  { count: 62519812, count_by_type: [25375197, 26596005, 11322, 4831, 13, 13, 10532431] }\r\n@700000  { count: 48081507, count_by_type: [15082138, 19654137, 68, 57, 0, 2, 13345105] }\r\n@710000  { count: 54343089, count_by_type: [15047415, 21643297, 49, 79, 27, 25, 17652197] }\r\n@720000  { count: 54058927, count_by_type: [12764783, 22038270, 31, 165, 1, 3, 19255674] }\r\n@730000  { count: 55869021, count_by_type: [13969490, 21107581, 121, 65, 4, 2, 20791758] }\r\n@740000  { count: 56314981, count_by_type: [13982223, 19821462, 13, 423, 3, 4, 22510853] }\r\n@750000  { count: 56873212, count_by_type: [13431311, 19640397, 16, 705, 4, 4, 23800775] }\r\n@760000  { count: 54458039, count_by_type: [12599682, 17740021, 61, 32, 2, 1, 24118240] }\r\n@770000  { count: 60185194, count_by_type: [15003214, 18161157, 109, 40, 17, 11, 27020646] }\r\n@780000  { count: 56773118, count_by_type: [12743378, 15004250, 12, 55, 0, 3, 29025420] }\r\n@790000  { count: 61986604, count_by_type: [11754470, 13425167, 5, 35, 1, 2, 36806924] }\r\n@800000  { count: 66687770, count_by_type: [11366185, 13651998, 817, 1010, 2, 4, 41667754] }\r\n@810000  { count: 68412707, count_by_type: [11444358, 11516461, 7, 18, 0, 1, 45451862] }\r\n@820000  { count: 70786202, count_by_type: [8420325, 10293361, 269, 21, 10, 12, 52072204] }\r\n@830000  { count: 67585727, count_by_type: [8215289, 8912455, 0, 0, 2, 1, 50457980] }\r\n@840000  { count: 67915846, count_by_type: [7825901, 12450054, 15, 63, 51, 57, 47639705] }\r\n@850000  { count: 74258694, count_by_type: [5661373, 9702626, 3, 6, 27, 18, 58894641] }\r\n@860000  { count: 77988536, count_by_type: [7161911, 9020000, 8, 2, 0, 0, 61806615] }\r\n@870000  { count: 78477781, count_by_type: [6867005, 8178130, 16, 13, 5, 5, 63432607] }\r\n@880000  { count: 75299928, count_by_type: [8618571, 9341597, 24, 9, 22, 20, 57339685] }\r\n@890000  { count: 80929642, count_by_type: [9942192, 6562388, 14, 11, 1, 1, 64425035] }\r\n@900000  { count: 71287987, count_by_type: [10087225, 5561436, 16, 16, 1, 1, 55639292] }\r\n```\r\n\r\n</details>\r\n\r\n> Personally I'd just go with `spenttxouts`, but no strong opinion.\r\n\r\nSounds good, thanks! If there are no objections, I'll drop https://github.com/bitcoin/bitcoin/commit/62e68bd46726dc17b657c4c334b06351fc761868 from this PR.\r\n",
      "created_at": "2025-06-06T16:16:12Z",
      "updated_at": "2025-06-06T17:04:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2132482525",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2132482525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2134033105",
      "pull_request_review_id": 2907622226,
      "id": 2134033105,
      "node_id": "PRRC_kwDOABII585_MsLR",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    switch (rf) {\n+    case RESTResponseFormat::BINARY: {\n+        DataStream ssSpentResponse{};\n+        SerializeBlockUndo(ssSpentResponse, block_undo);\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, std::as_bytes(std::span{ssSpentResponse}));",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2106681301,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> nit: can remove the casts\r\n\r\nChanged `std::as_bytes(std::span{ssSpentResponse})` to `ssSpentResponse` in d4e212e8a6.\r\n\r\n> If you want, you can also remove them in other places in this file.\r\n\r\n```\r\n$ git grep std::as_bytes src/rest.cpp\r\nsrc/rest.cpp:        req->WriteReply(HTTP_OK, std::as_bytes(std::span{block_data}));\r\n```\r\n\r\nI am not sure that I can remove it here, since `block_data` is `std::vector<uint8_t>`, and `WriteReply(...)` accepts `std::span<std::byte>`.\r\n\r\nMaybe I can change `ReadRawBlock(...)` to work with `std::vector<std::byte>`: https://github.com/bitcoin/bitcoin/commit/7dd0554abf62eab8f17b44d9562630cca265cf73\r\nWDYT?",
      "created_at": "2025-06-07T17:28:08Z",
      "updated_at": "2025-06-07T18:08:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2134033105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2134033105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2135820932",
      "pull_request_review_id": 2910235599,
      "id": 2135820932,
      "node_id": "PRRC_kwDOABII585_TgqE",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    switch (rf) {\n+    case RESTResponseFormat::BINARY: {\n+        DataStream ssSpentResponse{};\n+        SerializeBlockUndo(ssSpentResponse, block_undo);\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, std::as_bytes(std::span{ssSpentResponse}));",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2106681301,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Maybe I can change `ReadRawBlock(...)` to work with `std::vector<std::byte>`: [7dd0554](https://github.com/bitcoin/bitcoin/commit/7dd0554abf62eab8f17b44d9562630cca265cf73)\r\n\r\nSure, but probably a separate pull request. Also to avoid the new cast in the commit, SpanReader could be extended with another constructor, so that the cast is private/internal.\r\n\r\n```cpp\r\nexplicit SpanReader(std::span<const std::byte> data) : ...",
      "created_at": "2025-06-09T14:22:43Z",
      "updated_at": "2025-06-09T14:22:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2135820932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2135820932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2136416174",
      "pull_request_review_id": 2911211278,
      "id": 2136416174,
      "node_id": "PRRC_kwDOABII585_Vx-u",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    switch (rf) {\n+    case RESTResponseFormat::BINARY: {\n+        DataStream ssSpentResponse{};\n+        SerializeBlockUndo(ssSpentResponse, block_undo);\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, std::as_bytes(std::span{ssSpentResponse}));",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2106681301,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks - will open a new PR :)",
      "created_at": "2025-06-09T20:05:52Z",
      "updated_at": "2025-06-09T20:05:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2136416174",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2136416174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2144212070",
      "pull_request_review_id": 2923428305,
      "id": 2144212070,
      "node_id": "PRRC_kwDOABII585_zhRm",
      "diff_hunk": "@@ -281,6 +282,113 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using binary format.\n+ */\n+static void SerializeBlockUndo(DataStream& stream, const CBlockUndo& block_undo)\n+{\n+    WriteCompactSize(stream, block_undo.vtxundo.size() + 1);\n+    WriteCompactSize(stream, 0); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        WriteCompactSize(stream, tx_undo.vprevout.size());\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            coin.out.Serialize(stream);\n+        }\n+    }\n+}\n+\n+/**\n+ * Serialize spent outputs as a list of per-transaction CTxOut lists using JSON format.\n+ */\n+static void BlockUndoToJSON(const CBlockUndo& block_undo, UniValue& result)\n+{\n+    result.push_back({UniValue::VARR}); // block_undo.vtxundo doesn't contain coinbase tx\n+    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n+        UniValue tx_prevouts(UniValue::VARR);\n+        for (const Coin& coin : tx_undo.vprevout) {\n+            UniValue prevout(UniValue::VOBJ);\n+            prevout.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+\n+            UniValue script_pub_key(UniValue::VOBJ);\n+            ScriptToUniv(coin.out.scriptPubKey, /*out=*/script_pub_key, /*include_hex=*/true, /*include_address=*/true);\n+            prevout.pushKV(\"scriptPubKey\", std::move(script_pub_key));\n+\n+            tx_prevouts.push_back(std::move(prevout));\n+        }\n+        result.push_back(std::move(tx_prevouts));\n+    }\n+}\n+\n+static bool rest_spent_txouts(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RESTResponseFormat rf = ParseDataFormat(param, strURIPart);\n+    std::vector<std::string> path = SplitString(param, '/');\n+\n+    std::string hashStr;\n+    if (path.size() == 1) {\n+        // path with query parameter: /rest/spenttxouts/<hash>\n+        hashStr = path[0];\n+    } else {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/spenttxouts/<hash>.<ext>\");\n+    }\n+\n+    auto hash{uint256::FromHex(hashStr)};\n+    if (!hash) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    }\n+\n+    ChainstateManager* chainman = GetChainman(context, req);\n+    if (!chainman) {\n+        return false;\n+    }\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return chainman->m_blockman.LookupBlockIndex(*hash));\n+    if (!pblockindex) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (pblockindex->nHeight > 0 && !chainman->m_blockman.ReadBlockUndo(block_undo, *pblockindex)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" undo not available\");\n+    }\n+\n+    switch (rf) {\n+    case RESTResponseFormat::BINARY: {\n+        DataStream ssSpentResponse{};\n+        SerializeBlockUndo(ssSpentResponse, block_undo);\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, std::as_bytes(std::span{ssSpentResponse}));",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "c48846ec4169f749d28da05de849c43a488c3a70",
      "original_commit_id": "1e2b26e4f8498a08072104b12759d91ef8b410db",
      "in_reply_to_id": 2106681301,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Opened https://github.com/bitcoin/bitcoin/pull/32743.",
      "created_at": "2025-06-13T05:04:56Z",
      "updated_at": "2025-06-13T05:04:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32540#discussion_r2144212070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2144212070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32540"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    }
  ]
}