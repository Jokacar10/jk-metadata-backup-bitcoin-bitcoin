{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431",
    "id": 1725255931,
    "node_id": "PR_kwDOABII585m1VD7",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29431",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29431.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29431.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c9dacd958d7c1e98b08a7083c299d981e4c11193",
    "number": 29431,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "test/BIP324: disconnection scenarios during v2 handshake",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Add tests for the following v2 handshake scenarios:\r\n1. Disconnection happens when > `MAX_GARBAGE_LEN` bytes garbage is sent\r\n2. Disconnection happens when incorrect garbage terminator is sent\r\n3. Disconnection happens when garbage bytes are tampered with\r\n4. Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\r\n5. bitcoind ignores non-empty version packet and no disconnection happens\r\n\r\nAll these tests require a modified v2 P2P class (different from `EncryptedP2PState` used in `v2_p2p.py`) to implement our custom handshake behaviour based on different scenarios and have been kept in a single test file (`test/functional/p2p_v2_misbehaving.py`). Shifted the test in `test/functional/p2p_v2_earlykeyresponse.py` which is of the same pattern to this file too.",
    "labels": [],
    "created_at": "2024-02-14T08:59:18Z",
    "updated_at": "2025-07-18T14:12:53Z",
    "closed_at": "2024-07-09T20:37:40Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-07-09T20:37:40Z",
    "merged_by": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "c51c694ede0806872ad27e245146f4c82d62e582",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "stratospher:more-v2-tests",
      "ref": "more-v2-tests",
      "sha": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 379929443,
        "node_id": "MDEwOlJlcG9zaXRvcnkzNzk5Mjk0NDM=",
        "name": "bitcoin",
        "full_name": "stratospher/bitcoin",
        "owner": {
          "login": "stratospher",
          "id": 44024636,
          "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stratospher",
          "html_url": "https://github.com/stratospher",
          "followers_url": "https://api.github.com/users/stratospher/followers",
          "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
          "organizations_url": "https://api.github.com/users/stratospher/orgs",
          "repos_url": "https://api.github.com/users/stratospher/repos",
          "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stratospher/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/stratospher/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/stratospher/bitcoin",
        "archive_url": "https://api.github.com/repos/stratospher/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stratospher/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stratospher/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stratospher/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stratospher/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stratospher/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stratospher/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stratospher/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stratospher/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stratospher/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/stratospher/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/stratospher/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/stratospher/bitcoin/events",
        "forks_url": "https://api.github.com/repos/stratospher/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/stratospher/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stratospher/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stratospher/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stratospher/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/stratospher/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stratospher/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stratospher/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stratospher/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stratospher/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stratospher/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/stratospher/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/stratospher/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stratospher/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stratospher/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stratospher/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:stratospher/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/stratospher/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/stratospher/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stratospher/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/stratospher/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/stratospher/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/stratospher/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/stratospher/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stratospher/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/stratospher/bitcoin/hooks",
        "svn_url": "https://github.com/stratospher/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 277147,
        "default_branch": "master",
        "open_issues_count": 3,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-14T13:15:49Z",
        "created_at": "2021-06-24T13:12:06Z",
        "updated_at": "2025-07-14T09:12:55Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "538363738e9e30813cf3e76ca4f71c1aaff349e7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37533,
        "stargazers_count": 84619,
        "watchers_count": 84619,
        "size": 289174,
        "default_branch": "master",
        "open_issues_count": 756,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-18T13:24:29Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-07-18T13:24:35Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 200,
    "deletions": 105,
    "changed_files": 9,
    "commits": 11,
    "review_comments": 35,
    "comments": 15
  },
  "events": [
    {
      "event": "commented",
      "id": 1943330480,
      "node_id": "IC_kwDOABII585z1N6w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1943330480",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T08:59:20Z",
      "updated_at": "2024-07-09T20:18:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29431).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [mzumsande](https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2139518716), [theStack](https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2145284260), [achow101](https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2218656952) |\n| Concept ACK | [kevkevinpal](https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1884162177) |\n| Stale ACK | [sr-gi](https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2083422330) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29500](https://github.com/bitcoin/bitcoin/pull/29500) (test: create assert_not_equal util by kevkevinpal)\n* [#29420](https://github.com/bitcoin/bitcoin/pull/29420) (test: extend the SOCKS5 Python proxy to actually connect to a destination by vasild)\n* [#28521](https://github.com/bitcoin/bitcoin/pull/28521) (net: additional disconnect logging by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1943330480",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "commented",
      "id": 1945395946,
      "node_id": "IC_kwDOABII585z9GLq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1945395946",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T05:27:37Z",
      "updated_at": "2024-02-15T05:27:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sr-gi, i tried [this manually sending idea](https://github.com/bitcoin/bitcoin/pull/29352#pullrequestreview-1854149947) but i still think intermittent failures are possible there.\r\n- we can't get rid of `can_data_be_received` variable because if we don't use this variable, test would succeed irrespective of whether we send 4 bytes network magic first or 4 bytes from ellswift bytes first and we don't want that.\r\n- so since `data_received()` always happens in `Network thread`  and send of ellswift bytes + setting  `can_data_be_received=True` happens on `MainThread`, in the rare scenario that `data_received()` gets called before setting `can_data_be_received`, an intermittent failure could happen i think.\r\n\r\nhere's a [branch](https://github.com/stratospher/bitcoin/commit/7e7173467fd5459e4b19ebd48186690f174be95f) where i tweaked the code you shared a bit with a sleep statement for making the test crash and reintroducing `can_data_be_received` variable.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1945395946",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "mentioned",
      "id": 11810301834,
      "node_id": "MEE_lADOABII585_MAi-zwAAAAK_8ueK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11810301834",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T05:27:38Z"
    },
    {
      "event": "subscribed",
      "id": 11810301847,
      "node_id": "SE_lADOABII585_MAi-zwAAAAK_8ueX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11810301847",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T05:27:38Z"
    },
    {
      "event": "reviewed",
      "id": 1884147732,
      "node_id": "PRR_kwDOABII585wTdAU",
      "url": null,
      "actor": null,
      "commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1884147732",
      "submitted_at": "2024-02-16T01:03:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "commented",
      "id": 1948492950,
      "node_id": "IC_kwDOABII5850I6SW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1948492950",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-16T14:35:06Z",
      "updated_at": "2024-02-16T14:35:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1948492950",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "reviewed",
      "id": 1884162177,
      "node_id": "PRR_kwDOABII585wTgiB",
      "url": null,
      "actor": null,
      "commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nadded two comments I will continue to test these changes as I am still trying to understand fully what the tests do exactly",
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1884162177",
      "submitted_at": "2024-02-16T15:12:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "labeled",
      "id": 11935110249,
      "node_id": "LE_lADOABII585_MAi-zwAAAALHY1Rp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11935110249",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T11:49:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11951907498,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAALIY6Kq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11951907498",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "22cba895180d706069de7460947a555d75ae80c0",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/22cba895180d706069de7460947a555d75ae80c0",
      "created_at": "2024-02-28T13:40:23Z"
    },
    {
      "event": "unlabeled",
      "id": 11953003327,
      "node_id": "UNLE_lADOABII585_MAi-zwAAAALIdFs_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11953003327",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T14:59:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1971505987,
      "node_id": "IC_kwDOABII5851gstD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1971505987",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T16:28:44Z",
      "updated_at": "2024-02-29T16:29:18Z",
      "author_association": "MEMBER",
      "body": "> * we can't get rid of `can_data_be_received` variable because if we don't use this variable, test would succeed irrespective of whether we send 4 bytes network magic first or 4 bytes from ellswift bytes first and we don't want that.\r\n\r\nI've been playing around sending anything different than the first 4 bytes as the network magic and test fail on my end (which is expected given `data_received` is called with `magic_sent` false on the first-byte mismatch).\r\n\r\nDo you have any working example I can try to reproduce?",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1971505987",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "commented",
      "id": 1982878975,
      "node_id": "IC_kwDOABII5852MFT_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1982878975",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T08:15:46Z",
      "updated_at": "2024-03-07T08:15:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I've been playing around sending anything different than the first 4 bytes as the network magic and test fail on my end (which is expected given data_received is called with magic_sent false on the first-byte mismatch).\r\n\r\nyes! that's expected behaviour and sending anything other than the first 4 bytes as network magic will make the test fail on master.\r\n\r\nwhat i was trying to say was:\r\n1. on master\r\n- replacing `return b\"\\xfa\\xbf\\xb5\\xda\"` with any other 4 bytes will make the test fail and this is expected behaviour\r\n3. using [this patch](https://github.com/bitcoin/bitcoin/pull/29352#pullrequestreview-1854149947) mentioned in #29352\r\n- replacing `return b\"\\xfa\\xbf\\xb5\\xda\"` with any other 4 bytes will make the test pass and this isn't behaviour we want\r\n- this happens because [`can_data_be_received` variable](https://github.com/bitcoin/bitcoin/blob/ab5dfdbec1143f673f4d83acd4e335bb2c51034e/test/functional/p2p_v2_earlykeyresponse.py#L29) is removed in the patch\r\n\r\nso i was just trying to say that we can't remove [`can_data_be_received` variable](https://github.com/bitcoin/bitcoin/blob/ab5dfdbec1143f673f4d83acd4e335bb2c51034e/test/functional/p2p_v2_earlykeyresponse.py#L29).",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1982878975",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "reviewed",
      "id": 1907520121,
      "node_id": "PRR_kwDOABII585xsnJ5",
      "url": null,
      "actor": null,
      "commit_id": "22cba895180d706069de7460947a555d75ae80c0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThe one thing I'm a bit unsure about is that this duplicates quite a lot of code, especially in `complete_handshake` - the main implementation in `v2_p2p.py` and the overwritten version from this test could run out of sync in the future. But I don't have a good idea how to avoid this yet...",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1907520121",
      "submitted_at": "2024-03-07T22:24:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12069154140,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAALPYK1c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12069154140",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9ca0439563cfdedda366912723c7ac26c07c6236",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/9ca0439563cfdedda366912723c7ac26c07c6236",
      "created_at": "2024-03-11T07:25:46Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJmOTY2OWFmOWNjYzMzZGNhZGUwOWJjZWIyN2Q2NzQ1ZTlkOWE3NWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf9669af9ccc33dcade09bceb27d6745e9d9a75a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf9669af9ccc33dcade09bceb27d6745e9d9a75a",
      "tree": {
        "sha": "d44e0a9af26cede51cff63b56557f37e919fa81d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d44e0a9af26cede51cff63b56557f37e919fa81d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cc99df44aec4d104590aee46cf18318e22a8568",
          "sha": "4cc99df44aec4d104590aee46cf18318e22a8568",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4cc99df44aec4d104590aee46cf18318e22a8568"
        }
      ],
      "message": "test: Rename early key response test and move random_bitflip to util\n\nEarly key response test is a special kind of test which requires\nmodified v2 handshake functions. More such tests can be added\nwhere v2 handshake functions send incorrect garbage terminator,\nexcess garbage bytes etc.. Hence, rename p2p_v2_earlykey.py to a\ngeneral test file name - p2p_v2_misbehaving.py.\n\nrandom_bitflip function (used in signature tests prior to this\ncommit) can be used in p2p_v2_misbehaving test to generate wrong\ngarbage terminator, wrong garbage bytes etc..\nSo, move the function to util.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-03-11T07:28:20Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-01-30T13:57:21Z"
      },
      "sha": "bf9669af9ccc33dcade09bceb27d6745e9d9a75a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg2Y2NhMmNiYTIzMGMxMDMyNGM2YWVkZDEyYWU5NjU1YjgzYjI4NTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86cca2cba230c10324c6aedd12ae9655b83b2856",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/86cca2cba230c10324c6aedd12ae9655b83b2856",
      "tree": {
        "sha": "a8af211dec0b93b3995fa1bd684be6fdb2f9a64b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8af211dec0b93b3995fa1bd684be6fdb2f9a64b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf9669af9ccc33dcade09bceb27d6745e9d9a75a",
          "sha": "bf9669af9ccc33dcade09bceb27d6745e9d9a75a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf9669af9ccc33dcade09bceb27d6745e9d9a75a"
        }
      ],
      "message": "test: Support disconnect waiting for add_p2p_connection\n\nAdds a new boolean parameter `expect_success` to the\n`add_p2p_connection` method. If set, the node under\ntest doesn't wait for connection to be established\nand is useful for testing scenarios when disconnection\nis expected.\n\nWithout this parameter, intermittent test failures can happen\nif the disconnection happens before wait_until for is_connected\nis hit inside `add_p2p_connection`.\n\nCo-Authored-By: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-03-11T07:32:03Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T05:07:23Z"
      },
      "sha": "86cca2cba230c10324c6aedd12ae9655b83b2856"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12069259462,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAALPYkjG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12069259462",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "67708b64dba454fc625607470d0cbf4341ebb85a",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/67708b64dba454fc625607470d0cbf4341ebb85a",
      "created_at": "2024-03-11T07:37:14Z"
    },
    {
      "event": "commented",
      "id": 1987813380,
      "node_id": "IC_kwDOABII5852e6AE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1987813380",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T07:55:34Z",
      "updated_at": "2024-03-11T07:55:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The one thing I'm a bit unsure about is that this duplicates quite a lot of code, especially in complete_handshake - the main implementation in v2_p2p.py and the overwritten version from this test could run out of sync in the future. But I don't have a good idea how to avoid this yet...\r\n\r\nhmm good point. will need to think about it more. simplest solution would be keeping it all in main implementation in `v2_p2p.py` haha but doesn't make sense to have it there just for this test file :(",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1987813380",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "commented",
      "id": 2018102733,
      "node_id": "IC_kwDOABII5854Sc3N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018102733",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T14:14:25Z",
      "updated_at": "2024-03-25T14:14:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > The one thing I'm a bit unsure about is that this duplicates quite a lot of code, especially in complete_handshake - the main implementation in v2_p2p.py and the overwritten version from this test could run out of sync in the future. But I don't have a good idea how to avoid this yet...\r\n> \r\n> hmm good point. will need to think about it more. simplest solution would be keeping it all in main implementation in `v2_p2p.py` haha but doesn't make sense to have it there just for this test file :(\r\n\r\nOne idea to avoid at least reimplementing `generate_keypair_and_garbage` would be to allow setting a fixed garbage length with a new parameter (that is `None` by default, meaning that a random length will be picked), e.g:\r\n```diff\r\ndiff --git a/test/functional/test_framework/v2_p2p.py b/test/functional/test_framework/v2_p2p.py\r\nindex 8f79623bd8..c27cd5e2fe 100644\r\n--- a/test/functional/test_framework/v2_p2p.py\r\n+++ b/test/functional/test_framework/v2_p2p.py\r\n@@ -111,10 +111,11 @@ class EncryptedP2PState:\r\n             # Responding, place their public key encoding first.\r\n             return TaggedHash(\"bip324_ellswift_xonly_ecdh\", ellswift_theirs + ellswift_ours + ecdh_point_x32)\r\n \r\n-    def generate_keypair_and_garbage(self):\r\n+    def generate_keypair_and_garbage(self, garbage_len=None):\r\n         \"\"\"Generates ellswift keypair and 4095 bytes garbage at max\"\"\"\r\n         self.privkey_ours, self.ellswift_ours = ellswift_create()\r\n-        garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\r\n+        if garbage_len is None:\r\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\r\n         self.sent_garbage = random.randbytes(garbage_len)\r\n         logger.debug(f\"sending {garbage_len} bytes of garbage data\")\r\n         return self.ellswift_ours + self.sent_garbage\r\n```\r\nThe overruled method of `initiate_v2_handshake` in the test could then call this with the parameter set if needed, e.g. for the EXCESS_GARBAGE case:\r\n```\r\n     def initiate_v2_handshake(self):\r\n         if self.test_type == TestType.EARLY_KEY_RESPONSE:\r\n             .....\r\n         elif self.test_type == TestType.EXCESS_GARBAGE:\r\n             # send > 4095 bytes garbage\r\n             return self.generate_keypair_and_garbage(garbage_len=MAX_GARBAGE_LEN + random.randrange(1, 10))\r\n```\r\n(For the `WRONG_GARBAGE` test, bit-flipping `self.sent_garbage` right after calling `generate_keypair_and_garbage` should still be sufficient for causing a mismatch.)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2018102733",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "reviewed",
      "id": 1957780790,
      "node_id": "PRR_kwDOABII5850sV02",
      "url": null,
      "actor": null,
      "commit_id": "67708b64dba454fc625607470d0cbf4341ebb85a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1957780790",
      "submitted_at": "2024-03-25T14:17:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "commented",
      "id": 2096517368,
      "node_id": "IC_kwDOABII58589lD4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2096517368",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T17:07:24Z",
      "updated_at": "2024-05-06T17:15:45Z",
      "author_association": "MEMBER",
      "body": "I find the approach fairly hard to follow here. Having all the logic in the constructor with if/elses based on the connection type instead of having different constructors/a test for each type of failure feels really error-prone and difficult to make sure if a test is doing what we expect. I think it'd be better to have multiple classes that build from `v2_p2p` and modify what's needed, even if the file gets larger.\r\n\r\nJust an example:\r\n\r\nIn the `WRONG_GARBAGE_TERMINATOR` case, we are modifying the gargabe in two ways. First, we are making it smaller than expected, but also, we are randomly flipping some of its bits. Turns out if you removed both changes, the tests still passes, but I'm not sure why. I would expect this not to be the case, since removing the relevant parts should make the class equal to the expected `v2_p2p`.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2096517368",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12843005621,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAAL9gLa1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843005621",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a256640331f88b43e0d26223cc921ebed5748708",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/a256640331f88b43e0d26223cc921ebed5748708",
      "created_at": "2024-05-17T05:35:48Z"
    },
    {
      "event": "commented",
      "id": 2116717090,
      "node_id": "IC_kwDOABII585-Kooi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2116717090",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T05:39:35Z",
      "updated_at": "2024-05-17T05:39:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think it'd be better to have multiple classes that build from v2_p2p and modify what's needed, even if the file gets larger.\r\n\r\nthat's a great suggestion @sr-gi! it's possible to design those classes in such a way that it avoids code duplication and the file is almost the same size!\r\n\r\n> Turns out if you removed both changes, the tests still passes, but I'm not sure why. \r\n\r\nbecause we don't send a version message to ensure that the disconnection happens in the v2 handshake phase. in your case (different from what we are testing here), we send the correct garbage terminator but because we don't send a version message - disconnection is still expected.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2116717090",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "mentioned",
      "id": 12843028627,
      "node_id": "MEE_lADOABII585_MAi-zwAAAAL9gRCT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843028627",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T05:39:36Z"
    },
    {
      "event": "subscribed",
      "id": 12843028639,
      "node_id": "SE_lADOABII585_MAi-zwAAAAL9gRCf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843028639",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T05:39:36Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM2NDJiMDhjNGU0NWNiM2E2MjVhODY3ZWJkNjZjMGFlNTFiZGUyMTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c642b08c4e45cb3a625a867ebd66c0ae51bde212",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c642b08c4e45cb3a625a867ebd66c0ae51bde212",
      "tree": {
        "sha": "94a972d8fbea598f635c2dec00ee3f7fd8d478a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94a972d8fbea598f635c2dec00ee3f7fd8d478a3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86cca2cba230c10324c6aedd12ae9655b83b2856",
          "sha": "86cca2cba230c10324c6aedd12ae9655b83b2856",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/86cca2cba230c10324c6aedd12ae9655b83b2856"
        }
      ],
      "message": "test: Log when the garbage is actually sent to transport layer\n\nCurrently, we log the number of bytes of garbage when it is\ngenerated. The log is a better fit for when the garbage\nactually gets sent to the transport layer.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-17T05:42:39Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-17T04:10:38Z"
      },
      "sha": "c642b08c4e45cb3a625a867ebd66c0ae51bde212"
    },
    {
      "event": "commented",
      "id": 2116864386,
      "node_id": "IC_kwDOABII585-LMmC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2116864386",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T06:45:00Z",
      "updated_at": "2024-05-17T06:45:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25085973641</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2116864386",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "labeled",
      "id": 12843518455,
      "node_id": "LE_lADOABII585_MAi-zwAAAAL9iIn3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843518455",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T06:45:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12843924767,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAAL9jr0f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843924767",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b06255688af46bac47f985be747f76acb51b0104",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/b06255688af46bac47f985be747f76acb51b0104",
      "created_at": "2024-05-17T07:26:52Z"
    },
    {
      "event": "unlabeled",
      "id": 12844698709,
      "node_id": "UNLE_lADOABII585_MAi-zwAAAAL9moxV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12844698709",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T08:34:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2117828829,
      "node_id": "IC_kwDOABII585-O4Dd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2117828829",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T15:18:37Z",
      "updated_at": "2024-05-17T15:18:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've updated the PR to have different child class implementations for `EncryptedP2PState` based on the disconnection scenario we're testing - `EarlyKeyResponseState`, `ExcessGarbageState` etc...\r\n\r\nAlso introduced 2 more commits for cleaner code:\r\n- c642b08c - logging when the garbage is sent instead of when garbage is generated (suggestion from https://github.com/bitcoin/bitcoin/pull/24748#discussion_r1466826427 which is useful now that we have multiple child classes for `EncryptedP2PState`)\r\n- 38eb429 - transport version as a class variable instead of a global variable",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2117828829",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "reviewed",
      "id": 2066388767,
      "node_id": "PRR_kwDOABII5857Kpcf",
      "url": null,
      "actor": null,
      "commit_id": "b06255688af46bac47f985be747f76acb51b0104",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I like this approach much better, it is way easier to follow and reason about. I left some comments inline.\r\n\r\n> because we don't send a version message to ensure that the disconnection happens in the v2 handshake phase. in your case (different from what we are testing here), we send the correct garbage terminator but because we don't send a version message - disconnection is still expected.\r\n\r\nWhat is weird is that the test is expecting a specific log message, which seems to also match in this case. This is still the case by the way. Is there an alternative way of making sure this does not happen?",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2066388767",
      "submitted_at": "2024-05-20T16:38:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ0YTFkYTg1NDM1MjJhMjEzYWM3NTc2MTEzMWQ4NzhlZWRmZDRhNWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4a1da8543522a213ac75761131d878eedfd4a5b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d4a1da8543522a213ac75761131d878eedfd4a5b",
      "tree": {
        "sha": "8050f16a484e344afd77ccb1d537efc9119cd3b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8050f16a484e344afd77ccb1d537efc9119cd3b9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c642b08c4e45cb3a625a867ebd66c0ae51bde212",
          "sha": "c642b08c4e45cb3a625a867ebd66c0ae51bde212",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c642b08c4e45cb3a625a867ebd66c0ae51bde212"
        }
      ],
      "message": "test: Make global TRANSPORT_VERSION variable an instance variable\n\nCurrently, transport version is a global variable declared as\nTRANSPORT_VERSION in v2_p2p.py. Making it an instance variable\nwould help in sending non empty transport version packets for\ntesting purposes. It might also help EncryptedP2PState be more\nextensible in far future protocol upgrades.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-27T04:20:32Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-17T04:36:59Z"
      },
      "sha": "d4a1da8543522a213ac75761131d878eedfd4a5b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdkMDdkYWE2MjMxMWJkYjBlMmNlMjNkMGI1NWY3MTFmNTA4OGJkMjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d07daa62311bdb0e2ce23d0b55f711f5088bd28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7d07daa62311bdb0e2ce23d0b55f711f5088bd28",
      "tree": {
        "sha": "955334107b472124ea42babf2532c3f23bf2681a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/955334107b472124ea42babf2532c3f23bf2681a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4a1da8543522a213ac75761131d878eedfd4a5b",
          "sha": "d4a1da8543522a213ac75761131d878eedfd4a5b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d4a1da8543522a213ac75761131d878eedfd4a5b"
        }
      ],
      "message": "log: Add V2 handshake timeout",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:02:04Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:02:04Z"
      },
      "sha": "7d07daa62311bdb0e2ce23d0b55f711f5088bd28"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12952627673,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAAMECWnZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12952627673",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "created_at": "2024-05-28T06:55:30Z"
    },
    {
      "event": "commented",
      "id": 2134500918,
      "node_id": "IC_kwDOABII585_OeY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2134500918",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T07:12:30Z",
      "updated_at": "2024-05-28T07:12:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you for the helpful reviews @sr-gi!\r\n\r\nI've updated the PR:\r\n- `EARLY_KEY_RESPONSE` test doesn't have `magic_sent` now and the `initial_v2_handshake()` function is cleaner\r\n- `EARLY_KEY_RESPONSE` test does sending of 4 bytes ellswift (which match network magic) + remaining ellswift and garbage bytes on `MainThread` - both are done manually now\r\n- Added v2 handshake timeout log in 7d07daa\r\n\r\n     \r\n> What is weird is that the test is expecting a specific log message, which seems to also match in this case. This is still the case by the way. Is there an alternative way of making sure this does not happen?\r\n\r\nhmm fair point, i've added a log message in `InactivityCheck()` to distinguish v2 handshake timeout case from version handshake timeout.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2134500918",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "mentioned",
      "id": 12952816894,
      "node_id": "MEE_lADOABII585_MAi-zwAAAAMEDEz-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12952816894",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T07:12:31Z"
    },
    {
      "event": "subscribed",
      "id": 12952816899,
      "node_id": "SE_lADOABII585_MAi-zwAAAAMEDE0D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12952816899",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T07:12:31Z"
    },
    {
      "event": "reviewed",
      "id": 2083422330,
      "node_id": "PRR_kwDOABII5858LoB6",
      "url": null,
      "actor": null,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I love it now 🚀 \r\n\r\nACK ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2083422330",
      "submitted_at": "2024-05-28T16:59:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "review_requested",
      "id": 12960754154,
      "node_id": "RRE_lADOABII585_MAi-zwAAAAMEhWnq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12960754154",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T16:59:10Z",
      "requested_reviewer": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12960754284,
      "node_id": "RRE_lADOABII585_MAi-zwAAAAMEhWps",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12960754284",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T16:59:11Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12960754414,
      "node_id": "RRE_lADOABII585_MAi-zwAAAAMEhWru",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12960754414",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T16:59:12Z",
      "requested_reviewer": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2113793468,
      "node_id": "PRR_kwDOABII5859_e28",
      "url": null,
      "actor": null,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2113793468",
      "submitted_at": "2024-06-12T19:20:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "review_requested",
      "id": 13136395836,
      "node_id": "RRE_lADOABII585_MAi-zwAAAAMO_X48",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13136395836",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-12T19:20:19Z",
      "requested_reviewer": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUwNzVmZDEzMWQ2NjhkOWQxYmEzYzg1NjY2MjQ0ODFjNGE1NzAzMmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e075fd131d668d9d1ba3c8566624481c4a57032d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e075fd131d668d9d1ba3c8566624481c4a57032d",
      "tree": {
        "sha": "d6b7a18d1e34eacbe4ed3b5330d3870f3f27b91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6b7a18d1e34eacbe4ed3b5330d3870f3f27b91d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d07daa62311bdb0e2ce23d0b55f711f5088bd28",
          "sha": "7d07daa62311bdb0e2ce23d0b55f711f5088bd28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7d07daa62311bdb0e2ce23d0b55f711f5088bd28"
        }
      ],
      "message": "test: Introduce test types and modify v2 handshake function accordingly\n\nPrior to this commit, TestEncryptedP2PState would always\nsend initial_v2_handshake bytes in 2 parts (as required\nby early key response test).\n\nFor generalising this test and having different v2 handshake\nbehaviour based on the test type, special behaviours like\nsending initial_v2_handshake bytes in 2 parts are executed\nonly if test_type is set to EARLY_KEY_RESPONSE.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-06-17T04:29:54Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-01-30T14:20:12Z"
      },
      "sha": "e075fd131d668d9d1ba3c8566624481c4a57032d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13179695827,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAAMRkjLT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13179695827",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45b8cacfc1ed8d85e29902de8f737b02191c2f91",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/45b8cacfc1ed8d85e29902de8f737b02191c2f91",
      "created_at": "2024-06-17T05:28:16Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUzNTE1NzY4NjI0NzFmYzc3YjFlNzk4YTE2ODMzNDM5ZTIzZmYwYjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e351576862471fc77b1e798a16833439e23ff0b4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e351576862471fc77b1e798a16833439e23ff0b4",
      "tree": {
        "sha": "a3a90a38a6855692af66b72ba80512922a28510b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3a90a38a6855692af66b72ba80512922a28510b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e075fd131d668d9d1ba3c8566624481c4a57032d",
          "sha": "e075fd131d668d9d1ba3c8566624481c4a57032d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e075fd131d668d9d1ba3c8566624481c4a57032d"
        }
      ],
      "message": "test: Check that disconnection happens when >4095 garbage bytes is sent\n\nThis test type is represented using EXCESS_GARBAGE.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-06-21T14:07:13Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T15:17:45Z"
      },
      "sha": "e351576862471fc77b1e798a16833439e23ff0b4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFkMTQ4MmQ1YTIwZTZiMTU1MTg0YTQzZDA3MjRkMmRjZDk1MGNlNTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad1482d5a20e6b155184a43d0724d2dcd950ce52",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ad1482d5a20e6b155184a43d0724d2dcd950ce52",
      "tree": {
        "sha": "c3ac657a4c6392ab2919e9d3473cad09b6d75780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3ac657a4c6392ab2919e9d3473cad09b6d75780"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e351576862471fc77b1e798a16833439e23ff0b4",
          "sha": "e351576862471fc77b1e798a16833439e23ff0b4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e351576862471fc77b1e798a16833439e23ff0b4"
        }
      ],
      "message": "test: Check that disconnection happens when wrong garbage terminator is sent\n\nThis test type is represented using WRONG_GARBAGE_TERMINATOR.\nsince the wrong garbage terminator is sent to TestNode, TestNode\nwill interpret all of the gabage bytes, wrong garbage terminator,\ndecoy messages and version packet it receives as garbage bytes.\n\nIf the length of all these is more than 4095 + 16, it will result\nin a missing garbage terminator error. otherwise, it will result\nin a V2 handshake timeout error.\n\nSend only MAX_GARBAGE_LEN//2 bytes of garbage data to TestNode\nso that the total length received by the TestNode is at max\n= (MAX_GARBAGE_LEN//2) + 16 + 10*120 + 20 = 3283 bytes\n(which is less than 4095 + 16 bytes) and we get a consistent\nV2 handshake timeout error message.\n\nIf we do not limit the garbage length sent, we will intermittently\nget both missing garbage terminator error and V2 handshake\ntimeout error based on the garbage length and decoy packets length\nwhich are chosen at random.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-06-21T14:08:51Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T15:21:51Z"
      },
      "sha": "ad1482d5a20e6b155184a43d0724d2dcd950ce52"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI1ZTYyMzhmZGJiYTVjNzc3YTVhZGZhNDQ3N2RhYzUxYTgyZjQ0NDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5e6238fdbba5c777a5adfa4477dac51a82f4448",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e6238fdbba5c777a5adfa4477dac51a82f4448",
      "tree": {
        "sha": "676bc8c1b1bf826218d8c28657dc81d54132ea91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/676bc8c1b1bf826218d8c28657dc81d54132ea91"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad1482d5a20e6b155184a43d0724d2dcd950ce52",
          "sha": "ad1482d5a20e6b155184a43d0724d2dcd950ce52",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ad1482d5a20e6b155184a43d0724d2dcd950ce52"
        }
      ],
      "message": "test: Check that disconnection happens when garbage sent/received are different\n\nThis test type is represented using WRONG_GARBAGE.\nHere, garbage bytes sent to TestNode are assumed to be tampered with and\ndo not correspond to the garbage bytes which P2PInterface calculated and\nuses.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-06-21T14:09:52Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T15:27:17Z"
      },
      "sha": "b5e6238fdbba5c777a5adfa4477dac51a82f4448"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk5N2NjMDBiOTUwYTdkMWI3ZjJhMzk3MTI4MjY4NWY0ZTgxZDg3ZDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/997cc00b950a7d1b7f2a3971282685f4e81d87d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/997cc00b950a7d1b7f2a3971282685f4e81d87d2",
      "tree": {
        "sha": "8dbded84f4bc28ce8db68060ce249e820ad5b09f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dbded84f4bc28ce8db68060ce249e820ad5b09f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5e6238fdbba5c777a5adfa4477dac51a82f4448",
          "sha": "b5e6238fdbba5c777a5adfa4477dac51a82f4448",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e6238fdbba5c777a5adfa4477dac51a82f4448"
        }
      ],
      "message": "test: Check that disconnection happens when AAD isn't filled\n\nThis test type is represented using SEND_NO_AAD. If AAD of the first encrypted packet\nsent after the garbage terminator (optional decoy packet/version packet) hasn't been\nfilled, disconnection happens.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-06-21T14:10:58Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-14T08:13:52Z"
      },
      "sha": "997cc00b950a7d1b7f2a3971282685f4e81d87d2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM5ZGFjZDk1OGQ3YzFlOThiMDhhNzA4M2MyOTlkOTgxZTRjMTExOTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "tree": {
        "sha": "8b30552f92a557a6f5da9cc313b7b9f3af98cc83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b30552f92a557a6f5da9cc313b7b9f3af98cc83"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/997cc00b950a7d1b7f2a3971282685f4e81d87d2",
          "sha": "997cc00b950a7d1b7f2a3971282685f4e81d87d2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/997cc00b950a7d1b7f2a3971282685f4e81d87d2"
        }
      ],
      "message": "test: Check that non empty version packet is ignored and no disconnection happens\n\nThis test type is represented using SEND_NON_EMPTY_VERSION_PACKET.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-06-21T14:11:00Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T15:31:21Z"
      },
      "sha": "c9dacd958d7c1e98b08a7083c299d981e4c11193"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13243227373,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAAMVW5zt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13243227373",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "created_at": "2024-06-21T14:13:36Z"
    },
    {
      "event": "reviewed",
      "id": 2139518716,
      "node_id": "PRR_kwDOABII585_hnb8",
      "url": null,
      "actor": null,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK c9dacd958d7c1e98b08a7083c299d981e4c11193\r\n\r\nI'd prefer combining some of the first commits with the respective test commits that actually make use of the change, but that's just my opinion ad maybe a matter of taste.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2139518716",
      "submitted_at": "2024-06-25T18:46:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "review_requested",
      "id": 13286339148,
      "node_id": "RRE_lADOABII585_MAi-zwAAAAMX7XJM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13286339148",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-25T18:46:52Z",
      "requested_reviewer": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2145284260,
      "node_id": "PRR_kwDOABII585_3nCk",
      "url": null,
      "actor": null,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code-review ACK c9dacd958d7c1e98b08a7083c299d981e4c11193\r\n\r\nNice approach using a `EncryptedP2PState` subclass for each test scenario, I agree with other reviewers that this looks much cleaner now and is easier to follow.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2145284260",
      "submitted_at": "2024-06-27T13:02:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "commented",
      "id": 2218656952,
      "node_id": "IC_kwDOABII586EPgS4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2218656952",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-09T20:18:10Z",
      "updated_at": "2024-07-09T20:18:10Z",
      "author_association": "MEMBER",
      "body": "ACK c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2218656952",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "merged",
      "id": 13446413949,
      "node_id": "ME_lADOABII585_MAi-zwAAAAMhd_59",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13446413949",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c51c694ede0806872ad27e245146f4c82d62e582",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c51c694ede0806872ad27e245146f4c82d62e582",
      "created_at": "2024-07-09T20:37:40Z"
    },
    {
      "event": "closed",
      "id": 13446413966,
      "node_id": "CE_lADOABII585_MAi-zwAAAAMhd_6O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13446413966",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-09T20:37:40Z"
    },
    {
      "event": "commented",
      "id": 2219908962,
      "node_id": "IC_kwDOABII586EUR9i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2219908962",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-10T08:39:43Z",
      "updated_at": "2024-07-10T08:39:43Z",
      "author_association": "MEMBER",
      "body": "Looks like this is causing intermittent CI failures. See #30419.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2219908962",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "labeled",
      "id": 13476675294,
      "node_id": "LE_lADOABII585_MAi-zwAAAAMjRb7e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13476675294",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T19:43:17Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "commented",
      "id": 2227216955,
      "node_id": "IC_kwDOABII586EwKI7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2227216955",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-14T06:50:41Z",
      "updated_at": "2024-07-14T06:50:41Z",
      "author_association": "MEMBER",
      "body": "Ported to the CMake-based build system in https://github.com/hebasto/bitcoin/pull/264.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2227216955",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "unlabeled",
      "id": 13497146506,
      "node_id": "UNLE_lADOABII585_MAi-zwAAAAMkfhyK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13497146506",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-14T06:50:48Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_deleted",
      "id": 13531602461,
      "node_id": "HRDE_lADOABII585_MAi-zwAAAAMmi94d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13531602461",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T06:39:18Z"
    },
    {
      "event": "referenced",
      "id": 14657329929,
      "node_id": "REFE_lADOABII585_MAi-zwAAAANppRsJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14657329929",
      "actor": {
        "login": "kwvg",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwvg",
        "html_url": "https://github.com/kwvg",
        "followers_url": "https://api.github.com/users/kwvg/followers",
        "following_url": "https://api.github.com/users/kwvg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwvg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwvg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwvg/subscriptions",
        "organizations_url": "https://api.github.com/users/kwvg/orgs",
        "repos_url": "https://api.github.com/users/kwvg/repos",
        "events_url": "https://api.github.com/users/kwvg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwvg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4cada31123acca29afe57d883ebeceddb5d802c0",
      "commit_url": "https://api.github.com/repos/kwvg/dash/commits/4cada31123acca29afe57d883ebeceddb5d802c0",
      "created_at": "2024-10-15T13:09:19Z"
    },
    {
      "event": "referenced",
      "id": 14806076959,
      "node_id": "REFE_lADOABII585_MAi-zwAAAANygs4f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14806076959",
      "actor": {
        "login": "kwvg",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwvg",
        "html_url": "https://github.com/kwvg",
        "followers_url": "https://api.github.com/users/kwvg/followers",
        "following_url": "https://api.github.com/users/kwvg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwvg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwvg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwvg/subscriptions",
        "organizations_url": "https://api.github.com/users/kwvg/orgs",
        "repos_url": "https://api.github.com/users/kwvg/repos",
        "events_url": "https://api.github.com/users/kwvg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwvg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3ff20285e075ee758ff5c3f3ff913c5952f0e293",
      "commit_url": "https://api.github.com/repos/kwvg/dash/commits/3ff20285e075ee758ff5c3f3ff913c5952f0e293",
      "created_at": "2024-10-23T08:55:56Z"
    },
    {
      "event": "referenced",
      "id": 14817243825,
      "node_id": "REFE_lADOABII585_MAi-zwAAAANzLTKx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14817243825",
      "actor": {
        "login": "kwvg",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwvg",
        "html_url": "https://github.com/kwvg",
        "followers_url": "https://api.github.com/users/kwvg/followers",
        "following_url": "https://api.github.com/users/kwvg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwvg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwvg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwvg/subscriptions",
        "organizations_url": "https://api.github.com/users/kwvg/orgs",
        "repos_url": "https://api.github.com/users/kwvg/repos",
        "events_url": "https://api.github.com/users/kwvg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwvg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6d9665df122be803e0ca63fb25990b849f719a74",
      "commit_url": "https://api.github.com/repos/kwvg/dash/commits/6d9665df122be803e0ca63fb25990b849f719a74",
      "created_at": "2024-10-23T13:55:17Z"
    },
    {
      "event": "referenced",
      "id": 14818250407,
      "node_id": "REFE_lADOABII585_MAi-zwAAAANzPI6n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14818250407",
      "actor": {
        "login": "kwvg",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwvg",
        "html_url": "https://github.com/kwvg",
        "followers_url": "https://api.github.com/users/kwvg/followers",
        "following_url": "https://api.github.com/users/kwvg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwvg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwvg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwvg/subscriptions",
        "organizations_url": "https://api.github.com/users/kwvg/orgs",
        "repos_url": "https://api.github.com/users/kwvg/repos",
        "events_url": "https://api.github.com/users/kwvg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwvg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a454a7c176a3c9907e3506760d29126b07cd4e1c",
      "commit_url": "https://api.github.com/repos/kwvg/dash/commits/a454a7c176a3c9907e3506760d29126b07cd4e1c",
      "created_at": "2024-10-23T14:26:32Z"
    },
    {
      "event": "referenced",
      "id": 14852791961,
      "node_id": "REFE_lADOABII585_MAi-zwAAAAN1S56Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14852791961",
      "actor": {
        "login": "kwvg",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwvg",
        "html_url": "https://github.com/kwvg",
        "followers_url": "https://api.github.com/users/kwvg/followers",
        "following_url": "https://api.github.com/users/kwvg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwvg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwvg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwvg/subscriptions",
        "organizations_url": "https://api.github.com/users/kwvg/orgs",
        "repos_url": "https://api.github.com/users/kwvg/repos",
        "events_url": "https://api.github.com/users/kwvg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwvg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "486cdd3775179fb09b07d77b4aa68d9a2cac9b9b",
      "commit_url": "https://api.github.com/repos/kwvg/dash/commits/486cdd3775179fb09b07d77b4aa68d9a2cac9b9b",
      "created_at": "2024-10-24T14:29:26Z"
    },
    {
      "event": "referenced",
      "id": 14853256782,
      "node_id": "REFE_lADOABII585_MAi-zwAAAAN1UrZO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14853256782",
      "actor": {
        "login": "kwvg",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwvg",
        "html_url": "https://github.com/kwvg",
        "followers_url": "https://api.github.com/users/kwvg/followers",
        "following_url": "https://api.github.com/users/kwvg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwvg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwvg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwvg/subscriptions",
        "organizations_url": "https://api.github.com/users/kwvg/orgs",
        "repos_url": "https://api.github.com/users/kwvg/repos",
        "events_url": "https://api.github.com/users/kwvg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwvg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4735b8297917b3844a879a7e4e507bb5dcb3fba6",
      "commit_url": "https://api.github.com/repos/kwvg/dash/commits/4735b8297917b3844a879a7e4e507bb5dcb3fba6",
      "created_at": "2024-10-24T14:51:58Z"
    },
    {
      "event": "referenced",
      "id": 14854787702,
      "node_id": "REFE_lADOABII585_MAi-zwAAAAN1ahJ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14854787702",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2e162da06f9aa4388444b55bff51505036798db3",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/2e162da06f9aa4388444b55bff51505036798db3",
      "created_at": "2024-10-24T16:15:02Z"
    },
    {
      "event": "locked",
      "id": 18701571494,
      "node_id": "LOE_lADOABII585_MAi-zwAAAARas1Wm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18701571494",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-18T14:12:53Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491842216",
      "pull_request_review_id": 1884147732,
      "id": 1491842216,
      "node_id": "PRRC_kwDOABII585Y67So",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 60,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": null,
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "doesn't the `+1` make the `garbage_len` greater than `4095` which is what is being covered in `TestType.EXCESS_GARBAGE`",
      "created_at": "2024-02-16T01:03:36Z",
      "updated_at": "2024-02-16T01:03:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491842216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491842216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491843089",
      "pull_request_review_id": 1884149060,
      "id": 1491843089,
      "node_id": "PRRC_kwDOABII585Y67gR",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 60,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": 1491842216,
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "never mind randrange doesn't include the value passed",
      "created_at": "2024-02-16T01:05:25Z",
      "updated_at": "2024-02-16T01:05:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491843089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491843089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491848110",
      "pull_request_review_id": 1884162177,
      "id": 1491848110,
      "node_id": "PRRC_kwDOABII585Y68uu",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\n+\n+        self.sent_garbage = random.randbytes(garbage_len)\n+        logger.debug(f\"sending {garbage_len} bytes of garbage data\")\n+\n+        if self.test_type == TestType.WRONG_GARBAGE:\n+            # assume that garbage bytes sent to TestNode were tampered with\n+            return self.ellswift_ours + random_bitflip(self.sent_garbage)\n+        else:\n+            return self.ellswift_ours + self.sent_garbage\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n+        else:\n+            return super().initiate_v2_handshake()\n+\n+    def complete_handshake(self, response):\n+        \"\"\"Add option for sending wrong garbage terminator, not filling first encrypted packet after garbage terminator\n+        with AAD, sending non-empty transport version packet.\n+        when TestType = (WRONG_GARBAGE_TERMINATOR, SEND_NO_AAD, SEND_NON_EMPTY_VERSION_PACKET)\"\"\"\n+        ellswift_theirs = self.received_prefix + response.read(64 - len(self.received_prefix))\n+        # return b\"\" if we need to receive more bytes\n+        if len(ellswift_theirs) != 64:\n+            return 0, b\"\"\n+        ecdh_secret = self.v2_ecdh(self.privkey_ours, ellswift_theirs, self.ellswift_ours, self.initiating)\n+        self.initialize_v2_transport(ecdh_secret)\n+        # Send garbage terminator\n+        msg_to_send = self.peer['send_garbage_terminator']\n+        aad = self.sent_garbage\n+\n+        if self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            msg_to_send = random_bitflip(msg_to_send)\n+        elif self.test_type == TestType.SEND_NO_AAD:\n+            aad = b''\n+\n+        # Optionally send decoy packets after garbage terminator.\n+        for decoy_content_len in [random.randint(1, 100) for _ in range(random.randint(0, 10))]:\n+            msg_to_send += self.v2_enc_packet(decoy_content_len * b'\\x00', aad=aad, ignore=True)\n+            aad = b''\n+\n+        # Send version packet.\n+        if self.test_type == TestType.SEND_NON_EMPTY_VERSION_PACKET:\n+            msg_to_send += self.v2_enc_packet(random.randbytes(5), aad=aad)\n+        else:\n+            msg_to_send += self.v2_enc_packet(TRANSPORT_VERSION, aad=aad)\n+\n+        return 64 - len(self.received_prefix), msg_to_send\n+\n+\n+class MisbehavingV2Peer(P2PInterface):\n+    \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__()\n+        self.v2_state = None\n+        self.connection_opened = False\n+        self.test_type = test_type\n+\n+    def connection_made(self, transport):\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n+        super().connection_made(transport)\n+\n+    def data_received(self, t):\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n+\n+    def on_open(self):\n+        self.connection_opened = True\n+\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n+\n+    def run_test(self):\n+        self.test_earlykeyresponse()\n+        self.test_v2disconnection()\n+\n+    def test_earlykeyresponse(self):\n+        self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n+        self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n+        node0 = self.nodes[0]\n+        self.log.info('Sending first 4 bytes of ellswift which match network magic')\n+        self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n+        # send happens in `initiate_v2_handshake()` in `connection_made()`\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True)\n+        self.wait_until(lambda: peer1.connection_opened)\n+        self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n+        self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n+        ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n+        peer1.send_raw_message(ellswift_and_garbage_data)\n+        with self.nodes[0].assert_debug_log(['version handshake timeout peer=0']):\n+            peer1.wait_for_disconnect(timeout=5)\n+        self.log.info('successful disconnection since modified ellswift was sent as response')\n+\n+    def test_v2disconnection(self):\n+        # test v2 disconnection scenarios\n+        node0 = self.nodes[0]\n+        expected_debug_message = [\n+            [],  # EARLY_KEY_RESPONSE\n+            [\"V2 transport error: missing garbage terminator, peer=1\"],  # EXCESS_GARBAGE\n+            [\"version handshake timeout peer=2\"],  # WRONG_GARBAGE_TERMINATOR\n+            [\"V2 transport error: packet decryption failure\"],  # WRONG_GARBAGE\n+            [\"V2 transport error: packet decryption failure\"],  # SEND_NO_AAD\n+            [],  # SEND_NON_EMPTY_VERSION_PACKET\n+        ]\n+        for test_type in TestType:\n+            if test_type == TestType.EARLY_KEY_RESPONSE:\n+                continue",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 164,
      "original_position": 190,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": null,
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do you think it would make sense to use `test_earlykeyresponse` here and then make `test_v2disconnection` into `run_test`",
      "created_at": "2024-02-16T01:15:28Z",
      "updated_at": "2024-02-16T15:12:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491848110",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491848110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491897558",
      "pull_request_review_id": 1884162177,
      "id": 1491897558,
      "node_id": "PRRC_kwDOABII585Y7IzW",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\n+\n+        self.sent_garbage = random.randbytes(garbage_len)\n+        logger.debug(f\"sending {garbage_len} bytes of garbage data\")\n+\n+        if self.test_type == TestType.WRONG_GARBAGE:\n+            # assume that garbage bytes sent to TestNode were tampered with\n+            return self.ellswift_ours + random_bitflip(self.sent_garbage)\n+        else:\n+            return self.ellswift_ours + self.sent_garbage\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n+        else:\n+            return super().initiate_v2_handshake()\n+\n+    def complete_handshake(self, response):\n+        \"\"\"Add option for sending wrong garbage terminator, not filling first encrypted packet after garbage terminator\n+        with AAD, sending non-empty transport version packet.\n+        when TestType = (WRONG_GARBAGE_TERMINATOR, SEND_NO_AAD, SEND_NON_EMPTY_VERSION_PACKET)\"\"\"\n+        ellswift_theirs = self.received_prefix + response.read(64 - len(self.received_prefix))\n+        # return b\"\" if we need to receive more bytes\n+        if len(ellswift_theirs) != 64:\n+            return 0, b\"\"\n+        ecdh_secret = self.v2_ecdh(self.privkey_ours, ellswift_theirs, self.ellswift_ours, self.initiating)\n+        self.initialize_v2_transport(ecdh_secret)\n+        # Send garbage terminator\n+        msg_to_send = self.peer['send_garbage_terminator']\n+        aad = self.sent_garbage\n+\n+        if self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            msg_to_send = random_bitflip(msg_to_send)\n+        elif self.test_type == TestType.SEND_NO_AAD:\n+            aad = b''\n+\n+        # Optionally send decoy packets after garbage terminator.\n+        for decoy_content_len in [random.randint(1, 100) for _ in range(random.randint(0, 10))]:\n+            msg_to_send += self.v2_enc_packet(decoy_content_len * b'\\x00', aad=aad, ignore=True)\n+            aad = b''\n+\n+        # Send version packet.\n+        if self.test_type == TestType.SEND_NON_EMPTY_VERSION_PACKET:\n+            msg_to_send += self.v2_enc_packet(random.randbytes(5), aad=aad)\n+        else:\n+            msg_to_send += self.v2_enc_packet(TRANSPORT_VERSION, aad=aad)\n+\n+        return 64 - len(self.received_prefix), msg_to_send\n+\n+\n+class MisbehavingV2Peer(P2PInterface):\n+    \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__()\n+        self.v2_state = None\n+        self.connection_opened = False\n+        self.test_type = test_type\n+\n+    def connection_made(self, transport):\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n+        super().connection_made(transport)\n+\n+    def data_received(self, t):\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n+\n+    def on_open(self):\n+        self.connection_opened = True\n+\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n+\n+    def run_test(self):\n+        self.test_earlykeyresponse()\n+        self.test_v2disconnection()",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 133,
      "original_position": 158,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": null,
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are the `test_type`'s in `test_v2disconnection` dependent on `test_earlykeyresponse` to run first?\r\n\r\nI tried running the tests individually for each `test_type` but I ran into this error, using this diff a74f4ddcc50eeba04977d8eeb96ffee2a94dbbf9 \r\n```\r\n2024-02-16T02:38:17.055000Z TestFramework (INFO): PRNG seed is: 8074818075718275852\r\n2024-02-16T02:38:17.056000Z TestFramework (INFO): Initializing test directory /var/folders/9g/cvx014yx4dq5lwl_x5zvn_j80000gn/T/bitcoin_func_test_dmwxb4ar\r\n2024-02-16T02:38:22.936000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/Users/kevkevin/DEVDIR/bitcoin/test/functional/test_framework/test_framework.py\", line 131, in main\r\n    self.run_test()\r\n  File \"/Users/kevkevin/DEVDIR/bitcoin/./test/functional/p2p_v2_misbehaving.py\", line 176, in run_test\r\n    with self.nodes[0].assert_debug_log(expected_debug_message[test_type.value], timeout=5):\r\n  File \"/usr/local/Cellar/python@3.11/3.11.6_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py\", line 144, in __exit__\r\n    next(self.gen)\r\n  File \"/Users/kevkevin/DEVDIR/bitcoin/test/functional/test_framework/test_node.py\", line 492, in assert_debug_log\r\n    self._raise_assertion_error('Expected messages \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(str(expected_msgs), print_log))\r\n  File \"/Users/kevkevin/DEVDIR/bitcoin/test/functional/test_framework/test_node.py\", line 190, in _raise_assertion_error\r\n    raise AssertionError(self._node_msg(msg))\r\nAssertionError: [node 0] Expected messages \"['version handshake timeout peer=2']\" does not partially match log:\r\n\r\n - 2024-02-16T02:38:17.908176Z [net] [net.cpp:3712] [CNode] [net] Added connection peer=0\r\n - 2024-02-16T02:38:17.908650Z [net] [net.cpp:1820] [CreateNodeFromAcceptedSocket] [net] connection from 127.0.0.1:63849 accepted\r\n - 2024-02-16T02:38:21.015546Z [net] [net.cpp:1992] [InactivityCheck] [net] version handshake timeout peer=0\r\n - 2024-02-16T02:38:21.015844Z [net] [net.cpp:555] [CloseSocketDisconnect] [net] disconnecting peer=0\r\n - 2024-02-16T02:38:21.016463Z [net] [net_processing.cpp:1672] [FinalizeNode] [net] Cleared nodestate for peer=0\r\n\r\n\r\n2024-02-16T02:38:22.999000Z TestFramework (INFO): Stopping nodes\r\n2024-02-16T02:38:23.270000Z TestFramework (WARNING): Not cleaning up dir /var/folders/9g/cvx014yx4dq5lwl_x5zvn_j80000gn/T/bitcoin_func_test_dmwxb4ar\r\n2024-02-16T02:38:23.270000Z TestFramework (ERROR): Test failed. Test logging available at /var/folders/9g/cvx014yx4dq5lwl_x5zvn_j80000gn/T/bitcoin_func_test_dmwxb4ar/test_framework.log\r\n2024-02-16T02:38:23.271000Z TestFramework (ERROR):\r\n2024-02-16T02:38:23.271000Z TestFramework (ERROR): Hint: Call /Users/kevkevin/DEVDIR/bitcoin/test/functional/combine_logs.py '/var/folders/9g/cvx014yx4dq5lwl_x5zvn_j80000gn/T/bitcoin_func_test_dmwxb4ar' to consolidate all logs\r\n2024-02-16T02:38:23.271000Z TestFramework (ERROR):\r\n2024-02-16T02:38:23.271000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2024-02-16T02:38:23.272000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2024-02-16T02:38:23.272000Z TestFramework (ERROR):\r\n```",
      "created_at": "2024-02-16T02:43:16Z",
      "updated_at": "2024-02-16T15:12:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491897558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491897558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": 132,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": 133,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491901555",
      "pull_request_review_id": 1884232439,
      "id": 1491901555,
      "node_id": "PRRC_kwDOABII585Y7Jxz",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 60,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": 1491842216,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes!",
      "created_at": "2024-02-16T02:51:30Z",
      "updated_at": "2024-02-16T02:51:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491901555",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491901555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494116658",
      "pull_request_review_id": 1887729403,
      "id": 1494116658,
      "node_id": "PRRC_kwDOABII585ZDmky",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\n+\n+        self.sent_garbage = random.randbytes(garbage_len)\n+        logger.debug(f\"sending {garbage_len} bytes of garbage data\")\n+\n+        if self.test_type == TestType.WRONG_GARBAGE:\n+            # assume that garbage bytes sent to TestNode were tampered with\n+            return self.ellswift_ours + random_bitflip(self.sent_garbage)\n+        else:\n+            return self.ellswift_ours + self.sent_garbage\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n+        else:\n+            return super().initiate_v2_handshake()\n+\n+    def complete_handshake(self, response):\n+        \"\"\"Add option for sending wrong garbage terminator, not filling first encrypted packet after garbage terminator\n+        with AAD, sending non-empty transport version packet.\n+        when TestType = (WRONG_GARBAGE_TERMINATOR, SEND_NO_AAD, SEND_NON_EMPTY_VERSION_PACKET)\"\"\"\n+        ellswift_theirs = self.received_prefix + response.read(64 - len(self.received_prefix))\n+        # return b\"\" if we need to receive more bytes\n+        if len(ellswift_theirs) != 64:\n+            return 0, b\"\"\n+        ecdh_secret = self.v2_ecdh(self.privkey_ours, ellswift_theirs, self.ellswift_ours, self.initiating)\n+        self.initialize_v2_transport(ecdh_secret)\n+        # Send garbage terminator\n+        msg_to_send = self.peer['send_garbage_terminator']\n+        aad = self.sent_garbage\n+\n+        if self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            msg_to_send = random_bitflip(msg_to_send)\n+        elif self.test_type == TestType.SEND_NO_AAD:\n+            aad = b''\n+\n+        # Optionally send decoy packets after garbage terminator.\n+        for decoy_content_len in [random.randint(1, 100) for _ in range(random.randint(0, 10))]:\n+            msg_to_send += self.v2_enc_packet(decoy_content_len * b'\\x00', aad=aad, ignore=True)\n+            aad = b''\n+\n+        # Send version packet.\n+        if self.test_type == TestType.SEND_NON_EMPTY_VERSION_PACKET:\n+            msg_to_send += self.v2_enc_packet(random.randbytes(5), aad=aad)\n+        else:\n+            msg_to_send += self.v2_enc_packet(TRANSPORT_VERSION, aad=aad)\n+\n+        return 64 - len(self.received_prefix), msg_to_send\n+\n+\n+class MisbehavingV2Peer(P2PInterface):\n+    \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__()\n+        self.v2_state = None\n+        self.connection_opened = False\n+        self.test_type = test_type\n+\n+    def connection_made(self, transport):\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n+        super().connection_made(transport)\n+\n+    def data_received(self, t):\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n+\n+    def on_open(self):\n+        self.connection_opened = True\n+\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n+\n+    def run_test(self):\n+        self.test_earlykeyresponse()\n+        self.test_v2disconnection()\n+\n+    def test_earlykeyresponse(self):\n+        self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n+        self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n+        node0 = self.nodes[0]\n+        self.log.info('Sending first 4 bytes of ellswift which match network magic')\n+        self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n+        # send happens in `initiate_v2_handshake()` in `connection_made()`\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True)\n+        self.wait_until(lambda: peer1.connection_opened)\n+        self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n+        self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n+        ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n+        peer1.send_raw_message(ellswift_and_garbage_data)\n+        with self.nodes[0].assert_debug_log(['version handshake timeout peer=0']):\n+            peer1.wait_for_disconnect(timeout=5)\n+        self.log.info('successful disconnection since modified ellswift was sent as response')\n+\n+    def test_v2disconnection(self):\n+        # test v2 disconnection scenarios\n+        node0 = self.nodes[0]\n+        expected_debug_message = [\n+            [],  # EARLY_KEY_RESPONSE\n+            [\"V2 transport error: missing garbage terminator, peer=1\"],  # EXCESS_GARBAGE\n+            [\"version handshake timeout peer=2\"],  # WRONG_GARBAGE_TERMINATOR\n+            [\"V2 transport error: packet decryption failure\"],  # WRONG_GARBAGE\n+            [\"V2 transport error: packet decryption failure\"],  # SEND_NO_AAD\n+            [],  # SEND_NON_EMPTY_VERSION_PACKET\n+        ]\n+        for test_type in TestType:\n+            if test_type == TestType.EARLY_KEY_RESPONSE:\n+                continue",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 164,
      "original_position": 190,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": 1491848110,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`test_earlykeyresponse` sends handshake bytes etc.. in the `MainThread` and I feel it's better to isolate that behaviour in a different test.\r\n\r\nalso, if you grep for `def test_` in `test/functional`, you'll see many [examples](https://github.com/bitcoin/bitcoin/blob/3cbc8cbc71d3d6ecfaf41164ce59c24ac94bae99/test/functional/feature_asmap.py#L128) of different tests listed in `run_test()` using the pattern which is currently used.",
      "created_at": "2024-02-19T07:35:13Z",
      "updated_at": "2024-02-19T07:51:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1494116658",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494116658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494131410",
      "pull_request_review_id": 1887729403,
      "id": 1494131410,
      "node_id": "PRRC_kwDOABII585ZDqLS",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\n+\n+        self.sent_garbage = random.randbytes(garbage_len)\n+        logger.debug(f\"sending {garbage_len} bytes of garbage data\")\n+\n+        if self.test_type == TestType.WRONG_GARBAGE:\n+            # assume that garbage bytes sent to TestNode were tampered with\n+            return self.ellswift_ours + random_bitflip(self.sent_garbage)\n+        else:\n+            return self.ellswift_ours + self.sent_garbage\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n+        else:\n+            return super().initiate_v2_handshake()\n+\n+    def complete_handshake(self, response):\n+        \"\"\"Add option for sending wrong garbage terminator, not filling first encrypted packet after garbage terminator\n+        with AAD, sending non-empty transport version packet.\n+        when TestType = (WRONG_GARBAGE_TERMINATOR, SEND_NO_AAD, SEND_NON_EMPTY_VERSION_PACKET)\"\"\"\n+        ellswift_theirs = self.received_prefix + response.read(64 - len(self.received_prefix))\n+        # return b\"\" if we need to receive more bytes\n+        if len(ellswift_theirs) != 64:\n+            return 0, b\"\"\n+        ecdh_secret = self.v2_ecdh(self.privkey_ours, ellswift_theirs, self.ellswift_ours, self.initiating)\n+        self.initialize_v2_transport(ecdh_secret)\n+        # Send garbage terminator\n+        msg_to_send = self.peer['send_garbage_terminator']\n+        aad = self.sent_garbage\n+\n+        if self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            msg_to_send = random_bitflip(msg_to_send)\n+        elif self.test_type == TestType.SEND_NO_AAD:\n+            aad = b''\n+\n+        # Optionally send decoy packets after garbage terminator.\n+        for decoy_content_len in [random.randint(1, 100) for _ in range(random.randint(0, 10))]:\n+            msg_to_send += self.v2_enc_packet(decoy_content_len * b'\\x00', aad=aad, ignore=True)\n+            aad = b''\n+\n+        # Send version packet.\n+        if self.test_type == TestType.SEND_NON_EMPTY_VERSION_PACKET:\n+            msg_to_send += self.v2_enc_packet(random.randbytes(5), aad=aad)\n+        else:\n+            msg_to_send += self.v2_enc_packet(TRANSPORT_VERSION, aad=aad)\n+\n+        return 64 - len(self.received_prefix), msg_to_send\n+\n+\n+class MisbehavingV2Peer(P2PInterface):\n+    \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__()\n+        self.v2_state = None\n+        self.connection_opened = False\n+        self.test_type = test_type\n+\n+    def connection_made(self, transport):\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n+        super().connection_made(transport)\n+\n+    def data_received(self, t):\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n+\n+    def on_open(self):\n+        self.connection_opened = True\n+\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n+\n+    def run_test(self):\n+        self.test_earlykeyresponse()\n+        self.test_v2disconnection()",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 133,
      "original_position": 158,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": 1491897558,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah! `expected_debug_message` on [L180](https://github.com/bitcoin/bitcoin/blob/ec9005ca4be088dfa2d247bbfe964a9c98e4f29d/test/functional/p2p_v2_misbehaving.py#L180) was written with the assumption that `test_v2disconnection` is run after `test_earlykeyresponse`. so peer=0 happens in `test_earlykeyresponse` and peer=1,2,3,4,5 happens in  `test_v2disconnection`.",
      "created_at": "2024-02-19T07:50:51Z",
      "updated_at": "2024-02-19T07:51:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1494131410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494131410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": 132,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": 133,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506721918",
      "pull_request_review_id": 1907520121,
      "id": 1506721918,
      "node_id": "PRRC_kwDOABII585ZzsB-",
      "diff_hunk": "@@ -694,6 +694,9 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, send_version=Tru\n         supports_v2_p2p = self.use_v2transport and supports_v2_p2p\n         p2p_conn.peer_connect(**kwargs, send_version=send_version, net=self.chain, timeout_factor=self.timeout_factor, supports_v2_p2p=supports_v2_p2p)()\n \n+        if wait_for_disconnect:",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 13,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "32f9afb00ad26da3570cc89e5ac8904de0e26fa0",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems not ideal to me that this is done before the line `self.p2ps.append(p2p_conn)`.\r\nI think it could lead to errors in which we expect to get disconnected but actually didn't: If we just haven't established the connected yet (i.e. the `connection_made` callback hasn't been called yet), we could abort here, and only afterwards establish the connection that would then not be part of `self.p2ps`.\r\n\r\nA better approach in general might be to have an `expect_success` parameter instead that just skips the waits below and returns, and let the individual test deal with the waiting for disconnection waiting (depending on the test it could ask the TestNode, the test framework, both to wait, or do something else like checking logs for specific disconnect reasons, which the tests you add later already do). ",
      "created_at": "2024-02-28T22:06:19Z",
      "updated_at": "2024-03-07T22:24:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1506721918",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506721918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516792089",
      "pull_request_review_id": 1907520121,
      "id": 1516792089,
      "node_id": "PRRC_kwDOABII585aaGkZ",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 28,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "af6bd3f664aeb42094a50d31f4f5349c149000b4",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: its",
      "created_at": "2024-03-07T20:39:28Z",
      "updated_at": "2024-03-07T22:24:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1516792089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516792089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516838229",
      "pull_request_review_id": 1907520121,
      "id": 1516838229,
      "node_id": "PRRC_kwDOABII585aaR1V",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+\n \n-    def __init__(self):\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n         super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        return super().generate_keypair_and_garbage()\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n         else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n+            return super().initiate_v2_handshake()\n \n \n-class PeerEarlyKey(P2PInterface):\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n         self.v2_state = None\n         self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n         super().connection_made(transport)\n \n     def data_received(self, t):\n-        # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (send_net_magic = False)\n-        assert self.v2_state.can_data_be_received and not self.v2_state.send_net_magic\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n \n     def on_open(self):\n         self.connection_opened = True\n \n-class P2PEarlyKey(BitcoinTestFramework):\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n \n     def run_test(self):\n+        self.test_earlykeyresponse()\n+\n+    def test_earlykeyresponse(self):\n         self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n         self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n         node0 = self.nodes[0]\n         self.log.info('Sending first 4 bytes of ellswift which match network magic')\n         self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n         # send happens in `initiate_v2_handshake()` in `connection_made()`\n-        peer1 = node0.add_p2p_connection(PeerEarlyKey(), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n         self.wait_until(lambda: peer1.connection_opened)\n         self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n         self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n         ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n         peer1.send_raw_message(ellswift_and_garbage_data)\n-        peer1.wait_for_disconnect(timeout=5)\n-        self.log.info('successful disconnection when MITM happens in the key exchange phase')\n+        with self.nodes[0].assert_debug_log(['version handshake timeout peer=0']):",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 141,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "af6bd3f664aeb42094a50d31f4f5349c149000b4",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can use `node0`",
      "created_at": "2024-03-07T21:12:00Z",
      "updated_at": "2024-03-07T22:24:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1516838229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516838229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519263987",
      "pull_request_review_id": 1927099239,
      "id": 1519263987,
      "node_id": "PRRC_kwDOABII585ajiDz",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+\n \n-    def __init__(self):\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n         super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        return super().generate_keypair_and_garbage()\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n         else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n+            return super().initiate_v2_handshake()\n \n \n-class PeerEarlyKey(P2PInterface):\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n         self.v2_state = None\n         self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n         super().connection_made(transport)\n \n     def data_received(self, t):\n-        # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (send_net_magic = False)\n-        assert self.v2_state.can_data_be_received and not self.v2_state.send_net_magic\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n \n     def on_open(self):\n         self.connection_opened = True\n \n-class P2PEarlyKey(BitcoinTestFramework):\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n \n     def run_test(self):\n+        self.test_earlykeyresponse()\n+\n+    def test_earlykeyresponse(self):\n         self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n         self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n         node0 = self.nodes[0]\n         self.log.info('Sending first 4 bytes of ellswift which match network magic')\n         self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n         # send happens in `initiate_v2_handshake()` in `connection_made()`\n-        peer1 = node0.add_p2p_connection(PeerEarlyKey(), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n         self.wait_until(lambda: peer1.connection_opened)\n         self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n         self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n         ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n         peer1.send_raw_message(ellswift_and_garbage_data)\n-        peer1.wait_for_disconnect(timeout=5)\n-        self.log.info('successful disconnection when MITM happens in the key exchange phase')\n+        with self.nodes[0].assert_debug_log(['version handshake timeout peer=0']):",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 141,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "af6bd3f664aeb42094a50d31f4f5349c149000b4",
      "in_reply_to_id": 1516838229,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2024-03-11T07:42:50Z",
      "updated_at": "2024-03-11T07:42:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1519263987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519263987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519264157",
      "pull_request_review_id": 1927099456,
      "id": 1519264157,
      "node_id": "PRRC_kwDOABII585ajiGd",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 28,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "af6bd3f664aeb42094a50d31f4f5349c149000b4",
      "in_reply_to_id": 1516792089,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2024-03-11T07:43:00Z",
      "updated_at": "2024-03-11T07:43:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1519264157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519264157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519266541",
      "pull_request_review_id": 1927104835,
      "id": 1519266541,
      "node_id": "PRRC_kwDOABII585ajirt",
      "diff_hunk": "@@ -694,6 +694,9 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, send_version=Tru\n         supports_v2_p2p = self.use_v2transport and supports_v2_p2p\n         p2p_conn.peer_connect(**kwargs, send_version=send_version, net=self.chain, timeout_factor=self.timeout_factor, supports_v2_p2p=supports_v2_p2p)()\n \n+        if wait_for_disconnect:",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 13,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "32f9afb00ad26da3570cc89e5ac8904de0e26fa0",
      "in_reply_to_id": 1506721918,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "woah more racy thread logic. good catch! i've implemented the `expect_success` parameter suggestion.",
      "created_at": "2024-03-11T07:45:57Z",
      "updated_at": "2024-03-11T07:45:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1519266541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519266541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1537611908",
      "pull_request_review_id": 1957780790,
      "id": 1537611908,
      "node_id": "PRRC_kwDOABII585bphiE",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+\n \n-    def __init__(self):\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n         super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        return super().generate_keypair_and_garbage()\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 70,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ee562933765e64babe067bfcb56a65c8637df82c",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit ee562933765e64babe067bfcb56a65c8637df82c, magic-number-nit:\r\n```suggestion\r\n                return MAGIC_BYTES[self.net]\r\n```",
      "created_at": "2024-03-25T13:36:24Z",
      "updated_at": "2024-03-25T14:17:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1537611908",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1537611908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605174508",
      "pull_request_review_id": 2063714050,
      "id": 1605174508,
      "node_id": "PRRC_kwDOABII585frQTs",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+\n \n-    def __init__(self):\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n         super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        return super().generate_keypair_and_garbage()\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 70,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "ee562933765e64babe067bfcb56a65c8637df82c",
      "in_reply_to_id": 1537611908,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2024-05-17T15:18:44Z",
      "updated_at": "2024-05-17T15:18:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1605174508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605174508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606879417",
      "pull_request_review_id": 2066388767,
      "id": 1606879417,
      "node_id": "PRRC_kwDOABII585fxwi5",
      "diff_hunk": "@@ -79,6 +78,7 @@ class EncryptedP2PState:\n \n         encrypt/decrypt v2 P2P messages using v2_enc_packet() and v2_receive_packet().\n     \"\"\"\n+    transport_version = b''",
      "path": "test/functional/test_framework/v2_p2p.py",
      "position": null,
      "original_position": 12,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "38eb42984406dd9eabba0e3d197c7336aed495c7",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 38eb42984406dd9eabba0e3d197c7336aed495c7\r\n\r\nThis is not being used as a class attribute, so it should belong inside `__init__()`",
      "created_at": "2024-05-20T14:46:56Z",
      "updated_at": "2024-05-20T16:38:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1606879417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606879417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606901839",
      "pull_request_review_id": 2066388767,
      "id": 1606901839,
      "node_id": "PRRC_kwDOABII585fx2BP",
      "diff_hunk": "@@ -3,87 +3,100 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n-\n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+    EARLY_KEY_RESPONSE = 0\n+\n+\n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+        # It is sent in 2 phases:\n+        # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+        # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+        if not self.magic_sent:\n+            self.generate_keypair_and_garbage()\n+            self.magic_sent = True\n+            return MAGIC_BYTES[self.net]\n         else:\n+            # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+            # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+            # This state is represented using `can_data_be_received` = False.\n+            # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+            # This state is represented using `can_data_be_received` = True.",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 72,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "6d9df282d0ca925a596787df18bf88ae48deef3a",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6d9df282d0ca925a596787df18bf88ae48deef3a\r\n\r\nI still think this can be simplified. `initiate_v2_handshake` is going to be called, asynchronously, when creating this object. You can reduce a lot of the boilerplate, and get rid of `magic_sent`, as long as you do the last bit manually on the test (or just create another method, like `continue_v2_handshake`). \r\n\r\nIt just feels weird to me that this initialization method is called twice (one async, once manually), it doesn't feel too intuitive. ",
      "created_at": "2024-05-20T15:04:52Z",
      "updated_at": "2024-05-20T16:38:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1606901839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606901839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1616695926",
      "pull_request_review_id": 2081913775,
      "id": 1616695926,
      "node_id": "PRRC_kwDOABII585gXNJ2",
      "diff_hunk": "@@ -79,6 +78,7 @@ class EncryptedP2PState:\n \n         encrypt/decrypt v2 P2P messages using v2_enc_packet() and v2_receive_packet().\n     \"\"\"\n+    transport_version = b''",
      "path": "test/functional/test_framework/v2_p2p.py",
      "position": null,
      "original_position": 12,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "38eb42984406dd9eabba0e3d197c7336aed495c7",
      "in_reply_to_id": 1606879417,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2024-05-28T06:58:54Z",
      "updated_at": "2024-05-28T06:58:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1616695926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1616695926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1616701338",
      "pull_request_review_id": 2081922888,
      "id": 1616701338,
      "node_id": "PRRC_kwDOABII585gXOea",
      "diff_hunk": "@@ -3,87 +3,100 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n-\n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+    EARLY_KEY_RESPONSE = 0\n+\n+\n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+        # It is sent in 2 phases:\n+        # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+        # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+        if not self.magic_sent:\n+            self.generate_keypair_and_garbage()\n+            self.magic_sent = True\n+            return MAGIC_BYTES[self.net]\n         else:\n+            # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+            # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+            # This state is represented using `can_data_be_received` = False.\n+            # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+            # This state is represented using `can_data_be_received` = True.",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 72,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "6d9df282d0ca925a596787df18bf88ae48deef3a",
      "in_reply_to_id": 1606901839,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I still think this can be simplified. initiate_v2_handshake is going to be called, asynchronously, when creating this object. You can reduce a lot of the boilerplate, and get rid of magic_sent, as long as you do the last bit manually on the test (or just create another method, like continue_v2_handshake).\r\n\r\nyes, that can be done since the last bit is being sent from `MainThread` anyways.\r\n\r\nbefore: \r\n1. send both 4 bytes network magic (first 4 bytes of ellswift) - `NetworkThread`\r\n2. remaining `ellswift_garbage` bytes - `MainThread`\r\n\r\nnow:\r\n1. send both 4 bytes network magic (first 4 bytes of ellswift) - `MainThread`\r\n2. remaining `ellswift_garbage` bytes - `MainThread`\r\n\r\nrealised [my earlier comment](https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1945395946) is the situation in master too and a sleep in `MainThread` where there's no waiting for some other tasks is unlikely. 😬\r\n\r\nI've used [your original suggestion](https://github.com/bitcoin/bitcoin/pull/29352#pullrequestreview-1854149947) and updated the PR to send everything manually! ",
      "created_at": "2024-05-28T07:03:28Z",
      "updated_at": "2024-05-28T07:03:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1616701338",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1616701338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636906205",
      "pull_request_review_id": 2113793468,
      "id": 1636906205,
      "node_id": "PRRC_kwDOABII585hkTTd",
      "diff_hunk": "@@ -687,14 +687,15 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, send_version=Tru\n         if supports_v2_p2p is None:\n             supports_v2_p2p = self.use_v2transport\n \n-",
      "path": "test/functional/test_framework/test_node.py",
      "position": 13,
      "original_position": 13,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "86cca2cba230c10324c6aedd12ae9655b83b2856",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "unrelated whitespace change?",
      "created_at": "2024-06-12T18:18:35Z",
      "updated_at": "2024-06-12T19:20:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1636906205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636906205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 690,
      "original_line": 690,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636908381",
      "pull_request_review_id": 2113793468,
      "id": 1636908381,
      "node_id": "PRRC_kwDOABII585hkT1d",
      "diff_hunk": "@@ -3,87 +3,79 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n \n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n-        else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n \n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.generate_keypair_and_garbage()\n+        return b\"\"\n \n-class PeerEarlyKey(P2PInterface):\n+\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n-        self.v2_state = None\n-        self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.v2_state = EarlyKeyResponseState(initiating=True, net='regtest')\n         super().connection_made(transport)\n \n     def data_received(self, t):\n-        # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (send_net_magic = False)\n-        assert self.v2_state.can_data_be_received and not self.v2_state.send_net_magic\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens\n+            assert self.v2_state.can_data_be_received\n+        else:\n+            super().data_received(t)\n \n-    def on_open(self):\n-        self.connection_opened = True\n \n-class P2PEarlyKey(BitcoinTestFramework):\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n \n     def run_test(self):\n+        self.test_earlykeyresponse()\n+\n+    def test_earlykeyresponse(self):\n         self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n         self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n         node0 = self.nodes[0]\n         self.log.info('Sending first 4 bytes of ellswift which match network magic')\n         self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n         # send happens in `initiate_v2_handshake()` in `connection_made()`",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 108,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "4a7f541054d634a34e5f3cbda427e400dc1569f1",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "commit 4a7f541054d634a34e5f3cbda427e400dc1569f1:\r\nThis comment is no longer true and should be removed - the send happens below instead.",
      "created_at": "2024-06-12T18:20:40Z",
      "updated_at": "2024-06-12T19:20:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1636908381",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636908381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636917686",
      "pull_request_review_id": 2113793468,
      "id": 1636917686,
      "node_id": "PRRC_kwDOABII585hkWG2",
      "diff_hunk": "@@ -3,87 +3,79 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n \n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n-        else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n \n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.generate_keypair_and_garbage()\n+        return b\"\"\n \n-class PeerEarlyKey(P2PInterface):\n+\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n-        self.v2_state = None\n-        self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.v2_state = EarlyKeyResponseState(initiating=True, net='regtest')\n         super().connection_made(transport)\n \n     def data_received(self, t):\n-        # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (send_net_magic = False)\n-        assert self.v2_state.can_data_be_received and not self.v2_state.send_net_magic\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens\n+            assert self.v2_state.can_data_be_received\n+        else:\n+            super().data_received(t)\n \n-    def on_open(self):\n-        self.connection_opened = True\n \n-class P2PEarlyKey(BitcoinTestFramework):\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n \n     def run_test(self):\n+        self.test_earlykeyresponse()\n+\n+    def test_earlykeyresponse(self):\n         self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n         self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n         node0 = self.nodes[0]\n         self.log.info('Sending first 4 bytes of ellswift which match network magic')\n         self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n         # send happens in `initiate_v2_handshake()` in `connection_made()`\n-        peer1 = node0.add_p2p_connection(PeerEarlyKey(), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n-        self.wait_until(lambda: peer1.connection_opened)\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n+        peer1.send_raw_message(MAGIC_BYTES['regtest'])\n         self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n         self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n-        ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n-        peer1.send_raw_message(ellswift_and_garbage_data)\n-        peer1.wait_for_disconnect(timeout=5)\n-        self.log.info('successful disconnection when MITM happens in the key exchange phase')\n+        peer1.send_raw_message(peer1.v2_state.ellswift_ours[4:] + peer1.v2_state.sent_garbage)\n+        peer1.v2_state.can_data_be_received = True",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 145,
      "original_position": 120,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "4a7f541054d634a34e5f3cbda427e400dc1569f1",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "commit 4a7f541054d634a34e5f3cbda427e400dc1569f1:\r\nI think that this could fail intermittently (can put a sleep before this line to trigger).\r\nI think we have to first set `can_data_be_received`, and only then send the rest of the data.",
      "created_at": "2024-06-12T18:29:20Z",
      "updated_at": "2024-06-12T19:20:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1636917686",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636917686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636934801",
      "pull_request_review_id": 2113793468,
      "id": 1636934801,
      "node_id": "PRRC_kwDOABII585hkaSR",
      "diff_hunk": "@@ -32,6 +38,15 @@ def initiate_v2_handshake(self):\n         return b\"\"\n \n \n+class ExcessGarbageState(EncryptedP2PState):\n+    \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes\"\"\"\n+    def generate_keypair_and_garbage(self):\n+        ellswift_garbage_bytes = super().generate_keypair_and_garbage()\n+        even_more_garbage = random.randbytes(MAX_GARBAGE_LEN)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 37,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "commit 12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b:\r\nI think that the test would fail if `generate_keypair_and_garbage()` returns 0 garbage bytes, so `MAX_GARBAGE_LEN + 1` might be needed here.",
      "created_at": "2024-06-12T18:46:02Z",
      "updated_at": "2024-06-12T19:20:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1636934801",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636934801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642204643",
      "pull_request_review_id": 2121917773,
      "id": 1642204643,
      "node_id": "PRRC_kwDOABII585h4g3j",
      "diff_hunk": "@@ -687,14 +687,15 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, send_version=Tru\n         if supports_v2_p2p is None:\n             supports_v2_p2p = self.use_v2transport\n \n-",
      "path": "test/functional/test_framework/test_node.py",
      "position": 13,
      "original_position": 13,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "86cca2cba230c10324c6aedd12ae9655b83b2856",
      "in_reply_to_id": 1636906205,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`PEP 8: E303 too many blank lines (2)`  was showing up in my code editor. so maybe we can keep it since we're touching the function here.",
      "created_at": "2024-06-17T05:33:41Z",
      "updated_at": "2024-06-17T05:44:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1642204643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642204643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 690,
      "original_line": 690,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642205744",
      "pull_request_review_id": 2121917773,
      "id": 1642205744,
      "node_id": "PRRC_kwDOABII585h4hIw",
      "diff_hunk": "@@ -3,87 +3,79 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n \n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n-        else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n \n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.generate_keypair_and_garbage()\n+        return b\"\"\n \n-class PeerEarlyKey(P2PInterface):\n+\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n-        self.v2_state = None\n-        self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.v2_state = EarlyKeyResponseState(initiating=True, net='regtest')\n         super().connection_made(transport)\n \n     def data_received(self, t):\n-        # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (send_net_magic = False)\n-        assert self.v2_state.can_data_be_received and not self.v2_state.send_net_magic\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens\n+            assert self.v2_state.can_data_be_received\n+        else:\n+            super().data_received(t)\n \n-    def on_open(self):\n-        self.connection_opened = True\n \n-class P2PEarlyKey(BitcoinTestFramework):\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n \n     def run_test(self):\n+        self.test_earlykeyresponse()\n+\n+    def test_earlykeyresponse(self):\n         self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n         self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n         node0 = self.nodes[0]\n         self.log.info('Sending first 4 bytes of ellswift which match network magic')\n         self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n         # send happens in `initiate_v2_handshake()` in `connection_made()`\n-        peer1 = node0.add_p2p_connection(PeerEarlyKey(), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n-        self.wait_until(lambda: peer1.connection_opened)\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n+        peer1.send_raw_message(MAGIC_BYTES['regtest'])\n         self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n         self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n-        ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n-        peer1.send_raw_message(ellswift_and_garbage_data)\n-        peer1.wait_for_disconnect(timeout=5)\n-        self.log.info('successful disconnection when MITM happens in the key exchange phase')\n+        peer1.send_raw_message(peer1.v2_state.ellswift_ours[4:] + peer1.v2_state.sent_garbage)\n+        peer1.v2_state.can_data_be_received = True",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 145,
      "original_position": 120,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "4a7f541054d634a34e5f3cbda427e400dc1569f1",
      "in_reply_to_id": 1636917686,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "agree! done.",
      "created_at": "2024-06-17T05:35:53Z",
      "updated_at": "2024-06-17T05:44:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1642205744",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642205744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642208728",
      "pull_request_review_id": 2121917773,
      "id": 1642208728,
      "node_id": "PRRC_kwDOABII585h4h3Y",
      "diff_hunk": "@@ -32,6 +38,15 @@ def initiate_v2_handshake(self):\n         return b\"\"\n \n \n+class ExcessGarbageState(EncryptedP2PState):\n+    \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes\"\"\"\n+    def generate_keypair_and_garbage(self):\n+        ellswift_garbage_bytes = super().generate_keypair_and_garbage()\n+        even_more_garbage = random.randbytes(MAX_GARBAGE_LEN)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 37,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "in_reply_to_id": 1636934801,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oh looks like 0 garbage bytes being returned can also mess up the functions where we're tampering the garbage bytes (`WRONG_GARBAGE`) and `SEND_NO_AAD` where AAD is the garbage bytes sent. so I've change `generate_keypair_and_garbage()` in `EncryptedP2PState` to return 1 bytes garbage minimum instead.",
      "created_at": "2024-06-17T05:41:07Z",
      "updated_at": "2024-06-17T05:44:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1642208728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642208728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642210992",
      "pull_request_review_id": 2121928039,
      "id": 1642210992,
      "node_id": "PRRC_kwDOABII585h4iaw",
      "diff_hunk": "@@ -3,87 +3,79 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n \n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n-        else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n \n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.generate_keypair_and_garbage()\n+        return b\"\"\n \n-class PeerEarlyKey(P2PInterface):\n+\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n-        self.v2_state = None\n-        self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.v2_state = EarlyKeyResponseState(initiating=True, net='regtest')\n         super().connection_made(transport)\n \n     def data_received(self, t):\n-        # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (send_net_magic = False)\n-        assert self.v2_state.can_data_be_received and not self.v2_state.send_net_magic\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens\n+            assert self.v2_state.can_data_be_received\n+        else:\n+            super().data_received(t)\n \n-    def on_open(self):\n-        self.connection_opened = True\n \n-class P2PEarlyKey(BitcoinTestFramework):\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n \n     def run_test(self):\n+        self.test_earlykeyresponse()\n+\n+    def test_earlykeyresponse(self):\n         self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n         self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n         node0 = self.nodes[0]\n         self.log.info('Sending first 4 bytes of ellswift which match network magic')\n         self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n         # send happens in `initiate_v2_handshake()` in `connection_made()`",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 108,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "4a7f541054d634a34e5f3cbda427e400dc1569f1",
      "in_reply_to_id": 1636908381,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2024-06-17T05:45:07Z",
      "updated_at": "2024-06-17T05:45:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1642210992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642210992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642252383",
      "pull_request_review_id": 2121991751,
      "id": 1642252383,
      "node_id": "PRRC_kwDOABII585h4shf",
      "diff_hunk": "@@ -687,14 +687,15 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, send_version=Tru\n         if supports_v2_p2p is None:\n             supports_v2_p2p = self.use_v2transport\n \n-",
      "path": "test/functional/test_framework/test_node.py",
      "position": 13,
      "original_position": 13,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "86cca2cba230c10324c6aedd12ae9655b83b2856",
      "in_reply_to_id": 1636906205,
      "user": {
        "login": "Mazzika1",
        "id": 168974085,
        "node_id": "U_kgDOChJXBQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/168974085?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mazzika1",
        "html_url": "https://github.com/Mazzika1",
        "followers_url": "https://api.github.com/users/Mazzika1/followers",
        "following_url": "https://api.github.com/users/Mazzika1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mazzika1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mazzika1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mazzika1/subscriptions",
        "organizations_url": "https://api.github.com/users/Mazzika1/orgs",
        "repos_url": "https://api.github.com/users/Mazzika1/repos",
        "events_url": "https://api.github.com/users/Mazzika1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mazzika1/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Okay",
      "created_at": "2024-06-17T06:35:47Z",
      "updated_at": "2024-07-31T14:31:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1642252383",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642252383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 690,
      "original_line": 690,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642252570",
      "pull_request_review_id": 2121992085,
      "id": 1642252570,
      "node_id": "PRRC_kwDOABII585h4ska",
      "diff_hunk": "@@ -32,6 +38,15 @@ def initiate_v2_handshake(self):\n         return b\"\"\n \n \n+class ExcessGarbageState(EncryptedP2PState):\n+    \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes\"\"\"\n+    def generate_keypair_and_garbage(self):\n+        ellswift_garbage_bytes = super().generate_keypair_and_garbage()\n+        even_more_garbage = random.randbytes(MAX_GARBAGE_LEN)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 37,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "in_reply_to_id": 1636934801,
      "user": {
        "login": "Mazzika1",
        "id": 168974085,
        "node_id": "U_kgDOChJXBQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/168974085?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mazzika1",
        "html_url": "https://github.com/Mazzika1",
        "followers_url": "https://api.github.com/users/Mazzika1/followers",
        "following_url": "https://api.github.com/users/Mazzika1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mazzika1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mazzika1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mazzika1/subscriptions",
        "organizations_url": "https://api.github.com/users/Mazzika1/orgs",
        "repos_url": "https://api.github.com/users/Mazzika1/repos",
        "events_url": "https://api.github.com/users/Mazzika1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mazzika1/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Okay",
      "created_at": "2024-06-17T06:36:03Z",
      "updated_at": "2024-07-31T14:31:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1642252570",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642252570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642252790",
      "pull_request_review_id": 2121992401,
      "id": 1642252790,
      "node_id": "PRRC_kwDOABII585h4sn2",
      "diff_hunk": "@@ -32,6 +38,15 @@ def initiate_v2_handshake(self):\n         return b\"\"\n \n \n+class ExcessGarbageState(EncryptedP2PState):\n+    \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes\"\"\"\n+    def generate_keypair_and_garbage(self):\n+        ellswift_garbage_bytes = super().generate_keypair_and_garbage()\n+        even_more_garbage = random.randbytes(MAX_GARBAGE_LEN)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 37,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "in_reply_to_id": 1636934801,
      "user": {
        "login": "Mazzika1",
        "id": 168974085,
        "node_id": "U_kgDOChJXBQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/168974085?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mazzika1",
        "html_url": "https://github.com/Mazzika1",
        "followers_url": "https://api.github.com/users/Mazzika1/followers",
        "following_url": "https://api.github.com/users/Mazzika1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mazzika1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mazzika1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mazzika1/subscriptions",
        "organizations_url": "https://api.github.com/users/Mazzika1/orgs",
        "repos_url": "https://api.github.com/users/Mazzika1/repos",
        "events_url": "https://api.github.com/users/Mazzika1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mazzika1/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Okay",
      "created_at": "2024-06-17T06:36:16Z",
      "updated_at": "2024-07-31T14:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1642252790",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1642252790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1644874521",
      "pull_request_review_id": 2126194384,
      "id": 1644874521,
      "node_id": "PRRC_kwDOABII585iCssZ",
      "diff_hunk": "@@ -32,6 +38,15 @@ def initiate_v2_handshake(self):\n         return b\"\"\n \n \n+class ExcessGarbageState(EncryptedP2PState):\n+    \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes\"\"\"\n+    def generate_keypair_and_garbage(self):\n+        ellswift_garbage_bytes = super().generate_keypair_and_garbage()\n+        even_more_garbage = random.randbytes(MAX_GARBAGE_LEN)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 37,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "in_reply_to_id": 1636934801,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removing the possibility of 0 garbage in `EncryptedP2PState` just to make this test nicer is a bit unfortunate in my opinion: If the node had a bug dealing with zero-length garbage, the test framework wouldn't be able to catch that anymore. Can't we change it locally just for the test cases who need it? \r\n",
      "created_at": "2024-06-18T18:16:10Z",
      "updated_at": "2024-06-18T18:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1644874521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1644874521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1649027490",
      "pull_request_review_id": 2132764508,
      "id": 1649027490,
      "node_id": "PRRC_kwDOABII585iSimi",
      "diff_hunk": "@@ -32,6 +38,15 @@ def initiate_v2_handshake(self):\n         return b\"\"\n \n \n+class ExcessGarbageState(EncryptedP2PState):\n+    \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes\"\"\"\n+    def generate_keypair_and_garbage(self):\n+        ellswift_garbage_bytes = super().generate_keypair_and_garbage()\n+        even_more_garbage = random.randbytes(MAX_GARBAGE_LEN)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 37,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "in_reply_to_id": 1636934801,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "hmm good point. I've added `garbage_len` as an optional argument in `generate_keypair_and_garbage()` so that some of the test cases which don't support 0 length garbage can avoid it.",
      "created_at": "2024-06-21T14:15:11Z",
      "updated_at": "2024-06-21T14:15:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1649027490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1649027490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1653358992",
      "pull_request_review_id": 2139519214,
      "id": 1653358992,
      "node_id": "PRRC_kwDOABII585ijEGQ",
      "diff_hunk": "@@ -32,6 +38,15 @@ def initiate_v2_handshake(self):\n         return b\"\"\n \n \n+class ExcessGarbageState(EncryptedP2PState):\n+    \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes\"\"\"\n+    def generate_keypair_and_garbage(self):\n+        ellswift_garbage_bytes = super().generate_keypair_and_garbage()\n+        even_more_garbage = random.randbytes(MAX_GARBAGE_LEN)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 37,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "in_reply_to_id": 1636934801,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "looks good to me now!",
      "created_at": "2024-06-25T18:47:04Z",
      "updated_at": "2024-06-25T18:47:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1653358992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1653358992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1657086402",
      "pull_request_review_id": 2145284260,
      "id": 1657086402,
      "node_id": "PRRC_kwDOABII585ixSHC",
      "diff_hunk": "@@ -3,87 +3,78 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n \n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n-        else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n \n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.generate_keypair_and_garbage()\n+        return b\"\"\n \n-class PeerEarlyKey(P2PInterface):\n+\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n-        self.v2_state = None\n-        self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.v2_state = EarlyKeyResponseState(initiating=True, net='regtest')",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 105,
      "original_position": 78,
      "commit_id": "c9dacd958d7c1e98b08a7083c299d981e4c11193",
      "original_commit_id": "e075fd131d668d9d1ba3c8566624481c4a57032d",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "small nit, potential follow-up: could set 'regtest' as default value for the `net` parameter in the `EncryptedP2PState` class constructor (`__init__`), so it doesn't have to be specified repeatedly here.",
      "created_at": "2024-06-27T12:55:19Z",
      "updated_at": "2024-06-27T13:02:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1657086402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1657086402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 43,
      "side": "RIGHT"
    }
  ]
}