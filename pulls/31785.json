{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785",
    "id": 2312950132,
    "node_id": "PR_kwDOABII586J3NF0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31785",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31785.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31785.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/6806651d2f64d51094178cbfb23ef2f4a956aa4d",
    "number": 31785,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Have createNewBlock() wait for tip, make rpc handle shutdown during long poll and wait methods",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The Mining interface `waitTipChanged()` method now returns `nullopt` if the node is shutting down.\r\n\r\nPreviously it would return the last known tip during shutdown, but this could cause a crash in the scenario where the node is started and quickly shutdown, before `notifications().TipBlock()` is set.\r\n\r\nThis allows the proposed `waitNext()` method in https://github.com/bitcoin/bitcoin/pull/31283 to safely assume `TipBlock()` isn't `null`, not even during a scenario of early shutdown.\r\n\r\nThe behavior is now easier to understand for callers: `waitTipChanged()` either eventually returns a tip, or `nullptr` if the timeout is reached or the node shuts down.\r\n\r\nAnother possibility was that `TipBlock()` wasn't set yet at `timeout`. To keep the interface simple, `waitTipChanged()` will ignore timeout in that case a wait longer.\r\n\r\nThey no longer have to worry about a case where a tip is returned, but it's unchanged and the node is shutting down.\r\n\r\nThe `getblocktemplate`,  `waitfornewblock` and `waitforblockheight` RPC calls now explicitly handle the shutdown scenario.\r\n\r\nFinally this PR clarifies long poll behaviour, mostly by adding code comments, but also through an early `break`.",
    "labels": [],
    "created_at": "2025-02-03T14:56:59Z",
    "updated_at": "2025-02-18T14:45:17Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "719e37a35728b3d2b72023a7092fa97cc99505c1",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "Sjors:2025/02/create_new_block",
      "ref": "2025/02/create_new_block",
      "sha": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 92390696,
        "node_id": "MDEwOlJlcG9zaXRvcnk5MjM5MDY5Ng==",
        "name": "bitcoin",
        "full_name": "Sjors/bitcoin",
        "owner": {
          "login": "Sjors",
          "id": 10217,
          "node_id": "MDQ6VXNlcjEwMjE3",
          "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Sjors",
          "html_url": "https://github.com/Sjors",
          "followers_url": "https://api.github.com/users/Sjors/followers",
          "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
          "organizations_url": "https://api.github.com/users/Sjors/orgs",
          "repos_url": "https://api.github.com/users/Sjors/repos",
          "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Sjors/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Sjors/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Sjors/bitcoin",
        "archive_url": "https://api.github.com/repos/Sjors/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Sjors/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Sjors/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Sjors/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Sjors/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Sjors/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Sjors/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Sjors/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Sjors/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Sjors/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Sjors/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Sjors/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Sjors/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Sjors/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Sjors/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Sjors/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Sjors/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Sjors/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Sjors/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Sjors/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Sjors/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Sjors/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Sjors/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Sjors/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Sjors/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Sjors/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Sjors/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Sjors/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Sjors/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Sjors/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Sjors/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Sjors/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Sjors/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Sjors/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Sjors/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Sjors/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Sjors/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Sjors/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Sjors/bitcoin/hooks",
        "svn_url": "https://github.com/Sjors/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 11,
        "watchers_count": 11,
        "size": 256685,
        "default_branch": "sv2",
        "open_issues_count": 12,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-18T14:44:21Z",
        "created_at": "2017-05-25T10:05:54Z",
        "updated_at": "2025-02-10T14:41:39Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "28dec6c5f8bd35ef4e6cb8d7aa3f21b6879acf98",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36737,
        "stargazers_count": 82056,
        "watchers_count": 82056,
        "size": 275624,
        "default_branch": "master",
        "open_issues_count": 687,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-18T12:08:57Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-02-18T14:23:28Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 106,
    "deletions": 43,
    "changed_files": 6,
    "commits": 4,
    "review_comments": 49,
    "comments": 9
  },
  "events": [
    {
      "event": "commented",
      "id": 2631235680,
      "node_id": "IC_kwDOABII586c1Xhg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2631235680",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T14:57:04Z",
      "updated_at": "2025-02-18T12:15:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31785.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Approach ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/31785#pullrequestreview-2623295004) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31117](https://github.com/bitcoin/bitcoin/pull/31117) (miner: Reorg Testnet4 minimum difficulty blocks by fjahr)\n* [#30635](https://github.com/bitcoin/bitcoin/pull/30635) (rpc: add optional blockhash to waitfornewblock, unhide in help by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2631235680",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "reviewed",
      "id": 2590179163,
      "node_id": "PRR_kwDOABII586aYv9b",
      "url": null,
      "actor": null,
      "commit_id": "af85987a169787205eeac6854f09cbe66713f1c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#pullrequestreview-2590179163",
      "submitted_at": "2025-02-03T15:03:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
    },
    {
      "event": "commented",
      "id": 2631258942,
      "node_id": "IC_kwDOABII586c1dM-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2631258942",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T15:05:20Z",
      "updated_at": "2025-02-03T15:19:36Z",
      "author_association": "MEMBER",
      "body": "The Stratum v2 Template Provider that I implemented first calls `mining.waitTipChanged(uint256::ZERO)` before calling `mining.createNewBlock()`. This ensures that no matter how we order the node & IPC startup sequence, it won't prematurely try to make a block.\r\n\r\nSee https://github.com/Sjors/bitcoin/pull/49 (`src/sv2/template_provider.cpp` in `Sv2TemplateProvider::ThreadSv2Handler()`).\r\n\r\nBut other implementers may not realise this, so having `createNewBlock()` return nothing when called too early seems like a good precaution.\r\n\r\nSee this comment for more details on the init sequence:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1172bc4157eefe80d1aaf0b56459857ec651e535/src/init.cpp#L1817-L1833\r\n\r\nAlso note that currently the IPC server starts listening in `AppInitMain` _before_ the above `wait` so the race condition is possible.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1172bc4157eefe80d1aaf0b56459857ec651e535/src/init.cpp#L1358-L1367\r\n\r\nA good client application might wait for `-startupnotify` before trying to connect via IPC. `StartupNotify()` is called at the end `AppInitMain`. But we shouldn't assume all clients do.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2631258942",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "reviewed",
      "id": 2590249166,
      "node_id": "PRR_kwDOABII586aZBDO",
      "url": null,
      "actor": null,
      "commit_id": "af85987a169787205eeac6854f09cbe66713f1c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#pullrequestreview-2590249166",
      "submitted_at": "2025-02-03T15:21:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16165812226,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPDjrgC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16165812226",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "96ce223b874c84d334c8e7f3cdc9e9777202c924",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/96ce223b874c84d334c8e7f3cdc9e9777202c924",
      "created_at": "2025-02-03T17:13:31Z"
    },
    {
      "event": "commented",
      "id": 2631596373,
      "node_id": "IC_kwDOABII586c2vlV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2631596373",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T17:13:34Z",
      "updated_at": "2025-02-03T17:13:34Z",
      "author_association": "MEMBER",
      "body": "There were slightly more worms in this can.\r\n\r\nInstead I've now changed `createNewBlock()` to first call `waitTipChanged()` and the latter to return null during a shutdown. This shifts some work to the RPC, but I think makes the overall behaviour easier to understand.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2631596373",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "renamed",
      "id": 16165830194,
      "node_id": "RTE_lADOABII586ojB_JzwAAAAPDjv4y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16165830194",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T17:15:01Z",
      "rename": {
        "from": "Have createNewBlock() ensure m_tip_block is set",
        "to": "Have createNewBlock() wait for tip, make rpc handle shutdown during long poll and wait methods"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16166050220,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPDklms",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16166050220",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "created_at": "2025-02-03T17:32:52Z"
    },
    {
      "event": "reviewed",
      "id": 2611342025,
      "node_id": "PRR_kwDOABII586bperJ",
      "url": null,
      "actor": null,
      "commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK be15f2e769987b1df2cf1c8f327c5aafe064dbb3\r\n\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#pullrequestreview-2611342025",
      "submitted_at": "2025-02-12T10:56:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
    },
    {
      "event": "commented",
      "id": 2653871612,
      "node_id": "IC_kwDOABII586eLt38",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2653871612",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T14:27:57Z",
      "updated_at": "2025-02-12T14:27:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Previously it would return the last known tip during shutdown, but this creates an ambiguous circumstance in the scenario where the node is started and quickly shutdown, before notifications().TipBlock() is set.\r\n\r\nNew behavior seems good, but I am confused by this description. It looks to me like previous behavior was to segfault in this case, because it would return`Tip()->GetBlockHash()` and `Tip()` would be null? It would be helpful if description said more specifically what previous behavior was.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2653871612",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "reviewed",
      "id": 2612158513,
      "node_id": "PRR_kwDOABII586bsmAx",
      "url": null,
      "actor": null,
      "commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review be15f2e769987b1df2cf1c8f327c5aafe064dbb3. Mostly looks good but I think vasild's suggestion https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952318566 should be used so waitTipChanged can't return an inconsistent hash and height\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#pullrequestreview-2612158513",
      "submitted_at": "2025-02-12T14:48:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16294872989,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPLQAed",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16294872989",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6321d59d0dd1c3e55e13b912188c051bff18d837",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/6321d59d0dd1c3e55e13b912188c051bff18d837",
      "created_at": "2025-02-13T11:15:07Z"
    },
    {
      "event": "commented",
      "id": 2656278649,
      "node_id": "IC_kwDOABII586eU5h5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2656278649",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T11:15:10Z",
      "updated_at": "2025-02-13T11:58:04Z",
      "author_association": "MEMBER",
      "body": "I changed `waitTipChanged()` to only return `nullopt` during shutdown. This is achieved by extending the `timeout` in the unlikely event that node initialization takes longer.\r\n\r\nI introduced a new `RPC_SHUTDOWN_ERROR` code and use it in case `waitfornewblock` and friends are called really early and the node shuts down (probably very hard to reach in practice). See https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952373326\r\n\r\n> It would be helpful if description said more specifically what previous behavior was.\r\n\r\nUpdated the description.\r\n\r\nOn question about long polling I still need to investigate: https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952403604\r\n\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2656278649",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16295486463,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPLSWP_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16295486463",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fd9c8b67294ab425a0364d7fcd1d9519552cd8c0",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/fd9c8b67294ab425a0364d7fcd1d9519552cd8c0",
      "created_at": "2025-02-13T12:04:33Z"
    },
    {
      "event": "labeled",
      "id": 16295487843,
      "node_id": "LE_lADOABII586ojB_JzwAAAAPLSWlj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16295487843",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T12:04:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2656394679,
      "node_id": "IC_kwDOABII586eVV23",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2656394679",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T12:04:39Z",
      "updated_at": "2025-02-13T12:04:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/37158437645</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2656394679",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16296044475,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPLUee7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16296044475",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "af5f0ccc7d141f209c976d7f4b61951524d2f736",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/af5f0ccc7d141f209c976d7f4b61951524d2f736",
      "created_at": "2025-02-13T12:47:56Z"
    },
    {
      "event": "commented",
      "id": 2656504648,
      "node_id": "IC_kwDOABII586eVwtI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2656504648",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T12:50:04Z",
      "updated_at": "2025-02-13T12:50:04Z",
      "author_association": "MEMBER",
      "body": "I pushed a commit to clarify long poll behavior.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2656504648",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "reviewed",
      "id": 2614945255,
      "node_id": "PRR_kwDOABII586b3OXn",
      "url": null,
      "actor": null,
      "commit_id": "af5f0ccc7d141f209c976d7f4b61951524d2f736",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#pullrequestreview-2614945255",
      "submitted_at": "2025-02-13T14:12:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16297717265,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPLa24R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16297717265",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a2d91b5f08c2bc58ca2ffc56eae2dbe4f1aa78b5",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/a2d91b5f08c2bc58ca2ffc56eae2dbe4f1aa78b5",
      "created_at": "2025-02-13T14:42:35Z"
    },
    {
      "event": "commented",
      "id": 2656828338,
      "node_id": "IC_kwDOABII586eW_uy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2656828338",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T14:47:56Z",
      "updated_at": "2025-02-13T14:47:56Z",
      "author_association": "MEMBER",
      "body": "I mixed up the commits in my last push, will fix...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2656828338",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16297835355,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPLbTtb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16297835355",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b13da956053d268583cbf97d235ef820a35a6d08",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/b13da956053d268583cbf97d235ef820a35a6d08",
      "created_at": "2025-02-13T14:49:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16297872606,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPLbcze",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16297872606",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80e6e421c119add0cded0add337e32734907febe",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/80e6e421c119add0cded0add337e32734907febe",
      "created_at": "2025-02-13T14:51:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16298041013,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPLcF61",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16298041013",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b4d98b89bfb397b3b9478b2131392470c397aa25",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/b4d98b89bfb397b3b9478b2131392470c397aa25",
      "created_at": "2025-02-13T15:01:41Z"
    },
    {
      "event": "reviewed",
      "id": 2615645250,
      "node_id": "PRR_kwDOABII586b55RC",
      "url": null,
      "actor": null,
      "commit_id": "b4d98b89bfb397b3b9478b2131392470c397aa25",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#pullrequestreview-2615645250",
      "submitted_at": "2025-02-13T16:47:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
    },
    {
      "event": "unlabeled",
      "id": 16300185180,
      "node_id": "UNLE_lADOABII586ojB_JzwAAAAPLkRZc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16300185180",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T17:21:22Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16301807696,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPLqdhQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16301807696",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/2042ed105578a71234295b01be39ad8607722abe",
      "created_at": "2025-02-13T19:40:53Z"
    },
    {
      "event": "reviewed",
      "id": 2623295004,
      "node_id": "PRR_kwDOABII586cXE4c",
      "url": null,
      "actor": null,
      "commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 2042ed105578a71234295b01be39ad8607722abe",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#pullrequestreview-2623295004",
      "submitted_at": "2025-02-18T12:15:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA3YTJiMDM0MGFmY2YyNmU4MzY2MWY5ZGYyZGYyMDY2ZmE1ZTJkNDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07a2b0340afcf26e83661f9df2df2066fa5e2d46",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/07a2b0340afcf26e83661f9df2df2066fa5e2d46",
      "tree": {
        "sha": "3e73cbe639f4e32726946daa6cc53173ea460c05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e73cbe639f4e32726946daa6cc53173ea460c05"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3e73cbe639f4e32726946daa6cc53173ea460c05\nparent 28dec6c5f8bd35ef4e6cb8d7aa3f21b6879acf98\nauthor Sjors Provoost <sjors@sprovoost.nl> 1739444917 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1739888780 +0100\n\nrpc: introduce RPC_SHUTDOWN_ERROR\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAme0mIwACgkQV/+b28ww\nEAkpCBAAp90iNs5x7vk9yjgEW5BnSTdhqkH1FyFJ5BhwyvGBYF7UxQC0MiIYoexK\nuA32iqbojAQQyPTml/t2rX7LoYEJ44b6lWtWLCNAtrJLrE2ehFlbsF12h5hL5RW0\naYy80lml0gq+0ZyEFwGflAz9hdGz1TztV6nI3CvKbOUOx3zbRGP7754RWgYMrGoH\nclzVDEp0klALbbWiZqkt+SNygokG33ymmaFQtwKv0jUcSVrF1HEwq3gKRWgIY0FC\n6ipXCcIGuRT3fMEXI4ELfWrLYowOXqCsNgXNvMS1LEMv0HbosxEmrJzHYo5ePlks\naYzOatYQheDn36hskVOerqm8QkP2Hjwl6j9xOR4GhdBPVtg6jFvA4CwphiQ0M0VP\nTtRI0GsZXwzgfTejkKMiju4v92mvV2PWvN/VK+K7hXz/KgWut+Gl29P3QlgY6i5l\n5qd95Tcq4RuooiiOglomLM51kh2SSCwDE4pRO5ezGMS+SInjylNLZ0kGqACMcBVV\n+iRhShYp3GXAVVecnsS9V+4Nk/eSYzdgioRJ/HwGDusKVFS1yeaZh9mfbSsVSDcn\nhjOBuM8sE62rI+AANKLJG6yOyTdWWylxTB5c+DjCW+H06WbkK/8MSlkEHmhBRpvO\nMxL6NCAVCwLQBKbZG/r11tP+c7JM37JvFzOFwtoXmHW75EZZ1Kg=\n=G+DD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28dec6c5f8bd35ef4e6cb8d7aa3f21b6879acf98",
          "sha": "28dec6c5f8bd35ef4e6cb8d7aa3f21b6879acf98",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/28dec6c5f8bd35ef4e6cb8d7aa3f21b6879acf98"
        }
      ],
      "message": "rpc: introduce RPC_SHUTDOWN_ERROR",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-18T14:26:20Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-13T11:08:37Z"
      },
      "sha": "07a2b0340afcf26e83661f9df2df2066fa5e2d46"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk4MjgyZjU2MTEyYWYzMzY5MWEzZmUyZTFhZDdjMTRmZWJiYjA2NjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98282f56112af33691a3fe2e1ad7c14febbb0660",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/98282f56112af33691a3fe2e1ad7c14febbb0660",
      "tree": {
        "sha": "532e4620a8668ca93e76c49d016408e6765a061b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/532e4620a8668ca93e76c49d016408e6765a061b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 532e4620a8668ca93e76c49d016408e6765a061b\nparent 07a2b0340afcf26e83661f9df2df2066fa5e2d46\nauthor Sjors Provoost <sjors@sprovoost.nl> 1738602534 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1739889831 +0100\n\nrpc: handle shutdown during long poll and wait methods\n\nThe waitTipChanged() now returns nullopt if the node is shutting down.\n\nPreviously it would return the last known tip during shutdown, but\nthis creates an ambiguous circumstance in the scenario where the\nnode is started and quickly shutdown, before notifications().TipBlock()\nis set.\n\nThe getblocktemplate, waitfornewblock and waitforblockheight RPC\ncalls now explicitly handle the shutdown scenario. This is now\ntreated as an error and throws the new RPC_SHUTDOWN_ERROR.\n\nFinally this PR drops the unneeded IsRPCRunning() guards, so\nthe wait methods can be used in the GUI.\n\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAme0nKcACgkQV/+b28ww\nEAkT1g//cAqSMaKKp+D9BkDFbkLvt54i3QgYb2Pwym6QL3fzTBClI4mQwEZfKl21\ngK0quYNXQ4BlqIfMxccakksmFPC90BfaixEwj9dvWh5pNuRMjMxX4+YvmusEuyL3\nNV6uWaUQ6CWoHd+DqD1pMUHuFJTiRTNcoAikJH3pP62EsSnNdjimGWQPa0ngfW+U\nVxnF0MrhXsVUF0nix7WHkyBeEXZdksIec+ppqBGepDGLU/ra2vvhsLrvDXu3poxC\nGgpK2LvjQeT04OIB/e2tynl2X/GmAbE8E7TrZVRyC+lFZMcwyMGRnaRBMlueVSke\n5R+eQAe1vqLR4K1W1vXmVnpsoeuKzdy2tydu4+VvwLE5LWxCnPZV6o1eYrBcvry4\nXefvVX6bGMoBqJCoJluKQbNRPYUc9UlzSKEa0TpdpL55TRNGjWU8dPeXIUlBp+yn\n5mou/QMI1QAiq43lxYHTuNpn6alDRmh2VdZRV5qgASmhX8tJ/OD+2zPk8VxhFw7I\nkCXmzyF/NwM946uwQEI5WhpmgaE8tyArJtkAUbNXHTZIBBlSeUdxbIem1r05bT4m\n50SM0kB0RuZC6KvQdBr5MgIQBm6bFB6lD8LDq9zesxZJyS/IYeWHRgBDJlDjPpEi\ngwj2vGqlfctXFx6tWkH+cykLkz6FiGDvftd8vmeKum2pjLqzjK4=\n=Zg+6\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07a2b0340afcf26e83661f9df2df2066fa5e2d46",
          "sha": "07a2b0340afcf26e83661f9df2df2066fa5e2d46",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/07a2b0340afcf26e83661f9df2df2066fa5e2d46"
        }
      ],
      "message": "rpc: handle shutdown during long poll and wait methods\n\nThe waitTipChanged() now returns nullopt if the node is shutting down.\n\nPreviously it would return the last known tip during shutdown, but\nthis creates an ambiguous circumstance in the scenario where the\nnode is started and quickly shutdown, before notifications().TipBlock()\nis set.\n\nThe getblocktemplate, waitfornewblock and waitforblockheight RPC\ncalls now explicitly handle the shutdown scenario. This is now\ntreated as an error and throws the new RPC_SHUTDOWN_ERROR.\n\nFinally this PR drops the unneeded IsRPCRunning() guards, so\nthe wait methods can be used in the GUI.\n\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-18T14:43:51Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-03T17:08:54Z"
      },
      "sha": "98282f56112af33691a3fe2e1ad7c14febbb0660"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgyZmE1MzEwYjlmZTgwMTMxZDYyMWM2MjVjOWYyYWIzMTE5NjVlYjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82fa5310b9fe80131d621c625c9f2ab311965eb8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/82fa5310b9fe80131d621c625c9f2ab311965eb8",
      "tree": {
        "sha": "4e848315f6d9511ba1434638f64e18a21c1a5663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e848315f6d9511ba1434638f64e18a21c1a5663"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4e848315f6d9511ba1434638f64e18a21c1a5663\nparent 98282f56112af33691a3fe2e1ad7c14febbb0660\nauthor Sjors Provoost <sjors@sprovoost.nl> 1738602660 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1739889831 +0100\n\nHave createNewBlock() wait for a tip\n\nAdditionally it returns null if the node started to shutdown before TipBlock() was set.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAme0nKcACgkQV/+b28ww\nEAnhwBAAm2oiAgyMLldV+TSkpnuqLwfioTf0sSBGHOks1f6h9JAz3+YfBVK5PIEz\nIYzQ+U4U9XOX9p56wOVzTaAG5fDxCORQLMWAPs0Gk3i6f0JKoWbnHUzreu7J3FVk\n0kqH1XOcgbHF3rBVCPi5iPVgpwMvvWarPXlVOpME59x8D4etn/AhxeDd+gqZAHB3\n00hSFW+3mwKYMYfuYtf1RNr3kQYBjbC1cvTFatr2TfjcIJtKeSCERLqExo3jwUKR\n9cVF1bJNTOuwbFuYLO+HgwtzmxUQjOTf+4775mIMwICQgO7xJBBqcur6TV9zuAwu\nf3flqVhmydg6NhojCOV1ODzCATYyuMAVjIa316kP+aQS3KSfHDdsoIro7OwjxR//\nLuoU4YrK+d/BUJwZCXCejlChfPLvH8o6a8lhFO37bRqdKvAAMOuEIm7qbvX5NDEt\nHeA4qqlVWsV3pMA7Vd1M1NGPrYBhrwN804IDM/MYlTGY4I2H1GM8QzfGpaYNszeA\n7GzHXuo7JnDH/I6384CNbJwbDd6EXNfjh33qdw1jCLvo8sA7pC2zl3X8xDH06/c2\nKNqwPGdjTvFf5VFa9U53yk+sDRDXxiKTEha/rMn4wrupw8N0AWfDHa4ebpwhRhtR\ntPzEIXQdLu1X2UVGb67FfOc7JZ4JaK5L48LaROjWoSSQS2Dwzik=\n=9+su\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98282f56112af33691a3fe2e1ad7c14febbb0660",
          "sha": "98282f56112af33691a3fe2e1ad7c14febbb0660",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/98282f56112af33691a3fe2e1ad7c14febbb0660"
        }
      ],
      "message": "Have createNewBlock() wait for a tip\n\nAdditionally it returns null if the node started to shutdown before TipBlock() was set.",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-18T14:43:51Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-03T17:11:00Z"
      },
      "sha": "82fa5310b9fe80131d621c625c9f2ab311965eb8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY4MDY2NTFkMmY2NGQ1MTA5NDE3OGNiZmIyM2VmMmY0YTk1NmFhNGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "tree": {
        "sha": "15927c7ab946a11614186c18296f73f18df6bc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15927c7ab946a11614186c18296f73f18df6bc38"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 15927c7ab946a11614186c18296f73f18df6bc38\nparent 82fa5310b9fe80131d621c625c9f2ab311965eb8\nauthor Sjors Provoost <sjors@sprovoost.nl> 1739458823 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1739889831 +0100\n\nrpc: clarify longpoll behavior\n\nAdd code comments.\n\nMove the comparison to hashWatchedChain inside the while loop. The\nearly return prevents the GetTransactionsUpdated() call in cases\nwhere the tip updates. This check is very cheap, so it's skipped\nto improve readability.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAme0nKcACgkQV/+b28ww\nEAmsSRAAoP6SZ4wIvVdGj3gFphaUUoWOV9emC9oJnmMjM33RSAHOnMFROOvJbojS\nub4Qhujvh/6vsqvo4KL3PIJ/RDLo1bNZHfaTpaFG+peOaE/PL1cAdQTDw02rKX0S\ntD268x2zj9owGxc4wWtNFWdyHDb5IB9ghZT4z3OQGD/6TdJr+PT7DzL8ITmcUYT0\nalXUlHx4evHZHh3FKeypXdL/b+kjVnpC2ssB5tOskpFiVzoShw4S2WtCVfXK4119\nvRgsv4ZocMmXyKd6wEpxBw+wHdfTbumScU8A2EvRB/xawU/yOqsvtQMybdJfeouV\nBohzbUeccDUXNBN1foaJjQbOjvapyhjBcB3Sl1WHrkouKxX0ifMjHH5aAvzqNrBA\n5sQ3RMNgtOr/4uqAkGDyLunTvYNGQsZSHoce2gsfyLGnmmvNULlIl9qs6PXMBM2c\nkcn/y5x2cNBJqD1TuIHQE1N4zPOBuU9/Ze/yb4IJtFEa3bM6J6sibR2rfujek+6j\nZiLQhMPKM5v9Qbg+YVGx+rNnH8noJVhnmMT3gWhgz9CEYcr1slfaBvyz+tYRQ9i1\nHzOh2CZ5kEOAO7upijZB9rJwz73XSAzHFRQi6ZhTKq7lFYus5w/vJIV1SeRRUt7V\nIQ75pHasJn71DqxbEC1EXBQ/qk+PAT0Lpr6qk9Oo0DlSJdb32eg=\n=UwqG\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82fa5310b9fe80131d621c625c9f2ab311965eb8",
          "sha": "82fa5310b9fe80131d621c625c9f2ab311965eb8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/82fa5310b9fe80131d621c625c9f2ab311965eb8"
        }
      ],
      "message": "rpc: clarify longpoll behavior\n\nAdd code comments.\n\nMove the comparison to hashWatchedChain inside the while loop. The\nearly return prevents the GetTransactionsUpdated() call in cases\nwhere the tip updates. This check is very cheap, so it's skipped\nto improve readability.",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-18T14:43:51Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-13T15:00:23Z"
      },
      "sha": "6806651d2f64d51094178cbfb23ef2f4a956aa4d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16349632802,
      "node_id": "HRFPE_lADOABII586ojB_JzwAAAAPOg5ki",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16349632802",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "created_at": "2025-02-18T14:44:23Z"
    },
    {
      "event": "commented",
      "id": 2665925797,
      "node_id": "IC_kwDOABII586e5syl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2665925797",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-18T14:45:16Z",
      "updated_at": "2025-02-18T14:45:16Z",
      "author_association": "MEMBER",
      "body": "Addressed @vasild's feedback (and rebased).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#issuecomment-2665925797",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31785"
    },
    {
      "event": "mentioned",
      "id": 16349647381,
      "node_id": "MEE_lADOABII586ojB_JzwAAAAPOg9IV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16349647381",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-18T14:45:18Z"
    },
    {
      "event": "subscribed",
      "id": 16349647416,
      "node_id": "SE_lADOABII586ojB_JzwAAAAPOg9I4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16349647416",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-18T14:45:18Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939533024",
      "pull_request_review_id": 2590179163,
      "id": 1939533024,
      "node_id": "PRRC_kwDOABII585zmuzg",
      "diff_hunk": "@@ -989,6 +989,12 @@ class MinerImpl : public Mining\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        {\n+            // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+            WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+            if (!notifications().TipBlock()) return nullptr;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "af85987a169787205eeac6854f09cbe66713f1c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If it's not too difficult, can we reproduce this with a test?",
      "created_at": "2025-02-03T15:03:32Z",
      "updated_at": "2025-02-03T15:03:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1939533024",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939533024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 995,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939540523",
      "pull_request_review_id": 2590193691,
      "id": 1939540523,
      "node_id": "PRRC_kwDOABII585zmwor",
      "diff_hunk": "@@ -989,6 +989,12 @@ class MinerImpl : public Mining\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        {\n+            // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+            WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+            if (!notifications().TipBlock()) return nullptr;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "af85987a169787205eeac6854f09cbe66713f1c9",
      "in_reply_to_id": 1939533024,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This depends on the node initialization (and shutdown) sequence. I'm not sure how to reproduce that in a test. And we might change that sequence in a way that this never happens in the first place.",
      "created_at": "2025-02-03T15:06:16Z",
      "updated_at": "2025-02-03T15:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1939540523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939540523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 995,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939572655",
      "pull_request_review_id": 2590249166,
      "id": 1939572655,
      "node_id": "PRRC_kwDOABII585zm4ev",
      "diff_hunk": "@@ -989,6 +989,12 @@ class MinerImpl : public Mining\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override",
      "path": "src/node/interfaces.cpp",
      "position": 39,
      "original_position": 2,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "af85987a169787205eeac6854f09cbe66713f1c9",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be good to update the docs, because `CreateNewBlock` never returns null and always returns a block.",
      "created_at": "2025-02-03T15:21:24Z",
      "updated_at": "2025-02-03T15:21:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1939572655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939572655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1001,
      "original_line": 1001,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939755012",
      "pull_request_review_id": 2590556365,
      "id": 1939755012,
      "node_id": "PRRC_kwDOABII585znlAE",
      "diff_hunk": "@@ -989,6 +989,12 @@ class MinerImpl : public Mining\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override",
      "path": "src/node/interfaces.cpp",
      "position": 39,
      "original_position": 2,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "af85987a169787205eeac6854f09cbe66713f1c9",
      "in_reply_to_id": 1939572655,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The latest push has `waitTipChanged` and `createNewBlock` return null if the node shuts down, and documentation is updated to reflect that.",
      "created_at": "2025-02-03T17:17:52Z",
      "updated_at": "2025-02-03T17:17:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1939755012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939755012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1001,
      "original_line": 1001,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952303154",
      "pull_request_review_id": 2611342025,
      "id": 1952303154,
      "node_id": "PRRC_kwDOABII5850Xcgy",
      "diff_hunk": "@@ -81,15 +81,21 @@ class Mining\n      * @param[in] current_tip block hash of the current chain tip. Function waits\n      *                        for the chain tip to differ from this.\n      * @param[in] timeout     how long to wait for a new tip\n-     * @returns               Hash and height of the current chain tip after this call.\n+     *\n+     * @retval BlockRef hash and height of the current chain tip after this call.\n+     * @retval empty if node is shutting down",
      "path": "src/interfaces/mining.h",
      "position": null,
      "original_position": 7,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n     * @retval std::nullopt if the given `timeout` passes or the node is shut down before the tip is connected (there is no tip during startup).\r\n```",
      "created_at": "2025-02-12T09:41:00Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952303154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952303154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952318566",
      "pull_request_review_id": 2611342025,
      "id": 1952318566,
      "node_id": "PRRC_kwDOABII5850XgRm",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just before the lock and return there was a period when both `m_tip_block_mutex` and `cs_main` were unlocked, so `tip_hash` may be stale here. So this could return an inconsistent hash+height - the hash of one block and the height of another. The previous code was ok because it retrieved both the hash and the height from `chainman().ActiveChain().Tip()` under `cs_main`. I think this will fix it:\r\n\r\n```diff\r\n-        LOCK(::cs_main);\r\n-        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};\r\n+        return getTip();\r\n```",
      "created_at": "2025-02-12T09:50:25Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952318566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952318566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 987,
      "start_side": "LEFT",
      "line": null,
      "original_line": 992,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952373326",
      "pull_request_review_id": 2611342025,
      "id": 1952373326,
      "node_id": "PRRC_kwDOABII5850XtpO",
      "diff_hunk": "@@ -286,9 +287,13 @@ static RPCHelpMan waitfornewblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    BlockRef block{CHECK_NONFATAL(miner.getTip()).value()};\n     if (IsRPCRunning()) {\n-        block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        std::optional<BlockRef> maybe_block{timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash)};\n+        // Return new block unless the node is shutting down\n+        if (maybe_block) {\n+            block = *CHECK_NONFATAL(maybe_block);\n+        }\n     }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that \"no tip\" is expected here (unlikely but is not a \"programming logic error\"), maybe avoid `CHECK_NONFATAL()` and use `JSONRPCError`:\r\n\r\n```cpp\r\nstd::optional<BlockRef> old_block{miner.getTip()};\r\nstd::optional<BlockRef> new_block;\r\nif (IsRPCRunning()) {\r\n    const uint256 h{old_block.has_value() ? old_block->hash : uint256::ZERO};\r\n    new_block = timeout > 0 ? miner.waitTipChanged(h, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(h);\r\n}\r\n\r\nif (!new_block.has_value()) {\r\n    throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"No tip within timeout or shutting down\");\r\n}\r\n```",
      "created_at": "2025-02-12T10:23:31Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952373326",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952373326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 289,
      "start_side": "LEFT",
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952397601",
      "pull_request_review_id": 2611342025,
      "id": 1952397601,
      "node_id": "PRRC_kwDOABII5850Xzkh",
      "diff_hunk": "@@ -335,13 +340,18 @@ static RPCHelpMan waitforblock()\n     auto block{CHECK_NONFATAL(miner.getTip()).value()};\n     const auto deadline{std::chrono::steady_clock::now() + 1ms * timeout};\n     while (IsRPCRunning() && block.hash != hash) {\n+        std::optional<BlockRef> maybe_block;\n         if (timeout) {\n             auto now{std::chrono::steady_clock::now()};\n             if (now >= deadline) break;\n             const MillisecondsDouble remaining{deadline - now};\n-            block = miner.waitTipChanged(block.hash, remaining);\n+            maybe_block = miner.waitTipChanged(block.hash, remaining);\n         } else {\n-            block = miner.waitTipChanged(block.hash);\n+            maybe_block = miner.waitTipChanged(block.hash);\n+        }\n+        // Return new block unless the node is shutting down\n+        if (maybe_block) {\n+            block = *CHECK_NONFATAL(maybe_block);\n         }\n     }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Similar here:\r\n\r\n```cpp\r\nstd::optional<BlockRef> block{miner.getTip()};\r\nconst auto deadline{std::chrono::steady_clock::now() + 1ms * timeout};\r\nwhile (IsRPCRunning() && (!block.has_value() || block->hash != hash)) {\r\n    const uint256 h{block.has_value() ? block->hash : uint256::ZERO};\r\n    if (timeout) {\r\n        const auto now{std::chrono::steady_clock::now()};\r\n        if (now >= deadline) break;\r\n        const MillisecondsDouble remaining{deadline - now};\r\n        block = miner.waitTipChanged(h, remaining);\r\n    } else {\r\n        block = miner.waitTipChanged(h);\r\n    }\r\n}\r\n\r\nif (!block.has_value()) {\r\n    JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"No tip within timeout or shutting down\");\r\n}\r\n```",
      "created_at": "2025-02-12T10:39:12Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952397601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952397601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 340,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952403604",
      "pull_request_review_id": 2611342025,
      "id": 1952403604,
      "node_id": "PRRC_kwDOABII5850X1CU",
      "diff_hunk": "@@ -801,7 +802,11 @@ static RPCHelpMan getblocktemplate()\n         {\n             MillisecondsDouble checktxtime{std::chrono::minutes(1)};\n             while (tip == hashWatchedChain && IsRPCRunning()) {\n-                tip = miner.waitTipChanged(hashWatchedChain, checktxtime).hash;\n+                std::optional<BlockRef> maybe_tip{miner.waitTipChanged(hashWatchedChain, checktxtime)};\n+                if (!maybe_tip) {\n+                    throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+                };\n+                tip = CHECK_NONFATAL(maybe_tip)->hash;\n                 // Timeout: Check transactions for update",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why is comment saying \"Timeout: ...\" when we could be here if the tip changed (no timeout)? Is the comment wrong?",
      "created_at": "2025-02-12T10:43:12Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952403604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952403604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952406392",
      "pull_request_review_id": 2611342025,
      "id": 1952406392,
      "node_id": "PRRC_kwDOABII5850X1t4",
      "diff_hunk": "@@ -801,7 +802,11 @@ static RPCHelpMan getblocktemplate()\n         {\n             MillisecondsDouble checktxtime{std::chrono::minutes(1)};\n             while (tip == hashWatchedChain && IsRPCRunning()) {\n-                tip = miner.waitTipChanged(hashWatchedChain, checktxtime).hash;\n+                std::optional<BlockRef> maybe_tip{miner.waitTipChanged(hashWatchedChain, checktxtime)};\n+                if (!maybe_tip) {\n+                    throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe elaborate the message that we could be here if no tip was connected within the timeout: \"No tip within timeout or shutting down\".",
      "created_at": "2025-02-12T10:45:13Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952406392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952406392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 807,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952410800",
      "pull_request_review_id": 2611342025,
      "id": 1952410800,
      "node_id": "PRRC_kwDOABII5850X2yw",
      "diff_hunk": "@@ -801,7 +802,11 @@ static RPCHelpMan getblocktemplate()\n         {\n             MillisecondsDouble checktxtime{std::chrono::minutes(1)};\n             while (tip == hashWatchedChain && IsRPCRunning()) {\n-                tip = miner.waitTipChanged(hashWatchedChain, checktxtime).hash;\n+                std::optional<BlockRef> maybe_tip{miner.waitTipChanged(hashWatchedChain, checktxtime)};\n+                if (!maybe_tip) {\n+                    throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+                };\n+                tip = CHECK_NONFATAL(maybe_tip)->hash;",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I think it is redundant to check that `maybe_tip` has value with `CHECK_NONFATAL()` just after `if (!maybe_tip)`. That's like:\r\n\r\n```\r\nif (A) {\r\n     throw ...\r\n}\r\nassert(!A);\r\n```\r\n\r\n`tip = maybe_tip->hash;` seems fine as well.",
      "created_at": "2025-02-12T10:48:10Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952410800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952410800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 806,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952414685",
      "pull_request_review_id": 2611342025,
      "id": 1952414685,
      "node_id": "PRRC_kwDOABII5850X3vd",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};\n     }\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};",
      "path": "src/node/interfaces.cpp",
      "position": 42,
      "original_position": 31,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The default for the timeout argument is `MillisecondsDouble::max()`, so:\r\n\r\n```suggestion\r\n        if (!waitTipChanged(uint256::ZERO)) return {};\r\n```",
      "created_at": "2025-02-12T10:50:52Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952414685",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952414685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952422440",
      "pull_request_review_id": 2611342025,
      "id": 1952422440,
      "node_id": "PRRC_kwDOABII5850X5oo",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }",
      "path": "src/node/interfaces.cpp",
      "position": 2,
      "original_position": 2,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The message of the first commit has a line that is 211 chars. Would be nice to use the [50/72 rule](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) in commit messages.\r\n",
      "created_at": "2025-02-12T10:54:58Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952422440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952422440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 972,
      "original_line": 972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952424790",
      "pull_request_review_id": 2611342025,
      "id": 1952424790,
      "node_id": "PRRC_kwDOABII5850X6NW",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};",
      "path": "src/node/interfaces.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit message of ad3af401c19b8d05ce69011a359db3090b7018e1 `rpc: handle shutdown during long poll and wait methods`:\r\n\r\n```diff\r\n- getblocktemplate,  waitfornewblock\r\n+ getblocktemplate, waitfornewblock\r\n```",
      "created_at": "2025-02-12T10:56:29Z",
      "updated_at": "2025-02-12T10:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952424790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952424790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 971,
      "original_line": 971,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952737128",
      "pull_request_review_id": 2612074044,
      "id": 1952737128,
      "node_id": "PRRC_kwDOABII5850ZGdo",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952318566,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That seems simpler anyway.",
      "created_at": "2025-02-12T14:16:04Z",
      "updated_at": "2025-02-12T14:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952737128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952737128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 987,
      "start_side": "LEFT",
      "line": null,
      "original_line": 992,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952751154",
      "pull_request_review_id": 2612094034,
      "id": 1952751154,
      "node_id": "PRRC_kwDOABII5850ZJ4y",
      "diff_hunk": "@@ -286,9 +287,13 @@ static RPCHelpMan waitfornewblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    BlockRef block{CHECK_NONFATAL(miner.getTip()).value()};\n     if (IsRPCRunning()) {\n-        block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        std::optional<BlockRef> maybe_block{timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash)};\n+        // Return new block unless the node is shutting down\n+        if (maybe_block) {\n+            block = *CHECK_NONFATAL(maybe_block);\n+        }\n     }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952373326,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh, you mean `old_block` could be `nullopt` (assuming the RPC is loaded at this point).\r\n\r\nBut the suggested error here would change the current behavior - if there's a timeout we return the old block. I could do an early error return though if the first `getTip()` doesn't give us a tip.",
      "created_at": "2025-02-12T14:21:50Z",
      "updated_at": "2025-02-12T14:21:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952751154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952751154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 289,
      "start_side": "LEFT",
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952788322",
      "pull_request_review_id": 2612158513,
      "id": 1952788322,
      "node_id": "PRRC_kwDOABII5850ZS9i",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952318566,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: handle shutdown during long poll and wait methods\" (ad3af401c19b8d05ce69011a359db3090b7018e1)\r\n\r\nNice suggestion. If this suggestion is applied should also simplify the code above\r\n\r\n```diff\r\n-        if (!tip_hash || chainman().m_interrupt) return {};\r\n+        if (chainman().m_interrupt) return {};\r\n```\r\n\r\nsince `tip_hash` is no longer relevant. Can also reduce the scope of the `tip_hash` variable.\r\n\r\n",
      "created_at": "2025-02-12T14:41:21Z",
      "updated_at": "2025-02-12T14:49:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952788322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952788322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 987,
      "start_side": "LEFT",
      "line": null,
      "original_line": 992,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952794396",
      "pull_request_review_id": 2612158513,
      "id": 1952794396,
      "node_id": "PRRC_kwDOABII5850ZUcc",
      "diff_hunk": "@@ -81,15 +81,21 @@ class Mining\n      * @param[in] current_tip block hash of the current chain tip. Function waits\n      *                        for the chain tip to differ from this.\n      * @param[in] timeout     how long to wait for a new tip\n-     * @returns               Hash and height of the current chain tip after this call.\n+     *\n+     * @retval BlockRef hash and height of the current chain tip after this call.\n+     * @retval empty if node is shutting down",
      "path": "src/interfaces/mining.h",
      "position": null,
      "original_position": 7,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952303154,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952303154\r\n\r\nI don't think suggested text is accurate because if timeout is exceeded while waiting for a new tip, this returns information about the current tip. I don't think that behavior should be changed.\r\n\r\nReturning null **only** when node is shutting down should be the simplest and best behavior.",
      "created_at": "2025-02-12T14:44:26Z",
      "updated_at": "2025-02-12T14:48:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1952794396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952794396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953840453",
      "pull_request_review_id": 2613892324,
      "id": 1953840453,
      "node_id": "PRRC_kwDOABII5850dT1F",
      "diff_hunk": "@@ -81,15 +81,21 @@ class Mining\n      * @param[in] current_tip block hash of the current chain tip. Function waits\n      *                        for the chain tip to differ from this.\n      * @param[in] timeout     how long to wait for a new tip\n-     * @returns               Hash and height of the current chain tip after this call.\n+     *\n+     * @retval BlockRef hash and height of the current chain tip after this call.\n+     * @retval empty if node is shutting down",
      "path": "src/interfaces/mining.h",
      "position": null,
      "original_position": 7,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952303154,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> if timeout is exceeded while waiting for a new tip, this returns information about the current tip\r\n\r\nTrue. What I meant was that if there is no tip within the timeout. The function does `wait_for(... tip_hash && tip_hash != current_tip ...)` - `tip_hash` to be set and to be different than the current. I meant that it could remain unset while the timeout passes. I see how the comment I suggested is misleading. What about:\r\n\r\n```cpp\r\n@retval std::nullopt if the given `timeout` passes before the tip is\r\nconnected (there is no tip during startup) or the node is shut down.\r\n```\r\n?",
      "created_at": "2025-02-13T05:35:13Z",
      "updated_at": "2025-02-13T05:35:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1953840453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953840453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953850030",
      "pull_request_review_id": 2613907573,
      "id": 1953850030,
      "node_id": "PRRC_kwDOABII5850dWKu",
      "diff_hunk": "@@ -286,9 +287,13 @@ static RPCHelpMan waitfornewblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    BlockRef block{CHECK_NONFATAL(miner.getTip()).value()};\n     if (IsRPCRunning()) {\n-        block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        std::optional<BlockRef> maybe_block{timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash)};\n+        // Return new block unless the node is shutting down\n+        if (maybe_block) {\n+            block = *CHECK_NONFATAL(maybe_block);\n+        }\n     }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952373326,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I mean to avoid `CHECK_NONFATAL()` if the tip is null and use `JSONRPCError` instead.\r\n\r\nIf the tip is null at the start, then wait for it to be set, if not set within the timeout, then `JSONRPCError`.",
      "created_at": "2025-02-13T05:48:15Z",
      "updated_at": "2025-02-13T05:48:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1953850030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953850030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 289,
      "start_side": "LEFT",
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954226223",
      "pull_request_review_id": 2614530537,
      "id": 1954226223,
      "node_id": "PRRC_kwDOABII5850eyAv",
      "diff_hunk": "@@ -81,15 +81,21 @@ class Mining\n      * @param[in] current_tip block hash of the current chain tip. Function waits\n      *                        for the chain tip to differ from this.\n      * @param[in] timeout     how long to wait for a new tip\n-     * @returns               Hash and height of the current chain tip after this call.\n+     *\n+     * @retval BlockRef hash and height of the current chain tip after this call.\n+     * @retval empty if node is shutting down",
      "path": "src/interfaces/mining.h",
      "position": null,
      "original_position": 7,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952303154,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, I think I see the problem. There's a potential scenario where node startup is unusually slow, longer than timeout.\r\n\r\nI think it's better in that case to ignore the timeout and instead keep waiting for the node to set a tip.",
      "created_at": "2025-02-13T10:20:48Z",
      "updated_at": "2025-02-13T10:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954226223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954226223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954288305",
      "pull_request_review_id": 2614634497,
      "id": 1954288305,
      "node_id": "PRRC_kwDOABII5850fBKx",
      "diff_hunk": "@@ -801,7 +802,11 @@ static RPCHelpMan getblocktemplate()\n         {\n             MillisecondsDouble checktxtime{std::chrono::minutes(1)};\n             while (tip == hashWatchedChain && IsRPCRunning()) {\n-                tip = miner.waitTipChanged(hashWatchedChain, checktxtime).hash;\n+                std::optional<BlockRef> maybe_tip{miner.waitTipChanged(hashWatchedChain, checktxtime)};\n+                if (!maybe_tip) {\n+                    throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952406392,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm introducing a new `RPC_SHUTDOWN_ERROR` which makes sense here. I don't think the message itself matters, since the user knows they shut down the node - and the exact details of where and why the RPC call fails aren't important.  ",
      "created_at": "2025-02-13T11:01:23Z",
      "updated_at": "2025-02-13T11:01:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954288305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954288305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 807,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954295417",
      "pull_request_review_id": 2614644291,
      "id": 1954295417,
      "node_id": "PRRC_kwDOABII5850fC55",
      "diff_hunk": "@@ -801,7 +802,11 @@ static RPCHelpMan getblocktemplate()\n         {\n             MillisecondsDouble checktxtime{std::chrono::minutes(1)};\n             while (tip == hashWatchedChain && IsRPCRunning()) {\n-                tip = miner.waitTipChanged(hashWatchedChain, checktxtime).hash;\n+                std::optional<BlockRef> maybe_tip{miner.waitTipChanged(hashWatchedChain, checktxtime)};\n+                if (!maybe_tip) {\n+                    throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+                };\n+                tip = CHECK_NONFATAL(maybe_tip)->hash;",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952410800,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed, but on the other hand code changes over time, stuff appears between the if statement and the usage of `tip`, then someone changes the if statement, and now we have a crash...",
      "created_at": "2025-02-13T11:04:25Z",
      "updated_at": "2025-02-13T11:04:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954295417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954295417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 806,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954297095",
      "pull_request_review_id": 2614646888,
      "id": 1954297095,
      "node_id": "PRRC_kwDOABII5850fDUH",
      "diff_hunk": "@@ -81,15 +81,21 @@ class Mining\n      * @param[in] current_tip block hash of the current chain tip. Function waits\n      *                        for the chain tip to differ from this.\n      * @param[in] timeout     how long to wait for a new tip\n-     * @returns               Hash and height of the current chain tip after this call.\n+     *\n+     * @retval BlockRef hash and height of the current chain tip after this call.\n+     * @retval empty if node is shutting down",
      "path": "src/interfaces/mining.h",
      "position": null,
      "original_position": 7,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952303154,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, this scenario I had in mind.\r\n\r\n> in that case to ignore the timeout and instead keep waiting for the node to set a tip\r\n\r\nHmm. What if the tip is not being connected for whatever reason? Wait forever? The current behavior of respecting the timeout looks safer. Would be an odd user experience to provide a timeout and the program to decide to wait longer for whatever reason.",
      "created_at": "2025-02-13T11:05:35Z",
      "updated_at": "2025-02-13T11:05:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954297095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954297095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954298757",
      "pull_request_review_id": 2614649825,
      "id": 1954298757,
      "node_id": "PRRC_kwDOABII5850fDuF",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};\n     }\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};",
      "path": "src/node/interfaces.cpp",
      "position": 42,
      "original_position": 31,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952414685,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems the compiler doesn't know about this default inside the implementation file.",
      "created_at": "2025-02-13T11:06:55Z",
      "updated_at": "2025-02-13T11:06:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954298757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954298757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954300543",
      "pull_request_review_id": 2614652724,
      "id": 1954300543,
      "node_id": "PRRC_kwDOABII5850fEJ_",
      "diff_hunk": "@@ -801,7 +802,11 @@ static RPCHelpMan getblocktemplate()\n         {\n             MillisecondsDouble checktxtime{std::chrono::minutes(1)};\n             while (tip == hashWatchedChain && IsRPCRunning()) {\n-                tip = miner.waitTipChanged(hashWatchedChain, checktxtime).hash;\n+                std::optional<BlockRef> maybe_tip{miner.waitTipChanged(hashWatchedChain, checktxtime)};\n+                if (!maybe_tip) {\n+                    throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+                };\n+                tip = CHECK_NONFATAL(maybe_tip)->hash;",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952410800,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok",
      "created_at": "2025-02-13T11:08:13Z",
      "updated_at": "2025-02-13T11:08:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954300543",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954300543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 806,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954310804",
      "pull_request_review_id": 2614668433,
      "id": 1954310804,
      "node_id": "PRRC_kwDOABII5850fGqU",
      "diff_hunk": "@@ -286,9 +287,13 @@ static RPCHelpMan waitfornewblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    BlockRef block{CHECK_NONFATAL(miner.getTip()).value()};\n     if (IsRPCRunning()) {\n-        block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        std::optional<BlockRef> maybe_block{timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash)};\n+        // Return new block unless the node is shutting down\n+        if (maybe_block) {\n+            block = *CHECK_NONFATAL(maybe_block);\n+        }\n     }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952373326,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I ended up with something similar...",
      "created_at": "2025-02-13T11:15:22Z",
      "updated_at": "2025-02-13T11:15:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954310804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954310804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 289,
      "start_side": "LEFT",
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954339722",
      "pull_request_review_id": 2614715950,
      "id": 1954339722,
      "node_id": "PRRC_kwDOABII5850fNuK",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};\n     }\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};",
      "path": "src/node/interfaces.cpp",
      "position": 42,
      "original_position": 31,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952414685,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "TIL https://flylib.com/books/en/2.887.1.53/1/\r\n\r\nPossible solutions I see:\r\n* drop the default altogether and have all callers use 2 arguments\r\n* use the \"non-virtual interface idiom\" as described in the chapter above (it is from the book \"Effective C++\" by Scott Meyers)\r\n* use overload instead of default arguments. Have two methods `waitTipChanged(hash)` and `waitTipChanged(hash, timeout)` (the first could call the second internally).",
      "created_at": "2025-02-13T11:36:58Z",
      "updated_at": "2025-02-13T11:36:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954339722",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954339722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954433827",
      "pull_request_review_id": 2614877828,
      "id": 1954433827,
      "node_id": "PRRC_kwDOABII5850fksj",
      "diff_hunk": "@@ -801,7 +802,11 @@ static RPCHelpMan getblocktemplate()\n         {\n             MillisecondsDouble checktxtime{std::chrono::minutes(1)};\n             while (tip == hashWatchedChain && IsRPCRunning()) {\n-                tip = miner.waitTipChanged(hashWatchedChain, checktxtime).hash;\n+                std::optional<BlockRef> maybe_tip{miner.waitTipChanged(hashWatchedChain, checktxtime)};\n+                if (!maybe_tip) {\n+                    throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+                };\n+                tip = CHECK_NONFATAL(maybe_tip)->hash;\n                 // Timeout: Check transactions for update",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952403604,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I pushed a commit to explain the long poll behaviour. Also added an early return above this point, just for clarity.",
      "created_at": "2025-02-13T12:46:46Z",
      "updated_at": "2025-02-13T12:46:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954433827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954433827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954473077",
      "pull_request_review_id": 2614945255,
      "id": 1954473077,
      "node_id": "PRRC_kwDOABII5850fuR1",
      "diff_hunk": "@@ -49,6 +49,7 @@ enum RPCErrorCode\n     RPC_VERIFY_ALREADY_IN_UTXO_SET  = -27, //!< Transaction already in utxo set\n     RPC_IN_WARMUP                   = -28, //!< Client still warming up\n     RPC_METHOD_DEPRECATED           = -32, //!< RPC method is deprecated\n+    RPC_SHUTDOWN_ERROR              = -37, //!< Node is shutting down",
      "path": "src/rpc/protocol.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "e6760e7f0f04c076c3eb8fa61cb54adf12fed36b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: introduce RPC_SHUTDOWN_ERROR\" (e6760e7f0f04c076c3eb8fa61cb54adf12fed36b)\r\n\r\nOut of curiosity, where did 37 come from?",
      "created_at": "2025-02-13T13:13:55Z",
      "updated_at": "2025-02-13T14:12:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954473077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954473077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954529064",
      "pull_request_review_id": 2615041149,
      "id": 1954529064,
      "node_id": "PRRC_kwDOABII5850f78o",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};\n     }\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};",
      "path": "src/node/interfaces.cpp",
      "position": 42,
      "original_position": 31,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952414685,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think we should drop the default, because `MillisecondsDouble::max()` is tedious. It seems fine that the interface does it internally, which is simpler than the other two solutions.\r\n\r\nKeep in mind that the interface has a much broader target audience (IPC users), so it should be as simple as possible. I'm less worried about other Bitcoin Core devs that need to change something inside `node/interfaces.cpp`",
      "created_at": "2025-02-13T13:45:28Z",
      "updated_at": "2025-02-13T13:47:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954529064",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954529064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954537951",
      "pull_request_review_id": 2615056394,
      "id": 1954537951,
      "node_id": "PRRC_kwDOABII5850f-Hf",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};\n     }\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};",
      "path": "src/node/interfaces.cpp",
      "position": 42,
      "original_position": 31,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952414685,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I could also do this:\r\n\r\n```diff\r\ndiff --git a/src/node/interfaces.cpp b/src/node/interfaces.cpp\r\nindex 66ce64b1c3..b0735d497c 100644\r\n--- a/src/node/interfaces.cpp\r\n+++ b/src/node/interfaces.cpp\r\n@@ -971,7 +971,7 @@ public:\r\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\r\n     }\r\n \r\n-    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\r\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout = MillisecondsDouble::max()) override\r\n     {\r\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\r\n         std::optional<uint256> tip_hash;\r\n@@ -1005,7 +1005,7 @@ public:\r\n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\r\n     {\r\n         // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\r\n-        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};\r\n+        if (!waitTipChanged(uint256::ZERO)) return {};\r\n \r\n         BlockAssembler::Options assemble_options{options};\r\n         ApplyArgsManOptions(*Assert(m_node.args), assemble_options);\r\n```\r\n\r\nBut that doesn't seem nicer. Also the compiler doesn't warn if the default in the `override` is different, so this seems unsafe.",
      "created_at": "2025-02-13T13:51:01Z",
      "updated_at": "2025-02-13T13:52:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954537951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954537951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954576364",
      "pull_request_review_id": 2614945255,
      "id": 1954576364,
      "node_id": "PRRC_kwDOABII5850gHfs",
      "diff_hunk": "@@ -971,20 +971,35 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n-            notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n-                // We need to wait for m_tip_block to be set AND for the value\n-                // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n-            });\n+            do {\n+                notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    // We need to wait for m_tip_block to be set AND for the value\n+                    // to differ from the current_tip value.\n+                    tip_hash = notifications().TipBlock();\n+                    return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n+                });\n+\n+                // In the unlikely event m_tip_block is not set after the timeout,\n+                // wait a little longer.\n+                timeout = 100ms;\n+            } while (!tip_hash && !chainman().m_interrupt);\n         }\n-        // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n-        LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+\n+        if (chainman().m_interrupt) return {};\n+\n+        // Although we won't use it, since the tip may have changed again\n+        // before we know its height, tip_hash should have been set.\n+        Assume(tip_hash);\n+\n+        // Must release m_tip_block_mutex before getTip() locks cs_main, to\n+        // avoid deadlocks.\n+        return getTip();\n     }",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "fa99eddd926e0d49604d9ca8f21fac85d63652f4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: handle shutdown during long poll and wait methods\" (fa99eddd926e0d49604d9ca8f21fac85d63652f4)\r\n\r\nI think this new behavior of only using `timeout` as time limit for tip changing, not as a time limit for the tip to be set on startup makes a lot of sense and should be much more convenient for callers than previous behavior.\r\n\r\n(Previous version in ad3af401c19b8d05ce69011a359db3090b7018e1 would return ambiguous null values on startup that could mean either the node was shutting down or the timeout was reached, and would force callers to immediately make another waitTipChanged call without even giving them any new information in the meantime.)\r\n\r\nOnly downside of this behavior is that mining API no longer includes a function that can wait with a limited timeout for the tip to be non-null on startup. But if anybody wants this we could add a timeout option to `getTip()` or a new separate `waitForStartup()` method accepting a timeout. Or we could not provide anything, since it is pretty easy for callers to implemented their own timeouts if they are using the capnproto client API.\r\n\r\nHowever, the current implementation of this behavior in fa99eddd926e0d49604d9ca8f21fac85d63652f4 looks a bit janky to me, with double nested wait loop, unnecessary 100ms polling, unnecessary tip_hash variable, and an Assume() check out of place and delayed for no reason. Following is untested, but I think would a simpler implementation that cleans all these issues up:\r\n\r\n```c++\r\n    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\r\n    {\r\n        if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\r\n        auto deadline{std::chrono::steady_clock::now() + timeout};\r\n        {\r\n            WAIT_LOCK(notifications().m_tip_block_mutex, lock);\r\n            // For callers convenience, wait longer than the provided timeout\r\n            // during startup for the tip to be non-null. That way this function\r\n            // always returns valid tip information when possible and only\r\n            // returns null when shutting down, not when timing out.\r\n            notifications().m_tip_block_cv.wait(lock, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\r\n                return notifications().TipBlock() || chainman().m_interrupt;\r\n            });\r\n            // At this point TipBlock is set, so continue to wait until it is\r\n            // different then `current_tip` provided by caller.\r\n            notifications().m_tip_block_cv.wait_until(lock, deadline, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\r\n                return Assume(notifications().TipBlock()) != current_tip || chainman().m_interrupt;\r\n            });\r\n         }\r\n\r\n        if (chainman().m_interrupt) return {};\r\n\r\n        // Must release m_tip_block_mutex before getTip() locks cs_main, to\r\n        // avoid deadlocks.\r\n        return getTip();\r\n    }\r\n```",
      "created_at": "2025-02-13T14:12:24Z",
      "updated_at": "2025-02-13T14:12:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954576364",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954576364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 974,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 999,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954607452",
      "pull_request_review_id": 2615175218,
      "id": 1954607452,
      "node_id": "PRRC_kwDOABII5850gPFc",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};\n     }\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};",
      "path": "src/node/interfaces.cpp",
      "position": 42,
      "original_position": 31,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952414685,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My takeaway from the article is that having a default for the base class is fine, and that it's better to not use a default for the inherited classes (but it could get ignored).\r\n\r\nThe patch in my previous comment would be bad. But the current code that calls `waitTipChanged(uint256::ZERO, MillisecondsDouble::max())` should be fine.",
      "created_at": "2025-02-13T14:29:27Z",
      "updated_at": "2025-02-13T14:29:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954607452",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954607452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954608225",
      "pull_request_review_id": 2615176447,
      "id": 1954608225,
      "node_id": "PRRC_kwDOABII5850gPRh",
      "diff_hunk": "@@ -49,6 +49,7 @@ enum RPCErrorCode\n     RPC_VERIFY_ALREADY_IN_UTXO_SET  = -27, //!< Transaction already in utxo set\n     RPC_IN_WARMUP                   = -28, //!< Client still warming up\n     RPC_METHOD_DEPRECATED           = -32, //!< RPC method is deprecated\n+    RPC_SHUTDOWN_ERROR              = -37, //!< Node is shutting down",
      "path": "src/rpc/protocol.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "e6760e7f0f04c076c3eb8fa61cb54adf12fed36b",
      "in_reply_to_id": 1954473077,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "First available number.",
      "created_at": "2025-02-13T14:29:53Z",
      "updated_at": "2025-02-13T14:29:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954608225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954608225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954615547",
      "pull_request_review_id": 2615188969,
      "id": 1954615547,
      "node_id": "PRRC_kwDOABII5850gRD7",
      "diff_hunk": "@@ -81,15 +81,21 @@ class Mining\n      * @param[in] current_tip block hash of the current chain tip. Function waits\n      *                        for the chain tip to differ from this.\n      * @param[in] timeout     how long to wait for a new tip\n-     * @returns               Hash and height of the current chain tip after this call.\n+     *\n+     * @retval BlockRef hash and height of the current chain tip after this call.\n+     * @retval empty if node is shutting down",
      "path": "src/interfaces/mining.h",
      "position": null,
      "original_position": 7,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952303154,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let's continue here: https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954576364",
      "created_at": "2025-02-13T14:34:07Z",
      "updated_at": "2025-02-13T14:34:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954615547",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954615547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954626155",
      "pull_request_review_id": 2615206753,
      "id": 1954626155,
      "node_id": "PRRC_kwDOABII5850gTpr",
      "diff_hunk": "@@ -971,20 +971,35 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n-            notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n-                // We need to wait for m_tip_block to be set AND for the value\n-                // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n-            });\n+            do {\n+                notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    // We need to wait for m_tip_block to be set AND for the value\n+                    // to differ from the current_tip value.\n+                    tip_hash = notifications().TipBlock();\n+                    return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n+                });\n+\n+                // In the unlikely event m_tip_block is not set after the timeout,\n+                // wait a little longer.\n+                timeout = 100ms;\n+            } while (!tip_hash && !chainman().m_interrupt);\n         }\n-        // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n-        LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+\n+        if (chainman().m_interrupt) return {};\n+\n+        // Although we won't use it, since the tip may have changed again\n+        // before we know its height, tip_hash should have been set.\n+        Assume(tip_hash);\n+\n+        // Must release m_tip_block_mutex before getTip() locks cs_main, to\n+        // avoid deadlocks.\n+        return getTip();\n     }",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "fa99eddd926e0d49604d9ca8f21fac85d63652f4",
      "in_reply_to_id": 1954576364,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, that indeed looks simpler. Done in 0c06c8108fb43be317d86199750ecd3b7db9a5d2.\r\n\r\nI also think clients should handle timeouts themselves. For `bitcoin-cli` we have `-rpcclienttimeout=0`, other RPC clients presumably have their own timeout mechanisms, and IPC clients can do the same.",
      "created_at": "2025-02-13T14:39:59Z",
      "updated_at": "2025-02-13T14:52:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954626155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954626155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 974,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 999,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954769058",
      "pull_request_review_id": 2615479252,
      "id": 1954769058,
      "node_id": "PRRC_kwDOABII5850g2ii",
      "diff_hunk": "@@ -49,6 +49,7 @@ enum RPCErrorCode\n     RPC_VERIFY_ALREADY_IN_UTXO_SET  = -27, //!< Transaction already in utxo set\n     RPC_IN_WARMUP                   = -28, //!< Client still warming up\n     RPC_METHOD_DEPRECATED           = -32, //!< RPC method is deprecated\n+    RPC_SHUTDOWN_ERROR              = -37, //!< Node is shutting down",
      "path": "src/rpc/protocol.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "e6760e7f0f04c076c3eb8fa61cb54adf12fed36b",
      "in_reply_to_id": 1954473077,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> First available number.\r\n\r\nOh, thanks. Didn't notice the numbers were out of order and later ones were used below.",
      "created_at": "2025-02-13T15:48:58Z",
      "updated_at": "2025-02-13T15:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954769058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954769058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954836649",
      "pull_request_review_id": 2615601682,
      "id": 1954836649,
      "node_id": "PRRC_kwDOABII5850hHCp",
      "diff_hunk": "@@ -971,24 +971,32 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        std::optional<uint256> tip_hash;\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n             notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n                 // We need to wait for m_tip_block to be set AND for the value\n                 // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+                tip_hash = notifications().TipBlock();\n+                return (tip_hash && tip_hash != current_tip) || chainman().m_interrupt;\n             });\n         }\n+\n+        if (!tip_hash || chainman().m_interrupt) return {};\n+\n         // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n         LOCK(::cs_main);\n-        return BlockRef{chainman().ActiveChain().Tip()->GetBlockHash(), chainman().ActiveChain().Tip()->nHeight};\n+        return BlockRef{*Assume(tip_hash), Assume(chainman().ActiveChain().Tip())->nHeight};\n     }\n \n     std::unique_ptr<BlockTemplate> createNewBlock(const BlockCreateOptions& options) override\n     {\n+        // Ensure m_tip_block is set so consumers of BlockTemplate can rely on that.\n+        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};",
      "path": "src/node/interfaces.cpp",
      "position": 42,
      "original_position": 31,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "be15f2e769987b1df2cf1c8f327c5aafe064dbb3",
      "in_reply_to_id": 1952414685,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"Have createNewBlock() wait for a tip\" (854766b886b6c2ee564b867db64bdbce80064b3b)\r\n\r\nAnother alternative but probably not better is:\r\n\r\n```diff\r\n-        if (!waitTipChanged(uint256::ZERO, MillisecondsDouble::max())) return {};\r\n+        if (!static_cast<Mining*>(this)->waitTipChanged(uint256::ZERO)) return {};\r\n```\r\n\r\nI think in longer term after we add an initial waitNext() method and make improvements to it, it will be natural to move more functionality out of Mining class methods into node/miner.cpp or somewhere like that and these methods will get simpler. The node/interfaces.cpp file is mostly meant to contain glue code and wrap other functions, not implement real functionality itself. Since a lot of code needs to wait, I imagine there will be some new waiting utility function this could call instead of waitTipChanged, but using waitTipChanged for now here should be fine.",
      "created_at": "2025-02-13T16:28:44Z",
      "updated_at": "2025-02-13T16:28:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954836649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954836649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954865233",
      "pull_request_review_id": 2615645250,
      "id": 1954865233,
      "node_id": "PRRC_kwDOABII5850hOBR",
      "diff_hunk": "@@ -286,9 +287,17 @@ static RPCHelpMan waitfornewblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    std::optional<BlockRef> old_block{miner.getTip()};\n+    if (!old_block) throw JSONRPCError(RPC_SHUTDOWN_ERROR, \"Node is shutting down\");\n+    BlockRef block{*CHECK_NONFATAL(old_block)};\n+\n+    std::optional<BlockRef> new_block;\n     if (IsRPCRunning()) {\n-        block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        new_block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        // Return new block unless the node is shutting down\n+        if (new_block) {\n+            block = *CHECK_NONFATAL(new_block);\n+        }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "0c06c8108fb43be317d86199750ecd3b7db9a5d2",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: handle shutdown during long poll and wait methods\" (0c06c8108fb43be317d86199750ecd3b7db9a5d2)\r\n\r\nI think this code is not quite right because it is assuming that if `getTip()` returns null it means the node is shutting down, when in reality it is starting up. Also the IsRPCRunning() call unnecessarily complicates things and is incorrect as we found previously in #30635. Would also be nice to reduce number of variables used in this code and remove CHECK_NONFATAL calls that can't trigger because they immediately follow null checks. Would suggest:\r\n\r\n```diff\r\n--- a/src/rpc/blockchain.cpp\r\n+++ b/src/rpc/blockchain.cpp\r\n@@ -287,18 +287,12 @@ static RPCHelpMan waitfornewblock()\r\n     NodeContext& node = EnsureAnyNodeContext(request.context);\r\n     Mining& miner = EnsureMining(node);\r\n \r\n-    std::optional<BlockRef> old_block{miner.getTip()};\r\n-    if (!old_block) throw JSONRPCError(RPC_SHUTDOWN_ERROR, \"Node is shutting down\");\r\n-    BlockRef block{*CHECK_NONFATAL(old_block)};\r\n-\r\n-    std::optional<BlockRef> new_block;\r\n-    if (IsRPCRunning()) {\r\n-        new_block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\r\n-        // Return new block unless the node is shutting down\r\n-        if (new_block) {\r\n-            block = *CHECK_NONFATAL(new_block);\r\n-        }\r\n-    }\r\n+    std::optional<BlockRef> tip{miner.getTip()};\r\n+    if (!tip) throw JSONRPCError(RPC_IN_WARMUP, \"Node is starting up\");\r\n+    BlockRef block{*tip};\r\n+    tip = timeout > 0 ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\r\n+    if (!tip) throw JSONRPCError(RPC_SHUTDOWN_ERROR, \"Node is shutting down\");\r\n+    block = *tip;\r\n \r\n     UniValue ret(UniValue::VOBJ);\r\n     ret.pushKV(\"hash\", block.hash.GetHex());\r\n```\r\n\r\nProbably similar simplifications can apply in other methods below.",
      "created_at": "2025-02-13T16:46:29Z",
      "updated_at": "2025-02-13T16:47:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1954865233",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954865233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 289,
      "start_side": "LEFT",
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955067561",
      "pull_request_review_id": 2615974945,
      "id": 1955067561,
      "node_id": "PRRC_kwDOABII5850h_ap",
      "diff_hunk": "@@ -286,9 +287,17 @@ static RPCHelpMan waitfornewblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    std::optional<BlockRef> old_block{miner.getTip()};\n+    if (!old_block) throw JSONRPCError(RPC_SHUTDOWN_ERROR, \"Node is shutting down\");\n+    BlockRef block{*CHECK_NONFATAL(old_block)};\n+\n+    std::optional<BlockRef> new_block;\n     if (IsRPCRunning()) {\n-        block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        new_block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        // Return new block unless the node is shutting down\n+        if (new_block) {\n+            block = *CHECK_NONFATAL(new_block);\n+        }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "0c06c8108fb43be317d86199750ecd3b7db9a5d2",
      "in_reply_to_id": 1954865233,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, `getTip()` doesn't wait.",
      "created_at": "2025-02-13T19:01:46Z",
      "updated_at": "2025-02-13T19:01:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1955067561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955067561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 289,
      "start_side": "LEFT",
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955115023",
      "pull_request_review_id": 2616055185,
      "id": 1955115023,
      "node_id": "PRRC_kwDOABII5850iLAP",
      "diff_hunk": "@@ -286,9 +287,17 @@ static RPCHelpMan waitfornewblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    std::optional<BlockRef> old_block{miner.getTip()};\n+    if (!old_block) throw JSONRPCError(RPC_SHUTDOWN_ERROR, \"Node is shutting down\");\n+    BlockRef block{*CHECK_NONFATAL(old_block)};\n+\n+    std::optional<BlockRef> new_block;\n     if (IsRPCRunning()) {\n-        block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        new_block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n+        // Return new block unless the node is shutting down\n+        if (new_block) {\n+            block = *CHECK_NONFATAL(new_block);\n+        }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "0c06c8108fb43be317d86199750ecd3b7db9a5d2",
      "in_reply_to_id": 1954865233,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I made a variant of this that's a bit more in line with #30635; during startup we'll wait by using the 0 hash.",
      "created_at": "2025-02-13T19:41:42Z",
      "updated_at": "2025-02-13T19:41:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1955115023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955115023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 289,
      "start_side": "LEFT",
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959586025",
      "pull_request_review_id": 2623295004,
      "id": 1959586025,
      "node_id": "PRRC_kwDOABII5850zOjp",
      "diff_hunk": "@@ -971,24 +971,38 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        auto deadline{std::chrono::steady_clock::now() + timeout};\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n-            notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n-                // We need to wait for m_tip_block to be set AND for the value\n-                // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+            // For callers convenience, wait longer than the provided timeout\n+            // during startup for the tip to be non-null. That way this function\n+            // always returns valid tip information when possible and only\n+            // returns null when shutting down, not when timing out.\n+            notifications().m_tip_block_cv.wait(lock, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                return notifications().TipBlock() || chainman().m_interrupt;\n+            });\n+            // At this point TipBlock is set, so continue to wait until it is\n+            // different then `current_tip` provided by caller.\n+            notifications().m_tip_block_cv.wait_until(lock, deadline, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                return Assume(notifications().TipBlock()) != current_tip || chainman().m_interrupt;\n             });",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `Assume()` can be triggered during normal circumstances: if the first wait quits with `TipBlock()` null and `chainman().m_interrupt` being `true`. The easiest way to work around this would be to swap the order in the second condition:\r\n\r\n```diff\r\n- Assume(notifications().TipBlock()) != current_tip || chainman().m_interrupt\r\n+ chainman().m_interrupt || Assume(notifications().TipBlock()) != current_tip\r\n```\r\nthat might be a bit fragile though, wrt future changes.",
      "created_at": "2025-02-18T11:50:15Z",
      "updated_at": "2025-02-18T12:15:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1959586025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959586025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 984,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 991,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959604318",
      "pull_request_review_id": 2623295004,
      "id": 1959604318,
      "node_id": "PRRC_kwDOABII5850zTBe",
      "diff_hunk": "@@ -332,22 +337,28 @@ static RPCHelpMan waitforblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    std::optional<BlockRef> block{miner.getTip()};\n+    // If getTip() returns null, which can happen during startup, pass 0 to\n+    // waitTipChanged() so it will wait for any tip hash to be set.\n+    uint256 tip_hash{block ? block->hash : uint256{}};\n+\n     const auto deadline{std::chrono::steady_clock::now() + 1ms * timeout};\n-    while (IsRPCRunning() && block.hash != hash) {\n+    while (tip_hash != hash) {\n         if (timeout) {\n             auto now{std::chrono::steady_clock::now()};\n             if (now >= deadline) break;\n             const MillisecondsDouble remaining{deadline - now};\n-            block = miner.waitTipChanged(block.hash, remaining);\n+            block = miner.waitTipChanged(tip_hash, remaining);\n         } else {\n-            block = miner.waitTipChanged(block.hash);\n+            block = miner.waitTipChanged(tip_hash);\n         }\n+        if (!block) throw JSONRPCError(RPC_SHUTDOWN_ERROR, \"Node is shutting down\");\n+        tip_hash = block->hash;\n     }\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.pushKV(\"hash\", block.hash.GetHex());\n-    ret.pushKV(\"height\", block.height);\n+    ret.pushKV(\"hash\", block->hash.GetHex());\n+    ret.pushKV(\"height\", block->height);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This could crash in the following (stupid) scenario:\r\n* the user provides `0` as desired block hash to the `waitforblock`\r\n* `getTip()` returns `nullopt`, which is assigned to `block`\r\n* the `while` loop is never entered, not even once so `block` remains `nullopt`\r\n* at the end we try to dereference the `nullopt` `block` :rescue_worker_helmet: \r\n\r\nWe shouldn't crash even on such \"idiotic\" input. Maybe change the `while` condition:\r\n\r\n```diff\r\n- while (tip_hash != hash) {\r\n+ while (tip_hash != hash || !block.has_value()) {\r\n```",
      "created_at": "2025-02-18T12:01:24Z",
      "updated_at": "2025-02-18T12:15:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1959604318",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959604318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 340,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959608374",
      "pull_request_review_id": 2623295004,
      "id": 1959608374,
      "node_id": "PRRC_kwDOABII5850zUA2",
      "diff_hunk": "@@ -387,23 +398,31 @@ static RPCHelpMan waitforblockheight()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n     const auto deadline{std::chrono::steady_clock::now() + 1ms * timeout};\n \n-    while (IsRPCRunning() && block.height < height) {\n+    std::optional<BlockRef> block{miner.getTip()};\n+    // If getTip() returns null, which can happen during startup, pass 0 to\n+    // waitTipChanged() so it will wait for any tip hash to be set.\n+    uint256 tip_hash{block ? block->hash : uint256{}};\n+    int block_height{block ? block->height : 0};\n+\n+    while (block_height < height) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same here, if the user provides `height=0`, and `getTip()` returns `nullopt`, then this will be `while (0 < 0)`, will never enter and `block` will remain `nullopt` and be dereferenced at the end.",
      "created_at": "2025-02-18T12:04:31Z",
      "updated_at": "2025-02-18T12:15:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1959608374",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959608374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959617648",
      "pull_request_review_id": 2623295004,
      "id": 1959617648,
      "node_id": "PRRC_kwDOABII5850zWRw",
      "diff_hunk": "@@ -286,14 +287,18 @@ static RPCHelpMan waitfornewblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n-    if (IsRPCRunning()) {\n-        block = timeout ? miner.waitTipChanged(block.hash, std::chrono::milliseconds(timeout)) : miner.waitTipChanged(block.hash);\n-    }\n+    std::optional<BlockRef> block{miner.getTip()};\n+    // If getTip() returns null, which can happen during startup, pass 0 to\n+    // waitTipChanged() so it will wait for any tip hash to be set.\n+    uint256 tip_hash{block ? block->hash : uint256{}};",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: maybe use `uint256::ZERO`, also used in commit b954af72e4d6a83b3ba701b7ee52d97f2af3254b `Have createNewBlock() wait for a tip`:\r\n\r\n```suggestion\r\n    uint256 tip_hash{block ? block->hash : uint256::ZERO};\r\n```",
      "created_at": "2025-02-18T12:09:49Z",
      "updated_at": "2025-02-18T12:15:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1959617648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959617648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959857461",
      "pull_request_review_id": 2623759932,
      "id": 1959857461,
      "node_id": "PRRC_kwDOABII58500Q01",
      "diff_hunk": "@@ -332,22 +337,28 @@ static RPCHelpMan waitforblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    std::optional<BlockRef> block{miner.getTip()};\n+    // If getTip() returns null, which can happen during startup, pass 0 to\n+    // waitTipChanged() so it will wait for any tip hash to be set.\n+    uint256 tip_hash{block ? block->hash : uint256{}};\n+\n     const auto deadline{std::chrono::steady_clock::now() + 1ms * timeout};\n-    while (IsRPCRunning() && block.hash != hash) {\n+    while (tip_hash != hash) {\n         if (timeout) {\n             auto now{std::chrono::steady_clock::now()};\n             if (now >= deadline) break;\n             const MillisecondsDouble remaining{deadline - now};\n-            block = miner.waitTipChanged(block.hash, remaining);\n+            block = miner.waitTipChanged(tip_hash, remaining);\n         } else {\n-            block = miner.waitTipChanged(block.hash);\n+            block = miner.waitTipChanged(tip_hash);\n         }\n+        if (!block) throw JSONRPCError(RPC_SHUTDOWN_ERROR, \"Node is shutting down\");\n+        tip_hash = block->hash;\n     }\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.pushKV(\"hash\", block.hash.GetHex());\n-    ret.pushKV(\"height\", block.height);\n+    ret.pushKV(\"hash\", block->hash.GetHex());\n+    ret.pushKV(\"height\", block->height);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "in_reply_to_id": 1959604318,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I guess it could also crash on a non-existing block hash? That's not unlikely to happen.",
      "created_at": "2025-02-18T14:25:38Z",
      "updated_at": "2025-02-18T14:25:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1959857461",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959857461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 340,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959897031",
      "pull_request_review_id": 2623826745,
      "id": 1959897031,
      "node_id": "PRRC_kwDOABII58500afH",
      "diff_hunk": "@@ -332,22 +337,28 @@ static RPCHelpMan waitforblock()\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     Mining& miner = EnsureMining(node);\n \n-    auto block{CHECK_NONFATAL(miner.getTip()).value()};\n+    std::optional<BlockRef> block{miner.getTip()};\n+    // If getTip() returns null, which can happen during startup, pass 0 to\n+    // waitTipChanged() so it will wait for any tip hash to be set.\n+    uint256 tip_hash{block ? block->hash : uint256{}};\n+\n     const auto deadline{std::chrono::steady_clock::now() + 1ms * timeout};\n-    while (IsRPCRunning() && block.hash != hash) {\n+    while (tip_hash != hash) {\n         if (timeout) {\n             auto now{std::chrono::steady_clock::now()};\n             if (now >= deadline) break;\n             const MillisecondsDouble remaining{deadline - now};\n-            block = miner.waitTipChanged(block.hash, remaining);\n+            block = miner.waitTipChanged(tip_hash, remaining);\n         } else {\n-            block = miner.waitTipChanged(block.hash);\n+            block = miner.waitTipChanged(tip_hash);\n         }\n+        if (!block) throw JSONRPCError(RPC_SHUTDOWN_ERROR, \"Node is shutting down\");\n+        tip_hash = block->hash;\n     }\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.pushKV(\"hash\", block.hash.GetHex());\n-    ret.pushKV(\"height\", block.height);\n+    ret.pushKV(\"hash\", block->hash.GetHex());\n+    ret.pushKV(\"height\", block->height);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "in_reply_to_id": 1959604318,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added",
      "created_at": "2025-02-18T14:44:34Z",
      "updated_at": "2025-02-18T14:44:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1959897031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959897031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 340,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959897532",
      "pull_request_review_id": 2623827571,
      "id": 1959897532,
      "node_id": "PRRC_kwDOABII58500am8",
      "diff_hunk": "@@ -971,24 +971,38 @@ class MinerImpl : public Mining\n         return BlockRef{tip->GetBlockHash(), tip->nHeight};\n     }\n \n-    BlockRef waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n+    std::optional<BlockRef> waitTipChanged(uint256 current_tip, MillisecondsDouble timeout) override\n     {\n         if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+        auto deadline{std::chrono::steady_clock::now() + timeout};\n         {\n             WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n-            notifications().m_tip_block_cv.wait_for(lock, timeout, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n-                // We need to wait for m_tip_block to be set AND for the value\n-                // to differ from the current_tip value.\n-                return (notifications().TipBlock() && notifications().TipBlock() != current_tip) || chainman().m_interrupt;\n+            // For callers convenience, wait longer than the provided timeout\n+            // during startup for the tip to be non-null. That way this function\n+            // always returns valid tip information when possible and only\n+            // returns null when shutting down, not when timing out.\n+            notifications().m_tip_block_cv.wait(lock, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                return notifications().TipBlock() || chainman().m_interrupt;\n+            });\n+            // At this point TipBlock is set, so continue to wait until it is\n+            // different then `current_tip` provided by caller.\n+            notifications().m_tip_block_cv.wait_until(lock, deadline, [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                return Assume(notifications().TipBlock()) != current_tip || chainman().m_interrupt;\n             });",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "6806651d2f64d51094178cbfb23ef2f4a956aa4d",
      "original_commit_id": "2042ed105578a71234295b01be39ad8607722abe",
      "in_reply_to_id": 1959586025,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I flipped it.",
      "created_at": "2025-02-18T14:44:50Z",
      "updated_at": "2025-02-18T14:44:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31785#discussion_r1959897532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959897532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31785"
        }
      },
      "start_line": null,
      "original_start_line": 984,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 991,
      "side": "RIGHT"
    }
  ]
}