{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689",
    "id": 2287301043,
    "node_id": "PR_kwDOABII586IVXGz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31689",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31689.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31689.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d186875d420e5bb5dc7d35034999b66286b1480e",
    "number": 31689,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Benchmark Chainstate::ConnectBlock duration",
    "user": {
      "login": "Eunovo",
      "id": 37949128,
      "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Eunovo",
      "html_url": "https://github.com/Eunovo",
      "followers_url": "https://api.github.com/users/Eunovo/followers",
      "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
      "organizations_url": "https://api.github.com/users/Eunovo/orgs",
      "repos_url": "https://api.github.com/users/Eunovo/repos",
      "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Eunovo/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Add benchmark to measure ConnectBlock performance for\r\n- blocks containing only schnorr sigs\r\n- blocks containing both schnorr and ecdsa sigs\r\n- blocks containing only ecdsa sigs\r\n\r\nThis is the first step towards implementing Batch Verification of Schnorr Signatures on Core. It will allow testing and measuring performance improvements of batch verification on Core.\r\nAlso see the [batch-verify module on secp](https://github.com/bitcoin-core/secp256k1/pull/1134)",
    "labels": [],
    "created_at": "2025-01-20T10:34:46Z",
    "updated_at": "2025-01-22T16:12:37Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "328daaa020c26093b2958cd628b250ad28d69bed",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "Eunovo:connect-block-benchmark",
      "ref": "connect-block-benchmark",
      "sha": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 755831492,
        "node_id": "R_kgDOLQ0SxA",
        "name": "bitcoin",
        "full_name": "Eunovo/bitcoin",
        "owner": {
          "login": "Eunovo",
          "id": 37949128,
          "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
          "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Eunovo",
          "html_url": "https://github.com/Eunovo",
          "followers_url": "https://api.github.com/users/Eunovo/followers",
          "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
          "organizations_url": "https://api.github.com/users/Eunovo/orgs",
          "repos_url": "https://api.github.com/users/Eunovo/repos",
          "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Eunovo/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Eunovo/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Eunovo/bitcoin",
        "archive_url": "https://api.github.com/repos/Eunovo/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Eunovo/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Eunovo/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Eunovo/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Eunovo/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Eunovo/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Eunovo/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Eunovo/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Eunovo/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Eunovo/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Eunovo/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Eunovo/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Eunovo/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Eunovo/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Eunovo/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Eunovo/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Eunovo/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Eunovo/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Eunovo/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Eunovo/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Eunovo/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Eunovo/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Eunovo/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Eunovo/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Eunovo/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Eunovo/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Eunovo/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Eunovo/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Eunovo/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Eunovo/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Eunovo/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Eunovo/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Eunovo/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Eunovo/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Eunovo/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Eunovo/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Eunovo/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Eunovo/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Eunovo/bitcoin/hooks",
        "svn_url": "https://github.com/Eunovo/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 235666,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-22T15:36:54Z",
        "created_at": "2024-02-11T07:44:19Z",
        "updated_at": "2024-02-11T07:44:19Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "523520f8279987cd528a9e2db6db13dc56641eff",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36590,
        "stargazers_count": 81564,
        "watchers_count": 81564,
        "size": 274429,
        "default_branch": "master",
        "open_issues_count": 695,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-22T16:45:03Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-01-22T16:45:32Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 133,
    "deletions": 0,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 19,
    "comments": 8
  },
  "events": [
    {
      "event": "commented",
      "id": 2602043855,
      "node_id": "IC_kwDOABII586bGAnP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2602043855",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-20T10:34:50Z",
      "updated_at": "2025-01-21T18:43:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31689.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Approach ACK | [fjahr](https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605486813) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2602043855",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "convert_to_draft",
      "id": 15996698469,
      "node_id": "CTDE_lADOABII586m02F9zwAAAAO5ej9l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15996698469",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-20T10:34:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15997559931,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO5h2R7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15997559931",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f8db91e477f463b7a6e8e5bced13dd2d5b06ac58",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/f8db91e477f463b7a6e8e5bced13dd2d5b06ac58",
      "created_at": "2025-01-20T11:37:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15997881413,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO5jExF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15997881413",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "created_at": "2025-01-20T12:04:31Z"
    },
    {
      "event": "reviewed",
      "id": 2562243937,
      "node_id": "PRR_kwDOABII586YuL1h",
      "url": null,
      "actor": null,
      "commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2562243937",
      "submitted_at": "2025-01-20T12:17:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15998442687,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO5lNy_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15998442687",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d553a49beb165638fc22eece1bb9c3fda4e6bdbf",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/d553a49beb165638fc22eece1bb9c3fda4e6bdbf",
      "created_at": "2025-01-20T12:48:24Z"
    },
    {
      "event": "commented",
      "id": 2604630509,
      "node_id": "IC_kwDOABII586bP4Ht",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2604630509",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T12:41:41Z",
      "updated_at": "2025-01-21T12:41:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nWhat's keeping this in draft status?",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2604630509",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2604687152,
      "node_id": "IC_kwDOABII586bQF8w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2604687152",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:57Z",
      "updated_at": "2025-01-21T13:06:57Z",
      "author_association": "NONE",
      "body": "@fjahr  I'm trying to use some real Mainnet blocks here instead. Block 861848 for example, has a lot of taproot inputs and could be good for measuring batch-validation impact on a taproot-heavy block.\r\ncc @l0rinc ",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2604687152",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "mentioned",
      "id": 16014164183,
      "node_id": "MEE_lADOABII586m02F9zwAAAAO6hMDX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16014164183",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:58Z"
    },
    {
      "event": "subscribed",
      "id": 16014164208,
      "node_id": "SE_lADOABII586m02F9zwAAAAO6hMDw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16014164208",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:58Z"
    },
    {
      "event": "mentioned",
      "id": 16014164233,
      "node_id": "MEE_lADOABII586m02F9zwAAAAO6hMEJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16014164233",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:58Z"
    },
    {
      "event": "subscribed",
      "id": 16014164256,
      "node_id": "SE_lADOABII586m02F9zwAAAAO6hMEg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16014164256",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16016365875,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO6plkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16016365875",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/c0597320e1f2c76652944ac86759e226c0d8cbca",
      "created_at": "2025-01-21T15:33:02Z"
    },
    {
      "event": "reviewed",
      "id": 2565018048,
      "node_id": "PRR_kwDOABII586Y4xHA",
      "url": null,
      "actor": null,
      "commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2565018048",
      "submitted_at": "2025-01-21T15:41:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "commented",
      "id": 2605397889,
      "node_id": "IC_kwDOABII586bSzeB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605397889",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T17:56:58Z",
      "updated_at": "2025-01-21T17:56:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I'm trying to use some real Mainnet blocks here instead.\r\n\r\nHow would that be feasible if we don't have the UTXO set that this block is validated on?",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605397889",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2605410942,
      "node_id": "IC_kwDOABII586bS2p-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605410942",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:03:39Z",
      "updated_at": "2025-01-21T18:03:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "A similar attempt I had (based on your previous comment): https://github.com/bitcoin/bitcoin/pull/31699/commits/d90a0b8c90cd662bd2588e7df5fa6f641eebe3ba\r\n\r\nBut we can of course just copy the structure to make sure the benchmarks measure something real and not something completely made up (happens all the time with benchmarks and tests).\r\nThere is no perfect benchmark, but I'd like to investigate if we can do better than what we have currently.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605410942",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2605423826,
      "node_id": "IC_kwDOABII586bS5zS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605423826",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:10:16Z",
      "updated_at": "2025-01-21T18:10:16Z",
      "author_association": "NONE",
      "body": "> How would that be feasible if we don't have the UTXO set that this block is validated on?\r\n\r\n@mzumsande Copying the block structure could be feasible",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605423826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "mentioned",
      "id": 16018422539,
      "node_id": "MEE_lADOABII586m02F9zwAAAAO6xbsL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16018422539",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:10:18Z"
    },
    {
      "event": "subscribed",
      "id": 16018422554,
      "node_id": "SE_lADOABII586m02F9zwAAAAO6xbsa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16018422554",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:10:18Z"
    },
    {
      "event": "commented",
      "id": 2605486813,
      "node_id": "IC_kwDOABII586bTJLd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605486813",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:43:45Z",
      "updated_at": "2025-01-21T18:43:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nIMO the `check_` prefix on the benchmark file name is a bit odd, just `connectblock.cpp` should be fine.\r\n\r\nAnd there is quite a bit of duplication in the file benchmarks file, I played around with it a bit and I would suggest something like this: https://github.com/fjahr/bitcoin/commit/12eab5df067915ed83f91bf0777fcd0189f02b85 feel free to use it.\r\n\r\nAnd I think you can take this out of draft status :)",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605486813",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQxODY4NzVkNDIwZTViYjVkYzdkMzUwMzQ5OTliNjYyODZiMTQ4MGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d186875d420e5bb5dc7d35034999b66286b1480e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d186875d420e5bb5dc7d35034999b66286b1480e",
      "tree": {
        "sha": "0cfccb975aa7adc8f8bcf1ab5c6326fabdc18849",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cfccb975aa7adc8f8bcf1ab5c6326fabdc18849"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89720b7a1b37af885f304350fa25f2479179ae3e",
          "sha": "89720b7a1b37af885f304350fa25f2479179ae3e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/89720b7a1b37af885f304350fa25f2479179ae3e"
        }
      ],
      "message": "Benchmark Chainstate::ConnectBlock duration\n\nMeasure ConnectBlock performance for\n- blocks containing only schnorr sigs\n- blocks containing both schnorr and ecdsa sigs\n- blocks containing only ecdsa sigs\n\nThis will allow testing and measurement of performance improvement for features like\nbatch verification of schnorr signatures",
      "committer": {
        "name": "Eunovo",
        "email": "eunovo9@gmail.com",
        "date": "2025-01-22T14:56:56Z"
      },
      "author": {
        "name": "Eunovo",
        "email": "eunovo9@gmail.com",
        "date": "2024-10-31T19:31:36Z"
      },
      "sha": "d186875d420e5bb5dc7d35034999b66286b1480e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16031020045,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO7hfQN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16031020045",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/d186875d420e5bb5dc7d35034999b66286b1480e",
      "created_at": "2025-01-22T15:36:56Z"
    },
    {
      "event": "commented",
      "id": 2607602906,
      "node_id": "IC_kwDOABII586bbNza",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2607602906",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T15:47:55Z",
      "updated_at": "2025-01-22T15:48:38Z",
      "author_association": "NONE",
      "body": "I used a script to count Tx inputs in the 848000 to 868000 block range. The non-taproot to taproot ratio is 80% to 20%. I used that to create the mixed block. The mixed block can be used to gauge the effects of improvements like batch-validation on current blocks while we also see what it's effect on all schnorr blocks look like.",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2607602906",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "ready_for_review",
      "id": 16031534012,
      "node_id": "RFRE_lADOABII586m02F9zwAAAAO7jcu8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16031534012",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T16:12:37Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922316363",
      "pull_request_review_id": 2562243937,
      "id": 1922316363,
      "node_id": "PRRC_kwDOABII585ylDhL",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we use an existing block from Mainnet - to be sure we're measuring a representative case and not one skewed towards our preferences?\r\nOne with many schnorr sigs - but since we don't yet have one that only contains them, I don't think it makes sense to measure that (like we do here).",
      "created_at": "2025-01-20T12:17:34Z",
      "updated_at": "2025-01-21T16:46:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1922316363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922316363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923716358",
      "pull_request_review_id": 2564607523,
      "id": 1923716358,
      "node_id": "PRRC_kwDOABII585yqZUG",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Optimizing for one specific block is also skewing towards something, just a bit different. Maybe the test should generate a number of blocks with some randomization of the txs and inputs and outputs instead.",
      "created_at": "2025-01-21T13:18:35Z",
      "updated_at": "2025-01-21T13:18:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923716358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923716358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923806250",
      "pull_request_review_id": 2564764237,
      "id": 1923806250,
      "node_id": "PRRC_kwDOABII585yqvQq",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "They're always skewed, but if we use actual blocks as basis, at least we can't trick ourselves so easily.",
      "created_at": "2025-01-21T14:14:24Z",
      "updated_at": "2025-01-21T14:14:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923806250",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923806250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923821802",
      "pull_request_review_id": 2564790660,
      "id": 1923821802,
      "node_id": "PRRC_kwDOABII585yqzDq",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> They're always skewed, \r\n\r\nNot if we use randomization.\r\n\r\n> but if we use actual blocks as basis, at least we can't trick ourselves so easily.\r\n\r\nWe are just tricking ourselves differently.\r\n\r\nAfter a brief discussion with @Eunovo and @josibake elsewhere I think there should be 3 separate benchmarks: No Schnorr Blocks, Random-mix Blocks and only schnorr blocks. This allows to see the impact of changes on each of these scenarios and the random mix blocks should cover what we currently see on chain.",
      "created_at": "2025-01-21T14:23:12Z",
      "updated_at": "2025-01-21T14:23:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923821802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923821802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923846544",
      "pull_request_review_id": 2564831836,
      "id": 1923846544,
      "node_id": "PRRC_kwDOABII585yq5GQ",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> They're always skewed \r\n\r\n> Not if we use randomization.\r\n\r\nWe always introduce bias, it's unavoidable. Let's try to come up with something that minimizes our own preference of how we wish the blocks looked like (as in this PR where the block only contained Schnorrs). We can avoid that by checking the actual usages and relying on them.\r\n\r\n> I think there should be 3 separate benchmarks: No Schnorr Blocks, Random-mix Blocks and only schnorr blocks. \r\n\r\nThis will likely minimize the biases that we introduce - especially, as mentioned before, if we rely on existing blocks, instead of an artificial setup that are skewed towards the settings we desire to measure.",
      "created_at": "2025-01-21T14:37:23Z",
      "updated_at": "2025-01-21T14:41:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923846544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923846544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923955156",
      "pull_request_review_id": 2565012834,
      "id": 1923955156,
      "node_id": "PRRC_kwDOABII585yrTnU",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've updated the PR to use 3 blocks\r\n- all schnorr\r\n- 50% schnorr, 50% ecdsa\r\n- all ecdsa\r\n\r\nIf we used one block from Mainnet here, we would optimize for that block. This setup of 3 blocks is more balanced. We can always do an actual IBD benchmark or use tools like [Benchcoin](https://github.com/bitcoin-dev-tools/benchcoin) cc @josibake \r\n\r\nConnecting random blocks from Mainnet is tricky. At best, I would only be able to use the Mainnet block as a template to create the blocks for the benchmark. I'm not sure it's worth it to do this.",
      "created_at": "2025-01-21T15:40:28Z",
      "updated_at": "2025-01-21T15:40:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923955156",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923955156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923957793",
      "pull_request_review_id": 2565018048,
      "id": 1923957793,
      "node_id": "PRRC_kwDOABII585yrUQh",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As mentioned earlier, I would prefer basing the constants on data derived from actual usage. The current approach feels arbitrary and directly impacts the outcome.",
      "created_at": "2025-01-21T15:41:57Z",
      "updated_at": "2025-01-21T15:41:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923957793",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923957793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923964274",
      "pull_request_review_id": 2565029250,
      "id": 1923964274,
      "node_id": "PRRC_kwDOABII585yrV1y",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> we would optimize for that block\r\n\r\nSo what *are* we optimizing for now?",
      "created_at": "2025-01-21T15:45:53Z",
      "updated_at": "2025-01-21T16:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923964274",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923964274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924039967",
      "pull_request_review_id": 2565154968,
      "id": 1924039967,
      "node_id": "PRRC_kwDOABII585yroUf",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Picking a random block is just as arbitrary and it would make sense to base the numbers on an outlook for the future rather than looking backwards. I think 50/50 is good as a starting point. I'm sure there has been a block in past that had exactly 50% schnorr sigs, so this argument about using a specific block is pointless. If you want to suggest a different split based on the past I would suggest taking a larger range of blocks and deriving a very specific split from that. Like over the last year it's probably going to be something around 40%. I would still prefer to use 50/50 because it's more representative of what we expect the future to be like but maybe you can convince other reviewers to use this.",
      "created_at": "2025-01-21T16:32:01Z",
      "updated_at": "2025-01-21T16:32:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924039967",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924039967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924059948",
      "pull_request_review_id": 2565187304,
      "id": 1924059948,
      "node_id": "PRRC_kwDOABII585yrtMs",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Picking a random block is just as arbitrary\r\n\r\nAbsolutely, nobody recommended that.\r\n\r\n> I'm sure there has been a block in past that had exactly 50% schnorr sigs\r\n\r\nMy point is that I'd appreciate putting in the work and actually testing that assumption. And I'm not recommending getting any block, but create one that is based on measured values, not guessed ones.\r\n\r\n> Like over the last year it's probably going to be something around 40%.\r\n\r\nGreat, can we back that by actual measurements?\r\n\r\n> it's more representative of what we expect the future to be like\r\n\r\nHow so? Whenever that changes we can easily adjust the benchmarks. Let's base it on data instead of feelings.\r\n\r\nWhat I'm proposing is to take inspiration from the actual usages instead of coming up with these trivial values - only to discover later that they're not representative and don't cause any measurable speedup in reality.",
      "created_at": "2025-01-21T16:45:09Z",
      "updated_at": "2025-01-21T16:46:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924059948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924059948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924113469",
      "pull_request_review_id": 2565273162,
      "id": 1924113469,
      "node_id": "PRRC_kwDOABII585yr6Q9",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Absolutely, nobody recommended that.\r\n\r\nYou literally [suggested it one day ago](https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1922316363) and when @Eunovo said [he was going to follow through with it](https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2604687152) you gave him a thumbs up. That's what started this whole argument.\r\n\r\n> Great, can we back that by actual measurements?\r\n\r\nAs I said, I think 50/50 is fine so I won't do those measurements. Unless @Eunovo wants to do them it's probably better if you do them and suggest to use them here.\r\n\r\n> How so? Whenever that changes we can easily adjust the benchmarks. Let's base it on data instead of feelings.\r\n>\r\n> What I'm proposing is to take inspiration from the actual usages instead of coming up with these trivial values - only to discover later that they're not representative and don't cause any measurable speedup in reality.\r\n\r\nThese aren't feelings, they are assumptions based on what is being built in the bitcoin ecosystem. It seems more likely than not that we will see more taproot adoption rather than less.",
      "created_at": "2025-01-21T17:20:06Z",
      "updated_at": "2025-01-21T17:20:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924113469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924113469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924120812",
      "pull_request_review_id": 2565285205,
      "id": 1924120812,
      "node_id": "PRRC_kwDOABII585yr8Ds",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> You literally suggested it one day ago\r\n\r\nRead it again, there was no randomness suggested, rather the opposite, a well thought out investigation.\r\n\r\n> likely than not that we will see more taproot adoption rather than less\r\n\r\nExactly, so why 50/50 and not 80/20? ",
      "created_at": "2025-01-21T17:25:50Z",
      "updated_at": "2025-01-21T17:26:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924120812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924120812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924125286",
      "pull_request_review_id": 2565292483,
      "id": 1924125286,
      "node_id": "PRRC_kwDOABII585yr9Jm",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Exactly, so why 50/50 and not 80/20?\r\n\r\nWhy 80/20?",
      "created_at": "2025-01-21T17:28:50Z",
      "updated_at": "2025-01-21T17:28:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924125286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924125286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924126425",
      "pull_request_review_id": 2565294310,
      "id": 1924126425,
      "node_id": "PRRC_kwDOABII585yr9bZ",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Exactly!",
      "created_at": "2025-01-21T17:29:40Z",
      "updated_at": "2025-01-21T17:29:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924126425",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924126425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924128794",
      "pull_request_review_id": 2565298279,
      "id": 1924128794,
      "node_id": "PRRC_kwDOABII585yr-Aa",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Read it again, there was no randomness suggested\r\n\r\nWhat investigation? You suggested to pick a random block from mainnet and @Eunovo followed up with this saying \"Block 861848 for example\".",
      "created_at": "2025-01-21T17:31:37Z",
      "updated_at": "2025-01-21T17:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924128794",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924128794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924131171",
      "pull_request_review_id": 2565302222,
      "id": 1924131171,
      "node_id": "PRRC_kwDOABII585yr-lj",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > Exactly, so why 50/50 and not 80/20?\r\n> \r\n> Why 80/20?\r\n\r\nI hope you get the point. I can ask you why why why for anything you suggest too (why do you want to look at the past? Why do you want to look at the past year/6 months etc) and this PR will not go anywhere which would be a shame. This is a pointless debate.",
      "created_at": "2025-01-21T17:33:32Z",
      "updated_at": "2025-01-21T17:33:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924131171",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924131171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924131994",
      "pull_request_review_id": 2565303551,
      "id": 1924131994,
      "node_id": "PRRC_kwDOABII585yr-ya",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please read what I wrote, there was no random block suggestion.\r\nAll I'm saying is let's back up our choices by data instead of random values guided by feelings.\r\nDid not expect that to be a controversial statement...",
      "created_at": "2025-01-21T17:34:09Z",
      "updated_at": "2025-01-21T17:34:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924131994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924131994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924139948",
      "pull_request_review_id": 2565317291,
      "id": 1924139948,
      "node_id": "PRRC_kwDOABII585ysAus",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Please read what I wrote, there was no random block suggestion.\r\n\r\nOf course and you confirmed it with the engagement in the comment.\r\n\r\n> All I'm saying is let's back up our choices by data instead of random values guided by feelings.\r\n\r\nWhat data? Your suggestion is as arbitrary as mine as long as you have not made an actual suggestion of which data you want to use and put in the work to run the analysis. When have done that I can degrade that effort just like you degrade my comments here by calling them \"feelings\" because you will have to make decisions, too, like which blocks you actually include.",
      "created_at": "2025-01-21T17:40:32Z",
      "updated_at": "2025-01-21T17:40:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924139948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924139948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924154132",
      "pull_request_review_id": 2565340529,
      "id": 1924154132,
      "node_id": "PRRC_kwDOABII585ysEMU",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok guys, cool it please. I recommend a 24 hour break on this thread, or take it off github.",
      "created_at": "2025-01-21T17:52:14Z",
      "updated_at": "2025-01-21T17:52:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924154132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924154132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    }
  ]
}