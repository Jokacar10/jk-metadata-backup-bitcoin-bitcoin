{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689",
    "id": 2287301043,
    "node_id": "PR_kwDOABII586IVXGz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31689",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31689.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31689.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/7edaf8b64cb2d59ada22042fee62a417e52368b8",
    "number": 31689,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Benchmark Chainstate::ConnectBlock duration",
    "user": {
      "login": "Eunovo",
      "id": 37949128,
      "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Eunovo",
      "html_url": "https://github.com/Eunovo",
      "followers_url": "https://api.github.com/users/Eunovo/followers",
      "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
      "organizations_url": "https://api.github.com/users/Eunovo/orgs",
      "repos_url": "https://api.github.com/users/Eunovo/repos",
      "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Eunovo/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Introduce benchmarks to evaluate ConnectBlock performance for:\r\n- Blocks containing only Schnorr signatures\r\n- Blocks containing both Schnorr and ECDSA signatures\r\n- Blocks containing only ECDSA signatures\r\n\r\nThe benchmarks in this PR, focus on signature validation. Additional benchmarks may be added in the future to assess other aspects of ConnectBlock.\r\n\r\nThis is the first step toward implementing Batch Verification of Schnorr Signatures in Core. It provides a way to test and measure the performance improvements of batch verification on Core.\r\nFor more details on batch validation, refer to the [batch-verify module on secp](https://github.com/bitcoin-core/secp256k1/pull/1134) and [batch-verify on core](https://github.com/bitcoin/bitcoin/pull/29491).",
    "labels": [],
    "created_at": "2025-01-20T10:34:46Z",
    "updated_at": "2025-03-05T20:16:18Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "a1ebeceb599a036f4528bee6f93cb49720e8dc51",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "Eunovo:connect-block-benchmark",
      "ref": "connect-block-benchmark",
      "sha": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 755831492,
        "node_id": "R_kgDOLQ0SxA",
        "name": "bitcoin",
        "full_name": "Eunovo/bitcoin",
        "owner": {
          "login": "Eunovo",
          "id": 37949128,
          "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
          "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Eunovo",
          "html_url": "https://github.com/Eunovo",
          "followers_url": "https://api.github.com/users/Eunovo/followers",
          "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
          "organizations_url": "https://api.github.com/users/Eunovo/orgs",
          "repos_url": "https://api.github.com/users/Eunovo/repos",
          "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Eunovo/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Eunovo/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Eunovo/bitcoin",
        "archive_url": "https://api.github.com/repos/Eunovo/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Eunovo/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Eunovo/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Eunovo/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Eunovo/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Eunovo/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Eunovo/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Eunovo/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Eunovo/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Eunovo/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Eunovo/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Eunovo/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Eunovo/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Eunovo/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Eunovo/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Eunovo/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Eunovo/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Eunovo/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Eunovo/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Eunovo/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Eunovo/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Eunovo/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Eunovo/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Eunovo/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Eunovo/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Eunovo/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Eunovo/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Eunovo/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Eunovo/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Eunovo/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Eunovo/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Eunovo/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Eunovo/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Eunovo/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Eunovo/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Eunovo/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Eunovo/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Eunovo/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Eunovo/bitcoin/hooks",
        "svn_url": "https://github.com/Eunovo/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 237134,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-19T06:29:55Z",
        "created_at": "2024-02-11T07:44:19Z",
        "updated_at": "2024-02-11T07:44:19Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "a5b0a441f85db25ca3d866185fef5d282a2efd72",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36883,
        "stargazers_count": 82338,
        "watchers_count": 82338,
        "size": 276245,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-05T17:35:09Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-03-05T20:41:12Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 138,
    "deletions": 0,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 59,
    "comments": 19
  },
  "events": [
    {
      "event": "commented",
      "id": 2602043855,
      "node_id": "IC_kwDOABII586bGAnP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2602043855",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-20T10:34:50Z",
      "updated_at": "2025-03-05T20:16:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31689.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2614976099), [josibake](https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2656722488), [fjahr](https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2701970565) |\n| Approach ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2613835315) |\n| Stale ACK | [davidgumberg](https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2655685417) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2602043855",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "convert_to_draft",
      "id": 15996698469,
      "node_id": "CTDE_lADOABII586m02F9zwAAAAO5ej9l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15996698469",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-20T10:34:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15997559931,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO5h2R7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15997559931",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f8db91e477f463b7a6e8e5bced13dd2d5b06ac58",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/f8db91e477f463b7a6e8e5bced13dd2d5b06ac58",
      "created_at": "2025-01-20T11:37:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15997881413,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO5jExF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15997881413",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "created_at": "2025-01-20T12:04:31Z"
    },
    {
      "event": "reviewed",
      "id": 2562243937,
      "node_id": "PRR_kwDOABII586YuL1h",
      "url": null,
      "actor": null,
      "commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2562243937",
      "submitted_at": "2025-01-20T12:17:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15998442687,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO5lNy_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15998442687",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d553a49beb165638fc22eece1bb9c3fda4e6bdbf",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/d553a49beb165638fc22eece1bb9c3fda4e6bdbf",
      "created_at": "2025-01-20T12:48:24Z"
    },
    {
      "event": "commented",
      "id": 2604630509,
      "node_id": "IC_kwDOABII586bP4Ht",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2604630509",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T12:41:41Z",
      "updated_at": "2025-01-21T12:41:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nWhat's keeping this in draft status?",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2604630509",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2604687152,
      "node_id": "IC_kwDOABII586bQF8w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2604687152",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:57Z",
      "updated_at": "2025-01-21T13:06:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fjahr  I'm trying to use some real Mainnet blocks here instead. Block 861848 for example, has a lot of taproot inputs and could be good for measuring batch-validation impact on a taproot-heavy block.\r\ncc @l0rinc ",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2604687152",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "mentioned",
      "id": 16014164183,
      "node_id": "MEE_lADOABII586m02F9zwAAAAO6hMDX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16014164183",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:58Z"
    },
    {
      "event": "subscribed",
      "id": 16014164208,
      "node_id": "SE_lADOABII586m02F9zwAAAAO6hMDw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16014164208",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:58Z"
    },
    {
      "event": "mentioned",
      "id": 16014164233,
      "node_id": "MEE_lADOABII586m02F9zwAAAAO6hMEJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16014164233",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:58Z"
    },
    {
      "event": "subscribed",
      "id": 16014164256,
      "node_id": "SE_lADOABII586m02F9zwAAAAO6hMEg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16014164256",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T13:06:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16016365875,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO6plkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16016365875",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/c0597320e1f2c76652944ac86759e226c0d8cbca",
      "created_at": "2025-01-21T15:33:02Z"
    },
    {
      "event": "reviewed",
      "id": 2565018048,
      "node_id": "PRR_kwDOABII586Y4xHA",
      "url": null,
      "actor": null,
      "commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2565018048",
      "submitted_at": "2025-01-21T15:41:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "commented",
      "id": 2605397889,
      "node_id": "IC_kwDOABII586bSzeB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605397889",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T17:56:58Z",
      "updated_at": "2025-01-21T17:56:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I'm trying to use some real Mainnet blocks here instead.\r\n\r\nHow would that be feasible if we don't have the UTXO set that this block is validated on?",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605397889",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2605410942,
      "node_id": "IC_kwDOABII586bS2p-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605410942",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:03:39Z",
      "updated_at": "2025-01-21T18:03:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "A similar attempt I had (based on your previous comment): https://github.com/bitcoin/bitcoin/pull/31699/commits/d90a0b8c90cd662bd2588e7df5fa6f641eebe3ba\r\n\r\nBut we can of course just copy the structure to make sure the benchmarks measure something real and not something completely made up (happens all the time with benchmarks and tests).\r\nThere is no perfect benchmark, but I'd like to investigate if we can do better than what we have currently.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605410942",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2605423826,
      "node_id": "IC_kwDOABII586bS5zS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605423826",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:10:16Z",
      "updated_at": "2025-01-21T18:10:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> How would that be feasible if we don't have the UTXO set that this block is validated on?\r\n\r\n@mzumsande Copying the block structure could be feasible",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605423826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "mentioned",
      "id": 16018422539,
      "node_id": "MEE_lADOABII586m02F9zwAAAAO6xbsL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16018422539",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:10:18Z"
    },
    {
      "event": "subscribed",
      "id": 16018422554,
      "node_id": "SE_lADOABII586m02F9zwAAAAO6xbsa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16018422554",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:10:18Z"
    },
    {
      "event": "commented",
      "id": 2605486813,
      "node_id": "IC_kwDOABII586bTJLd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605486813",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T18:43:45Z",
      "updated_at": "2025-01-21T18:43:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nIMO the `check_` prefix on the benchmark file name is a bit odd, just `connectblock.cpp` should be fine.\r\n\r\nAnd there is quite a bit of duplication in the file benchmarks file, I played around with it a bit and I would suggest something like this: https://github.com/fjahr/bitcoin/commit/12eab5df067915ed83f91bf0777fcd0189f02b85 feel free to use it.\r\n\r\nAnd I think you can take this out of draft status :)",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2605486813",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16031020045,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO7hfQN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16031020045",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/d186875d420e5bb5dc7d35034999b66286b1480e",
      "created_at": "2025-01-22T15:36:56Z"
    },
    {
      "event": "commented",
      "id": 2607602906,
      "node_id": "IC_kwDOABII586bbNza",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2607602906",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T15:47:55Z",
      "updated_at": "2025-01-22T15:48:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "I used a script to count Tx inputs in the 848000 to 868000 block range. The non-taproot to taproot ratio is 80% to 20%. I used that to create the mixed block. The mixed block can be used to gauge the effects of improvements like batch-validation on current blocks while we also see what it's effect on all schnorr blocks look like.",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2607602906",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "ready_for_review",
      "id": 16031534012,
      "node_id": "RFRE_lADOABII586m02F9zwAAAAO7jcu8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16031534012",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T16:12:37Z"
    },
    {
      "event": "reviewed",
      "id": 2569617843,
      "node_id": "PRR_kwDOABII586ZKUGz",
      "url": null,
      "actor": null,
      "commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I have started reviewing but it contains too many misunderstanding, a few quick notes:\r\n* use `std::shared_ptr` to clarify ownership instead of get\r\n* don't clear the vectors, recreate them, they're faster and more obvious\r\n* use brace inits where possible\r\n* for primitive parameters add comments on use site\r\n* `use_schnorr` seems redundant, `num_taproot` already defines it\r\n* `bench.unit(\"block\").run([&] {` unit should likely be something that changes, e.g. total signatures or something that we can compare between the different runs\r\n* use `emplace_back` to construct objects in-place\r\n* destructure tuple returns to avoid calling `.first`\r\n* num_txs can be a param with default value\r\n\r\nStopped reviewing here, will continue based on follow ups",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2569617843",
      "submitted_at": "2025-01-23T12:28:36Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "commented",
      "id": 2609704404,
      "node_id": "IC_kwDOABII586bjO3U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2609704404",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T12:37:38Z",
      "updated_at": "2025-01-23T13:44:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The non-taproot to taproot ratio is 80% to 20%. I used that to create the mixed block.\r\n\r\nI still think that 50/50 would have been a better choice. Just from looking at the UTXO set we know that this number will be different from 80/20 in the future. Currently P2TR outputs take up 32% of the UTXO set. P2TR grows much faster than all other output types in the UTXO set. The other outputs types have been mostly stagnating the past ~year (while P2TR utxos doubled in the last year, P2WPKH grew by 10%, the others didn't grow). And you can subtract provably unspendables and lost keys from the rest of the output types in much higher numbers which will lead to an even higher share of P2TR inputs in future blocks. Could all current P2TR key holder throw them away and never spend their outputs? Sure, but much less likely than that the trend continues and future block have a lot more taproot inputs.\r\n\r\nAnd future blocks are much more interesting for this benchmark than past blocks because we can do all kinds of tricks and optimizations to speed up IBD but having a new tip propagate through the network as fast as possible is a much harder task.\r\n\r\nThis is my last comment on the topic of the mixed block split and I will just focus on the code from now on. I just want to reiterate that it makes a lot more sense to optimize for future blocks rather than past blocks.\r\n\r\nACK to 80/20 split. Please leave it and let's move on.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2609704404",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16059735948,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAO9PB-M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16059735948",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d54722be41246e89508f451bf6f9e27e7bb8d5f9",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/d54722be41246e89508f451bf6f9e27e7bb8d5f9",
      "created_at": "2025-01-24T14:46:35Z"
    },
    {
      "event": "commented",
      "id": 2613820430,
      "node_id": "IC_kwDOABII586by7wO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2613820430",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-25T07:12:01Z",
      "updated_at": "2025-01-25T07:12:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2569617843\r\n\r\n> use std::shared_ptr to clarify ownership instead of get\r\n\r\nI don't think this applies here, or is good advice in general. Shared pointers only seem useful when the object receiving a pointer possibly outlives the original, which I don't think is the case here anywhere. I'd instead suggest to take a reference of the underlying object where possible.\r\n\r\n<details>\r\n<summary>git diff on d54722be41246e89508f451bf6f9e27e7bb8d5f9</summary>\r\n\r\n```diff\r\ndiff --git a/src/bench/connectblock.cpp b/src/bench/connectblock.cpp\r\nindex 51471aa3d5..ec28646b0f 100644\r\n--- a/src/bench/connectblock.cpp\r\n+++ b/src/bench/connectblock.cpp\r\n@@ -18 +18 @@ CBlock CreateTestBlock(\r\n-    std::shared_ptr<TestChain100Setup> test_setup,\r\n+    TestChain100Setup& test_setup,\r\n@@ -23 +23 @@ CBlock CreateTestBlock(\r\n-    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\r\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\r\n@@ -32 +32 @@ CBlock CreateTestBlock(\r\n-    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\r\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\r\n@@ -36,2 +36,2 @@ CBlock CreateTestBlock(\r\n-    auto coinbase_to_spend{test_setup->m_coinbase_txns[0]};\r\n-    const auto [first_tx, _]{test_setup->CreateValidTransaction(\r\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\r\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\r\n@@ -42 +42 @@ CBlock CreateTestBlock(\r\n-    test_setup->CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\r\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\r\n@@ -55 +55 @@ CBlock CreateTestBlock(\r\n-        const auto [taproot_tx, _]{test_setup->CreateValidTransaction(\r\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\r\n@@ -63 +63 @@ CBlock CreateTestBlock(\r\n-    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\r\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\r\n@@ -89 +89 @@ std::pair<std::vector<CKey>, std::vector<CScript>> CreateKeysAndScripts(const CK\r\n-void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CScript>& spks, std::shared_ptr<TestChain100Setup> test_setup)\r\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CScript>& spks, TestChain100Setup& test_setup)\r\n@@ -95 +95 @@ void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std\r\n-    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\r\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\r\n@@ -111 +111 @@ static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\r\n-    const std::shared_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n@@ -113 +113 @@ static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\r\n-    BenchmarkConnectBlock(bench, keys, spks, test_setup);\r\n+    BenchmarkConnectBlock(bench, keys, spks, *test_setup);\r\n@@ -118 +118 @@ static void ConnectBlockMixed(benchmark::Bench& bench)\r\n-    const std::shared_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n@@ -121 +121 @@ static void ConnectBlockMixed(benchmark::Bench& bench)\r\n-    BenchmarkConnectBlock(bench, keys, spks, test_setup);\r\n+    BenchmarkConnectBlock(bench, keys, spks, *test_setup);\r\n@@ -126 +126 @@ static void ConnectBlockNoSchnorr(benchmark::Bench& bench)\r\n-    const std::shared_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n@@ -128 +128 @@ static void ConnectBlockNoSchnorr(benchmark::Bench& bench)\r\n-    BenchmarkConnectBlock(bench, keys, spks, test_setup);\r\n+    BenchmarkConnectBlock(bench, keys, spks, *test_setup);\r\n```\r\n</details>",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2613820430",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2613835315,
      "node_id": "IC_kwDOABII586by_Yz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2613835315",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-25T08:08:54Z",
      "updated_at": "2025-01-25T08:08:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2613835315",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "reviewed",
      "id": 2575773186,
      "node_id": "PRR_kwDOABII586Zhy4C",
      "url": null,
      "actor": null,
      "commit_id": "d54722be41246e89508f451bf6f9e27e7bb8d5f9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nThanks for picking this up, @Eunovo! This is a necessary precursor for the batch validation work, but also a generally useful benchmark to have. I think the motivation for the PR could be a bit more detailed, specifically highlighting that the benchmarks we are adding now are focused on signature verification. I imagine there are other aspects of `ConnectBlock` we might want to benchmark, which can be added to this file in the future. I do think it's a good idea to keep this initial PR focused on signature validation.\r\n\r\nI ran the benchmark locally (after doing the recommended pyperf step) and I noticed the mixed block case was taking noticeably longer than the all ECDSA/all Schnorr cases. See the output below:\r\n\r\n```\r\n./build/src/bench/bench_bitcoin -filter=\"ConnectBlock.*\"\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|       66,432,404.00 |               15.05 |    0.1% |  675,467,204.00 |  165,553,635.00 |  4.080 |  15,187,165.00 |    1.7% |      0.74 | `ConnectBlockAllSchnorr`\r\n|       83,202,399.00 |               12.02 |    0.1% |  839,153,157.00 |  207,359,165.00 |  4.047 |  19,061,066.00 |    1.7% |      0.93 | `ConnectBlockMixed`\r\n|       66,390,509.00 |               15.06 |    0.1% |  670,872,896.00 |  165,494,875.00 |  4.054 |  15,186,590.00 |    1.7% |      0.74 | `ConnectBlockNoSchnorr`\r\n```\r\n\r\nThis was surprising to me. I noticed that for the 80/20 split, you are doing it _within_ a transaction, e.g., two taproot inputs and two ECDSA inputs in the same transaction (as opposed to a transaction with two Schnorr spends and a transaction with two ECDSA spends). My first guess is the extra time is coming from hashing the transaction multiple times for the different signature digest algorithms? Just a guess; will need to dig into the code more to understand. I think it would be good to document some of this in the comments, explaining how we are constructing the transactions and that we are only doing the simple case of key path spends for Schnorr and using `SIGHASH_ALL/DEFAULT` in these initial benchmarks.\r\n\r\nI'd also echo @TheCharlatan 's feedback regarding taking a reference. Still in the process of reviewing, so will follow up with more feedback on the implementation. In the meanwhile, left some nits, if you end up retouching this before I finish my review",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2575773186",
      "submitted_at": "2025-01-27T15:46:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16117635109,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAPAr5gl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117635109",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f440e0686a19e9b968e8f99e487623a2e520df23",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/f440e0686a19e9b968e8f99e487623a2e520df23",
      "created_at": "2025-01-30T03:59:50Z"
    },
    {
      "event": "commented",
      "id": 2623477551,
      "node_id": "IC_kwDOABII586cXxcv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2623477551",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T04:12:55Z",
      "updated_at": "2025-01-30T04:12:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've updated the code to take a reference to the underlying test_setup object following @TheCharlatan and @josibake reviews. I've also added more comments explaining how the transactions in the test block are created.",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2623477551",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "mentioned",
      "id": 16117707199,
      "node_id": "MEE_lADOABII586m02F9zwAAAAPAsLG_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117707199",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T04:12:56Z"
    },
    {
      "event": "subscribed",
      "id": 16117707206,
      "node_id": "SE_lADOABII586m02F9zwAAAAPAsLHG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117707206",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T04:12:56Z"
    },
    {
      "event": "mentioned",
      "id": 16117707214,
      "node_id": "MEE_lADOABII586m02F9zwAAAAPAsLHO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117707214",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T04:12:56Z"
    },
    {
      "event": "subscribed",
      "id": 16117707217,
      "node_id": "SE_lADOABII586m02F9zwAAAAPAsLHR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117707217",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T04:12:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16117839956,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAPAsrhU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117839956",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "created_at": "2025-01-30T04:38:01Z"
    },
    {
      "event": "commented",
      "id": 2623504472,
      "node_id": "IC_kwDOABII586cX4BY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2623504472",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T04:40:14Z",
      "updated_at": "2025-01-30T04:41:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> My first guess is the extra time is coming from hashing the transaction multiple times for the different signature digest algorithms? Just a guess; will need to dig into the code more to understand.\r\n\r\nI'm pretty sure this is the case after looking at `SignatureHash` and `SignatureHashSchnorr` in `interpreter.cpp`. I added a comment explaining this",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2623504472",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "unsubscribed",
      "id": 16129590553,
      "node_id": "UE_lADOABII586m02F9zwAAAAPBZgUZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16129590553",
      "actor": {
        "login": "PRADACANDI18",
        "id": 91190628,
        "node_id": "MDQ6VXNlcjkxMTkwNjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/91190628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PRADACANDI18",
        "html_url": "https://github.com/PRADACANDI18",
        "followers_url": "https://api.github.com/users/PRADACANDI18/followers",
        "following_url": "https://api.github.com/users/PRADACANDI18/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PRADACANDI18/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PRADACANDI18/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PRADACANDI18/subscriptions",
        "organizations_url": "https://api.github.com/users/PRADACANDI18/orgs",
        "repos_url": "https://api.github.com/users/PRADACANDI18/repos",
        "events_url": "https://api.github.com/users/PRADACANDI18/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PRADACANDI18/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T20:16:30Z"
    },
    {
      "event": "reviewed",
      "id": 2606336089,
      "node_id": "PRR_kwDOABII586bWYhZ",
      "url": null,
      "actor": null,
      "commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/31689/commits/1c6b886465df0f00549e7d10c3bfefd27be7f1c2\r\n\r\nI spent some time trying to come up with a way to create a mixed block of all schnorr input transactions and all ecdsa input transactions (as opposed to transactions with both schnorr and ecdsa inputs), but I couldn't find a simple way to do it. Furthermore, it felt unnecessary for what we are trying to accomplish: establish a baseline for signature validation of blocks with both schnorr and ecdsa signatures. Thought it was a bit surprising at first, I think the comment you added explaining that a mixed input transaction will take longer to validate is sufficient.\r\n\r\nI left a few non-blocking style nits if you end up retouching, but overall this looks good!",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2606336089",
      "submitted_at": "2025-02-10T16:07:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "review_requested",
      "id": 16250509926,
      "node_id": "RRE_lADOABII586m02F9zwAAAAPImxpm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16250509926",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T16:07:05Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 16250510107,
      "node_id": "RRE_lADOABII586m02F9zwAAAAPImxsb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16250510107",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T16:07:06Z",
      "requested_reviewer": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2610952186,
      "node_id": "PRR_kwDOABII586bn_f6",
      "url": null,
      "actor": null,
      "commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2610952186",
      "submitted_at": "2025-02-12T06:37:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "reviewed",
      "id": 2611983178,
      "node_id": "PRR_kwDOABII586br7NK",
      "url": null,
      "actor": null,
      "commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2611983178",
      "submitted_at": "2025-02-12T15:31:25Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "commented",
      "id": 2654072249,
      "node_id": "IC_kwDOABII586eMe25",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2654072249",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T15:33:19Z",
      "updated_at": "2025-02-12T15:33:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "Forgot to post the diff with most of my suggestions (please double-check):\r\n\r\n<details>\r\n<summary>Suggestions</summary>\r\n\r\n```patch\r\ndiff --git a/src/bench/connectblock.cpp b/src/bench/connectblock.cpp\r\n--- a/src/bench/connectblock.cpp\t(revision cb071470c2d9e595b5b771b153dfe64fdd1b1392)\r\n+++ b/src/bench/connectblock.cpp\t(date 1739374368802)\r\n@@ -32,35 +32,33 @@\r\n     const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\r\n \r\n     // Create the outputs that will be spent in the first transaction of the test block\r\n-    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\r\n-    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\r\n+    // Doing this in a separate block excludes the validation of its inputs from the benchmark\r\n+    const auto& coinbase_to_spend{test_setup.m_coinbase_txns[0]};\r\n     const auto [first_tx, _]{test_setup.CreateValidTransaction(\r\n-        std::vector{coinbase_to_spend},\r\n-        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\r\n-        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\r\n-    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\r\n-    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\r\n+        {coinbase_to_spend},\r\n+        {COutPoint(coinbase_to_spend->GetHash(), 0)},\r\n+        chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\r\n+    const CScript coinbase_script{GetScriptForDestination(coinbase_taproot)};\r\n+    test_setup.CreateAndProcessBlock({first_tx}, coinbase_script, &chainstate);\r\n \r\n     std::vector<CMutableTransaction> txs;\r\n     txs.reserve(num_txs);\r\n-    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\r\n-    for (int i{0}; i < num_txs; i++) {\r\n+    for (int i{0}; i < num_txs; ++i) {\r\n+        const auto& tx_to_spend{i == 0 ? first_tx : txs.back()};\r\n+\r\n         std::vector<COutPoint> inputs;\r\n         inputs.reserve(outputs.size());\r\n-\r\n         for (size_t j{0}; j < outputs.size(); j++) {\r\n-            inputs.emplace_back(input_tx->GetHash(), j);\r\n+            inputs.emplace_back(tx_to_spend.GetHash(), j);\r\n         }\r\n \r\n         const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\r\n-            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\r\n+            {MakeTransactionRef(tx_to_spend)}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\r\n         txs.emplace_back(taproot_tx);\r\n-        input_tx = MakeTransactionRef(taproot_tx);\r\n     }\r\n \r\n     // Coinbase output can use any output type as it is not spent and will not change the benchmark\r\n-    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\r\n-    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\r\n+    return test_setup.CreateBlock(txs, coinbase_script, chainstate);\r\n }\r\n \r\n /*\r\n@@ -69,53 +67,51 @@\r\n  * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\r\n  * - All outputs have value of 1 BTC\r\n  */\r\n-std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\r\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_schnorr, size_t num_ecdsa)\r\n {\r\n     std::vector<CKey> keys{coinbaseKey};\r\n-    keys.reserve(num_taproot + num_nontaproot + 1);\r\n+    keys.reserve(num_schnorr + num_ecdsa + 1);\r\n \r\n     std::vector<CTxOut> outputs;\r\n-    outputs.reserve(num_taproot + num_nontaproot);\r\n+    outputs.reserve(num_schnorr + num_ecdsa);\r\n \r\n-    for (size_t i{0}; i < num_nontaproot; i++) {\r\n-        const CKey key{GenerateRandomKey()};\r\n-        keys.emplace_back(key);\r\n-        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\r\n+    for (size_t i{0}; i < num_ecdsa; ++i) {\r\n+        keys.emplace_back(GenerateRandomKey());\r\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{keys.back().GetPubKey()}));\r\n     }\r\n \r\n-    for (size_t i{0}; i < num_taproot; i++) {\r\n-        CKey key{GenerateRandomKey()};\r\n-        keys.emplace_back(key);\r\n-        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\r\n+    for (size_t i{0}; i < num_schnorr; ++i) {\r\n+        keys.emplace_back(GenerateRandomKey());\r\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(keys.back().GetPubKey())}));\r\n     }\r\n \r\n     return {keys, outputs};\r\n }\r\n \r\n-void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\r\n+void BenchmarkConnectBlock(benchmark::Bench& bench, const std::vector<CKey>& keys, const std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\r\n {\r\n     const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\r\n-    auto pindex{std::make_unique<CBlockIndex>(test_block)};\r\n-    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\r\n+    auto& chainman{test_setup.m_node.chainman};\r\n+    auto& chainstate{chainman->ActiveChainstate()};\r\n \r\n-    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\r\n-\r\n-    pindex->nHeight = chainstate.m_chain.Height() + 1;\r\n-    pindex->phashBlock = test_blockhash.get();\r\n-    pindex->pprev = chainstate.m_chain.Tip();\r\n+    {\r\n+        LOCK(::cs_main);\r\n+        auto* pindex{chainman->m_blockman.AddToBlockIndex(test_block, chainman->m_best_header)};\r\n+        chainman->ActiveChain().SetTip(*pindex);\r\n+    }\r\n \r\n     BlockValidationState test_block_state;\r\n     bench.unit(\"block\").run([&] {\r\n         LOCK(cs_main);\r\n         CCoinsViewCache viewNew{&chainstate.CoinsTip()};\r\n-        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew));\r\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, chainman->ActiveChain().Tip(), viewNew));\r\n     });\r\n }\r\n \r\n static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\r\n {\r\n-    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n-    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/4, /*num_nontaproot=*/0)};\r\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_schnorr=*/4, /*num_ecdsa=*/0)};\r\n     BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\r\n }\r\n \r\n@@ -123,23 +119,23 @@\r\n  * This benchmark is expected to be slower than the AllSchnorr or NoSchnorr benchmark\r\n  * because it uses transactions with both Schnorr and ECDSA signatures\r\n  * which requires the transaction to be hashed multiple times for\r\n- * the different signature allgorithms\r\n+ * the different signature algorithms\r\n  */\r\n-static void ConnectBlockMixed(benchmark::Bench& bench)\r\n+static void ConnectBlockMixedEcdsaSchnorr(benchmark::Bench& bench)\r\n {\r\n-    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n     // Blocks in range 848000 to 868000 have a roughly 20 to 80 ratio of schnorr to ecdsa inputs\r\n-    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/1, /*num_nontaproot=*/4)};\r\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_schnorr=*/1, /*num_ecdsa=*/4)};\r\n     BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\r\n }\r\n \r\n-static void ConnectBlockNoSchnorr(benchmark::Bench& bench)\r\n+static void ConnectBlockAllEcdsa(benchmark::Bench& bench)\r\n {\r\n-    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n-    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/0, /*num_nontaproot=*/4)};\r\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_schnorr=*/0, /*num_ecdsa=*/4)};\r\n     BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\r\n }\r\n \r\n BENCHMARK(ConnectBlockAllSchnorr, benchmark::PriorityLevel::HIGH);\r\n-BENCHMARK(ConnectBlockMixed, benchmark::PriorityLevel::HIGH);\r\n-BENCHMARK(ConnectBlockNoSchnorr, benchmark::PriorityLevel::HIGH);\r\n+BENCHMARK(ConnectBlockMixedEcdsaSchnorr, benchmark::PriorityLevel::HIGH);\r\n+BENCHMARK(ConnectBlockAllEcdsa, benchmark::PriorityLevel::HIGH);\r\n\r\n\r\n```\r\n\r\n</details>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2654072249",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "referenced",
      "id": 16290852225,
      "node_id": "REFE_lADOABII586m02F9zwAAAAPLAq2B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16290852225",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e98e173a57a39cb93a3556da6def4a00e0e95423",
      "commit_url": "https://api.github.com/repos/davidgumberg/fg/commits/e98e173a57a39cb93a3556da6def4a00e0e95423",
      "created_at": "2025-02-13T05:41:50Z"
    },
    {
      "event": "referenced",
      "id": 16290993175,
      "node_id": "REFE_lADOABII586m02F9zwAAAAPLBNQX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16290993175",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d2f6f83cea752f6e270c85ad61ac095b245c6278",
      "commit_url": "https://api.github.com/repos/davidgumberg/fg/commits/d2f6f83cea752f6e270c85ad61ac095b245c6278",
      "created_at": "2025-02-13T06:00:00Z"
    },
    {
      "event": "commented",
      "id": 2655685417,
      "node_id": "IC_kwDOABII586eSosp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2655685417",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T06:52:18Z",
      "updated_at": "2025-02-13T06:52:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/31689/commits/1c6b886465df0f00549e7d10c3bfefd27be7f1c2\r\n\r\nI like that the benchmarks added here for `ConnectBlock` are idealized scenarios that map to specific paths we want to test the performance of, namely Schnorr signature validation and ECDSA signature validation. Measuring performance in realistic scenarios is valuable for establishing ground truth, but it seems to me that microbenchmarks like these are most useful when their focus is narrow, since they will never be a total substitute for a real end-to-end measurement I am willing to sacrifice a little bit of faithfulness in exchange for ease of interpretation.\r\n\r\nOut of curiosity, I added a `P2PKH` scenario (https://github.com/davidgumberg/bitcoin/commit/b11348c50123999e413a5c1c373e108b78954375), where blocks are filled with 4 input 4 output P2PKH transactions,  and performance was very similar to `P2WPKH`:\r\n\r\n```console\r\n$ bench_bitcoin -filter=ConnectBlock.* -min-time=60000\r\n```\r\n\r\nbenchmark |            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | flamegraph \r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------|:-------|\r\n`ConnectBlockAllSchnorr` |       44,778,812.21 |               22.33 |    1.0% |  648,504,262.83 |  155,268,849.44 |  4.177 |  11,676,225.67 |    2.2% |     65.24 | [link](https://davidgumberg.github.io/fg/connectblockbench/allschnorr.html) |\r\n`ConnectBlockMixed` |       56,068,853.07 |               17.84 |    1.1% |  808,990,254.47 |  194,613,843.82 |  4.157 |  14,939,414.67 |    2.2% |     66.10 | [link](https://davidgumberg.github.io/fg/connectblockbench/mixed.html) |\r\n`ConnectBlockNoSchnorr` |       43,697,139.92 |               22.88 |    0.6% |  648,840,910.97 |  151,969,288.79 |  4.270 |  11,937,769.88 |    2.1% |     64.39 | [link](https://davidgumberg.github.io/fg/connectblockbench/noschnorr.html)|\r\n`ConnectBlockPKH` |       43,607,527.65 |               22.93 |    0.3% |  652,306,790.73 |  151,637,220.73 |  4.302 |  12,033,719.03 |    2.2% |     63.64 | [link](https://davidgumberg.github.io/fg/connectblockbench/pkh.html) |",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2655685417",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16294179799,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAPLNXPX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16294179799",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4b37efee90ee339b7bde7777b24a5268501cee9d",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/4b37efee90ee339b7bde7777b24a5268501cee9d",
      "created_at": "2025-02-13T10:24:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16294315703,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAPLN4a3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16294315703",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bd27a83efcc3d678f33041ee34eeb019777a2405",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/bd27a83efcc3d678f33041ee34eeb019777a2405",
      "created_at": "2025-02-13T10:33:42Z"
    },
    {
      "event": "labeled",
      "id": 16294318105,
      "node_id": "LE_lADOABII586m02F9zwAAAAPLN5AZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16294318105",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T10:33:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2656168797,
      "node_id": "IC_kwDOABII586eUetd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2656168797",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T10:33:54Z",
      "updated_at": "2025-02-13T10:33:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/37155591285</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2656168797",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2656212656,
      "node_id": "IC_kwDOABII586eUpaw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2656212656",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T10:50:21Z",
      "updated_at": "2025-02-13T12:52:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased https://github.com/bitcoin/bitcoin/commit/1c6b886465df0f00549e7d10c3bfefd27be7f1c2 to https://github.com/bitcoin/bitcoin/pull/31689/commits/6883704a0167aefc539dbae6ced1db976a128fca\r\n\r\nI improved some variable and function names based on received feedback, and also made style changes to align with `doc/developer-notes.md`. ",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2656212656",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "unlabeled",
      "id": 16295727688,
      "node_id": "UNLE_lADOABII586m02F9zwAAAAPLTRJI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16295727688",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T12:23:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16296090682,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAPLUpw6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16296090682",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c93525abef23853dbe065f23a849a7e16a1f1668",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/c93525abef23853dbe065f23a849a7e16a1f1668",
      "created_at": "2025-02-13T12:51:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16296100453,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAPLUsJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16296100453",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6883704a0167aefc539dbae6ced1db976a128fca",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/6883704a0167aefc539dbae6ced1db976a128fca",
      "created_at": "2025-02-13T12:52:05Z"
    },
    {
      "event": "reviewed",
      "id": 2614869602,
      "node_id": "PRR_kwDOABII586b275i",
      "url": null,
      "actor": null,
      "commit_id": "bd27a83efcc3d678f33041ee34eeb019777a2405",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, please see my remaining comments:\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```patch\r\ndiff --git a/src/bench/connectblock.cpp b/src/bench/connectblock.cpp\r\n--- a/src/bench/connectblock.cpp\t(revision b3a64758bc09eb60858c23292ba7f1b9a41b9bb9)\r\n+++ b/src/bench/connectblock.cpp\t(date 1739451327613)\r\n@@ -33,7 +33,7 @@\r\n \r\n     // Create the outputs that will be spent in the first transaction of the test block\r\n     // Doing this in a separate block excludes the validation of it's inputs from the benchmark\r\n-    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\r\n+    const auto& coinbase_to_spend{test_setup.m_coinbase_txns[0]};\r\n     const auto [first_tx, _]{test_setup.CreateValidTransaction(\r\n         std::vector{coinbase_to_spend},\r\n         std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\r\n@@ -90,25 +90,26 @@\r\n     return {keys, outputs};\r\n }\r\n \r\n-void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\r\n+void BenchmarkConnectBlock(benchmark::Bench& bench, const std::vector<CKey>& keys, const std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\r\n {\r\n-    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\r\n-    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\r\n+    const auto& test_block{CreateTestBlock(test_setup, keys, outputs)};\r\n     auto& chainman{test_setup.m_node.chainman};\r\n     auto& chainstate{chainman->ActiveChainstate()};\r\n \r\n-    BlockValidationState test_block_state;\r\n+    LOCK(cs_main);\r\n+    auto* pindex{chainman->m_blockman.AddToBlockIndex(test_block, chainman->m_best_header)};\r\n+\r\n     bench.unit(\"block\").run([&] {\r\n         LOCK(cs_main);\r\n-        auto* pindex{chainman->m_blockman.AddToBlockIndex(test_block, chainman->m_best_header)};\r\n         CCoinsViewCache viewNew{&chainstate.CoinsTip()};\r\n+        BlockValidationState test_block_state;\r\n         assert(chainstate.ConnectBlock(test_block, test_block_state, pindex, viewNew));\r\n     });\r\n }\r\n \r\n static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\r\n {\r\n-    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n     auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_schnorr=*/4, /*num_ecdsa=*/0)};\r\n     BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\r\n }\r\n@@ -121,7 +122,7 @@\r\n  */\r\n static void ConnectBlockMixedEcdsaSchnorr(benchmark::Bench& bench)\r\n {\r\n-    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n     // Blocks in range 848000 to 868000 have a roughly 20 to 80 ratio of schnorr to ecdsa inputs\r\n     auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_schnorr=*/1, /*num_ecdsa=*/4)};\r\n     BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\r\n@@ -129,7 +130,7 @@\r\n \r\n static void ConnectBlockAllEcdsa(benchmark::Bench& bench)\r\n {\r\n-    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\r\n     auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_schnorr=*/0, /*num_ecdsa=*/4)};\r\n     BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\r\n }\r\n```\r\n\r\n</details>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2614869602",
      "submitted_at": "2025-02-13T12:54:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16296236399,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAPLVNVv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16296236399",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f7ae94bf242b15e3c13c9c540f1e7f080eb6362f",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/f7ae94bf242b15e3c13c9c540f1e7f080eb6362f",
      "created_at": "2025-02-13T13:02:22Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdlZGFmOGI2NGNiMmQ1OWFkYTIyMDQyZmVlNjJhNDE3ZTUyMzY4Yjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "tree": {
        "sha": "659c6e3714c97c59a19c86f36b872a86ce06ed31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/659c6e3714c97c59a19c86f36b872a86ce06ed31"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad2f9324c619ae608c434ee85ad9ae1b2812877d",
          "sha": "ad2f9324c619ae608c434ee85ad9ae1b2812877d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ad2f9324c619ae608c434ee85ad9ae1b2812877d"
        }
      ],
      "message": "Benchmark Chainstate::ConnectBlock duration\n\nMeasure ConnectBlock performance for\n- blocks containing only schnorr sigs\n- blocks containing both schnorr and ecdsa sigs\n- blocks containing only ecdsa sigs\n\nThis will allow testing and measurement of performance improvement for features like\nbatch verification of schnorr signatures",
      "committer": {
        "name": "Eunovo",
        "email": "eunovo9@gmail.com",
        "date": "2025-02-13T13:05:12Z"
      },
      "author": {
        "name": "Eunovo",
        "email": "eunovo9@gmail.com",
        "date": "2024-10-31T19:31:36Z"
      },
      "sha": "7edaf8b64cb2d59ada22042fee62a417e52368b8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16296275243,
      "node_id": "HRFPE_lADOABII586m02F9zwAAAAPLVW0r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16296275243",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "commit_url": "https://api.github.com/repos/Eunovo/bitcoin/commits/7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "created_at": "2025-02-13T13:05:24Z"
    },
    {
      "event": "reviewed",
      "id": 2614976099,
      "node_id": "PRR_kwDOABII586b3V5j",
      "url": null,
      "actor": null,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 7edaf8b64cb2d59ada22042fee62a417e52368b8\r\n\r\nI ran the benchmarks and tests locally.\r\nI need a crypto expert to validate them conceptually as well, but I'm fine with the benchmarking code now.\r\n\r\n(before merging please fix the typo in the PR description)",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#pullrequestreview-2614976099",
      "submitted_at": "2025-02-13T13:20:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
    },
    {
      "event": "review_requested",
      "id": 16296491674,
      "node_id": "RRE_lADOABII586m02F9zwAAAAPLWLqa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16296491674",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T13:20:54Z",
      "requested_reviewer": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 16296491927,
      "node_id": "RRE_lADOABII586m02F9zwAAAAPLWLuX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16296491927",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T13:20:55Z",
      "requested_reviewer": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2656722488,
      "node_id": "IC_kwDOABII586eWl44",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2656722488",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T14:13:29Z",
      "updated_at": "2025-02-13T14:13:29Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/commit/7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2656722488",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    },
    {
      "event": "commented",
      "id": 2701970565,
      "node_id": "IC_kwDOABII586hDMyF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2701970565",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-05T20:16:14Z",
      "updated_at": "2025-03-05T20:16:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK 7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2701970565",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31689"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922316363",
      "pull_request_review_id": 2562243937,
      "id": 1922316363,
      "node_id": "PRRC_kwDOABII585ylDhL",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we use an existing block from Mainnet - to be sure we're measuring a representative case and not one skewed towards our preferences?\r\nOne with many schnorr sigs - but since we don't yet have one that only contains them, I don't think it makes sense to measure that (like we do here).",
      "created_at": "2025-01-20T12:17:34Z",
      "updated_at": "2025-01-21T16:46:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1922316363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922316363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923716358",
      "pull_request_review_id": 2564607523,
      "id": 1923716358,
      "node_id": "PRRC_kwDOABII585yqZUG",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Optimizing for one specific block is also skewing towards something, just a bit different. Maybe the test should generate a number of blocks with some randomization of the txs and inputs and outputs instead.",
      "created_at": "2025-01-21T13:18:35Z",
      "updated_at": "2025-01-21T13:18:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923716358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923716358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923806250",
      "pull_request_review_id": 2564764237,
      "id": 1923806250,
      "node_id": "PRRC_kwDOABII585yqvQq",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "They're always skewed, but if we use actual blocks as basis, at least we can't trick ourselves so easily.",
      "created_at": "2025-01-21T14:14:24Z",
      "updated_at": "2025-01-21T14:14:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923806250",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923806250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923821802",
      "pull_request_review_id": 2564790660,
      "id": 1923821802,
      "node_id": "PRRC_kwDOABII585yqzDq",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> They're always skewed, \r\n\r\nNot if we use randomization.\r\n\r\n> but if we use actual blocks as basis, at least we can't trick ourselves so easily.\r\n\r\nWe are just tricking ourselves differently.\r\n\r\nAfter a brief discussion with @Eunovo and @josibake elsewhere I think there should be 3 separate benchmarks: No Schnorr Blocks, Random-mix Blocks and only schnorr blocks. This allows to see the impact of changes on each of these scenarios and the random mix blocks should cover what we currently see on chain.",
      "created_at": "2025-01-21T14:23:12Z",
      "updated_at": "2025-01-21T14:23:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923821802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923821802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923846544",
      "pull_request_review_id": 2564831836,
      "id": 1923846544,
      "node_id": "PRRC_kwDOABII585yq5GQ",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> They're always skewed \r\n\r\n> Not if we use randomization.\r\n\r\nWe always introduce bias, it's unavoidable. Let's try to come up with something that minimizes our own preference of how we wish the blocks looked like (as in this PR where the block only contained Schnorrs). We can avoid that by checking the actual usages and relying on them.\r\n\r\n> I think there should be 3 separate benchmarks: No Schnorr Blocks, Random-mix Blocks and only schnorr blocks. \r\n\r\nThis will likely minimize the biases that we introduce - especially, as mentioned before, if we rely on existing blocks, instead of an artificial setup that are skewed towards the settings we desire to measure.",
      "created_at": "2025-01-21T14:37:23Z",
      "updated_at": "2025-01-21T14:41:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923846544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923846544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923955156",
      "pull_request_review_id": 2565012834,
      "id": 1923955156,
      "node_id": "PRRC_kwDOABII585yrTnU",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've updated the PR to use 3 blocks\r\n- all schnorr\r\n- 50% schnorr, 50% ecdsa\r\n- all ecdsa\r\n\r\nIf we used one block from Mainnet here, we would optimize for that block. This setup of 3 blocks is more balanced. We can always do an actual IBD benchmark or use tools like [Benchcoin](https://github.com/bitcoin-dev-tools/benchcoin) cc @josibake \r\n\r\nConnecting random blocks from Mainnet is tricky. At best, I would only be able to use the Mainnet block as a template to create the blocks for the benchmark. I'm not sure it's worth it to do this.",
      "created_at": "2025-01-21T15:40:28Z",
      "updated_at": "2025-01-21T15:40:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923955156",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923955156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923957793",
      "pull_request_review_id": 2565018048,
      "id": 1923957793,
      "node_id": "PRRC_kwDOABII585yrUQh",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As mentioned earlier, I would prefer basing the constants on data derived from actual usage. The current approach feels arbitrary and directly impacts the outcome.",
      "created_at": "2025-01-21T15:41:57Z",
      "updated_at": "2025-01-21T15:41:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923957793",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923957793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923964274",
      "pull_request_review_id": 2565029250,
      "id": 1923964274,
      "node_id": "PRRC_kwDOABII585yrV1y",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+std::pair<CBlock, std::unique_ptr<CBlockIndex>> CreateTestBlock(TestChain100Setup* test_setup)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    // Create a block with (500*4) schnorr signatures to verify\n+    // Typical blocks have high number of txs with few inputs\n+    const int num_txs = 500;\n+    const int num_inputs = 4;",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "0b13781d9fe39a5ebccbbec5cc584c505ea9be2a",
      "in_reply_to_id": 1922316363,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> we would optimize for that block\r\n\r\nSo what *are* we optimizing for now?",
      "created_at": "2025-01-21T15:45:53Z",
      "updated_at": "2025-01-21T16:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1923964274",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923964274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924039967",
      "pull_request_review_id": 2565154968,
      "id": 1924039967,
      "node_id": "PRRC_kwDOABII585yroUf",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Picking a random block is just as arbitrary and it would make sense to base the numbers on an outlook for the future rather than looking backwards. I think 50/50 is good as a starting point. I'm sure there has been a block in past that had exactly 50% schnorr sigs, so this argument about using a specific block is pointless. If you want to suggest a different split based on the past I would suggest taking a larger range of blocks and deriving a very specific split from that. Like over the last year it's probably going to be something around 40%. I would still prefer to use 50/50 because it's more representative of what we expect the future to be like but maybe you can convince other reviewers to use this.",
      "created_at": "2025-01-21T16:32:01Z",
      "updated_at": "2025-01-21T16:32:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924039967",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924039967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924059948",
      "pull_request_review_id": 2565187304,
      "id": 1924059948,
      "node_id": "PRRC_kwDOABII585yrtMs",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Picking a random block is just as arbitrary\r\n\r\nAbsolutely, nobody recommended that.\r\n\r\n> I'm sure there has been a block in past that had exactly 50% schnorr sigs\r\n\r\nMy point is that I'd appreciate putting in the work and actually testing that assumption. And I'm not recommending getting any block, but create one that is based on measured values, not guessed ones.\r\n\r\n> Like over the last year it's probably going to be something around 40%.\r\n\r\nGreat, can we back that by actual measurements?\r\n\r\n> it's more representative of what we expect the future to be like\r\n\r\nHow so? Whenever that changes we can easily adjust the benchmarks. Let's base it on data instead of feelings.\r\n\r\nWhat I'm proposing is to take inspiration from the actual usages instead of coming up with these trivial values - only to discover later that they're not representative and don't cause any measurable speedup in reality.",
      "created_at": "2025-01-21T16:45:09Z",
      "updated_at": "2025-01-21T16:46:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924059948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924059948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924113469",
      "pull_request_review_id": 2565273162,
      "id": 1924113469,
      "node_id": "PRRC_kwDOABII585yr6Q9",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Absolutely, nobody recommended that.\r\n\r\nYou literally [suggested it one day ago](https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1922316363) and when @Eunovo said [he was going to follow through with it](https://github.com/bitcoin/bitcoin/pull/31689#issuecomment-2604687152) you gave him a thumbs up. That's what started this whole argument.\r\n\r\n> Great, can we back that by actual measurements?\r\n\r\nAs I said, I think 50/50 is fine so I won't do those measurements. Unless @Eunovo wants to do them it's probably better if you do them and suggest to use them here.\r\n\r\n> How so? Whenever that changes we can easily adjust the benchmarks. Let's base it on data instead of feelings.\r\n>\r\n> What I'm proposing is to take inspiration from the actual usages instead of coming up with these trivial values - only to discover later that they're not representative and don't cause any measurable speedup in reality.\r\n\r\nThese aren't feelings, they are assumptions based on what is being built in the bitcoin ecosystem. It seems more likely than not that we will see more taproot adoption rather than less.",
      "created_at": "2025-01-21T17:20:06Z",
      "updated_at": "2025-01-21T17:20:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924113469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924113469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924120812",
      "pull_request_review_id": 2565285205,
      "id": 1924120812,
      "node_id": "PRRC_kwDOABII585yr8Ds",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> You literally suggested it one day ago\r\n\r\nRead it again, there was no randomness suggested, rather the opposite, a well thought out investigation.\r\n\r\n> likely than not that we will see more taproot adoption rather than less\r\n\r\nExactly, so why 50/50 and not 80/20? ",
      "created_at": "2025-01-21T17:25:50Z",
      "updated_at": "2025-01-21T17:26:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924120812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924120812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924125286",
      "pull_request_review_id": 2565292483,
      "id": 1924125286,
      "node_id": "PRRC_kwDOABII585yr9Jm",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Exactly, so why 50/50 and not 80/20?\r\n\r\nWhy 80/20?",
      "created_at": "2025-01-21T17:28:50Z",
      "updated_at": "2025-01-21T17:28:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924125286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924125286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924126425",
      "pull_request_review_id": 2565294310,
      "id": 1924126425,
      "node_id": "PRRC_kwDOABII585yr9bZ",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Exactly!",
      "created_at": "2025-01-21T17:29:40Z",
      "updated_at": "2025-01-21T17:29:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924126425",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924126425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924128794",
      "pull_request_review_id": 2565298279,
      "id": 1924128794,
      "node_id": "PRRC_kwDOABII585yr-Aa",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Read it again, there was no randomness suggested\r\n\r\nWhat investigation? You suggested to pick a random block from mainnet and @Eunovo followed up with this saying \"Block 861848 for example\".",
      "created_at": "2025-01-21T17:31:37Z",
      "updated_at": "2025-01-21T17:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924128794",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924128794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924131171",
      "pull_request_review_id": 2565302222,
      "id": 1924131171,
      "node_id": "PRRC_kwDOABII585yr-lj",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > Exactly, so why 50/50 and not 80/20?\r\n> \r\n> Why 80/20?\r\n\r\nI hope you get the point. I can ask you why why why for anything you suggest too (why do you want to look at the past? Why do you want to look at the past year/6 months etc) and this PR will not go anywhere which would be a shame. This is a pointless debate.",
      "created_at": "2025-01-21T17:33:32Z",
      "updated_at": "2025-01-21T17:33:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924131171",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924131171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924131994",
      "pull_request_review_id": 2565303551,
      "id": 1924131994,
      "node_id": "PRRC_kwDOABII585yr-ya",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please read what I wrote, there was no random block suggestion.\r\nAll I'm saying is let's back up our choices by data instead of random values guided by feelings.\r\nDid not expect that to be a controversial statement...",
      "created_at": "2025-01-21T17:34:09Z",
      "updated_at": "2025-01-21T17:34:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924131994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924131994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924139948",
      "pull_request_review_id": 2565317291,
      "id": 1924139948,
      "node_id": "PRRC_kwDOABII585ysAus",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Please read what I wrote, there was no random block suggestion.\r\n\r\nOf course and you confirmed it with the engagement in the comment.\r\n\r\n> All I'm saying is let's back up our choices by data instead of random values guided by feelings.\r\n\r\nWhat data? Your suggestion is as arbitrary as mine as long as you have not made an actual suggestion of which data you want to use and put in the work to run the analysis. When have done that I can degrade that effort just like you degrade my comments here by calling them \"feelings\" because you will have to make decisions, too, like which blocks you actually include.",
      "created_at": "2025-01-21T17:40:32Z",
      "updated_at": "2025-01-21T17:40:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924139948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924139948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924154132",
      "pull_request_review_id": 2565340529,
      "id": 1924154132,
      "node_id": "PRRC_kwDOABII585ysEMU",
      "diff_hunk": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2016-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>\n+\n+CBlock CreateTestBlock(TestChain100Setup* test_setup, std::vector<CKey>& keys, std::vector<CScript>& scriptpubkeys)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    const int num_txs = 500;\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+\n+    auto input_tx{test_setup->m_coinbase_txns[0]};\n+\n+    std::vector<COutPoint> inputs{COutPoint(input_tx->GetHash(), 0)};\n+    inputs.reserve(scriptpubkeys.size());\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will create outputs for each scriptpubkey that are spent in the next transaction\n+    outputs.reserve(scriptpubkeys.size());\n+\n+    for (int i{0}; i < num_txs; i++) {\n+        Txid txid = input_tx->GetHash();\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(txid, j);\n+        }\n+\n+        outputs.clear();\n+        for (size_t j{0}; j < scriptpubkeys.size(); j++) {\n+            outputs.emplace_back(COIN, scriptpubkeys[j]);\n+        }\n+        const auto taproot_tx{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.push_back(taproot_tx.first);\n+        input_tx = MakeTransactionRef(taproot_tx.first);\n+\n+        inputs.clear();\n+    }\n+\n+    const WitnessV1Taproot taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+    const CScript coinbase_spk{GetScriptForDestination(taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_keys{4};\n+    std::vector<CKey> keys{test_setup->coinbaseKey};\n+    keys.reserve(num_keys + 1);\n+\n+    std::vector<CScript> taproot_spks;\n+    taproot_spks.reserve(num_keys);\n+\n+    for (size_t i{0}; i < num_keys; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.push_back(key);\n+        const CScript scriptpubkey{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())})};\n+        taproot_spks.push_back(scriptpubkey);\n+    }\n+\n+    const auto test_block{CreateTestBlock(test_setup.get(), keys, taproot_spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));\n+    });\n+}\n+\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const auto test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+\n+    size_t num_taproot{2};\n+    size_t num_nontaproot{2};",
      "path": "src/bench/check_connectblock.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "c0597320e1f2c76652944ac86759e226c0d8cbca",
      "in_reply_to_id": 1923957793,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok guys, cool it please. I recommend a 24 hour break on this thread, or take it off github.",
      "created_at": "2025-01-21T17:52:14Z",
      "updated_at": "2025-01-21T17:52:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1924154132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924154132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1926830123",
      "pull_request_review_id": 2569617843,
      "id": 1926830123,
      "node_id": "PRRC_kwDOABII585y2Rgr",
      "diff_hunk": "@@ -20,6 +20,7 @@ add_executable(bench_bitcoin\n   chacha20.cpp\n   checkblock.cpp\n   checkblockindex.cpp\n+  connectblock.cpp\n   checkqueue.cpp\n   cluster_linearize.cpp\n   crypto_hash.cpp",
      "path": "src/bench/CMakeLists.txt",
      "position": null,
      "original_position": 7,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We order these alphabetically to minimize needless merge conflicts\r\n```suggestion\r\n  checkblockindex.cpp\r\n  checkqueue.cpp\r\n  cluster_linearize.cpp\r\n  connectblock.cpp\r\n  crypto_hash.cpp\r\n```",
      "created_at": "2025-01-23T11:31:55Z",
      "updated_at": "2025-01-23T12:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1926830123",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1926830123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 22,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1926839196",
      "pull_request_review_id": 2569617843,
      "id": 1926839196,
      "node_id": "PRRC_kwDOABII585y2Tuc",
      "diff_hunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <addresstype.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <utility>\n+#include <vector>",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "d186875d420e5bb5dc7d35034999b66286b1480e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `utility` seems unused and `bench` seems out of line:\r\n```suggestion\r\n#include <addresstype.h>\r\n#include <bench/bench.h>\r\n#include <interfaces/chain.h>\r\n#include <kernel/cs_main.h>\r\n#include <script/interpreter.h>\r\n#include <sync.h>\r\n#include <test/util/setup_common.h>\r\n#include <validation.h>\r\n\r\n#include <cassert>\r\n#include <vector>\r\n```",
      "created_at": "2025-01-23T11:39:22Z",
      "updated_at": "2025-01-23T12:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1926839196",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1926839196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1930726187",
      "pull_request_review_id": 2575773186,
      "id": 1930726187,
      "node_id": "PRRC_kwDOABII585zFIsr",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+CBlock CreateTestBlock(\n+    std::shared_ptr<TestChain100Setup> test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CScript>& scriptpubkeys,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will pay to the same outputs that will be spent in the next one\n+    outputs.reserve(scriptpubkeys.size());\n+    for (const auto& spk : scriptpubkeys) {\n+        outputs.emplace_back(COIN, spk);\n+    }\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup->m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup->CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup->CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+std::pair<std::vector<CKey>, std::vector<CScript>> CreateKeysAndScripts(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "d54722be41246e89508f451bf6f9e27e7bb8d5f9",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~I know that we generically call things \"scripts\" but I think it would be more clear to name this something like `CreateKeysAndSignatures`, as that better indicates what we are testing, i.e., ECDSA signatures and Schnorr signatures. I'd also recommend renaming the variables to `num_ecdsa_sigs` and `num_schnorr_sigs`, or something similar.~\r\n\r\nEDIT: reading this again, Scripts is more accurate since the signatures are created later, ignore me 😅 ",
      "created_at": "2025-01-27T15:33:05Z",
      "updated_at": "2025-01-28T11:28:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1930726187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1930726187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1930742652",
      "pull_request_review_id": 2575773186,
      "id": 1930742652,
      "node_id": "PRRC_kwDOABII585zFMt8",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+CBlock CreateTestBlock(\n+    std::shared_ptr<TestChain100Setup> test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CScript>& scriptpubkeys,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will pay to the same outputs that will be spent in the next one\n+    outputs.reserve(scriptpubkeys.size());\n+    for (const auto& spk : scriptpubkeys) {\n+        outputs.emplace_back(COIN, spk);\n+    }\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup->coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup->m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup->CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup->CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup->CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup->CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+std::pair<std::vector<CKey>, std::vector<CScript>> CreateKeysAndScripts(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CScript> spks;\n+    spks.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        spks.emplace_back(GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        spks.emplace_back(GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, spks};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CScript>& spks, std::shared_ptr<TestChain100Setup> test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, spks)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew, false));",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "d54722be41246e89508f451bf6f9e27e7bb8d5f9",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`fJustCheck` is already false by default, so I think this would be better as:\r\n\r\n```suggestion\r\n        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew));\r\n```",
      "created_at": "2025-01-27T15:43:26Z",
      "updated_at": "2025-01-27T15:46:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1930742652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1930742652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1930745356",
      "pull_request_review_id": 2575773186,
      "id": 1930745356,
      "node_id": "PRRC_kwDOABII585zFNYM",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+CBlock CreateTestBlock(\n+    std::shared_ptr<TestChain100Setup> test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CScript>& scriptpubkeys,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will pay to the same outputs that will be spent in the next one\n+    outputs.reserve(scriptpubkeys.size());\n+    for (const auto& spk : scriptpubkeys) {\n+        outputs.emplace_back(COIN, spk);\n+    }",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "d54722be41246e89508f451bf6f9e27e7bb8d5f9",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems this was moved in here to deduplicate the code (which is great!), but I found this part to be a bit confusing. We only use this `scriptpubkeys` argument to create an outputs array, so why not create the `CTxOut` vector directly when we are creating the `scriptpubkeys` vector and then pass the `CTxOut` vector in as an argument? I also think a comment explicitly mentioning we are creating an same number input, same number output transaction would be worth adding.",
      "created_at": "2025-01-27T15:45:00Z",
      "updated_at": "2025-01-27T15:46:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1930745356",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1930745356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1934978868",
      "pull_request_review_id": 2582875253,
      "id": 1934978868,
      "node_id": "PRRC_kwDOABII585zVW80",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+CBlock CreateTestBlock(\n+    std::shared_ptr<TestChain100Setup> test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CScript>& scriptpubkeys,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup->m_node.chainman->ActiveChainstate()};\n+\n+    std::vector<CTxOut> outputs;\n+    // Each transaction will pay to the same outputs that will be spent in the next one\n+    outputs.reserve(scriptpubkeys.size());\n+    for (const auto& spk : scriptpubkeys) {\n+        outputs.emplace_back(COIN, spk);\n+    }",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "d54722be41246e89508f451bf6f9e27e7bb8d5f9",
      "in_reply_to_id": 1930745356,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> so why not create the `CTxOut` vector directly when we are creating the `scriptpubkeys` vector and then pass the `CTxOut` vector in as an argument?\r\n\r\nI updated the PR to do that.\r\n\r\n> I also think a comment explicitly mentioning we are creating an same number input, same number output transaction would be worth adding.\r\n\r\nI also added a comment stating this",
      "created_at": "2025-01-30T04:09:54Z",
      "updated_at": "2025-01-30T04:09:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1934978868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1934978868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949386041",
      "pull_request_review_id": 2606336089,
      "id": 1949386041,
      "node_id": "PRRC_kwDOABII5850MUU5",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `int` seems more appropriate here and I find `num_ecdsa` and `num_schnorr` to be more intuitive than `taproot` and `nontaproot`\r\n\r\n```suggestion\r\nstd::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, int num_ecdsa, int num_schnorr)\r\n```",
      "created_at": "2025-02-10T15:54:39Z",
      "updated_at": "2025-02-10T16:07:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1949386041",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949386041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949388434",
      "pull_request_review_id": 2606336089,
      "id": 1949388434,
      "node_id": "PRRC_kwDOABII5850MU6S",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "per the style guide in `doc/developer-notes.md`, `++i` is preferred over `i++`\r\n\r\n```suggestion\r\n    for (int i{0}; i < num_schnorr; ++i) {\r\n```\r\n\r\n(same feedback for the other loops below)",
      "created_at": "2025-02-10T15:56:01Z",
      "updated_at": "2025-02-12T15:35:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1949388434",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1949388434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952062784",
      "pull_request_review_id": 2610952186,
      "id": 1952062784,
      "node_id": "PRRC_kwDOABII5850Wh1A",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);",
      "path": "src/bench/connectblock.cpp",
      "position": 45,
      "original_position": 45,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "not blocking, just a question: here and below, why `reserve()` for vectors that are outside of a critical path?",
      "created_at": "2025-02-12T06:37:36Z",
      "updated_at": "2025-02-12T06:38:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952062784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952062784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952506706",
      "pull_request_review_id": 2611683903,
      "id": 1952506706,
      "node_id": "PRRC_kwDOABII5850YONS",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);",
      "path": "src/bench/connectblock.cpp",
      "position": 45,
      "original_position": 45,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952062784,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand that the use of `reserve` here is not critical, but, I generally use `reserve()` whenever I know the size of the vector beforehand in line with best practices",
      "created_at": "2025-02-12T11:54:14Z",
      "updated_at": "2025-02-12T11:54:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952506706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952506706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952673009",
      "pull_request_review_id": 2611963539,
      "id": 1952673009,
      "node_id": "PRRC_kwDOABII5850Y2zx",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);",
      "path": "src/bench/connectblock.cpp",
      "position": 45,
      "original_position": 45,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952062784,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's good general practice and it documents the code as well, e.g:\r\n```C++\r\n    std::vector<CTxOut> outputs;\r\n    outputs.reserve(num_taproot + num_nontaproot);\r\n````",
      "created_at": "2025-02-12T13:43:12Z",
      "updated_at": "2025-02-12T14:08:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952673009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952673009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952684824",
      "pull_request_review_id": 2611983178,
      "id": 1952684824,
      "node_id": "PRRC_kwDOABII5850Y5sY",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // Doing this in a separate block excludes the validation of its inputs from the benchmark\r\n```\r\n\r\n----\r\n\r\n\r\nBut more importantly, why are we doing this in the first place? Why do we want to exclude the validation of the inputs? Is that an important usecase?",
      "created_at": "2025-02-12T13:50:32Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952684824",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952684824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952694171",
      "pull_request_review_id": 2611983178,
      "id": 1952694171,
      "node_id": "PRRC_kwDOABII5850Y7-b",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew));\n+    });\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/4, /*num_nontaproot=*/0)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+/**\n+ * This benchmark is expected to be slower than the AllSchnorr or NoSchnorr benchmark\n+ * because it uses transactions with both Schnorr and ECDSA signatures\n+ * which requires the transaction to be hashed multiple times for\n+ * the different signature allgorithms",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * the different signature algorithms\r\n```",
      "created_at": "2025-02-12T13:56:16Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952694171",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952694171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952719974",
      "pull_request_review_id": 2611983178,
      "id": 1952719974,
      "node_id": "PRRC_kwDOABII5850ZCRm",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: we don't necessarily need the `std::vector` constructs here, we could reduce the nose slightly (please see other uses of it here):\r\n```suggestion\r\n    const auto [first_tx, _]{test_setup.CreateValidTransaction(\r\n        {coinbase_to_spend},\r\n        {COutPoint(coinbase_to_spend->GetHash(), 0)},\r\n        chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\r\n    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\r\n    test_setup.CreateAndProcessBlock({first_tx}, test_block_parent_coinbase, &chainstate);\r\n```",
      "created_at": "2025-02-12T14:08:48Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952719974",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952719974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 37,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952724459",
      "pull_request_review_id": 2611983178,
      "id": 1952724459,
      "node_id": "PRRC_kwDOABII5850ZDXr",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1949386041,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree with the rename (including benchmark names), but have a slight preference for natural numbers instead, since it's a counter (we can't have -1 transctions, a \"size_t\" documents that better)",
      "created_at": "2025-02-12T14:10:49Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952724459",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952724459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952729267",
      "pull_request_review_id": 2611983178,
      "id": 1952729267,
      "node_id": "PRRC_kwDOABII5850ZEiz",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It looks to me like we could do this more consistently:\r\n```suggestion\r\n    auto& chainman{test_setup.m_node.chainman};\r\n    auto& chainstate{chainman->ActiveChainstate()};\r\n    {\r\n        LOCK(::cs_main);\r\n        auto* pindex{chainman->m_blockman.AddToBlockIndex(test_block, chainman->m_best_header)};\r\n        chainman->ActiveChain().SetTip(*pindex);\r\n    }\r\n    ...\r\n        assert(chainstate.ConnectBlock(test_block, test_block_state, chainman->ActiveChain().Tip(), viewNew));\r\n```\r\nbut even if this isn't the same, we should be able to get rid of the unique conversion back and forth:\r\n```C++\r\nuint256 blockhash{test_block.GetHash()};\r\npindex.phashBlock = &blockhash;\r\n```",
      "created_at": "2025-02-12T14:12:57Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952729267",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952729267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 98,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952761514",
      "pull_request_review_id": 2611983178,
      "id": 1952761514,
      "node_id": "PRRC_kwDOABII5850ZMaq",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't like this separation of first and rest - it introduces state in this loop that's really hard to follow.\r\n\r\nI don't yet understand this part (we do we need a separate `CreateValidTransaction` call for the first tx here, I don't get why that's special - since it's not a coinbase, right?), but if we have to keep it, consider simplifying to something like this inside the loop:\r\n```C++\r\n        const auto& tx_to_spend{i == 0 ? first_tx : txs.back()};\r\n```",
      "created_at": "2025-02-12T14:26:55Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952761514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952761514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952800973",
      "pull_request_review_id": 2611983178,
      "id": 1952800973,
      "node_id": "PRRC_kwDOABII5850ZWDN",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};",
      "path": "src/bench/connectblock.cpp",
      "position": 101,
      "original_position": 110,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've checked the price of calling this in every iteration:\r\n 1,000,387.85 blocks / s without `ConnectBlock` (measuring `CCoinsViewCache` creation only) versus 28.06 blocks / s for both - so 👍 we're mostly measuring `ConnectBlock` speed here.",
      "created_at": "2025-02-12T14:47:17Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952800973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952800973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952803612",
      "pull_request_review_id": 2611983178,
      "id": 1952803612,
      "node_id": "PRRC_kwDOABII5850ZWsc",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we can avoid copying this:\r\n```suggestion\r\n    const auto& coinbase_to_spend{test_setup.m_coinbase_txns[0]};\r\n```",
      "created_at": "2025-02-12T14:48:44Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952803612",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952803612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952819528",
      "pull_request_review_id": 2611983178,
      "id": 1952819528,
      "node_id": "PRRC_kwDOABII5850ZalI",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,",
      "path": "src/bench/connectblock.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could use `std::span` here\r\n```suggestion\r\n    std::span<CKey> keys,\r\n    std::span<CTxOut> outputs,\r\n```\r\nbut unfortunately that would require modernizing `CreateValidTransaction` as well - mayne in a follow-up PR :)",
      "created_at": "2025-02-12T14:56:42Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952819528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952819528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": 26,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952832834",
      "pull_request_review_id": 2611983178,
      "id": 1952832834,
      "node_id": "PRRC_kwDOABII5850Zd1C",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "isn't `test_block_parent_coinbase` the same as `coinbase_spk`? Can we reuse it?\r\n```C++\r\n    const CScript coinbase_script{GetScriptForDestination(coinbase_taproot)};\r\n```",
      "created_at": "2025-02-12T15:03:11Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952832834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952832834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952842153",
      "pull_request_review_id": 2611983178,
      "id": 1952842153,
      "node_id": "PRRC_kwDOABII5850ZgGp",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "to avoid possible copying we could take advantage of `emplace_back` constructing the key in-place:\r\n```suggestion\r\n        keys.emplace_back(GenerateRandomKey());\r\n        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{keys.back().GetPubKey()}));\r\n```",
      "created_at": "2025-02-12T15:06:22Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952842153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952842153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 81,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952856050",
      "pull_request_review_id": 2611983178,
      "id": 1952856050,
      "node_id": "PRRC_kwDOABII5850Zjfy",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew));\n+    });\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/4, /*num_nontaproot=*/0)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+/**\n+ * This benchmark is expected to be slower than the AllSchnorr or NoSchnorr benchmark\n+ * because it uses transactions with both Schnorr and ECDSA signatures\n+ * which requires the transaction to be hashed multiple times for\n+ * the different signature allgorithms\n+ */\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    // Blocks in range 848000 to 868000 have a roughly 20 to 80 ratio of schnorr to ecdsa inputs\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/1, /*num_nontaproot=*/4)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+static void ConnectBlockNoSchnorr(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/0, /*num_nontaproot=*/4)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+BENCHMARK(ConnectBlockAllSchnorr, benchmark::PriorityLevel::HIGH);\n+BENCHMARK(ConnectBlockMixed, benchmark::PriorityLevel::HIGH);\n+BENCHMARK(ConnectBlockNoSchnorr, benchmark::PriorityLevel::HIGH);",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "for consistency:\r\n```suggestion\r\nBENCHMARK(ConnectBlockAllEcdsa, benchmark::PriorityLevel::HIGH);\r\n```",
      "created_at": "2025-02-12T15:13:32Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952856050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952856050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952857029",
      "pull_request_review_id": 2611983178,
      "id": 1952857029,
      "node_id": "PRRC_kwDOABII5850ZjvF",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew));\n+    });\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/4, /*num_nontaproot=*/0)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+/**\n+ * This benchmark is expected to be slower than the AllSchnorr or NoSchnorr benchmark\n+ * because it uses transactions with both Schnorr and ECDSA signatures\n+ * which requires the transaction to be hashed multiple times for\n+ * the different signature allgorithms\n+ */\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    // Blocks in range 848000 to 868000 have a roughly 20 to 80 ratio of schnorr to ecdsa inputs\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/1, /*num_nontaproot=*/4)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+static void ConnectBlockNoSchnorr(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/0, /*num_nontaproot=*/4)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+BENCHMARK(ConnectBlockAllSchnorr, benchmark::PriorityLevel::HIGH);\n+BENCHMARK(ConnectBlockMixed, benchmark::PriorityLevel::HIGH);",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These names are global, it may not be obvious what \"ConnectBlockMixed\" means outside of this context:\r\n```suggestion\r\nBENCHMARK(ConnectBlockMixedEcdsaSchnorr, benchmark::PriorityLevel::HIGH);\r\n```",
      "created_at": "2025-02-12T15:14:09Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952857029",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952857029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952882243",
      "pull_request_review_id": 2611983178,
      "id": 1952882243,
      "node_id": "PRRC_kwDOABII5850Zp5D",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew));\n+    });\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)",
      "path": "src/bench/connectblock.cpp",
      "position": 107,
      "original_position": 115,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is what the flames look like - I haven't worked in this area yet, do you think it's representative?\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/d55f64e2-749f-4b7c-b0fb-4e876f2e35af\" />\r\n\r\nand\r\n\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/d0770f14-d29b-480e-ab78-8f37ab223ff1\" />\r\n",
      "created_at": "2025-02-12T15:27:22Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952882243",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952882243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952884270",
      "pull_request_review_id": 2611983178,
      "id": 1952884270,
      "node_id": "PRRC_kwDOABII5850ZqYu",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew));\n+    });\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/4, /*num_nontaproot=*/0)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+/**\n+ * This benchmark is expected to be slower than the AllSchnorr or NoSchnorr benchmark\n+ * because it uses transactions with both Schnorr and ECDSA signatures\n+ * which requires the transaction to be hashed multiple times for\n+ * the different signature allgorithms\n+ */\n+static void ConnectBlockMixed(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    // Blocks in range 848000 to 868000 have a roughly 20 to 80 ratio of schnorr to ecdsa inputs\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/1, /*num_nontaproot=*/4)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+static void ConnectBlockNoSchnorr(benchmark::Bench& bench)",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "And these are the ECDSA ones:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/46c7b271-1e31-4cad-ba3d-b674acc019bb\" />\r\n\r\nand\r\n\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/eb56e7fe-c76d-477f-830e-a4a679001782\" />\r\n",
      "created_at": "2025-02-12T15:28:28Z",
      "updated_at": "2025-02-12T15:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952884270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952884270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953657923",
      "pull_request_review_id": 2613634675,
      "id": 1953657923,
      "node_id": "PRRC_kwDOABII5850cnRD",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952684824,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As-is this gives callers that use this helper more control over the blocks that they're testing.\r\n\r\nExcluding the necessary transaction that spends a coinbase input and creates the first set of `outputs` of the size and arrangement that the caller has designed makes these benchmarks more 'ideal' since it avoids testing validation of an input whose spending conditions the caller doesn't have any control over, since `TestChain100Setup` gets to decide the coinbase outputs that the first transaction will have to spend.\r\n",
      "created_at": "2025-02-13T01:58:20Z",
      "updated_at": "2025-02-13T05:08:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1953657923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953657923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953663478",
      "pull_request_review_id": 2613643442,
      "id": 1953663478,
      "node_id": "PRRC_kwDOABII5850con2",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952761514,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The reason to separate the first tx is because it goes into a block of its own.  https://github.com/bitcoin/bitcoin/pull/31689/files#r1953657923",
      "created_at": "2025-02-13T02:02:51Z",
      "updated_at": "2025-02-13T02:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1953663478",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953663478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954234113",
      "pull_request_review_id": 2614543976,
      "id": 1954234113,
      "node_id": "PRRC_kwDOABII5850ez8B",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1949386041,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I renamed `num_taproot` and `num_nontaproot` to `num_schnorr` and `num_ecdsa` respectively in https://github.com/bitcoin/bitcoin/pull/31689/commits/4b37efee90ee339b7bde7777b24a5268501cee9d but left type as `size_t`",
      "created_at": "2025-02-13T10:25:39Z",
      "updated_at": "2025-02-13T10:27:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954234113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954234113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954234524",
      "pull_request_review_id": 2614544737,
      "id": 1954234524,
      "node_id": "PRRC_kwDOABII5850e0Cc",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1949388434,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/pull/31689/commits/4b37efee90ee339b7bde7777b24a5268501cee9d",
      "created_at": "2025-02-13T10:25:52Z",
      "updated_at": "2025-02-13T10:25:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954234524",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954234524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954237730",
      "pull_request_review_id": 2614550584,
      "id": 1954237730,
      "node_id": "PRRC_kwDOABII5850e00i",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();\n+\n+    BlockValidationState test_block_state;\n+    bench.unit(\"block\").run([&] {\n+        LOCK(cs_main);\n+        CCoinsViewCache viewNew{&chainstate.CoinsTip()};\n+        assert(chainstate.ConnectBlock(test_block, test_block_state, pindex.get(), viewNew));\n+    });\n+}\n+\n+static void ConnectBlockAllSchnorr(benchmark::Bench& bench)\n+{\n+    const std::unique_ptr test_setup{MakeNoLogFileContext<TestChain100Setup>()};\n+    auto [keys, outputs]{CreateKeysAndOutputs(test_setup->coinbaseKey, /*num_taproot=*/4, /*num_nontaproot=*/0)};\n+    BenchmarkConnectBlock(bench, keys, outputs, *test_setup);\n+}\n+\n+/**\n+ * This benchmark is expected to be slower than the AllSchnorr or NoSchnorr benchmark\n+ * because it uses transactions with both Schnorr and ECDSA signatures\n+ * which requires the transaction to be hashed multiple times for\n+ * the different signature allgorithms",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952694171,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/pull/31689/commits/4b37efee90ee339b7bde7777b24a5268501cee9d",
      "created_at": "2025-02-13T10:27:37Z",
      "updated_at": "2025-02-13T10:27:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954237730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954237730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954238194",
      "pull_request_review_id": 2614551330,
      "id": 1954238194,
      "node_id": "PRRC_kwDOABII5850e07y",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952719974,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/pull/31689/commits/4b37efee90ee339b7bde7777b24a5268501cee9d",
      "created_at": "2025-02-13T10:27:56Z",
      "updated_at": "2025-02-13T10:27:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954238194",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954238194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 37,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954239176",
      "pull_request_review_id": 2614552859,
      "id": 1954239176,
      "node_id": "PRRC_kwDOABII5850e1LI",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952729267,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Adjusted the code to look more like this in https://github.com/bitcoin/bitcoin/pull/31689/commits/4b37efee90ee339b7bde7777b24a5268501cee9d",
      "created_at": "2025-02-13T10:28:34Z",
      "updated_at": "2025-02-13T10:28:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954239176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954239176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 98,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954403094",
      "pull_request_review_id": 2614826178,
      "id": 1954403094,
      "node_id": "PRRC_kwDOABII5850fdMW",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952684824,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not expert in this area to decide if this is to sterile or not (i.e. testing a too narrow slice that isn't representative, where the biggest speedup doesn't cause any measurable macro change), will let others decide if this is too `micro` or not.",
      "created_at": "2025-02-13T12:24:14Z",
      "updated_at": "2025-02-13T12:24:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954403094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954403094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954418526",
      "pull_request_review_id": 2614851696,
      "id": 1954418526,
      "node_id": "PRRC_kwDOABII5850fg9e",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate blocks excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, std::nullopt, std::nullopt)};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Taproot outputs: Creates simple key path spendable outputs\n+ * - For non-Taproot outputs: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_taproot, size_t num_nontaproot)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_taproot + num_nontaproot + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_taproot + num_nontaproot);\n+\n+    for (size_t i{0}; i < num_nontaproot; i++) {\n+        const CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{key.GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_taproot; i++) {\n+        CKey key{GenerateRandomKey()};\n+        keys.emplace_back(key);\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto pindex{std::make_unique<CBlockIndex>(test_block)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    pindex->nHeight = chainstate.m_chain.Height() + 1;\n+    pindex->phashBlock = test_blockhash.get();\n+    pindex->pprev = chainstate.m_chain.Tip();",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "1c6b886465df0f00549e7d10c3bfefd27be7f1c2",
      "in_reply_to_id": 1952729267,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is the` AddToBlockIndex` [cheap enough](https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1952800973) to be done inside the benchmark",
      "created_at": "2025-02-13T12:35:25Z",
      "updated_at": "2025-02-13T12:35:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954418526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954418526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": 98,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954428945",
      "pull_request_review_id": 2614869602,
      "id": 1954428945,
      "node_id": "PRRC_kwDOABII5850fjgR",
      "diff_hunk": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate block excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Schnorr signatures: Creates simple key path spendable outputs\n+ * - For Ecdsa signatures: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_schnorr, size_t num_ecdsa)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_schnorr + num_ecdsa + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_schnorr + num_ecdsa);\n+\n+    for (size_t i{0}; i < num_ecdsa; ++i) {\n+        keys.emplace_back(GenerateRandomKey());\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{keys.back().GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_schnorr; ++i) {\n+        keys.emplace_back(GenerateRandomKey());\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(keys.back().GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "bd27a83efcc3d678f33041ee34eeb019777a2405",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems unused now",
      "created_at": "2025-02-13T12:43:12Z",
      "updated_at": "2025-02-13T12:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954428945",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954428945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954435541",
      "pull_request_review_id": 2614869602,
      "id": 1954435541,
      "node_id": "PRRC_kwDOABII5850flHV",
      "diff_hunk": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate block excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Schnorr signatures: Creates simple key path spendable outputs\n+ * - For Ecdsa signatures: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_schnorr, size_t num_ecdsa)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_schnorr + num_ecdsa + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_schnorr + num_ecdsa);\n+\n+    for (size_t i{0}; i < num_ecdsa; ++i) {\n+        keys.emplace_back(GenerateRandomKey());\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{keys.back().GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_schnorr; ++i) {\n+        keys.emplace_back(GenerateRandomKey());\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(keys.back().GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};\n+    auto test_blockhash{std::make_unique<uint256>(test_block.GetHash())};\n+    auto& chainman{test_setup.m_node.chainman};\n+    auto& chainstate{chainman->ActiveChainstate()};\n+\n+    BlockValidationState test_block_state;",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "bd27a83efcc3d678f33041ee34eeb019777a2405",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can be moved inside the benchmark to make sure previous run doesn't pollute the next one (the lambda is unrolled and run multiple times, so we should reduce dependencies)",
      "created_at": "2025-02-13T12:48:04Z",
      "updated_at": "2025-02-13T12:56:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954435541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954435541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954436295",
      "pull_request_review_id": 2614869602,
      "id": 1954436295,
      "node_id": "PRRC_kwDOABII5850flTH",
      "diff_hunk": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate block excludes the validation of it's inputs from the benchmark",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "bd27a83efcc3d678f33041ee34eeb019777a2405",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // Doing this in a separate block excludes the validation of its inputs from the benchmark\r\n```",
      "created_at": "2025-02-13T12:48:33Z",
      "updated_at": "2025-02-13T12:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954436295",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954436295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954439106",
      "pull_request_review_id": 2614869602,
      "id": 1954439106,
      "node_id": "PRRC_kwDOABII5850fl_C",
      "diff_hunk": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <bench/bench.h>\n+#include <interfaces/chain.h>\n+#include <kernel/cs_main.h>\n+#include <script/interpreter.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <cassert>\n+#include <vector>\n+\n+/*\n+ * Creates a test block containing transactions with the following properties:\n+ * - Each transaction has the same number of inputs and outputs\n+ * - All Taproot inputs use simple key path spends (no script path spends)\n+ * - All signatures use SIGHASH_ALL (default sighash)\n+ * - Each transaction spends all outputs from the previous transaction\n+ */\n+CBlock CreateTestBlock(\n+    TestChain100Setup& test_setup,\n+    const std::vector<CKey>& keys,\n+    const std::vector<CTxOut>& outputs,\n+    int num_txs = 1000)\n+{\n+    Chainstate& chainstate{test_setup.m_node.chainman->ActiveChainstate()};\n+\n+    const WitnessV1Taproot coinbase_taproot{XOnlyPubKey(test_setup.coinbaseKey.GetPubKey())};\n+\n+    // Create the outputs that will be spent in the first transaction of the test block\n+    // Doing this in a separate block excludes the validation of it's inputs from the benchmark\n+    auto coinbase_to_spend{test_setup.m_coinbase_txns[0]};\n+    const auto [first_tx, _]{test_setup.CreateValidTransaction(\n+        std::vector{coinbase_to_spend},\n+        std::vector{COutPoint(coinbase_to_spend->GetHash(), 0)},\n+        chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\n+    const auto test_block_parent_coinbase{GetScriptForDestination(coinbase_taproot)};\n+    test_setup.CreateAndProcessBlock(std::vector{first_tx}, test_block_parent_coinbase, &chainstate);\n+\n+    std::vector<CMutableTransaction> txs;\n+    txs.reserve(num_txs);\n+    CTransactionRef input_tx{MakeTransactionRef(first_tx)};\n+    for (int i{0}; i < num_txs; i++) {\n+        std::vector<COutPoint> inputs;\n+        inputs.reserve(outputs.size());\n+\n+        for (size_t j{0}; j < outputs.size(); j++) {\n+            inputs.emplace_back(input_tx->GetHash(), j);\n+        }\n+\n+        const auto [taproot_tx, _]{test_setup.CreateValidTransaction(\n+            std::vector{input_tx}, inputs, chainstate.m_chain.Height() + 1, keys, outputs, {}, {})};\n+        txs.emplace_back(taproot_tx);\n+        input_tx = MakeTransactionRef(taproot_tx);\n+    }\n+\n+    // Coinbase output can use any output type as it is not spent and will not change the benchmark\n+    const CScript coinbase_spk{GetScriptForDestination(coinbase_taproot)};\n+    return test_setup.CreateBlock(txs, coinbase_spk, chainstate);\n+}\n+\n+/*\n+ * Creates key pairs and corresponding outputs for the benchmark transactions.\n+ * - For Schnorr signatures: Creates simple key path spendable outputs\n+ * - For Ecdsa signatures: Creates P2WPKH (native SegWit v0) outputs\n+ * - All outputs have value of 1 BTC\n+ */\n+std::pair<std::vector<CKey>, std::vector<CTxOut>> CreateKeysAndOutputs(const CKey& coinbaseKey, size_t num_schnorr, size_t num_ecdsa)\n+{\n+    std::vector<CKey> keys{coinbaseKey};\n+    keys.reserve(num_schnorr + num_ecdsa + 1);\n+\n+    std::vector<CTxOut> outputs;\n+    outputs.reserve(num_schnorr + num_ecdsa);\n+\n+    for (size_t i{0}; i < num_ecdsa; ++i) {\n+        keys.emplace_back(GenerateRandomKey());\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV0KeyHash{keys.back().GetPubKey()}));\n+    }\n+\n+    for (size_t i{0}; i < num_schnorr; ++i) {\n+        keys.emplace_back(GenerateRandomKey());\n+        outputs.emplace_back(COIN, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(keys.back().GetPubKey())}));\n+    }\n+\n+    return {keys, outputs};\n+}\n+\n+void BenchmarkConnectBlock(benchmark::Bench& bench, std::vector<CKey>& keys, std::vector<CTxOut>& outputs, TestChain100Setup& test_setup)\n+{\n+    const auto test_block{CreateTestBlock(test_setup, keys, outputs)};",
      "path": "src/bench/connectblock.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "7edaf8b64cb2d59ada22042fee62a417e52368b8",
      "original_commit_id": "bd27a83efcc3d678f33041ee34eeb019777a2405",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We could avoid copying here as well:\r\n```suggestion\r\n    const auto& test_block{CreateTestBlock(test_setup, keys, outputs)};\r\n```",
      "created_at": "2025-02-13T12:50:30Z",
      "updated_at": "2025-02-13T12:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31689#discussion_r1954439106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954439106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31689"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    }
  ]
}