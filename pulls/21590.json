{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590",
    "id": 608484839,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjA4NDg0ODM5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21590",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/21590.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/21590.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f5883286e32b625aab3dd80c74d6adb4f37f0a80",
    "number": 21590,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Safegcd-based modular inverses in MuHash3072",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This implements a safegcd-based modular inverse for MuHash3072. It is a fairly straightforward translation of [the libsecp256k1 implementation](https://github.com/bitcoin-core/secp256k1/pull/831), with the following changes:\r\n* Generic for 32-bit and 64-bit\r\n* Specialized for the specific MuHash3072 modulus (2^3072 - 1103717).\r\n* A bit more C++ish\r\n* Far fewer sanity checks\r\n\r\nA benchmark is also included for MuHash3072::Finalize. The new implementation is around 100x faster on x86_64 for me (from 5.8 ms to 57 Î¼s); for 32-bit code the factor is likely even larger.\r\n\r\nFor more information:\r\n  * [Original paper](https://gcd.cr.yp.to/papers.html) by Daniel J. Bernstein and Bo-Yin Yang\r\n  * [Implementation](https://github.com/bitcoin-core/secp256k1/pull/767) for libsecp256k1 by Peter Dettman; and the [final](https://github.com/bitcoin-core/secp256k1/pull/831) version\r\n  * [Explanation](https://github.com/bitcoin-core/secp256k1/blob/master/doc/safegcd_implementation.md) of the algorithm using Python snippets\r\n  * [Analysis](https://github.com/sipa/safegcd-bounds) of the maximum number of iterations the algorithm needs\r\n   * [Formal proof in Coq](https://medium.com/blockstream/a-formal-proof-of-safegcd-bounds-695e1735a348) by Russell O'Connor (for the 256-bit version of the algorithm; here we use a 3072-bit one).\r\n",
    "labels": [
      {
        "id": 61889416,
        "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
        "name": "Build system",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2021-04-04T04:26:05Z",
    "updated_at": "2025-01-10T19:13:59Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "580792cfb96076c01563a67467464fac2a0b9708",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sipa:202101_muhash_safegcd",
      "ref": "202101_muhash_safegcd",
      "sha": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 21,
        "stargazers_count": 91,
        "watchers_count": 91,
        "size": 253576,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-10T03:34:06Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2025-01-09T14:12:33Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "66aa6a47bd8efd7e0448319c74be3ee62caa777a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36513,
        "stargazers_count": 81292,
        "watchers_count": 81292,
        "size": 274035,
        "default_branch": "master",
        "open_issues_count": 685,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-10T15:30:04Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-01-10T18:00:15Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 513,
    "deletions": 92,
    "changed_files": 6,
    "commits": 3,
    "review_comments": 29,
    "comments": 23
  },
  "events": [
    {
      "event": "labeled",
      "id": 4548765465,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ1NDg3NjU0NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4548765465",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-04T05:39:49Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4548765466,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ1NDg3NjU0NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4548765466",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-04T05:39:49Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 814491750,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDQ5MTc1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814491750",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-06T23:11:27Z",
      "updated_at": "2021-04-06T23:11:46Z",
      "author_association": "MEMBER",
      "body": "Using libgmp for inverses is 1.5x-2x faster still, which is somewhat expected - there are several optimizations to safegcd that become more relevant for larger input sizes but aren't useful in the 256-bit code which this is adapted from as well.\r\n\r\nI think it's fine to leave those for future improvements, as this already gets hash finalization down to ~1 signature check worth, which is probably far below what we care about.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-814491750",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "commented",
      "id": 844135702,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0NDEzNTcwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844135702",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-19T14:01:47Z",
      "updated_at": "2021-05-19T14:01:47Z",
      "author_association": "MEMBER",
      "body": "Concept and high-level review ACK. Did not check the algorithm in detail.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-844135702",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "commented",
      "id": 866249441,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2NjI0OTQ0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/866249441",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-22T18:56:40Z",
      "updated_at": "2021-06-22T18:56:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-866249441",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "commented",
      "id": 944129846,
      "node_id": "IC_kwDOABII5844Rkc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/944129846",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-15T09:07:10Z",
      "updated_at": "2025-01-10T19:13:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/21590.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2540842762), [dergoegge](https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2543431435) |\n| Concept ACK | [laanwj](https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-844135702) |\n| Stale ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2443257294) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31507](https://github.com/bitcoin/bitcoin/pull/31507) ([POC] build: Use clang-cl to build on Windows natively by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-944129846",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "labeled",
      "id": 5612516917,
      "node_id": "LE_lADOABII584yptetzwAAAAFOiDY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5612516917",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-13T00:42:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5619332110,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAFO8DQO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5619332110",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f1f4eae6190619ff4c8816ffe6b21d8a079e7cef",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/f1f4eae6190619ff4c8816ffe6b21d8a079e7cef",
      "created_at": "2021-11-15T16:09:44Z"
    },
    {
      "event": "commented",
      "id": 969078432,
      "node_id": "IC_kwDOABII5845wvag",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/969078432",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-15T16:22:45Z",
      "updated_at": "2021-11-15T16:22:45Z",
      "author_association": "MEMBER",
      "body": "Rebased.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-969078432",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "unlabeled",
      "id": 5619808754,
      "node_id": "UNLE_lADOABII584yptetzwAAAAFO93ny",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5619808754",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-15T17:26:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 806652492,
      "node_id": "PRR_kwDOABII584wFIpM",
      "url": null,
      "actor": null,
      "commit_id": "f1f4eae6190619ff4c8816ffe6b21d8a079e7cef",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-806652492",
      "submitted_at": "2021-11-15T23:44:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5700753754,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAFTypla",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5700753754",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0bf165c300aef6eebf7194795e79c2a5c5c5e93a",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/0bf165c300aef6eebf7194795e79c2a5c5c5e93a",
      "created_at": "2021-12-01T17:44:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5701835000,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAFT2xj4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5701835000",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "58b108ebcd9e335c5cc6ad68950778e42c564e22",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/58b108ebcd9e335c5cc6ad68950778e42c564e22",
      "created_at": "2021-12-01T21:13:07Z"
    },
    {
      "event": "commented",
      "id": 984062416,
      "node_id": "IC_kwDOABII5846p5nQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/984062416",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T21:17:11Z",
      "updated_at": "2021-12-01T21:17:11Z",
      "author_association": "MEMBER",
      "body": "I added additional fuzz tests, which seem to pass.\r\n\r\nHowever, `test/functional/feature_coinstatsindex.py` now fails, and I haven't figured out why. @fjahr ?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-984062416",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "mentioned",
      "id": 5701853446,
      "node_id": "MEE_lADOABII584yptetzwAAAAFT22EG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5701853446",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T21:17:11Z"
    },
    {
      "event": "subscribed",
      "id": 5701853452,
      "node_id": "SE_lADOABII584yptetzwAAAAFT22EM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5701853452",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T21:17:11Z"
    },
    {
      "event": "reviewed",
      "id": 821629244,
      "node_id": "PRR_kwDOABII584w-RE8",
      "url": null,
      "actor": null,
      "commit_id": "58b108ebcd9e335c5cc6ad68950778e42c564e22",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-821629244",
      "submitted_at": "2021-12-02T15:16:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5707124487,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAFUK88H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5707124487",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3821b14c8ebce76b19a95d395f2f8e647a1663de",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/3821b14c8ebce76b19a95d395f2f8e647a1663de",
      "created_at": "2021-12-02T16:38:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5707185867,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAFULL7L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5707185867",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "created_at": "2021-12-02T16:48:45Z"
    },
    {
      "event": "referenced",
      "id": 5710919943,
      "node_id": "REFE_lADOABII584yptetzwAAAAFUZbkH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5710919943",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fd1c9e26d30c0e7a891f63955fd42f61b4216cc0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd1c9e26d30c0e7a891f63955fd42f61b4216cc0",
      "created_at": "2021-12-03T09:28:28Z"
    },
    {
      "event": "referenced",
      "id": 5713039930,
      "node_id": "REFE_lADOABII584yptetzwAAAAFUhhI6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5713039930",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "25e1d70230b8418b7a42dfbc82ddc7c2c815a474",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/25e1d70230b8418b7a42dfbc82ddc7c2c815a474",
      "created_at": "2021-12-03T16:06:42Z"
    },
    {
      "event": "commented",
      "id": 986308702,
      "node_id": "IC_kwDOABII5846yeBe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/986308702",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-05T22:05:08Z",
      "updated_at": "2021-12-05T22:05:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I added additional fuzz tests, which seem to pass.\r\n> \r\n> However, `test/functional/feature_coinstatsindex.py` now fails, and I haven't figured out why. @fjahr ?\r\n\r\nThis isn't an issue with the implementation here but with ~~me~~ the test just being stupid. More info here #23681.\r\n\r\nI will take a closer look at the code here soon!",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-986308702",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "mentioned",
      "id": 5717282593,
      "node_id": "MEE_lADOABII584yptetzwAAAAFUxs8h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5717282593",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-05T22:05:09Z"
    },
    {
      "event": "subscribed",
      "id": 5717282608,
      "node_id": "SE_lADOABII584yptetzwAAAAFUxs8w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5717282608",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-05T22:05:09Z"
    },
    {
      "event": "referenced",
      "id": 5719048822,
      "node_id": "REFE_lADOABII584yptetzwAAAAFU4cJ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5719048822",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "42b35f17d5473cdcfbdac5fc8d7d4867ac3d41f4",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42b35f17d5473cdcfbdac5fc8d7d4867ac3d41f4",
      "created_at": "2021-12-06T09:00:04Z"
    },
    {
      "event": "referenced",
      "id": 5719718614,
      "node_id": "REFE_lADOABII584yptetzwAAAAFU6_rW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5719718614",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "177261cf2d3f7e30284d8304d5dd80eaf8e8b6a7",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/177261cf2d3f7e30284d8304d5dd80eaf8e8b6a7",
      "created_at": "2021-12-06T10:50:46Z"
    },
    {
      "event": "reviewed",
      "id": 869147841,
      "node_id": "PRR_kwDOABII584zziTB",
      "url": null,
      "actor": null,
      "commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "please change all the c-style casts to functional casts, I gave specific comments on a few instances, but stopped so it's not as spammy",
      "user": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-869147841",
      "submitted_at": "2022-02-01T13:49:26Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "commented",
      "id": 1267143248,
      "node_id": "IC_kwDOABII585LhxJQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1267143248",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-04T15:00:38Z",
      "updated_at": "2022-10-04T15:00:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Another option here it to make `arith_u256` generic over the integer size, and then we can get a generic `u3072` and implement a simple egcd via extended euclidean algorithm (as this doesn't require constant timness)",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1267143248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "commented",
      "id": 1276569762,
      "node_id": "IC_kwDOABII585MFuii",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276569762",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T18:26:16Z",
      "updated_at": "2022-10-12T18:26:16Z",
      "author_association": "MEMBER",
      "body": "Are you still working on this?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1276569762",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7596428161,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAHEyEuB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7596428161",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8f0fff631259046e060643ea824a0f29896867ec",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/8f0fff631259046e060643ea824a0f29896867ec",
      "created_at": "2022-10-16T14:04:49Z"
    },
    {
      "event": "commented",
      "id": 1279976938,
      "node_id": "IC_kwDOABII585MSuXq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279976938",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-16T14:05:42Z",
      "updated_at": "2022-10-16T14:05:42Z",
      "author_association": "MEMBER",
      "body": "Rebased, and addressed comments.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1279976938",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "commented",
      "id": 1279977251,
      "node_id": "IC_kwDOABII585MSucj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279977251",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-16T14:07:19Z",
      "updated_at": "2022-10-16T14:07:19Z",
      "author_association": "MEMBER",
      "body": "@elichai That's a possibility. I expect it'd be an order of magnitude slower, but still significantly faster than what we have. The arith_uint256 code is already templated in the number of bits, so this would not be much work. Are you interested in trying that approach?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1279977251",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "mentioned",
      "id": 7596431297,
      "node_id": "MEE_lADOABII584yptetzwAAAAHEyFfB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7596431297",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-16T14:07:19Z"
    },
    {
      "event": "subscribed",
      "id": 7596431300,
      "node_id": "SE_lADOABII584yptetzwAAAAHEyFfE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7596431300",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-16T14:07:19Z"
    },
    {
      "event": "labeled",
      "id": 7633321696,
      "node_id": "LE_lADOABII584yptetzwAAAAHG-z7g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7633321696",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-20T17:10:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1396084252,
      "node_id": "IC_kwDOABII585TNo4c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1396084252",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-18T21:03:05Z",
      "updated_at": "2023-01-18T21:03:05Z",
      "author_association": "MEMBER",
      "body": "Rebased.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1396084252",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8305862421,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAHvEWcV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8305862421",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eaa9aa325e8c4ef75a12132a6b9a9aca77313e2d",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/eaa9aa325e8c4ef75a12132a6b9a9aca77313e2d",
      "created_at": "2023-01-18T21:03:16Z"
    },
    {
      "event": "unlabeled",
      "id": 8306763347,
      "node_id": "UNLE_lADOABII584yptetzwAAAAHvHyZT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8306763347",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-18T23:05:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8386570432,
      "node_id": "LE_lADOABII584yptetzwAAAAHz4OjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8386570432",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T10:31:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9093932405,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAIeCmV1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9093932405",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "15425581198636f66375934e61acd584f9cace6a",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/15425581198636f66375934e61acd584f9cace6a",
      "created_at": "2023-04-25T15:39:47Z"
    },
    {
      "event": "commented",
      "id": 1522036913,
      "node_id": "IC_kwDOABII585auHCx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1522036913",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-25T15:52:46Z",
      "updated_at": "2023-04-25T15:52:46Z",
      "author_association": "MEMBER",
      "body": "cc @real-or-random @fjahr ",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1522036913",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "mentioned",
      "id": 9094065256,
      "node_id": "MEE_lADOABII584yptetzwAAAAIeDGxo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9094065256",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-25T15:52:46Z"
    },
    {
      "event": "subscribed",
      "id": 9094065270,
      "node_id": "SE_lADOABII584yptetzwAAAAIeDGx2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9094065270",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-25T15:52:46Z"
    },
    {
      "event": "mentioned",
      "id": 9094065291,
      "node_id": "MEE_lADOABII584yptetzwAAAAIeDGyL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9094065291",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-25T15:52:46Z"
    },
    {
      "event": "subscribed",
      "id": 9094065311,
      "node_id": "SE_lADOABII584yptetzwAAAAIeDGyf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9094065311",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-25T15:52:46Z"
    },
    {
      "event": "unlabeled",
      "id": 9094756321,
      "node_id": "UNLE_lADOABII584yptetzwAAAAIeFvfh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9094756321",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-25T17:11:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9095398137,
      "node_id": "LE_lADOABII584yptetzwAAAAIeIML5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9095398137",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-25T18:33:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1523507720,
      "node_id": "IC_kwDOABII585azuII",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1523507720",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-26T14:21:37Z",
      "updated_at": "2023-04-26T14:21:59Z",
      "author_association": "MEMBER",
      "body": "On Windows CI this will eat the bench CPU without terminating?\r\n\r\nhttps://cirrus-ci.com/task/6655367648641024?logs=check#L1394",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1523507720",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "referenced",
      "id": 9603164077,
      "node_id": "REFE_lADOABII584yptetzwAAAAI8ZKet",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9603164077",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a045b9e47dc4a57fff335215eeaa99258f3d4847",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/a045b9e47dc4a57fff335215eeaa99258f3d4847",
      "created_at": "2023-06-22T07:38:54Z"
    },
    {
      "event": "referenced",
      "id": 11334373186,
      "node_id": "REFE_lADOABII584yptetzwAAAAKjlM9C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11334373186",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "25fcda0180556f8d49636fd3e9635fb13966e277",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/25fcda0180556f8d49636fd3e9635fb13966e277",
      "created_at": "2023-12-25T07:30:01Z"
    },
    {
      "event": "referenced",
      "id": 11334379731,
      "node_id": "REFE_lADOABII584yptetzwAAAAKjlOjT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11334379731",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9b388c8388e5fa5cfb59f11dc056e7a87fd4c797",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/9b388c8388e5fa5cfb59f11dc056e7a87fd4c797",
      "created_at": "2023-12-25T07:31:55Z"
    },
    {
      "event": "referenced",
      "id": 11342285819,
      "node_id": "REFE_lADOABII584yptetzwAAAAKkDYv7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11342285819",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7d601cfa85228dab7a0e31c2844839a531adf4a6",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/7d601cfa85228dab7a0e31c2844839a531adf4a6",
      "created_at": "2023-12-27T04:38:21Z"
    },
    {
      "event": "commented",
      "id": 1898731456,
      "node_id": "IC_kwDOABII585xLFfA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1898731456",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T15:43:30Z",
      "updated_at": "2024-01-18T15:43:48Z",
      "author_association": "MEMBER",
      "body": "Seems the ctz builtins here can be switched to c++20's `countr_zero` ?\r\nSee the libc++ impl [here](https://github.com/llvm/llvm-project/blob/main/libcxx/include/__bit/countr.h#L41), for an example of how it maps to builtins.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1898731456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "labeled",
      "id": 11982255733,
      "node_id": "LE_lADOABII584yptetzwAAAALKMrZ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11982255733",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-01T17:33:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2045311564,
      "node_id": "IC_kwDOABII58556PpM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2045311564",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T14:24:36Z",
      "updated_at": "2024-04-09T14:24:36Z",
      "author_association": "MEMBER",
      "body": "Are you still working on this?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-2045311564",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12408419012,
      "node_id": "HRFPE_lADOABII584yptetzwAAAALjmXLE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12408419012",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "030c9edf5b12033207da2bc0735f97840dc88056",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/030c9edf5b12033207da2bc0735f97840dc88056",
      "created_at": "2024-04-09T14:59:41Z"
    },
    {
      "event": "unlabeled",
      "id": 12409425421,
      "node_id": "UNLE_lADOABII584yptetzwAAAALjqM4N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12409425421",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T16:04:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 12411516003,
      "node_id": "UNLE_lADOABII584yptetzwAAAALjyLRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12411516003",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T18:45:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2046018528,
      "node_id": "IC_kwDOABII585588Pg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2046018528",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T20:44:30Z",
      "updated_at": "2024-04-09T20:44:30Z",
      "author_association": "MEMBER",
      "body": "Rebased, and switched to `std::countr_zero` instead of CTZ builtins.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-2046018528",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "commented",
      "id": 2047125355,
      "node_id": "IC_kwDOABII5856BKdr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2047125355",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-10T10:10:59Z",
      "updated_at": "2024-04-10T10:10:59Z",
      "author_association": "MEMBER",
      "body": "Looks like this also fixed the Windows issue (https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-1523507720), so I guess there may have been a bug in the previous implementation.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-2047125355",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "commented",
      "id": 2057150785,
      "node_id": "IC_kwDOABII5856naFB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2057150785",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T15:34:32Z",
      "updated_at": "2024-04-15T15:34:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa The description still lists \"Add more tests\" as an open todo. Did you still want to address this before this could be merged? I think we have ok-ish coverage of MuHash but if you think something should be added could you tell us what you had in mind? Are there maybe test vectors we can port over?",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-2057150785",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "mentioned",
      "id": 12472543611,
      "node_id": "MEE_lADOABII584yptetzwAAAALna-l7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12472543611",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T15:34:34Z"
    },
    {
      "event": "subscribed",
      "id": 12472543646,
      "node_id": "SE_lADOABII584yptetzwAAAALna-me",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12472543646",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T15:34:34Z"
    },
    {
      "event": "commented",
      "id": 2057153942,
      "node_id": "IC_kwDOABII5856na2W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2057153942",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T15:36:05Z",
      "updated_at": "2024-04-15T15:36:05Z",
      "author_association": "MEMBER",
      "body": "@fjahr I've dropped the TODO. Feel free to contribute tests of course if you feel that's helpful.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-2057153942",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "mentioned",
      "id": 12472568491,
      "node_id": "MEE_lADOABII584yptetzwAAAALnbEqr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12472568491",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T15:36:06Z"
    },
    {
      "event": "subscribed",
      "id": 12472568515,
      "node_id": "SE_lADOABII584yptetzwAAAALnbErD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12472568515",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T15:36:06Z"
    },
    {
      "event": "reviewed",
      "id": 2104888365,
      "node_id": "PRR_kwDOABII5859dgwt",
      "url": null,
      "actor": null,
      "commit_id": "030c9edf5b12033207da2bc0735f97840dc88056",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK 030c9edf5b12033207da2bc0735f97840dc88056\r\n\r\nI differentially fuzzed the muhash implementation we have on master against the version in this PR. Given the coverage reached and assuming that the implementation on master is correct, I am confident that the muhash implementation in this PR is also correct. I tested across multiple compilers and optimization levels i.e. the following tuples: `(master clang -O2, pr clang -O2)`, `(master clang -O2, pr gcc -O2)`, `(master clang-O2, pr gcc -O0)` (all on x86_64).\r\n\r\nGiven the amount of testing and work that has already gone into all of this, I'm not surprised that I didn't find any bugs.\r\n\r\nThe speedup for the `muhash` harness is very noticeable, ~60x faster for me.  ",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2104888365",
      "submitted_at": "2024-06-07T15:42:49Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "review_requested",
      "id": 13082759237,
      "node_id": "RRE_lADOABII584yptetzwAAAAMLyxBF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13082759237",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T15:42:53Z",
      "requested_reviewer": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13082759375,
      "node_id": "RRE_lADOABII584yptetzwAAAAMLyxDP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13082759375",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T15:42:53Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "labeled",
      "id": 13909195234,
      "node_id": "LE_lADOABII584yptetzwAAAAM9DXni",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13909195234",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T10:31:39Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "labeled",
      "id": 14051410619,
      "node_id": "LE_lADOABII584yptetzwAAAANFh4K7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14051410619",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T18:53:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14055869673,
      "node_id": "UNLE_lADOABII584yptetzwAAAANFy4zp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14055869673",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T05:18:04Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14658709636,
      "node_id": "HRFPE_lADOABII584yptetzwAAAANpuiiE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14658709636",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2cadce538e55d48a0f0b0f8b573411b938dfd888",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/2cadce538e55d48a0f0b0f8b573411b938dfd888",
      "created_at": "2024-10-15T14:26:37Z"
    },
    {
      "event": "labeled",
      "id": 14659117839,
      "node_id": "LE_lADOABII584yptetzwAAAANpwGMP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14659117839",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T14:49:44Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2414153012,
      "node_id": "IC_kwDOABII586P5Q00",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2414153012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T14:49:45Z",
      "updated_at": "2024-10-15T14:49:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\nð§ At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/31561424673</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-2414153012",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "commented",
      "id": 2414166896,
      "node_id": "IC_kwDOABII586P5UNw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2414166896",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T14:54:29Z",
      "updated_at": "2024-10-15T14:54:29Z",
      "author_association": "MEMBER",
      "body": "CI fails, presumably after https://github.com/bitcoin/bitcoin/pull/29071",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-2414166896",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "unlabeled",
      "id": 14660180833,
      "node_id": "UNLE_lADOABII584yptetzwAAAANp0Jth",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14660180833",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T15:42:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2369959877,
      "node_id": "PRR_kwDOABII586NQrfF",
      "url": null,
      "actor": null,
      "commit_id": "2cadce538e55d48a0f0b0f8b573411b938dfd888",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2369959877",
      "submitted_at": "2024-10-15T16:31:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14669915813,
      "node_id": "HRFPE_lADOABII584yptetzwAAAANqZSal",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14669915813",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02c333c6ea555f821363eca214577946ddc7ba1a",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/02c333c6ea555f821363eca214577946ddc7ba1a",
      "created_at": "2024-10-16T07:41:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14670274241,
      "node_id": "HRFPE_lADOABII584yptetzwAAAANqap7B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14670274241",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/ad67fd2e0bfa6f43f350066596b6cca146391362",
      "created_at": "2024-10-16T07:58:29Z"
    },
    {
      "event": "unlabeled",
      "id": 14672340781,
      "node_id": "UNLE_lADOABII584yptetzwAAAANqiict",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14672340781",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-16T09:29:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2407815626,
      "node_id": "PRR_kwDOABII586PhFnK",
      "url": null,
      "actor": null,
      "commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK ad67fd2e0bfa6f43f350066596b6cca146391362\r\n\r\nJust nits, and all of them can be ignored. This was fun to review, the explanations in the `safegcd_implementation.md` are excellent. I also profited from the two review clubs and their notes that were done on the original MuHash introduction.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2407815626",
      "submitted_at": "2024-11-07T20:26:12Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "review_requested",
      "id": 15192407071,
      "node_id": "RRE_lADOABII584yptetzwAAAAOJibwf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15192407071",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T20:26:17Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2443257294,
      "node_id": "PRR_kwDOABII586RoSXO",
      "url": null,
      "actor": null,
      "commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Fuzz-tested ACK ad67fd2e0bfa6f43f350066596b6cca146391362\r\n\r\nWith the friendly help of @dergoegge I managed to get differential fuzzing running last week and let that ran for the last ~77 hours. Here are the rough instructions for those who also want to give it a try:\r\n\r\n<details>\r\n  <summary>Instructions for differential fuzzing using semsan</summary>\r\n\r\n1. created branches on top of master and the PR each that add a _characterization_ to the MuHash fuzz test, writing to a shared memory for comparison (see https://github.com/theStack/bitcoin/tree/muhash_characterization_master and https://github.com/theStack/bitcoin/tree/muhash_characterization_pr21590, cherry-picking the commit originally from https://github.com/dergoegge/bitcoin/commit/d3273787bc97f1023259724ddcf2968f3fe12279; note that the environment variable value had to be adapted to `SEMSAN_CHARACTERIZATION_SHMEM_ID`)\r\n\r\n2. built the `afl-clang-...` binaries for clang 18:\r\n```\r\n$ git clone https://github.com/AFLplusplus/AFLplusplus\r\n$ cd AFLplusplus\r\n$ LLVM_CONFIG=llvm-config-18 make\r\n```\r\n\r\n3. built both branches mentioned in step 1 above using `afl-clang-lto`/`afl-clang-lto++` (built in step 2):\r\n```\r\n$ cmake -B build_fuzz -DCMAKE_C_COMPILER=\"/path/to/AFLplusplus/afl-clang-lto\" -DCMAKE_CXX_COMPILER=\"/path/to/AFLplusplus/afl-clang-lto++\" -DBUILD_FOR_FUZZING=ON\r\n...\r\n$ cmake --build build_fuzz/\r\n...\r\n```\r\n(Note that this can take quite a while. Unfortunately, using the `-fast` binaries didn't work for me and resulted in a linker error.)\r\n\r\n4. cloned the qa-assets repo for the fuzzing seeds\r\n```\r\n$ git clone --depth=1 https://github.com/bitcoin-core/qa-assets\r\n```\r\n\r\n5. built the dergoegge's [semsan](https://github.com/dergoegge/semsan) tool and run it with each of the built fuzzing binaries above and the fuzzing seed:\r\n```\r\n$ https://github.com/dergoegge/semsan\r\n$ cd semsan\r\n$ cargo build --release\r\n$ AFL_DEBUG=1 FUZZ=muhash ./target/release/semsan --debug-children /path/to/master_characterization_branch/build_fuzz/src/test/fuzz/fuzz /path/to/pr21590_characterization_branch/build_fuzz/src/test/fuzz/fuzz fuzz --seeds ~/qa-assets/fuzz_corpora/muhash/ --solutions ./solutions\r\n```\r\n\r\n6. wait and enjoy ð» ð¥ ð¥© ð¨ \r\n\r\n</details>\r\n\r\nThe latest output looked like this on my machine:\r\n```\r\n[Client Heartbeat #0] run time: 77h-20m-55s, clients: 1, corpus: 22, objectives: 0, executions: 31816828, exec/sec: 114.3, combined-coverage: 262/563840 (0%), stability: 262/262 (100%)\r\n```",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2443257294",
      "submitted_at": "2024-11-18T17:21:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "reviewed",
      "id": 2539393251,
      "node_id": "PRR_kwDOABII586XXBDj",
      "url": null,
      "actor": null,
      "commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK ad67fd2e0bfa6f43f350066596b6cca146391362\r\n\r\nOnly minor changes since my [last review](https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2104888365).\r\n",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2539393251",
      "submitted_at": "2025-01-09T10:01:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkxY2U4Y2VmMmQ4OTU1ZDk4MGFiN2U4OWZiZjc0ZThiMjlhZGYxNzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91ce8cef2d8955d980ab7e89fbf74e8b29adf178",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/91ce8cef2d8955d980ab7e89fbf74e8b29adf178",
      "tree": {
        "sha": "c0b4b44c5eabda0ed145bb2cbaa319611132057c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0b4b44c5eabda0ed145bb2cbaa319611132057c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66aa6a47bd8efd7e0448319c74be3ee62caa777a",
          "sha": "66aa6a47bd8efd7e0448319c74be3ee62caa777a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/66aa6a47bd8efd7e0448319c74be3ee62caa777a"
        }
      ],
      "message": "Add benchmark for MuHash finalization",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-01-09T14:49:02Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-13T20:09:29Z"
      },
      "sha": "91ce8cef2d8955d980ab7e89fbf74e8b29adf178"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEyNmNlNjI4OTQyMjQzZmM5ODQ4YTYzYmZkZmE1ZTYxZjVlOTM2ZjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a26ce628942243fc9848a63bfdfa5e61f5e936f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a26ce628942243fc9848a63bfdfa5e61f5e936f3",
      "tree": {
        "sha": "8267f85af80ab875bf4e3f8d178ce1a63fba4c71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8267f85af80ab875bf4e3f8d178ce1a63fba4c71"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91ce8cef2d8955d980ab7e89fbf74e8b29adf178",
          "sha": "91ce8cef2d8955d980ab7e89fbf74e8b29adf178",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/91ce8cef2d8955d980ab7e89fbf74e8b29adf178"
        }
      ],
      "message": "Safegcd based modular inverse for Num3072",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-01-09T15:04:36Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-13T21:56:51Z"
      },
      "sha": "a26ce628942243fc9848a63bfdfa5e61f5e936f3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY1ODgzMjg2ZTMyYjYyNWFhYjNkZDgwYzc0ZDZhZGI0ZjM3ZjBhODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "tree": {
        "sha": "7ae2273115b093b1708207687d5e0ed9d37e0d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ae2273115b093b1708207687d5e0ed9d37e0d22"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a26ce628942243fc9848a63bfdfa5e61f5e936f3",
          "sha": "a26ce628942243fc9848a63bfdfa5e61f5e936f3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a26ce628942243fc9848a63bfdfa5e61f5e936f3"
        }
      ],
      "message": "Add a fuzz test for Num3072 multiplication and inversion",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-01-09T15:11:46Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-01T19:19:08Z"
      },
      "sha": "f5883286e32b625aab3dd80c74d6adb4f37f0a80"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15869457714,
      "node_id": "HRFPE_lADOABII584yptetzwAAAAOx5LUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15869457714",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "created_at": "2025-01-09T15:11:57Z"
    },
    {
      "event": "commented",
      "id": 2580527041,
      "node_id": "IC_kwDOABII586Zz7fB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2580527041",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T15:12:09Z",
      "updated_at": "2025-01-09T15:12:09Z",
      "author_association": "MEMBER",
      "body": "Rebased, addressed a few comments, and changed some `assert()` to `Assume()`.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#issuecomment-2580527041",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21590"
    },
    {
      "event": "reviewed",
      "id": 2540842762,
      "node_id": "PRR_kwDOABII586Xci8K",
      "url": null,
      "actor": null,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Re-ACK f5883286e32b625aab3dd80c74d6adb4f37f0a80\r\n\r\nRange-diff'ed from the last push, changes are marking functions as `inline`, checking asserts to Assume and adding some constants. There are some minor formatting issues, which can be fixed by running the commits through `clang-format-diff`.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2540842762",
      "submitted_at": "2025-01-09T20:13:44Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "review_requested",
      "id": 15873063778,
      "node_id": "RRE_lADOABII584yptetzwAAAAOyG7ti",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15873063778",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T20:13:49Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 15873063919,
      "node_id": "RRE_lADOABII584yptetzwAAAAOyG7vv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15873063919",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T20:13:49Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2541911255,
      "node_id": "PRR_kwDOABII586XgnzX",
      "url": null,
      "actor": null,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2541911255",
      "submitted_at": "2025-01-10T09:18:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    },
    {
      "event": "reviewed",
      "id": 2543431435,
      "node_id": "PRR_kwDOABII586Xma8L",
      "url": null,
      "actor": null,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#pullrequestreview-2543431435",
      "submitted_at": "2025-01-10T19:13:56Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749765025",
      "pull_request_review_id": 806652492,
      "id": 749765025,
      "node_id": "PRRC_kwDOABII584ssIGh",
      "diff_hunk": "@@ -967,6 +967,30 @@ AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n                  #include <byteswap.h>\n                  #endif])\n \n+AC_MSG_CHECKING([for __builtin_ctz])\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n+ (void) __builtin_clz(0);\n+  ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_BUILTIN_CTZ, 1, [Define this symbol if you have __builtin_ctz])],\n+ [ AC_MSG_RESULT(no)]",
      "path": "configure.ac",
      "position": null,
      "original_position": 9,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "f1f4eae6190619ff4c8816ffe6b21d8a079e7cef",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you use the following here and below. Functionally there's no real difference, but we've settled on this style for consistency across the build system.\r\n```suggestion\r\n [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_BUILTIN_CTZ], [1], [Define this symbol if you have __builtin_ctz])],\r\n [ AC_MSG_RESULT([no])]\r\n```",
      "created_at": "2021-11-15T23:44:03Z",
      "updated_at": "2021-11-15T23:44:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r749765025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749765025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": 974,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 975,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760577058",
      "pull_request_review_id": 820813827,
      "id": 760577058,
      "node_id": "PRRC_kwDOABII584tVXwi",
      "diff_hunk": "@@ -967,6 +967,30 @@ AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n                  #include <byteswap.h>\n                  #endif])\n \n+AC_MSG_CHECKING([for __builtin_ctz])\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n+ (void) __builtin_clz(0);\n+  ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_BUILTIN_CTZ, 1, [Define this symbol if you have __builtin_ctz])],\n+ [ AC_MSG_RESULT(no)]",
      "path": "configure.ac",
      "position": null,
      "original_position": 9,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "f1f4eae6190619ff4c8816ffe6b21d8a079e7cef",
      "in_reply_to_id": 749765025,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2021-12-01T21:17:19Z",
      "updated_at": "2021-12-01T21:17:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r760577058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760577058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": 974,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 975,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761184579",
      "pull_request_review_id": 821629244,
      "id": 761184579,
      "node_id": "PRRC_kwDOABII584tXsFD",
      "diff_hunk": "@@ -2,13 +2,153 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <arith_uint256.h>\n #include <crypto/muhash.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n+#include <array>\n #include <vector>\n \n+namespace {\n+\n+class arith_uint6144 : public base_uint<6144> {\n+public:\n+    arith_uint6144(uint64_t x) : base_uint{x} {}\n+\n+    arith_uint6144(Span<const uint8_t> bytes) : base_uint{}\n+    {\n+        assert(bytes.size() % 4 == 0);\n+        assert(bytes.size() <= 768);\n+        for (int i = 0; i*4 < bytes.size(); ++i) {\n+            pn[i] = ReadLE32(bytes.data() + 4*i);\n+        }\n+    }\n+\n+    void Serialize(Span<uint8_t> bytes) {\n+        assert(bytes.size() % 4 == 0);\n+        assert(bytes.size() <= 768);\n+        for (int i = 0; i*4 < bytes.size(); ++i) {",
      "path": "src/test/fuzz/muhash.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "58b108ebcd9e335c5cc6ad68950778e42c564e22",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        for (size_t i{0}; i*4 < bytes.size(); ++i) {\r\n```\r\n\r\n```\r\ntest/fuzz/muhash.cpp:27:29: error: comparison of integers of different signs: 'int' and 'std::size_t' (aka 'unsigned long') [-Werror,-Wsign-compare]\r\n        for (int i = 0; i*4 < bytes.size(); ++i) {\r\n                        ~~~ ^ ~~~~~~~~~~~~\r\ntest/fuzz/muhash.cpp:35:29: error: comparison of integers of different signs: 'int' and 'std::size_t' (aka 'unsigned long') [-Werror,-Wsign-compare]\r\n        for (int i = 0; i*4 < bytes.size(); ++i) {\r\n                        ~~~ ^ ~~~~~~~~~~~~\r\ntest/fuzz/muhash.cpp:131:13: error: unused variable 'buf' [-Werror,-Wunused-variable]\r\n    uint8_t buf[384];\r\n            ^\r\n3 errors generated.",
      "created_at": "2021-12-02T15:07:59Z",
      "updated_at": "2021-12-02T15:16:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r761184579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761184579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761186334",
      "pull_request_review_id": 821629244,
      "id": 761186334,
      "node_id": "PRRC_kwDOABII584tXsge",
      "diff_hunk": "@@ -2,13 +2,153 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <arith_uint256.h>\n #include <crypto/muhash.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n+#include <array>\n #include <vector>\n \n+namespace {\n+\n+class arith_uint6144 : public base_uint<6144> {\n+public:\n+    arith_uint6144(uint64_t x) : base_uint{x} {}\n+\n+    arith_uint6144(Span<const uint8_t> bytes) : base_uint{}\n+    {\n+        assert(bytes.size() % 4 == 0);\n+        assert(bytes.size() <= 768);\n+        for (int i = 0; i*4 < bytes.size(); ++i) {\n+            pn[i] = ReadLE32(bytes.data() + 4*i);\n+        }\n+    }\n+\n+    void Serialize(Span<uint8_t> bytes) {\n+        assert(bytes.size() % 4 == 0);\n+        assert(bytes.size() <= 768);\n+        for (int i = 0; i*4 < bytes.size(); ++i) {\n+            WriteLE32(bytes.data() + 4*i, pn[i]);\n+        }\n+        for (int i = bytes.size()/4; i*4 < 768; ++i) {\n+            assert(pn[i] == 0);\n+        }\n+    };\n+};\n+\n+/** The MuHash3072 modulus (2**3072 - 1103717) as 768 LE8 bytes. */\n+constexpr std::array<const uint8_t, 768> MODULUS_BYTES = {\n+    155,  40, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+};\n+\n+const arith_uint6144 ZERO{0};\n+const arith_uint6144 ONE{1};\n+const arith_uint6144 MODULUS{MakeSpan(MODULUS_BYTES)};\n+\n+void Reduce(arith_uint6144& value)\n+{\n+    arith_uint6144 tmp = value;\n+    tmp /= MODULUS;\n+    tmp *= MODULUS;\n+    value -= tmp;\n+}\n+\n+Num3072 ReadNum3072(Span<const uint8_t> bytes)\n+{\n+    assert(bytes.size() == 384);\n+    SpanReader reader(0, 0, bytes, 0);\n+    Num3072 val;\n+    reader >> val;\n+    return val;\n+}\n+\n+} // namespace\n+\n+FUZZ_TARGET(num3072_mul)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+    uint8_t buf[384];",
      "path": "src/test/fuzz/muhash.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "58b108ebcd9e335c5cc6ad68950778e42c564e22",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "unused",
      "created_at": "2021-12-02T15:09:36Z",
      "updated_at": "2021-12-02T15:16:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r761186334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761186334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761275113",
      "pull_request_review_id": 821754929,
      "id": 761275113,
      "node_id": "PRRC_kwDOABII584tYCLp",
      "diff_hunk": "@@ -2,13 +2,153 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <arith_uint256.h>\n #include <crypto/muhash.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n+#include <array>\n #include <vector>\n \n+namespace {\n+\n+class arith_uint6144 : public base_uint<6144> {\n+public:\n+    arith_uint6144(uint64_t x) : base_uint{x} {}\n+\n+    arith_uint6144(Span<const uint8_t> bytes) : base_uint{}\n+    {\n+        assert(bytes.size() % 4 == 0);\n+        assert(bytes.size() <= 768);\n+        for (int i = 0; i*4 < bytes.size(); ++i) {\n+            pn[i] = ReadLE32(bytes.data() + 4*i);\n+        }\n+    }\n+\n+    void Serialize(Span<uint8_t> bytes) {\n+        assert(bytes.size() % 4 == 0);\n+        assert(bytes.size() <= 768);\n+        for (int i = 0; i*4 < bytes.size(); ++i) {",
      "path": "src/test/fuzz/muhash.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "58b108ebcd9e335c5cc6ad68950778e42c564e22",
      "in_reply_to_id": 761184579,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2021-12-02T16:40:45Z",
      "updated_at": "2021-12-02T16:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r761275113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761275113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761275273",
      "pull_request_review_id": 821755146,
      "id": 761275273,
      "node_id": "PRRC_kwDOABII584tYCOJ",
      "diff_hunk": "@@ -2,13 +2,153 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <arith_uint256.h>\n #include <crypto/muhash.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n+#include <array>\n #include <vector>\n \n+namespace {\n+\n+class arith_uint6144 : public base_uint<6144> {\n+public:\n+    arith_uint6144(uint64_t x) : base_uint{x} {}\n+\n+    arith_uint6144(Span<const uint8_t> bytes) : base_uint{}\n+    {\n+        assert(bytes.size() % 4 == 0);\n+        assert(bytes.size() <= 768);\n+        for (int i = 0; i*4 < bytes.size(); ++i) {\n+            pn[i] = ReadLE32(bytes.data() + 4*i);\n+        }\n+    }\n+\n+    void Serialize(Span<uint8_t> bytes) {\n+        assert(bytes.size() % 4 == 0);\n+        assert(bytes.size() <= 768);\n+        for (int i = 0; i*4 < bytes.size(); ++i) {\n+            WriteLE32(bytes.data() + 4*i, pn[i]);\n+        }\n+        for (int i = bytes.size()/4; i*4 < 768; ++i) {\n+            assert(pn[i] == 0);\n+        }\n+    };\n+};\n+\n+/** The MuHash3072 modulus (2**3072 - 1103717) as 768 LE8 bytes. */\n+constexpr std::array<const uint8_t, 768> MODULUS_BYTES = {\n+    155,  40, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+};\n+\n+const arith_uint6144 ZERO{0};\n+const arith_uint6144 ONE{1};\n+const arith_uint6144 MODULUS{MakeSpan(MODULUS_BYTES)};\n+\n+void Reduce(arith_uint6144& value)\n+{\n+    arith_uint6144 tmp = value;\n+    tmp /= MODULUS;\n+    tmp *= MODULUS;\n+    value -= tmp;\n+}\n+\n+Num3072 ReadNum3072(Span<const uint8_t> bytes)\n+{\n+    assert(bytes.size() == 384);\n+    SpanReader reader(0, 0, bytes, 0);\n+    Num3072 val;\n+    reader >> val;\n+    return val;\n+}\n+\n+} // namespace\n+\n+FUZZ_TARGET(num3072_mul)\n+{\n+    FuzzedDataProvider provider{buffer.data(), buffer.size()};\n+    uint8_t buf[384];",
      "path": "src/test/fuzz/muhash.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "58b108ebcd9e335c5cc6ad68950778e42c564e22",
      "in_reply_to_id": 761186334,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Improved in various ways.",
      "created_at": "2021-12-02T16:40:57Z",
      "updated_at": "2021-12-02T16:40:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r761275273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761275273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796608724",
      "pull_request_review_id": 869147841,
      "id": 796608724,
      "node_id": "PRRC_kwDOABII584ve0jU",
      "diff_hunk": "@@ -141,98 +123,386 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += ((double_limb_t)in.limbs[i]) << b;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "in_reply_to_id": null,
      "user": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "please avoid c-style cast, use c++11 style functional casts\r\n\r\n`double_limb_t(in.limbs[i])`",
      "created_at": "2022-02-01T13:44:45Z",
      "updated_at": "2022-02-01T13:49:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r796608724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796608724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796608864",
      "pull_request_review_id": 869147841,
      "id": 796608864,
      "node_id": "PRRC_kwDOABII584ve0lg",
      "diff_hunk": "@@ -141,98 +123,386 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += ((double_limb_t)in.limbs[i]) << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = (limb_t)c & MAX_SIGNED_LIMB;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "in_reply_to_id": null,
      "user": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "please use functional cast",
      "created_at": "2022-02-01T13:44:52Z",
      "updated_at": "2022-02-01T13:49:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r796608864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796608864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796609050",
      "pull_request_review_id": 869147841,
      "id": 796609050,
      "node_id": "PRRC_kwDOABII584ve0oa",
      "diff_hunk": "@@ -141,98 +123,386 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += ((double_limb_t)in.limbs[i]) << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = (limb_t)c & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += ((double_limb_t)limbs[i]) << b;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 116,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "in_reply_to_id": null,
      "user": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "use functional cast",
      "created_at": "2022-02-01T13:45:03Z",
      "updated_at": "2022-02-01T13:49:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r796609050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796609050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796609239",
      "pull_request_review_id": 869147841,
      "id": 796609239,
      "node_id": "PRRC_kwDOABII584ve0rX",
      "diff_hunk": "@@ -141,98 +123,386 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += ((double_limb_t)in.limbs[i]) << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = (limb_t)c & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += ((double_limb_t)limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = (limb_t)c;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "in_reply_to_id": null,
      "user": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "please use functional cast",
      "created_at": "2022-02-01T13:45:14Z",
      "updated_at": "2022-02-01T13:49:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r796609239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796609239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996446739",
      "pull_request_review_id": 1143298617,
      "id": 996446739,
      "node_id": "PRRC_kwDOABII5847ZJIT",
      "diff_hunk": "@@ -141,98 +123,386 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += ((double_limb_t)in.limbs[i]) << b;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "in_reply_to_id": 796608724,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2022-10-16T14:04:59Z",
      "updated_at": "2022-10-16T14:05:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r996446739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996446739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996446749",
      "pull_request_review_id": 1143298632,
      "id": 996446749,
      "node_id": "PRRC_kwDOABII5847ZJId",
      "diff_hunk": "@@ -141,98 +123,386 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += ((double_limb_t)in.limbs[i]) << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = (limb_t)c & MAX_SIGNED_LIMB;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "in_reply_to_id": 796608864,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2022-10-16T14:05:05Z",
      "updated_at": "2022-10-16T14:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r996446749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996446749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996446760",
      "pull_request_review_id": 1143298652,
      "id": 996446760,
      "node_id": "PRRC_kwDOABII5847ZJIo",
      "diff_hunk": "@@ -141,98 +123,386 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += ((double_limb_t)in.limbs[i]) << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = (limb_t)c & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += ((double_limb_t)limbs[i]) << b;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 116,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "in_reply_to_id": 796609050,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2022-10-16T14:05:12Z",
      "updated_at": "2022-10-16T14:05:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r996446760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996446760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996446770",
      "pull_request_review_id": 1143298661,
      "id": 996446770,
      "node_id": "PRRC_kwDOABII5847ZJIy",
      "diff_hunk": "@@ -141,98 +123,386 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += ((double_limb_t)in.limbs[i]) << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = (limb_t)c & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += ((double_limb_t)limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = (limb_t)c;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "9cb1bc34098274346bd0c7fb43736293e981ecc7",
      "in_reply_to_id": 796609239,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2022-10-16T14:05:18Z",
      "updated_at": "2022-10-16T14:05:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r996446770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996446770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824375277",
      "pull_request_review_id": 2407815626,
      "id": 1824375277,
      "node_id": "PRRC_kwDOABII585svcHt",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 205,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "310b778eb1cb0100d89acec4f2160566b5a03846",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: Not important, but could `inline` these same as the other functions only used within this module?",
      "created_at": "2024-10-31T12:36:59Z",
      "updated_at": "2024-11-07T20:26:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1824375277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824375277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1831135311",
      "pull_request_review_id": 2407815626,
      "id": 1831135311,
      "node_id": "PRRC_kwDOABII585tJOhP",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;\n+    me -= (limb_t(0x70a1421da087d93) * limb_t(ce) + me) & MAX_SIGNED_LIMB;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd -= (signed_double_limb_t)1103717 * md;\n+    ce -= (signed_double_limb_t)1103717 * me;\n+    /* Verify that the low SIGNED_LIMB_SIZE bits of the computation are indeed zero, and then throw them away. */\n+    assert((cd & MAX_SIGNED_LIMB) == 0);\n+    assert((ce & MAX_SIGNED_LIMB) == 0);\n+    cd >>= SIGNED_LIMB_SIZE;\n+    ce >>= SIGNED_LIMB_SIZE;\n+    /* Now iteratively compute limb i=1..SIGNED_LIMBS-2 of t*[d,e]+modulus*[md,me], and store them in output\n+     * limb i-1 (shifting down by SIGNED_LIMB_SIZE bits). The corresponding limbs in modulus are all zero,\n+     * so modulus/md/me are not actually involved here. */\n+    for (int i = 1; i < SIGNED_LIMBS - 1; ++i) {\n+        di = d.limbs[i];\n+        ei = e.limbs[i];\n+        cd += (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+        ce += (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+        d.limbs[i - 1] = (signed_limb_t)cd & MAX_SIGNED_LIMB; cd >>= SIGNED_LIMB_SIZE;\n+        e.limbs[i - 1] = (signed_limb_t)ce & MAX_SIGNED_LIMB; ce >>= SIGNED_LIMB_SIZE;\n     }\n+    /* Compute limb SIGNED_LIMBS-1 of t*[d,e]+modulus*[md,me], and store it in output limb SIGNED_LIMBS-2. */\n+    di = d.limbs[SIGNED_LIMBS - 1];\n+    ei = e.limbs[SIGNED_LIMBS - 1];\n+    cd += (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    ce += (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    cd += (signed_double_limb_t)md << (3072 % SIGNED_LIMB_SIZE);\n+    ce += (signed_double_limb_t)me << (3072 % SIGNED_LIMB_SIZE);\n+    d.limbs[SIGNED_LIMBS - 2] = (signed_limb_t)cd & MAX_SIGNED_LIMB; cd >>= SIGNED_LIMB_SIZE;\n+    e.limbs[SIGNED_LIMBS - 2] = (signed_limb_t)ce & MAX_SIGNED_LIMB; ce >>= SIGNED_LIMB_SIZE;\n+    /* What remains goes into output limb SINGED_LIMBS-1 */\n+    d.limbs[SIGNED_LIMBS - 1] = (signed_limb_t)cd;\n+    e.limbs[SIGNED_LIMBS - 1] = (signed_limb_t)ce;\n+}\n \n-    /* Compute limb N-1 of a*b into tmp. */\n-    assert(c2 == 0);\n-    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[LIMBS - 1 - i]);\n-    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n-\n-    /* Perform a second reduction. */\n-    muln2(c0, c1, MAX_PRIME_DIFF);\n-    for (int j = 0; j < LIMBS; ++j) {\n-        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector (f,g).\n+ *\n+ * The matrix t must be chosen such that t*(f,g) results in multiples of 2^SIGNED_LIMB_SIZE.\n+ * This is the case for matrices computed by ComputeDivstepMatrix().\n+ */\n+void UpdateFG(Num3072Signed& f, Num3072Signed& g, const SignedMatrix& t, int len)\n+{\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    signed_limb_t fi, gi;\n+    signed_double_limb_t cf, cg;\n+    /* Start computing t*[f,g]. */\n+    fi = f.limbs[0];\n+    gi = g.limbs[0];\n+    cf = (signed_double_limb_t)u * fi + (signed_double_limb_t)v * gi;\n+    cg = (signed_double_limb_t)q * fi + (signed_double_limb_t)r * gi;\n+    /* Verify that the bottom SIGNED_LIMB_BITS bits of the result are zero, and then throw them away. */\n+    assert((cf & MAX_SIGNED_LIMB) == 0);\n+    assert((cg & MAX_SIGNED_LIMB) == 0);\n+    cf >>= SIGNED_LIMB_SIZE;\n+    cg >>= SIGNED_LIMB_SIZE;\n+    /* Now iteratively compute limb i=1..SIGNED_LIMBS-1 of t*[f,g], and store them in output limb i-1 (shifting\n+     * down by SIGNED_LIMB_BITS bits). */\n+    for (int i = 1; i < len; ++i) {\n+        fi = f.limbs[i];\n+        gi = g.limbs[i];\n+        cf += (signed_double_limb_t)u * fi + (signed_double_limb_t)v * gi;\n+        cg += (signed_double_limb_t)q * fi + (signed_double_limb_t)r * gi;\n+        f.limbs[i - 1] = (signed_limb_t)cf & MAX_SIGNED_LIMB; cf >>= SIGNED_LIMB_SIZE;\n+        g.limbs[i - 1] = (signed_limb_t)cg & MAX_SIGNED_LIMB; cg >>= SIGNED_LIMB_SIZE;\n     }\n+    /* What remains is limb SIGNED_LIMBS of t*[f,g]; store it as output limb SIGNED_LIMBS-1. */\n+    f.limbs[len - 1] = (signed_limb_t)cf;\n+    g.limbs[len - 1] = (signed_limb_t)cg;\n \n-    assert(c1 == 0);\n-    assert(c0 == 0 || c0 == 1);\n+}\n+} // namespace\n \n-    /* Perform up to two more reductions if the internal state has already\n-     * overflown the MAX of Num3072 or if it is larger than the modulus or\n-     * if both are the case.\n-     * */\n-    if (this->IsOverflow()) this->FullReduce();\n-    if (c0) this->FullReduce();\n+Num3072 Num3072::GetInverse() const\n+{\n+    // Compute a modular inverse based on a variant of the safegcd algorithm:\n+    // - Paper: https://gcd.cr.yp.to/papers.html\n+    // - Inspired by this code in libsecp256k1:\n+    //   https://github.com/bitcoin-core/secp256k1/blob/master/src/modinv32_impl.h\n+    // - Explanation of the algorithm:\n+    //   https://github.com/bitcoin-core/secp256k1/blob/master/doc/safegcd_implementation.md\n+\n+    // Local variables d, e, f, g:\n+    // - f and g are the variables whose gcd we compute (despite knowing the answer is 1):\n+    //   - f is always odd, and initialized as modulus\n+    //   - g is initialized as *this (called x in what follows)\n+    // - d and e are the numbers for which at every step it is the case that:\n+    //   - f = d * x mod modulus; d is initialized as 0\n+    //   - g = e * x mod modulus; e is initialized as 1\n+    Num3072Signed d, e, f, g;\n+    e.limbs[0] = 1;\n+    // F is initialized as modulus, which in signed limb representation can be expressed\n+    // simply as 2^3072 + -MAX_PRIME_DIFF.\n+    f.limbs[0] = -MAX_PRIME_DIFF;\n+    f.limbs[3072 / SIGNED_LIMB_SIZE] = ((limb_t)1) << (3072 % SIGNED_LIMB_SIZE);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 405,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: Both `3072 / SIGNED_LIMB_SIZE` and `3072 % SIGNED_LIMB_SIZE` are used a couple of times. Might it be more clear to give them their own descriptive constants? I was initially thinking `FINAL_LIMB_POSITION` and `FINAL_LIMB_MODULUS_BITS`, but not sure if that really feels clearer either.",
      "created_at": "2024-11-06T14:40:33Z",
      "updated_at": "2024-11-07T20:26:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1831135311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1831135311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832352138",
      "pull_request_review_id": 2407815626,
      "id": 1832352138,
      "node_id": "PRRC_kwDOABII585tN3mK",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 294,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: The constant here seems clearer in `modinv32_impl.h`. Could it get a name here too, or an explanation how it was computed?",
      "created_at": "2024-11-07T09:33:44Z",
      "updated_at": "2024-11-07T20:26:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1832352138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832352138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832363289",
      "pull_request_review_id": 2407815626,
      "id": 1832363289,
      "node_id": "PRRC_kwDOABII585tN6UZ",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;\n+    me -= (limb_t(0x70a1421da087d93) * limb_t(ce) + me) & MAX_SIGNED_LIMB;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd -= (signed_double_limb_t)1103717 * md;\n+    ce -= (signed_double_limb_t)1103717 * me;\n+    /* Verify that the low SIGNED_LIMB_SIZE bits of the computation are indeed zero, and then throw them away. */\n+    assert((cd & MAX_SIGNED_LIMB) == 0);\n+    assert((ce & MAX_SIGNED_LIMB) == 0);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 301,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just a question: Compared to the code in `modinv32_impl.h`, there are fewer bound checks done here. Is this on purpose?",
      "created_at": "2024-11-07T09:41:07Z",
      "updated_at": "2024-11-07T20:26:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1832363289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832363289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832578046",
      "pull_request_review_id": 2407815626,
      "id": 1832578046,
      "node_id": "PRRC_kwDOABII585tOuv-",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just a question: Compared to `modinv32_normalize`, this step seems to skip the inner limbs. Is there a reason why there is a difference between the implementations here? IIUC this works out in the end because of the carry step.",
      "created_at": "2024-11-07T12:12:36Z",
      "updated_at": "2024-11-07T20:26:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1832578046",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832578046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1833285990",
      "pull_request_review_id": 2407815626,
      "id": 1833285990,
      "node_id": "PRRC_kwDOABII585tRblm",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;\n+    me -= (limb_t(0x70a1421da087d93) * limb_t(ce) + me) & MAX_SIGNED_LIMB;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd -= (signed_double_limb_t)1103717 * md;\n+    ce -= (signed_double_limb_t)1103717 * me;\n+    /* Verify that the low SIGNED_LIMB_SIZE bits of the computation are indeed zero, and then throw them away. */\n+    assert((cd & MAX_SIGNED_LIMB) == 0);\n+    assert((ce & MAX_SIGNED_LIMB) == 0);\n+    cd >>= SIGNED_LIMB_SIZE;\n+    ce >>= SIGNED_LIMB_SIZE;\n+    /* Now iteratively compute limb i=1..SIGNED_LIMBS-2 of t*[d,e]+modulus*[md,me], and store them in output\n+     * limb i-1 (shifting down by SIGNED_LIMB_SIZE bits). The corresponding limbs in modulus are all zero,\n+     * so modulus/md/me are not actually involved here. */\n+    for (int i = 1; i < SIGNED_LIMBS - 1; ++i) {\n+        di = d.limbs[i];\n+        ei = e.limbs[i];\n+        cd += (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+        ce += (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+        d.limbs[i - 1] = (signed_limb_t)cd & MAX_SIGNED_LIMB; cd >>= SIGNED_LIMB_SIZE;\n+        e.limbs[i - 1] = (signed_limb_t)ce & MAX_SIGNED_LIMB; ce >>= SIGNED_LIMB_SIZE;\n     }\n+    /* Compute limb SIGNED_LIMBS-1 of t*[d,e]+modulus*[md,me], and store it in output limb SIGNED_LIMBS-2. */\n+    di = d.limbs[SIGNED_LIMBS - 1];\n+    ei = e.limbs[SIGNED_LIMBS - 1];\n+    cd += (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    ce += (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    cd += (signed_double_limb_t)md << (3072 % SIGNED_LIMB_SIZE);\n+    ce += (signed_double_limb_t)me << (3072 % SIGNED_LIMB_SIZE);\n+    d.limbs[SIGNED_LIMBS - 2] = (signed_limb_t)cd & MAX_SIGNED_LIMB; cd >>= SIGNED_LIMB_SIZE;\n+    e.limbs[SIGNED_LIMBS - 2] = (signed_limb_t)ce & MAX_SIGNED_LIMB; ce >>= SIGNED_LIMB_SIZE;\n+    /* What remains goes into output limb SINGED_LIMBS-1 */\n+    d.limbs[SIGNED_LIMBS - 1] = (signed_limb_t)cd;\n+    e.limbs[SIGNED_LIMBS - 1] = (signed_limb_t)ce;\n+}\n \n-    /* Compute limb N-1 of a*b into tmp. */\n-    assert(c2 == 0);\n-    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[LIMBS - 1 - i]);\n-    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n-\n-    /* Perform a second reduction. */\n-    muln2(c0, c1, MAX_PRIME_DIFF);\n-    for (int j = 0; j < LIMBS; ++j) {\n-        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector (f,g).\n+ *\n+ * The matrix t must be chosen such that t*(f,g) results in multiples of 2^SIGNED_LIMB_SIZE.\n+ * This is the case for matrices computed by ComputeDivstepMatrix().\n+ */\n+void UpdateFG(Num3072Signed& f, Num3072Signed& g, const SignedMatrix& t, int len)\n+{\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    signed_limb_t fi, gi;\n+    signed_double_limb_t cf, cg;\n+    /* Start computing t*[f,g]. */\n+    fi = f.limbs[0];\n+    gi = g.limbs[0];\n+    cf = (signed_double_limb_t)u * fi + (signed_double_limb_t)v * gi;\n+    cg = (signed_double_limb_t)q * fi + (signed_double_limb_t)r * gi;\n+    /* Verify that the bottom SIGNED_LIMB_BITS bits of the result are zero, and then throw them away. */\n+    assert((cf & MAX_SIGNED_LIMB) == 0);\n+    assert((cg & MAX_SIGNED_LIMB) == 0);\n+    cf >>= SIGNED_LIMB_SIZE;\n+    cg >>= SIGNED_LIMB_SIZE;\n+    /* Now iteratively compute limb i=1..SIGNED_LIMBS-1 of t*[f,g], and store them in output limb i-1 (shifting\n+     * down by SIGNED_LIMB_BITS bits). */\n+    for (int i = 1; i < len; ++i) {\n+        fi = f.limbs[i];\n+        gi = g.limbs[i];\n+        cf += (signed_double_limb_t)u * fi + (signed_double_limb_t)v * gi;\n+        cg += (signed_double_limb_t)q * fi + (signed_double_limb_t)r * gi;\n+        f.limbs[i - 1] = (signed_limb_t)cf & MAX_SIGNED_LIMB; cf >>= SIGNED_LIMB_SIZE;\n+        g.limbs[i - 1] = (signed_limb_t)cg & MAX_SIGNED_LIMB; cg >>= SIGNED_LIMB_SIZE;\n     }\n+    /* What remains is limb SIGNED_LIMBS of t*[f,g]; store it as output limb SIGNED_LIMBS-1. */\n+    f.limbs[len - 1] = (signed_limb_t)cf;\n+    g.limbs[len - 1] = (signed_limb_t)cg;\n \n-    assert(c1 == 0);\n-    assert(c0 == 0 || c0 == 1);\n+}\n+} // namespace\n \n-    /* Perform up to two more reductions if the internal state has already\n-     * overflown the MAX of Num3072 or if it is larger than the modulus or\n-     * if both are the case.\n-     * */\n-    if (this->IsOverflow()) this->FullReduce();\n-    if (c0) this->FullReduce();\n+Num3072 Num3072::GetInverse() const\n+{\n+    // Compute a modular inverse based on a variant of the safegcd algorithm:\n+    // - Paper: https://gcd.cr.yp.to/papers.html\n+    // - Inspired by this code in libsecp256k1:\n+    //   https://github.com/bitcoin-core/secp256k1/blob/master/src/modinv32_impl.h\n+    // - Explanation of the algorithm:\n+    //   https://github.com/bitcoin-core/secp256k1/blob/master/doc/safegcd_implementation.md\n+\n+    // Local variables d, e, f, g:\n+    // - f and g are the variables whose gcd we compute (despite knowing the answer is 1):\n+    //   - f is always odd, and initialized as modulus\n+    //   - g is initialized as *this (called x in what follows)\n+    // - d and e are the numbers for which at every step it is the case that:\n+    //   - f = d * x mod modulus; d is initialized as 0\n+    //   - g = e * x mod modulus; e is initialized as 1\n+    Num3072Signed d, e, f, g;\n+    e.limbs[0] = 1;\n+    // F is initialized as modulus, which in signed limb representation can be expressed\n+    // simply as 2^3072 + -MAX_PRIME_DIFF.\n+    f.limbs[0] = -MAX_PRIME_DIFF;\n+    f.limbs[3072 / SIGNED_LIMB_SIZE] = ((limb_t)1) << (3072 % SIGNED_LIMB_SIZE);\n+    g.FromNum3072(*this);\n+    int len = SIGNED_LIMBS; //!< The number of significant limbs in f and g\n+    signed_limb_t eta = -1; //!< State to track knowledge about ratio of f and g\n+    // Perform divsteps on [f,g] until g=0 is reached, keeping (d,e) synchronized with them.\n+    while (true) {\n+        // Compute transformation matrix t that represents the next SIGNED_LIMB_SIZE divsteps\n+        // to apply. This can be computed from just the bottom limb of f and g, and eta.\n+        SignedMatrix t;\n+        eta = ComputeDivstepMatrix(eta, f.limbs[0], g.limbs[0], t);\n+        // Apply that transformation matrix to the full [f,g] vector.\n+        UpdateFG(f, g, t, len);\n+        // Apply that transformation matrix to the full [d,e] vector (mod modulus).\n+        UpdateDE(d, e, t);\n+\n+        // Check if g is zero.\n+        if (g.limbs[0] == 0) {\n+            signed_limb_t cond = 0;\n+            for (int j = 1; j < len; ++j) {\n+                cond |= g.limbs[j];\n+            }\n+            // If so, we're done.\n+            if (cond == 0) break;\n+        }\n+\n+        // Check if the top limbs of both f and g are both 0 or -1.\n+        signed_limb_t fn = f.limbs[len - 1], gn = g.limbs[len - 1];\n+        signed_limb_t cond = ((signed_limb_t)len - 2) >> (LIMB_SIZE - 1);\n+        cond |= fn ^ (fn >> (LIMB_SIZE - 1));\n+        cond |= gn ^ (gn >> (LIMB_SIZE - 1));\n+        if (cond == 0) {\n+            // If so, drop the top limb, shrinking the size of f and g, by\n+            // propagating the sign to the previous limb.\n+            f.limbs[len - 2] |= (limb_t)f.limbs[len - 1] << SIGNED_LIMB_SIZE;\n+            g.limbs[len - 2] |= (limb_t)g.limbs[len - 1] << SIGNED_LIMB_SIZE;\n+            --len;\n+        }\n+    }\n+    // At some point, [f,g] will have been rewritten into [f',0], such that gcd(f,g) = gcd(f',0).\n+    // This is proven in the paper. As f started out being modulus, a prime number, we know that\n+    // gcd is 1, and thus f' is 1 or -1.\n+    assert((f.limbs[0] & MAX_SIGNED_LIMB) == 1 || (f.limbs[0] & MAX_SIGNED_LIMB) == MAX_SIGNED_LIMB);\n+    // As we've maintained the invariant that f = d * x mod modulus, we get d/f mod modulus is the\n+    // modular inverse of x we're looking for. As f is 1 or -1, it is also true that d/f = d*f.\n+    // Normalize d to prepare it for output, while negating it if f is negative.\n+    d.Normalize(f.limbs[len - 1] >> (LIMB_SIZE  - 1));\n+    Num3072 ret;\n+    d.ToNum3072(ret);\n+    return ret;\n }\n \n-void Num3072::Square()\n+void Num3072::Multiply(const Num3072& a)",
      "path": "src/crypto/muhash.cpp",
      "position": 466,
      "original_position": 457,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note for other reviewers: The diff here is confusing, but from what I can tell, this does not actually change the `Multiply` function, but just gets rid of `Square()`, `muldbladd3`, and `square_n_mul`, which were used in the old Inverse implementation.",
      "created_at": "2024-11-07T19:58:34Z",
      "updated_at": "2024-11-07T20:26:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1833285990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1833285990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 455,
      "original_line": 455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1833318225",
      "pull_request_review_id": 2407815626,
      "id": 1833318225,
      "node_id": "PRRC_kwDOABII585tRjdR",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;\n+    me -= (limb_t(0x70a1421da087d93) * limb_t(ce) + me) & MAX_SIGNED_LIMB;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd -= (signed_double_limb_t)1103717 * md;\n+    ce -= (signed_double_limb_t)1103717 * me;",
      "path": "src/crypto/muhash.cpp",
      "position": 307,
      "original_position": 298,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This tripped me up at first, because something is added instead of subtracted compared to the implementation in `modinv32_impl.h`. But I think this is correct, because it subtracts the distance (I don't know what the correct terminology is for this) to the modulus instead of adding the modulus, which should work out to the same. Similarly, the operation in the for loop can also be moved to the final step, which I'm guessing is a further nice optimization.",
      "created_at": "2024-11-07T20:19:29Z",
      "updated_at": "2024-11-07T20:26:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1833318225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1833318225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 314,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908979740",
      "pull_request_review_id": 2540181287,
      "id": 1908979740,
      "node_id": "PRRC_kwDOABII585xyLgc",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;\n+    me -= (limb_t(0x70a1421da087d93) * limb_t(ce) + me) & MAX_SIGNED_LIMB;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd -= (signed_double_limb_t)1103717 * md;\n+    ce -= (signed_double_limb_t)1103717 * me;\n+    /* Verify that the low SIGNED_LIMB_SIZE bits of the computation are indeed zero, and then throw them away. */\n+    assert((cd & MAX_SIGNED_LIMB) == 0);\n+    assert((ce & MAX_SIGNED_LIMB) == 0);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 301,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": 1832363289,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Which ones in particular are missing?",
      "created_at": "2025-01-09T15:07:12Z",
      "updated_at": "2025-01-09T15:07:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1908979740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908979740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908985488",
      "pull_request_review_id": 2540189268,
      "id": 1908985488,
      "node_id": "PRRC_kwDOABII585xyM6Q",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": 1832578046,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes and no. They aren't skipped, the carry step is the equivalent of processing the inner limbs. They're just easier, because the modulus here can be represented as [1 << FINAL_LIMB_MODULUS_BITS, 0, 0, 0, ..., 0, 0, -MAX_PRIME_DIFF]. In the `modinv32_impl.h` code, the modulus is treated as generic, where any limb can be nonzero.",
      "created_at": "2025-01-09T15:10:18Z",
      "updated_at": "2025-01-09T15:10:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1908985488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908985488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908987982",
      "pull_request_review_id": 2540192668,
      "id": 1908987982,
      "node_id": "PRRC_kwDOABII585xyNhO",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;\n+    me -= (limb_t(0x70a1421da087d93) * limb_t(ce) + me) & MAX_SIGNED_LIMB;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd -= (signed_double_limb_t)1103717 * md;\n+    ce -= (signed_double_limb_t)1103717 * me;",
      "path": "src/crypto/muhash.cpp",
      "position": 307,
      "original_position": 298,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": 1833318225,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same comment as above. The modulus here is `2^3072 - MAX_PRIME_DIFF`, which is represented in signed-limb representation as [1 << FINAL_LIMB_MODULUS_BITS, 0, 0, 0, ..., 0, -MAX_PRIME_DIFF], so we only need to do something for the bottom limb (where our modulus is negative) and the top limb.",
      "created_at": "2025-01-09T15:11:36Z",
      "updated_at": "2025-01-09T15:11:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1908987982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908987982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 314,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908989340",
      "pull_request_review_id": 2540194600,
      "id": 1908989340,
      "node_id": "PRRC_kwDOABII585xyN2c",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 205,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "310b778eb1cb0100d89acec4f2160566b5a03846",
      "in_reply_to_id": 1824375277,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-01-09T15:12:20Z",
      "updated_at": "2025-01-09T15:12:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1908989340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908989340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908989552",
      "pull_request_review_id": 2540194834,
      "id": 1908989552,
      "node_id": "PRRC_kwDOABII585xyN5w",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;\n+    me -= (limb_t(0x70a1421da087d93) * limb_t(ce) + me) & MAX_SIGNED_LIMB;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd -= (signed_double_limb_t)1103717 * md;\n+    ce -= (signed_double_limb_t)1103717 * me;\n+    /* Verify that the low SIGNED_LIMB_SIZE bits of the computation are indeed zero, and then throw them away. */\n+    assert((cd & MAX_SIGNED_LIMB) == 0);\n+    assert((ce & MAX_SIGNED_LIMB) == 0);\n+    cd >>= SIGNED_LIMB_SIZE;\n+    ce >>= SIGNED_LIMB_SIZE;\n+    /* Now iteratively compute limb i=1..SIGNED_LIMBS-2 of t*[d,e]+modulus*[md,me], and store them in output\n+     * limb i-1 (shifting down by SIGNED_LIMB_SIZE bits). The corresponding limbs in modulus are all zero,\n+     * so modulus/md/me are not actually involved here. */\n+    for (int i = 1; i < SIGNED_LIMBS - 1; ++i) {\n+        di = d.limbs[i];\n+        ei = e.limbs[i];\n+        cd += (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+        ce += (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+        d.limbs[i - 1] = (signed_limb_t)cd & MAX_SIGNED_LIMB; cd >>= SIGNED_LIMB_SIZE;\n+        e.limbs[i - 1] = (signed_limb_t)ce & MAX_SIGNED_LIMB; ce >>= SIGNED_LIMB_SIZE;\n     }\n+    /* Compute limb SIGNED_LIMBS-1 of t*[d,e]+modulus*[md,me], and store it in output limb SIGNED_LIMBS-2. */\n+    di = d.limbs[SIGNED_LIMBS - 1];\n+    ei = e.limbs[SIGNED_LIMBS - 1];\n+    cd += (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    ce += (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    cd += (signed_double_limb_t)md << (3072 % SIGNED_LIMB_SIZE);\n+    ce += (signed_double_limb_t)me << (3072 % SIGNED_LIMB_SIZE);\n+    d.limbs[SIGNED_LIMBS - 2] = (signed_limb_t)cd & MAX_SIGNED_LIMB; cd >>= SIGNED_LIMB_SIZE;\n+    e.limbs[SIGNED_LIMBS - 2] = (signed_limb_t)ce & MAX_SIGNED_LIMB; ce >>= SIGNED_LIMB_SIZE;\n+    /* What remains goes into output limb SINGED_LIMBS-1 */\n+    d.limbs[SIGNED_LIMBS - 1] = (signed_limb_t)cd;\n+    e.limbs[SIGNED_LIMBS - 1] = (signed_limb_t)ce;\n+}\n \n-    /* Compute limb N-1 of a*b into tmp. */\n-    assert(c2 == 0);\n-    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[LIMBS - 1 - i]);\n-    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n-\n-    /* Perform a second reduction. */\n-    muln2(c0, c1, MAX_PRIME_DIFF);\n-    for (int j = 0; j < LIMBS; ++j) {\n-        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector (f,g).\n+ *\n+ * The matrix t must be chosen such that t*(f,g) results in multiples of 2^SIGNED_LIMB_SIZE.\n+ * This is the case for matrices computed by ComputeDivstepMatrix().\n+ */\n+void UpdateFG(Num3072Signed& f, Num3072Signed& g, const SignedMatrix& t, int len)\n+{\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    signed_limb_t fi, gi;\n+    signed_double_limb_t cf, cg;\n+    /* Start computing t*[f,g]. */\n+    fi = f.limbs[0];\n+    gi = g.limbs[0];\n+    cf = (signed_double_limb_t)u * fi + (signed_double_limb_t)v * gi;\n+    cg = (signed_double_limb_t)q * fi + (signed_double_limb_t)r * gi;\n+    /* Verify that the bottom SIGNED_LIMB_BITS bits of the result are zero, and then throw them away. */\n+    assert((cf & MAX_SIGNED_LIMB) == 0);\n+    assert((cg & MAX_SIGNED_LIMB) == 0);\n+    cf >>= SIGNED_LIMB_SIZE;\n+    cg >>= SIGNED_LIMB_SIZE;\n+    /* Now iteratively compute limb i=1..SIGNED_LIMBS-1 of t*[f,g], and store them in output limb i-1 (shifting\n+     * down by SIGNED_LIMB_BITS bits). */\n+    for (int i = 1; i < len; ++i) {\n+        fi = f.limbs[i];\n+        gi = g.limbs[i];\n+        cf += (signed_double_limb_t)u * fi + (signed_double_limb_t)v * gi;\n+        cg += (signed_double_limb_t)q * fi + (signed_double_limb_t)r * gi;\n+        f.limbs[i - 1] = (signed_limb_t)cf & MAX_SIGNED_LIMB; cf >>= SIGNED_LIMB_SIZE;\n+        g.limbs[i - 1] = (signed_limb_t)cg & MAX_SIGNED_LIMB; cg >>= SIGNED_LIMB_SIZE;\n     }\n+    /* What remains is limb SIGNED_LIMBS of t*[f,g]; store it as output limb SIGNED_LIMBS-1. */\n+    f.limbs[len - 1] = (signed_limb_t)cf;\n+    g.limbs[len - 1] = (signed_limb_t)cg;\n \n-    assert(c1 == 0);\n-    assert(c0 == 0 || c0 == 1);\n+}\n+} // namespace\n \n-    /* Perform up to two more reductions if the internal state has already\n-     * overflown the MAX of Num3072 or if it is larger than the modulus or\n-     * if both are the case.\n-     * */\n-    if (this->IsOverflow()) this->FullReduce();\n-    if (c0) this->FullReduce();\n+Num3072 Num3072::GetInverse() const\n+{\n+    // Compute a modular inverse based on a variant of the safegcd algorithm:\n+    // - Paper: https://gcd.cr.yp.to/papers.html\n+    // - Inspired by this code in libsecp256k1:\n+    //   https://github.com/bitcoin-core/secp256k1/blob/master/src/modinv32_impl.h\n+    // - Explanation of the algorithm:\n+    //   https://github.com/bitcoin-core/secp256k1/blob/master/doc/safegcd_implementation.md\n+\n+    // Local variables d, e, f, g:\n+    // - f and g are the variables whose gcd we compute (despite knowing the answer is 1):\n+    //   - f is always odd, and initialized as modulus\n+    //   - g is initialized as *this (called x in what follows)\n+    // - d and e are the numbers for which at every step it is the case that:\n+    //   - f = d * x mod modulus; d is initialized as 0\n+    //   - g = e * x mod modulus; e is initialized as 1\n+    Num3072Signed d, e, f, g;\n+    e.limbs[0] = 1;\n+    // F is initialized as modulus, which in signed limb representation can be expressed\n+    // simply as 2^3072 + -MAX_PRIME_DIFF.\n+    f.limbs[0] = -MAX_PRIME_DIFF;\n+    f.limbs[3072 / SIGNED_LIMB_SIZE] = ((limb_t)1) << (3072 % SIGNED_LIMB_SIZE);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 405,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": 1831135311,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-01-09T15:12:25Z",
      "updated_at": "2025-01-09T15:12:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1908989552",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908989552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908989948",
      "pull_request_review_id": 2540195378,
      "id": 1908989948,
      "node_id": "PRRC_kwDOABII585xyN_8",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 294,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": 1832352138,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a constant for it.",
      "created_at": "2025-01-09T15:12:38Z",
      "updated_at": "2025-01-09T15:12:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1908989948",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908989948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909426772",
      "pull_request_review_id": 2540919568,
      "id": 1909426772,
      "node_id": "PRRC_kwDOABII585xz4pU",
      "diff_hunk": "@@ -141,98 +124,346 @@ void Num3072::FullReduce()\n     }\n }\n \n-Num3072 Num3072::GetInverse() const\n+namespace {\n+/** A type representing a number in signed limb representation. */\n+struct Num3072Signed\n {\n-    // For fast exponentiation a sliding window exponentiation with repunit\n-    // precomputation is utilized. See \"Fast Point Decompression for Standard\n-    // Elliptic Curves\" (Brumley, JÃ¤rvinen, 2008).\n-\n-    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n-    Num3072 out;\n+    /** The represented value is sum(limbs[i]*2^(SIGNED_LIMB_SIZE*i), i=0..SIGNED_LIMBS-1).\n+     *  Note that limbs may be negative, or exceed 2^SIGNED_LIMB_SIZE-1. */\n+    signed_limb_t limbs[SIGNED_LIMBS];\n+\n+    /** Construct a Num3072Signed with value 0. */\n+    Num3072Signed()\n+    {\n+        memset(limbs, 0, sizeof(limbs));\n+    }\n \n-    p[0] = *this;\n+    /** Convert a Num3072 to a Num3072Signed. Output will be normalized and in\n+     *  range 0..2^3072-1. */\n+    void FromNum3072(const Num3072& in)\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < LIMBS; ++i) {\n+            c += double_limb_t{in.limbs[i]} << b;\n+            b += LIMB_SIZE;\n+            while (b >= SIGNED_LIMB_SIZE) {\n+                limbs[outpos++] = limb_t(c) & MAX_SIGNED_LIMB;\n+                c >>= SIGNED_LIMB_SIZE;\n+                b -= SIGNED_LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == SIGNED_LIMBS - 1);\n+        limbs[SIGNED_LIMBS - 1] = c;\n+        c >>= SIGNED_LIMB_SIZE;\n+        assert(c == 0);\n+    }\n \n-    for (int i = 0; i < 11; ++i) {\n-        p[i + 1] = p[i];\n-        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n-        p[i + 1].Multiply(p[i]);\n+    /** Convert a Num3072Signed to a Num3072. Input must be in range 0..modulus-1. */\n+    void ToNum3072(Num3072& out) const\n+    {\n+        double_limb_t c = 0;\n+        int b = 0, outpos = 0;\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            c += double_limb_t(limbs[i]) << b;\n+            b += SIGNED_LIMB_SIZE;\n+            if (b >= LIMB_SIZE) {\n+                out.limbs[outpos++] = c;\n+                c >>= LIMB_SIZE;\n+                b -= LIMB_SIZE;\n+            }\n+        }\n+        assert(outpos == LIMBS);\n+        assert(c == 0);\n     }\n \n-    out = p[11];\n-\n-    square_n_mul(out, 512, p[9]);\n-    square_n_mul(out, 256, p[8]);\n-    square_n_mul(out, 128, p[7]);\n-    square_n_mul(out, 64, p[6]);\n-    square_n_mul(out, 32, p[5]);\n-    square_n_mul(out, 8, p[3]);\n-    square_n_mul(out, 2, p[1]);\n-    square_n_mul(out, 1, p[0]);\n-    square_n_mul(out, 5, p[2]);\n-    square_n_mul(out, 3, p[0]);\n-    square_n_mul(out, 2, p[0]);\n-    square_n_mul(out, 4, p[0]);\n-    square_n_mul(out, 4, p[1]);\n-    square_n_mul(out, 3, p[0]);\n+    /** Take a Num3072Signed in range 1-2*2^3072..2^3072-1, and:\n+     *  - optionally negate it (if negate is true)\n+     *  - reduce it modulo the modulus (2^3072 - MAX_PRIME_DIFF)\n+     *  - produce output with all limbs in range 0..2^SIGNED_LIMB_SIZE-1\n+     */\n+    void Normalize(bool negate)\n+    {\n+        // Add modulus if this was negative. This brings the range of *this to 1-2^3072..2^3072-1.\n+        signed_limb_t cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Next negate all limbs if negate was set. This does not change the range of *this.\n+        signed_limb_t cond_negate = -signed_limb_t(negate); // -1 if this negate is true; 0 otherwise\n+        for (int i = 0; i < SIGNED_LIMBS; ++i) {\n+            limbs[i] = (limbs[i] ^ cond_negate) - cond_negate;\n+        }\n+        // Perform carry (make all limbs except the top one be in range 0..2^SIGNED_LIMB_SIZE-1).\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+        // Again add modulus if *this was negative. This brings the range of *this to 0..2^3072-1.\n+        cond_add = limbs[SIGNED_LIMBS-1] >> (LIMB_SIZE-1); // -1 if this is negative; 0 otherwise\n+        limbs[0] += signed_limb_t(-MAX_PRIME_DIFF) & cond_add;\n+        limbs[3072 / SIGNED_LIMB_SIZE] += (signed_limb_t(1) << (3072 % SIGNED_LIMB_SIZE)) & cond_add;\n+        // Perform another carry. Now all limbs are in range 0..2^SIGNED_LIMB_SIZE-1.\n+        for (int i = 0; i < SIGNED_LIMBS - 1; ++i) {\n+            limbs[i + 1] += limbs[i] >> SIGNED_LIMB_SIZE;\n+            limbs[i] &= MAX_SIGNED_LIMB;\n+        }\n+    }\n+};\n \n-    return out;\n+/** 2x2 transformation matrix with signed_limb_t elements. */\n+struct SignedMatrix\n+{\n+    signed_limb_t u, v, q, r;\n+};\n+\n+/** Compute the transformation matrix for SIGNED_LIMB_SIZE divsteps.\n+ *\n+ * eta: initial eta value\n+ * f:   bottom SIGNED_LIMB_SIZE bits of initial f value\n+ * g:   bottom SIGNED_LIMB_SIZE bits of initial g value\n+ * out: resulting transformation matrix, scaled by 2^SIGNED_LIMB_SIZE\n+ * return: eta value after SIGNED_LIMB_SIZE divsteps\n+ */\n+limb_t ComputeDivstepMatrix(signed_limb_t eta, limb_t f, limb_t g, SignedMatrix& out)\n+{\n+    /** inv256[i] = -1/(2*i+1) (mod 256) */\n+    static const uint8_t NEGINV256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+    // Coefficients of returned SignedMatrix; starts off as identity matrix. */\n+    limb_t u = 1, v = 0, q = 0, r = 1;\n+    // The number of divsteps still left.\n+    int i = SIGNED_LIMB_SIZE;\n+    while (true) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        int zeros = std::countr_zero(g | (MAX_LIMB << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've performed SIGNED_LIMB_SIZE divsteps. */\n+        if (i == 0) break;\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            limb_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        int limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        limb_t m = (MAX_LIMB >> (LIMB_SIZE - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        limb_t w = (g * NEGINV256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+    }\n+    out.u = (signed_limb_t)u;\n+    out.v = (signed_limb_t)v;\n+    out.q = (signed_limb_t)q;\n+    out.r = (signed_limb_t)r;\n+    return eta;\n }\n \n-void Num3072::Multiply(const Num3072& a)\n+/** Apply matrix t/2^SIGNED_LIMB_SIZE to vector [d,e], modulo modulus.\n+ *\n+ * On input and output, d and e are in range 1-2*modulus..modulus-1.\n+ */\n+void UpdateDE(Num3072Signed& d, Num3072Signed& e, const SignedMatrix& t)\n {\n-    limb_t c0 = 0, c1 = 0, c2 = 0;\n-    Num3072 tmp;\n-\n-    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n-    for (int j = 0; j < LIMBS - 1; ++j) {\n-        limb_t d0 = 0, d1 = 0, d2 = 0;\n-        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n-        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n-        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n-        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n-        extract3(c0, c1, c2, tmp.limbs[j]);\n+    const signed_limb_t u = t.u, v=t.v, q=t.q, r=t.r;\n+\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    signed_limb_t sd = d.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t se = e.limbs[SIGNED_LIMBS - 1] >> (LIMB_SIZE - 1);\n+    signed_limb_t md = (u & sd) + (v & se);\n+    signed_limb_t me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    signed_limb_t di = d.limbs[0], ei = e.limbs[0];\n+    signed_double_limb_t cd = (signed_double_limb_t)u * di + (signed_double_limb_t)v * ei;\n+    signed_double_limb_t ce = (signed_double_limb_t)q * di + (signed_double_limb_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has SIGNED_LIMB_SIZE zero bottom bits. */\n+    md -= (limb_t(0x70a1421da087d93) * limb_t(cd) + md) & MAX_SIGNED_LIMB;\n+    me -= (limb_t(0x70a1421da087d93) * limb_t(ce) + me) & MAX_SIGNED_LIMB;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd -= (signed_double_limb_t)1103717 * md;\n+    ce -= (signed_double_limb_t)1103717 * me;\n+    /* Verify that the low SIGNED_LIMB_SIZE bits of the computation are indeed zero, and then throw them away. */\n+    assert((cd & MAX_SIGNED_LIMB) == 0);\n+    assert((ce & MAX_SIGNED_LIMB) == 0);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 301,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "ad67fd2e0bfa6f43f350066596b6cca146391362",
      "in_reply_to_id": 1832363289,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I meant these checks:\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/secp256k1/src/modinv32_impl.h#L414-L419\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/secp256k1/src/modinv32_impl.h#L456-L459\r\n\r\nBut I guess they are not really that important and it is not worth adding the required utilities?",
      "created_at": "2025-01-09T20:59:29Z",
      "updated_at": "2025-01-09T20:59:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1909426772",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909426772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1910054910",
      "pull_request_review_id": 2541911255,
      "id": 1910054910,
      "node_id": "PRRC_kwDOABII585x2R_-",
      "diff_hunk": "@@ -397,6 +397,7 @@ target_link_libraries(core_interface INTERFACE warn_interface)\n if(MSVC)\n   try_append_cxx_flags(\"/W3\" TARGET warn_interface SKIP_LINK)\n   try_append_cxx_flags(\"/wd4018\" TARGET warn_interface SKIP_LINK)\n+  try_append_cxx_flags(\"/wd4146\" TARGET warn_interface SKIP_LINK)",
      "path": "CMakeLists.txt",
      "position": 4,
      "original_position": 4,
      "commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "original_commit_id": "f5883286e32b625aab3dd80c74d6adb4f37f0a80",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I suggest to limit the scope of this warning suppression to the `bitcoin_crypto` library only:\r\n```diff\r\ndiff --git a/CMakeLists.txt b/CMakeLists.txt\r\nindex f2a8183c84..2dba6f255d 100644\r\n--- a/CMakeLists.txt\r\n+++ b/CMakeLists.txt\r\n@@ -397,7 +397,6 @@ target_link_libraries(core_interface INTERFACE warn_interface)\r\n if(MSVC)\r\n   try_append_cxx_flags(\"/W3\" TARGET warn_interface SKIP_LINK)\r\n   try_append_cxx_flags(\"/wd4018\" TARGET warn_interface SKIP_LINK)\r\n-  try_append_cxx_flags(\"/wd4146\" TARGET warn_interface SKIP_LINK)\r\n   try_append_cxx_flags(\"/wd4244\" TARGET warn_interface SKIP_LINK)\r\n   try_append_cxx_flags(\"/wd4267\" TARGET warn_interface SKIP_LINK)\r\n   try_append_cxx_flags(\"/wd4715\" TARGET warn_interface SKIP_LINK)\r\ndiff --git a/src/crypto/CMakeLists.txt b/src/crypto/CMakeLists.txt\r\nindex 03c6972dca..4536801450 100644\r\n--- a/src/crypto/CMakeLists.txt\r\n+++ b/src/crypto/CMakeLists.txt\r\n@@ -22,6 +22,11 @@ add_library(bitcoin_crypto STATIC EXCLUDE_FROM_ALL\r\n   ../support/cleanse.cpp\r\n )\r\n \r\n+target_compile_options(bitcoin_crypto\r\n+  PRIVATE\r\n+    $<$<CXX_COMPILER_ID:MSVC>:/wd4146>\r\n+)\r\n+\r\n target_link_libraries(bitcoin_crypto\r\n   PRIVATE\r\n     core_interface\r\n```",
      "created_at": "2025-01-10T09:18:28Z",
      "updated_at": "2025-01-10T09:18:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21590#discussion_r1910054910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1910054910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21590"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 400,
      "original_line": 400,
      "side": "RIGHT"
    }
  ]
}