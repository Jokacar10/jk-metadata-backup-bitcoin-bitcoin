{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451",
    "id": 2507754799,
    "node_id": "PR_kwDOABII586VeU0v",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32451",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32451.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32451.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c2acb6f41d875132128c5af477680ee435195245",
    "number": 32451,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "contrib: add xor-blocks tool to obfuscate blocks directory",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "I wrote a tool in Rust to xor the blocks directory with a random key. It was pointed out to me that there already exists some Rust code in contrib, so this might be a welcome addition to the toolkit here.\r\n\r\nThis lets you obfuscate the blocks blk.dat and rev.dat files if you synced with a version prior to v28.\r\n\r\nIt checks if a `xor.dat` file exists, and if it is zero it overwrites it with a non-zero random key. It then goes through each `*.dat` file in the blocks directory, checking if the first 4 bytes are the magic bytes. If so it reads the whole file into memory, xors all bytes with the key, then writes to a temporary file. It then renames the temporary file to the dat file it xor'd. This lets users safely run this on any blocks directory, as long as they let it completely finish once before starting bitcoind.",
    "labels": [
      {
        "id": 231994551,
        "node_id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Scripts%20and%20tools",
        "name": "Scripts and tools",
        "color": "ffffee",
        "default": false
      }
    ],
    "created_at": "2025-05-08T18:02:59Z",
    "updated_at": "2025-05-27T13:56:09Z",
    "closed_at": "2025-05-27T13:56:09Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "e906a318e6d44cf0497f1142bc234a428d2fb0ac",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "andrewtoth:xor-blocks",
      "ref": "xor-blocks",
      "sha": "c2acb6f41d875132128c5af477680ee435195245",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 156145027,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTYxNDUwMjc=",
        "name": "bitcoin",
        "full_name": "andrewtoth/bitcoin",
        "owner": {
          "login": "andrewtoth",
          "id": 237213,
          "node_id": "MDQ6VXNlcjIzNzIxMw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/andrewtoth",
          "html_url": "https://github.com/andrewtoth",
          "followers_url": "https://api.github.com/users/andrewtoth/followers",
          "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
          "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
          "repos_url": "https://api.github.com/users/andrewtoth/repos",
          "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/andrewtoth/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/andrewtoth/bitcoin",
        "archive_url": "https://api.github.com/repos/andrewtoth/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/andrewtoth/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/andrewtoth/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/andrewtoth/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/andrewtoth/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/andrewtoth/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/andrewtoth/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/andrewtoth/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/andrewtoth/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/andrewtoth/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/andrewtoth/bitcoin/events",
        "forks_url": "https://api.github.com/repos/andrewtoth/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/andrewtoth/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/andrewtoth/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/andrewtoth/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/andrewtoth/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/andrewtoth/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/andrewtoth/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/andrewtoth/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/andrewtoth/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/andrewtoth/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:andrewtoth/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/andrewtoth/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/andrewtoth/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/andrewtoth/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/andrewtoth/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/andrewtoth/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/andrewtoth/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/andrewtoth/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/andrewtoth/bitcoin/hooks",
        "svn_url": "https://github.com/andrewtoth/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 275040,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-25T17:11:41Z",
        "created_at": "2018-11-05T01:43:59Z",
        "updated_at": "2022-12-23T04:16:30Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "638a4c0bd8b53766faeb437244b2aae4eed28dcf",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37265,
        "stargazers_count": 83839,
        "watchers_count": 83839,
        "size": 282959,
        "default_branch": "master",
        "open_issues_count": 741,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-27T13:25:35Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-05-27T13:45:06Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 224,
    "deletions": 0,
    "changed_files": 4,
    "commits": 1,
    "review_comments": 63,
    "comments": 9
  },
  "events": [
    {
      "event": "commented",
      "id": 2863856420,
      "node_id": "IC_kwDOABII586qsvsk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2863856420",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-08T18:03:03Z",
      "updated_at": "2025-05-11T22:03:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32451.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [1440000bytes](https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2870224955) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2863856420",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "labeled",
      "id": 17578358601,
      "node_id": "LE_lADOABII5861xxfUzwAAAAQXwHdJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17578358601",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-08T18:03:25Z",
      "label": {
        "name": "Scripts and tools",
        "color": "ffffee"
      }
    },
    {
      "event": "comment_deleted",
      "id": 17579200467,
      "node_id": "CDE_lADOABII5861xxfUzwAAAAQXzU_T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17579200467",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-08T19:08:09Z"
    },
    {
      "event": "reviewed",
      "id": 2826259549,
      "node_id": "PRR_kwDOABII586odUxd",
      "url": null,
      "actor": null,
      "commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#pullrequestreview-2826259549",
      "submitted_at": "2025-05-08T20:12:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
    },
    {
      "event": "commented",
      "id": 2865986579,
      "node_id": "IC_kwDOABII586q03wT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2865986579",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-09T10:14:24Z",
      "updated_at": "2025-05-09T10:14:24Z",
      "author_association": "MEMBER",
      "body": "> as long as they let it completely finish once before starting bitcoind\r\n\r\nThat seems likely to cause issues. It seems better if we track the height at which xor starts. A script could then work backwards and lower the height. And in that case it might as well be an RPC command.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2865986579",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "commented",
      "id": 2866068613,
      "node_id": "IC_kwDOABII586q1LyF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2866068613",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-09T10:40:07Z",
      "updated_at": "2025-05-09T10:41:53Z",
      "author_association": "MEMBER",
      "body": ">  It seems better if we track the height at which xor starts\r\n\r\ni really like this idea. \"Start XORing from now on\" as a default would be enough to prevent new problems, and potentially there could be a background process that updates historical blocks (which would be way less performance critical as no one is waiting for it).\r\n\r\nThat said it's more complicated and more error-prone, i understand why the decision was made to do all or nothing.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2866068613",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "reviewed",
      "id": 2830996924,
      "node_id": "PRR_kwDOABII586ovZW8",
      "url": null,
      "actor": null,
      "commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This is a great tool, thanks for implementing it!\r\n\r\nConsider obtaining the `.lock` file in the data directory in the same way `bitcoind` does. This will prevent `bitcoind` from starting if this tool is running, and vice versa.\r\n\r\nJust to illustrate, if I try to start a second `bitcoind`, I get this error, so maybe do the same thing here. \r\n```\r\n$ bitcoind\r\nError: Cannot obtain a lock on directory /home/larry/.bitcoin. Bitcoin Core is probably already running.\r\n```",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#pullrequestreview-2830996924",
      "submitted_at": "2025-05-10T17:24:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
    },
    {
      "event": "commented",
      "id": 2869044934,
      "node_id": "IC_kwDOABII586rAibG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2869044934",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-10T17:35:16Z",
      "updated_at": "2025-05-10T17:38:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > as long as they let it completely finish once before starting bitcoind\r\n> \r\n> That seems likely to cause issues. It seems better if we track the height at which xor starts. A script could then work backwards and lower the height. And in that case it might as well be an RPC command.\r\n\r\nI have an idea for a follow-up PR (haven't started implementing yet) which would cause `bitcoind` to, upon opening a block file, look at the first 4 bytes, and if it's MAGIC, then don't xor anything while reading or writing to that file. But if xor-ing with `xor.dat` yields MAGIC, then do the xor when reading or writing the file. That is, make the xor per-file. Since this PR makes each file update atomic (by writing to a temp file then doing a rename, rather than rewriting the file in-place), each file will either be fully xored or not. So I think that would work.\r\n\r\nThat way, one could start this `xor-blocks` tool, interrupt it at any time (for example, suppose you unexpectedly need to use the node immediately), and safely start bitcoind. Later, you can shut down `bitcoind` and restart `xor-blocks` and let it finish. It wouldn't even have to depend on converting the blocks files in order, nor keep track of that separate state (height or block file number), which seems more robust.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2869044934",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "commented",
      "id": 2870224955,
      "node_id": "IC_kwDOABII586rFCg7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2870224955",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-11T22:03:38Z",
      "updated_at": "2025-05-11T22:03:38Z",
      "author_association": "NONE",
      "body": "Concept ACK \r\n\r\nCould be a useful tool for paranoid users who can run this tool.\r\n\r\nIs it possible to add this feature in bitcoin core itself?",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2870224955",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "reviewed",
      "id": 2834777573,
      "node_id": "PRR_kwDOABII586o90Xl",
      "url": null,
      "actor": null,
      "commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#pullrequestreview-2834777573",
      "submitted_at": "2025-05-12T22:57:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
    },
    {
      "event": "reviewed",
      "id": 2835753705,
      "node_id": "PRR_kwDOABII586pBirp",
      "url": null,
      "actor": null,
      "commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I wonder if `-reindex` could be taught to do this instead. This may be simpler for users to set. Also, it will be atomic, safe and interruptible. However, it will eat more CPU and thus take a longer time. I'd say this is probably fine, because the only users will be one-time users that have an old leftover datadir. The benefit on top would be that anyone doing a reindex for other reasons, likely will get an obfuscation \"for free\".",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#pullrequestreview-2835753705",
      "submitted_at": "2025-05-13T08:25:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
    },
    {
      "event": "reviewed",
      "id": 2836390436,
      "node_id": "PRR_kwDOABII586pD-Ik",
      "url": null,
      "actor": null,
      "commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#pullrequestreview-2836390436",
      "submitted_at": "2025-05-13T11:53:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
    },
    {
      "event": "reviewed",
      "id": 2837529358,
      "node_id": "PRR_kwDOABII586pIUMO",
      "url": null,
      "actor": null,
      "commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#pullrequestreview-2837529358",
      "submitted_at": "2025-05-13T17:04:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17700573786,
      "node_id": "HRFPE_lADOABII5861xxfUzwAAAAQfCVJa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700573786",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b45ace74623f299114a2c554f57375bf34bbb0ef",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/b45ace74623f299114a2c554f57375bf34bbb0ef",
      "created_at": "2025-05-17T22:45:49Z"
    },
    {
      "event": "commented",
      "id": 2888622694,
      "node_id": "IC_kwDOABII586sLOJm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2888622694",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:43Z",
      "updated_at": "2025-05-18T14:56:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you @l0rinc @Sjors @laanwj @LarryRuane @1440000bytes @Kixunil @maflcko  @yancyribbens for your reviews and suggestions!\r\n\r\nThe latest version changes the following:\r\n- data is XOR'd 16 bytes at a time using the doubled key as a `u128`. This is done using pointer casting and unsafe dereferencing, so we don't have to copy the data back and forth when converting `[u8; 16]` to `u128`.\r\n- A custom datadir option is now passed as `-datadir=`, similar to `bitcoind`.\r\n- Files are read 16 bytes at a time and the bytes are written to a temporary file immediately after XORing. This substantially reduces memory usage.\r\n- `File::sync_data()` is called before renaming to make the writing atomic.\r\n- The `xor.dat` key file is only written when overwriting a zero key, not every time the program is run. `File::sync_data()` is also called after writing.\r\n- The `rand` crate has been removed in favor of `std::hash::RandomState`. This removes all dependencies from `Cargo.toml`.\r\n- Errors are returned in appropriate places where success was returned previously.\r\n- Various other improvements to syntax.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2888622694",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "mentioned",
      "id": 17700591594,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCZfq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591594",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:44Z"
    },
    {
      "event": "subscribed",
      "id": 17700591597,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCZft",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591597",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:44Z"
    },
    {
      "event": "mentioned",
      "id": 17700591602,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCZfy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591602",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "subscribed",
      "id": 17700591605,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCZf1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591605",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "mentioned",
      "id": 17700591607,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCZf3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591607",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "subscribed",
      "id": 17700591611,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCZf7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591611",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "mentioned",
      "id": 17700591614,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCZf-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591614",
      "actor": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "subscribed",
      "id": 17700591618,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCZgC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591618",
      "actor": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "mentioned",
      "id": 17700591626,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCZgK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591626",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "subscribed",
      "id": 17700591636,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCZgU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591636",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "mentioned",
      "id": 17700591643,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCZgb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591643",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "subscribed",
      "id": 17700591647,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCZgf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591647",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "mentioned",
      "id": 17700591655,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCZgn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591655",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "subscribed",
      "id": 17700591662,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCZgu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591662",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "mentioned",
      "id": 17700591667,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCZgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591667",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:45Z"
    },
    {
      "event": "subscribed",
      "id": 17700591673,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCZg5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700591673",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T22:55:46Z"
    },
    {
      "event": "commented",
      "id": 2888632586,
      "node_id": "IC_kwDOABII586sLQkK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2888632586",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:16:58Z",
      "updated_at": "2025-05-17T23:16:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Consider obtaining the .lock file in the data directory in the same way bitcoind does. This will prevent bitcoind from starting if this tool is running, and vice versa.\r\n\r\n@LarryRuane great suggestion. Unfortunately file locking is still experimental in Rust (?), so users would have to run nightly to be able to run the program. I think we should wait until it's stabilized instead of pulling in third party deps to do the locking.\r\n\r\n> It seems better if we track the height at which xor starts\r\n\r\n> i really like this idea. \"Start XORing from now on\" as a default would be enough to prevent new problems, and potentially there could be a background process that updates historical blocks (which would be way less performance critical as no one is waiting for it).\r\n\r\n> That said it's more complicated and more error-prone, i understand why the decision was made to do all or nothing.\r\n\r\n@Sjors @laanwj There are many edge cases to track here. If you had to service an RPC or p2p request for a block from a pre-xor'd file, you'd have to switch on the fly to xoring vs not. Similar if you got reorged from a block in an xor'd file to not. If you requested a pruned block from a peer and now store it in a newly xor'd file.\r\n\r\nI think all or nothing is a more sane approach for something that should only be a temporary solution (ideally everyone resyncs at some point).\r\n\r\n> Is it possible to add this feature in bitcoin core itself?\r\n\r\n@1440000bytes Yes, I suppose it's possible. It would be similar to how the UTXO db was migrated from per-tx values to per-output. It was a 10 minute or so migration when the UTXO set was much smaller. This tool unfortunately will take a while longer (20 minutes or so on my NVME, many hours for spinning disk drives).\r\n\r\n> I wonder if -reindex could be taught to do this instead.\r\n\r\n@maflcko That would be convenient, but a reindex is a much longer task than this tool. So I don't think \"instead\", but rather \"also\".",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2888632586",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "mentioned",
      "id": 17700636993,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCklB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700636993",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:00Z"
    },
    {
      "event": "subscribed",
      "id": 17700636998,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCklG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700636998",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:00Z"
    },
    {
      "event": "mentioned",
      "id": 17700637002,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCklK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700637002",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:00Z"
    },
    {
      "event": "subscribed",
      "id": 17700637006,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCklO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700637006",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:00Z"
    },
    {
      "event": "mentioned",
      "id": 17700637010,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCklS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700637010",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:00Z"
    },
    {
      "event": "subscribed",
      "id": 17700637014,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCklW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700637014",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:00Z"
    },
    {
      "event": "mentioned",
      "id": 17700637017,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCklZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700637017",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:01Z"
    },
    {
      "event": "subscribed",
      "id": 17700637020,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCklc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700637020",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:01Z"
    },
    {
      "event": "mentioned",
      "id": 17700637023,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQfCklf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700637023",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:01Z"
    },
    {
      "event": "subscribed",
      "id": 17700637024,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQfCklg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700637024",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T23:17:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17700721904,
      "node_id": "HRFPE_lADOABII5861xxfUzwAAAAQfC5Tw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17700721904",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "133846305ba9c72d3580528d574940fb33e8e81e",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/133846305ba9c72d3580528d574940fb33e8e81e",
      "created_at": "2025-05-17T23:58:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17703658602,
      "node_id": "HRFPE_lADOABII5861xxfUzwAAAAQfOGRq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17703658602",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a7deddb6963bd4ddcb0c21200cdc1e7da1955cb5",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/a7deddb6963bd4ddcb0c21200cdc1e7da1955cb5",
      "created_at": "2025-05-18T14:53:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17703669233,
      "node_id": "HRFPE_lADOABII5861xxfUzwAAAAQfOI3x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17703669233",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "15aeb390b80878f5b59c78340940dd36cef1bdc5",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/15aeb390b80878f5b59c78340940dd36cef1bdc5",
      "created_at": "2025-05-18T14:56:29Z"
    },
    {
      "event": "reviewed",
      "id": 2849014393,
      "node_id": "PRR_kwDOABII586p0IJ5",
      "url": null,
      "actor": null,
      "commit_id": "15aeb390b80878f5b59c78340940dd36cef1bdc5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#pullrequestreview-2849014393",
      "submitted_at": "2025-05-18T15:04:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17703896136,
      "node_id": "HRFPE_lADOABII5861xxfUzwAAAAQfPARI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17703896136",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7d0a90a39bd454776a2b91b51c52241032ee8161",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/7d0a90a39bd454776a2b91b51c52241032ee8161",
      "created_at": "2025-05-18T16:16:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17703988321,
      "node_id": "HRFPE_lADOABII5861xxfUzwAAAAQfPWxh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17703988321",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0c23055d77a55c3bb37e83259c9aab8ffe5132fd",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/0c23055d77a55c3bb37e83259c9aab8ffe5132fd",
      "created_at": "2025-05-18T16:54:25Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMyYWNiNmY0MWQ4NzUxMzIxMjhjNWFmNDc3NjgwZWU0MzUxOTUyNDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2acb6f41d875132128c5af477680ee435195245",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c2acb6f41d875132128c5af477680ee435195245",
      "tree": {
        "sha": "4dc1cd1a7a54b69c1e40b864e84a2d36fb2fee5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dc1cd1a7a54b69c1e40b864e84a2d36fb2fee5c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4dc1cd1a7a54b69c1e40b864e84a2d36fb2fee5c\nparent 1b4ddb0c2d106605b731211d71f8cfe00f56596a\nauthor Andrew Toth <andrewstoth@gmail.com> 1746726784 -0400\ncommitter Andrew Toth <andrewstoth@gmail.com> 1748193097 -0400\n\ncontrib: add xor-blocks tool to obfuscate blocks directory\n\nCo-Authored-By: Larry Ruane <larryruane@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmgzT0oACgkQYAB6/Ik4\nsBh+Ig//Wb491R74khHdcHU4+qhj14UiY2QW12eYhzIj3i97JMwUphOiM2do6vjZ\nUcPLkGfG6YP5cDqf/xBCb8mLA6DkPD0PlRPyLbc5SoMFtkCkBXeDVkZ8MzVBDwOy\nF3fmlMLrfgf9K0IQFyBxWMyps/gnBQyS84e4ou/zCTjk3aFEXodNG1HNf4SZ7myV\nhwebtFyg4NAP9BAKUWLnU8YzhW/sjkyIxyvxce+dZ2MUGew+5k0pdohhU9Wips+d\nIFQOc4XvbiiPEtz4EzotXVjIL5EokFvetNYAPJ1Rw7n5q2lXON3PmcKhfMxQAOvf\nDg6RVCaGh4guWsEhXEI9kJCsT7HFQzwIEjOD3meIG7kaZ/vpDjfZAfkhSpB50LYf\nWHipIzyldeb9032lh7XnK8GTjL6hMpHskxJ+SRY6ALllksAZNKRVWmjWLiQXPF5k\nGz6yZf5yp1ZOL+hL0MwZfMckzeFOczlnZUo5teJzKX/RdxndCAimsHPiborpdB7d\naAki56ye8AtIjeJBzQ/WuMRmEN4YqBNn0WB18nYcIO7dLgAE+RdxPtTEKPZjQwYC\neSmrQcf5qfDPxyKE+6gVase46jU3aV0zDy2P6dWCkLbLkq9hKiBwArxa7xi0Q/qE\nAjZaKBUtR37K3VddLG56FqgDbp+pLH8g/OIXLUSpwWDbzaNeFks=\n=xk5y\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b4ddb0c2d106605b731211d71f8cfe00f56596a",
          "sha": "1b4ddb0c2d106605b731211d71f8cfe00f56596a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1b4ddb0c2d106605b731211d71f8cfe00f56596a"
        }
      ],
      "message": "contrib: add xor-blocks tool to obfuscate blocks directory\n\nCo-Authored-By: Larry Ruane <larryruane@gmail.com>",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-05-25T17:11:37Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-05-08T17:53:04Z"
      },
      "sha": "c2acb6f41d875132128c5af477680ee435195245"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17804969858,
      "node_id": "HRFPE_lADOABII5861xxfUzwAAAAQlQkeC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17804969858",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/c2acb6f41d875132128c5af477680ee435195245",
      "created_at": "2025-05-25T17:11:42Z"
    },
    {
      "event": "reviewed",
      "id": 2870286845,
      "node_id": "PRR_kwDOABII586rFRn9",
      "url": null,
      "actor": null,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Sadly, this new implementation is quite broken in multiple ways.",
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#pullrequestreview-2870286845",
      "submitted_at": "2025-05-27T09:52:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
    },
    {
      "event": "commented",
      "id": 2911912752,
      "node_id": "IC_kwDOABII586tkEMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2911912752",
      "actor": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-27T09:54:56Z",
      "updated_at": "2025-05-27T09:54:56Z",
      "author_association": "NONE",
      "body": "> Unfortunately file locking is still experimental in Rust (?), so users would have to run nightly to be able to run the program. I think we should wait until it's stabilized instead of pulling in third party deps to do the locking.\r\n\r\nYou can just define `extern \"C\" {}` functions to call them the same way bitcoind does. It might even be the more correct approach anyway because there are three (!!!) kinds of locks on Unix and you must not mix them, and if Rust uses the same as bitcoind that's just luck.",
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2911912752",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "commented",
      "id": 2912031083,
      "node_id": "IC_kwDOABII586tkhFr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2912031083",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-27T10:37:50Z",
      "updated_at": "2025-05-27T10:37:50Z",
      "author_association": "MEMBER",
      "body": "> > I wonder if -reindex could be taught to do this instead.\r\n> \r\n> @maflcko That would be convenient, but a reindex is a much longer task than this tool. So I don't think \"instead\", but rather \"also\".\r\n\r\nMaybe just from a code-review/maintenance perspective this is preferable, given that the feature implemented here is quite tricky to get right for all edge cases by (re-)implementing the C++ logic.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#issuecomment-2912031083",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32451"
    },
    {
      "event": "mentioned",
      "id": 17827876691,
      "node_id": "MEE_lADOABII5861xxfUzwAAAAQmn89T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17827876691",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-27T10:37:51Z"
    },
    {
      "event": "subscribed",
      "id": 17827876707,
      "node_id": "SE_lADOABII5861xxfUzwAAAAQmn89j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17827876707",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-27T10:37:51Z"
    },
    {
      "event": "closed",
      "id": 17831299568,
      "node_id": "CE_lADOABII5861xxfUzwAAAAQm1Anw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17831299568",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-27T13:56:09Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2080400271",
      "pull_request_review_id": 2826259549,
      "id": 2080400271,
      "node_id": "PRRC_kwDOABII5858AGOP",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;\n+    block\n+        .iter_mut()\n+        .enumerate()\n+        .for_each(|(i, b)| *b ^= key[i % key.len()]);",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 122,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To speed this up significantly, we could probably process the data in 8 byte chunks, cast it to 64 bits, xor it with a 64 bit key and do the last bytes (if any) byte-by-byte against the current vector key - similarly to https://github.com/bitcoin/bitcoin/pull/31144",
      "created_at": "2025-05-08T20:12:51Z",
      "updated_at": "2025-05-08T20:12:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2080400271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2080400271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2083250679",
      "pull_request_review_id": 2830996924,
      "id": 2083250679,
      "node_id": "PRRC_kwDOABII5858K-H3",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 14,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consider accepting this argument in the same way it's specified with `bitcoind` and `bitcoin-cli`, that is, `-datadir=<dir>`. Besides being consistent with these existing executables, it would also be cleaner if more arguments were added in the future (because the data directory wouldn't be specified in a different way from other arguments).",
      "created_at": "2025-05-10T17:14:36Z",
      "updated_at": "2025-05-10T17:24:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2083250679",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2083250679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085631953",
      "pull_request_review_id": 2834777573,
      "id": 2085631953,
      "node_id": "PRRC_kwDOABII5858UDfR",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 14,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2083250679,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sadly, that's not really that easy because of damn Windows non-compliant UTF-16. I wrote a crate for it called `parse_arg` but it's soft-deprecated there. Feel free to copy-paste or just depdend on it. Maybe I'll end up putting it into another dedicated crate.\r\n\r\nBut what I'd like to see here is having proper usage page if no arguments are provided. `clap` or `configure_me` can do that but for a simple tool a bit of manual code is likely fine.",
      "created_at": "2025-05-12T22:39:50Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085631953",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085631953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085633049",
      "pull_request_review_id": 2834777573,
      "id": 2085633049,
      "node_id": "PRRC_kwDOABII5858UDwZ",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 60,
      "original_position": 16,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Have you tested that this picks the right one on Windows? That may be a good reason for the attribute.",
      "created_at": "2025-05-12T22:41:16Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085633049",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085633049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085633551",
      "pull_request_review_id": 2834777573,
      "id": 2085633551,
      "node_id": "PRRC_kwDOABII5858UD4P",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 25,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is an error and should return non-zero exit code.",
      "created_at": "2025-05-12T22:41:54Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085633551",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085633551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085634531",
      "pull_request_review_id": 2834777573,
      "id": 2085634531,
      "node_id": "PRRC_kwDOABII5858UEHj",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 36,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This function is really bad and should've been deprecated, you should use `try_exists` instead.\r\n\r\nBut also, why do this extra check? Just `read` already does the same thing with less code and less problems.",
      "created_at": "2025-05-12T22:43:17Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085634531",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085634531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085637066",
      "pull_request_review_id": 2834777573,
      "id": 2085637066,
      "node_id": "PRRC_kwDOABII5858UEvK",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 98,
      "original_position": 54,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why though? After \"unxoring\" the magic bytes just will be the same. Anyway, might still be a good idea to mask it better.",
      "created_at": "2025-05-12T22:46:33Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085637066",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085637066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085638116",
      "pull_request_review_id": 2834777573,
      "id": 2085638116,
      "node_id": "PRRC_kwDOABII5858UE_k",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 64,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "BTW, this is not atomic. Does it matter? I don't really know. Ideally the tool could continue if it fails but that's not easy.\r\nStill, at least making sure this one doesn't get corrupted may be important?",
      "created_at": "2025-05-12T22:48:01Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085638116",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085638116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085638849",
      "pull_request_review_id": 2834777573,
      "id": 2085638849,
      "node_id": "PRRC_kwDOABII5858UFLB",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 77,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why not `path.display()`?",
      "created_at": "2025-05-12T22:49:06Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085638849",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085638849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085640823",
      "pull_request_review_id": 2834777573,
      "id": 2085640823,
      "node_id": "PRRC_kwDOABII5858UFp3",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 112,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why not reuse the file handle later and perhaps take advantage of `BufReader`?",
      "created_at": "2025-05-12T22:51:50Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085640823",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085640823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085643521",
      "pull_request_review_id": 2834777573,
      "id": 2085643521,
      "node_id": "PRRC_kwDOABII5858UGUB",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 118,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This loads the entire block file into memory. I'm not sure if such memory usage is desirable.",
      "created_at": "2025-05-12T22:55:38Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085643521",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085643521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085644155",
      "pull_request_review_id": 2834777573,
      "id": 2085644155,
      "node_id": "PRRC_kwDOABII5858UGd7",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;\n+    block\n+        .iter_mut()\n+        .enumerate()\n+        .for_each(|(i, b)| *b ^= key[i % key.len()]);",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 122,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2080400271,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, Rust even has `chunks_exact` method for this (and the rest can be xored after the loop). It should also auto-vectorize.",
      "created_at": "2025-05-12T22:56:24Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085644155",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085644155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085644865",
      "pull_request_review_id": 2834777573,
      "id": 2085644865,
      "node_id": "PRRC_kwDOABII5858UGpB",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;\n+    block\n+        .iter_mut()\n+        .enumerate()\n+        .for_each(|(i, b)| *b ^= key[i % key.len()]);\n+\n+    let mut tmp_path = path.as_os_str().to_owned();\n+    tmp_path.push(\".tmp\");\n+    fs::write(&tmp_path, block)?;\n+    fs::rename(&tmp_path, path)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 190,
      "original_position": 127,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Cool, this is almost atomic. I say almost because you're not calling `sync_data` (because you're not using file handle - I think you should).",
      "created_at": "2025-05-12T22:57:19Z",
      "updated_at": "2025-05-12T22:57:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2085644865",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085644865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086226509",
      "pull_request_review_id": 2835753705,
      "id": 2086226509,
      "node_id": "PRRC_kwDOABII5858WUpN",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 52,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "too bad simply getting a few bytes of os rand  is still experimental and only in rust nightly. Maybe using the `getrandom` crate directly can cut down the dependencies?",
      "created_at": "2025-05-13T08:21:24Z",
      "updated_at": "2025-05-13T08:25:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086226509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086226509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086608673",
      "pull_request_review_id": 2836390436,
      "id": 2086608673,
      "node_id": "PRRC_kwDOABII5858Xx8h",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 41,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "xor is an implementation detail - we could make it slightly more user friendly and call it obfuscation instead",
      "created_at": "2025-05-13T11:37:13Z",
      "updated_at": "2025-05-13T11:54:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086608673",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086608673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086624487",
      "pull_request_review_id": 2836390436,
      "id": 2086624487,
      "node_id": "PRRC_kwDOABII5858X1zn",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;\n+    block\n+        .iter_mut()",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 120,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would it help if we used `.par_iter()` here instead (not sure if that would require adding a new lib or not, but seems like a naturally parallelizable task)?",
      "created_at": "2025-05-13T11:45:29Z",
      "updated_at": "2025-05-13T11:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086624487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086624487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086626017",
      "pull_request_review_id": 2836390436,
      "id": 2086626017,
      "node_id": "PRRC_kwDOABII5858X2Lh",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 118,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085643521,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're regularly loading blocks into memory - if we want any performance out of this, we definitely want that in my experience",
      "created_at": "2025-05-13T11:46:21Z",
      "updated_at": "2025-05-13T11:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086626017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086626017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086632854",
      "pull_request_review_id": 2836390436,
      "id": 2086632854,
      "node_id": "PRRC_kwDOABII5858X32W",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 98,
      "original_position": 54,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085637066,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we would reapply the xor on restart in that case, since we wouldn't detect that we've processed it already.\r\n\r\nAlternatively we could keep a counter of processed blocks - modify the `xor.dat` to make sure we can't start `bitcoind` (or @LarryRuane's lock would probably also do the same) and add a height of how many blocks we've processed so far (though that would make parallelization more difficult). When we're done we'd restore the `xor.dat` file (which we have to modify anyway if we're xor-ing)",
      "created_at": "2025-05-13T11:50:26Z",
      "updated_at": "2025-05-13T11:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086632854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086632854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086650095",
      "pull_request_review_id": 2836474801,
      "id": 2086650095,
      "node_id": "PRRC_kwDOABII5858X8Dv",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 52,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2086226509,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh, it's actually very easy to get 8B of non-secure entropy and this is sufficient for masking: `std::hash::DefaultHasher::new().finish().to_ne_bytes()` So it can cut the dependency entirely.",
      "created_at": "2025-05-13T12:00:00Z",
      "updated_at": "2025-05-13T12:00:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086650095",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086650095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086653142",
      "pull_request_review_id": 2836479537,
      "id": 2086653142,
      "node_id": "PRRC_kwDOABII5858X8zW",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;\n+    block\n+        .iter_mut()",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 120,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2086624487,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Requires the `rayon` dependency. But I strongly suspect the entire thing is bottlenecked on IO.",
      "created_at": "2025-05-13T12:01:47Z",
      "updated_at": "2025-05-13T12:01:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086653142",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086653142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086658185",
      "pull_request_review_id": 2836487649,
      "id": 2086658185,
      "node_id": "PRRC_kwDOABII5858X-CJ",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 98,
      "original_position": 54,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085637066,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh, I see, that's clever! But then yes, this code tries to be atomic but it isn't because it doesn't call `sync_data`.",
      "created_at": "2025-05-13T12:04:13Z",
      "updated_at": "2025-05-13T12:04:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086658185",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086658185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086662922",
      "pull_request_review_id": 2836495363,
      "id": 2086662922,
      "node_id": "PRRC_kwDOABII5858X_MK",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 118,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085643521,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could also do it with like 4096B blocks at the time. I don't see how it would be slower since that's what `read` has to do anyway. (Though perhaps using `BufReader` would be better.)",
      "created_at": "2025-05-13T12:06:58Z",
      "updated_at": "2025-05-13T12:06:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086662922",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086662922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086955469",
      "pull_request_review_id": 2836997154,
      "id": 2086955469,
      "node_id": "PRRC_kwDOABII5858ZGnN",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 52,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2086226509,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> std::hash::DefaultHasher::new().finish()\r\n\r\nPretty sure this returns a constant. Maybe you wanted to say `std::hash::RandomState::new().build_hasher().finish()`?",
      "created_at": "2025-05-13T14:21:45Z",
      "updated_at": "2025-05-13T14:21:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2086955469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086955469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087278600",
      "pull_request_review_id": 2837529358,
      "id": 2087278600,
      "node_id": "PRRC_kwDOABII5858aVgI",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 38,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": null,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This should also return a non-zero exit code and error.",
      "created_at": "2025-05-13T17:04:11Z",
      "updated_at": "2025-05-13T17:04:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2087278600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087278600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087588925",
      "pull_request_review_id": 2838054511,
      "id": 2087588925,
      "node_id": "PRRC_kwDOABII5858bhQ9",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 52,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2086226509,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As I understand it it returns different values across restarts (which suffices here) but I may be wrong. The doc is confusing. Anyway, your solution doesn't hurt.",
      "created_at": "2025-05-13T20:33:42Z",
      "updated_at": "2025-05-13T20:34:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2087588925",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087588925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087661003",
      "pull_request_review_id": 2838173451,
      "id": 2087661003,
      "node_id": "PRRC_kwDOABII5858by3L",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 52,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2086226509,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The source says that this is a constant: https://doc.rust-lang.org/src/std/hash/random.rs.html#109-111\r\n\r\n```\r\n    pub fn new() -> DefaultHasher {\r\n\r\n        DefaultHasher(SipHasher13::new_with_keys(0, 0))\r\n\r\n    }\r\n```\r\n\r\nwhereas the one using RandomState uses `hashmap_random_keys`",
      "created_at": "2025-05-13T21:27:57Z",
      "updated_at": "2025-05-13T21:27:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2087661003",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087661003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087666516",
      "pull_request_review_id": 2838182169,
      "id": 2087666516,
      "node_id": "PRRC_kwDOABII5858b0NU",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 52,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2086226509,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "OK then, `RandomState` is definitely needed.",
      "created_at": "2025-05-13T21:31:52Z",
      "updated_at": "2025-05-13T21:31:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2087666516",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087666516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094230217",
      "pull_request_review_id": 2848436383,
      "id": 2094230217,
      "node_id": "PRRC_kwDOABII585802rJ",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 38,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2087278600,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-17T22:56:01Z",
      "updated_at": "2025-05-17T22:56:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094230217",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094230217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094230354",
      "pull_request_review_id": 2848437119,
      "id": 2094230354,
      "node_id": "PRRC_kwDOABII585802tS",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 41,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2086608673,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Replaced all logs of xor with obfuscation.",
      "created_at": "2025-05-17T22:56:39Z",
      "updated_at": "2025-05-17T22:56:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094230354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094230354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094231982",
      "pull_request_review_id": 2848441040,
      "id": 2094231982,
      "node_id": "PRRC_kwDOABII585803Gu",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 52,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2086226509,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-17T22:57:33Z",
      "updated_at": "2025-05-17T22:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094231982",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094231982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232317",
      "pull_request_review_id": 2848442007,
      "id": 2094232317,
      "node_id": "PRRC_kwDOABII585803L9",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;\n+    block\n+        .iter_mut()\n+        .enumerate()\n+        .for_each(|(i, b)| *b ^= key[i % key.len()]);\n+\n+    let mut tmp_path = path.as_os_str().to_owned();\n+    tmp_path.push(\".tmp\");\n+    fs::write(&tmp_path, block)?;\n+    fs::rename(&tmp_path, path)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 190,
      "original_position": 127,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085644865,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I use `BufWriter` now and call `flush`. That should call `sync_data` under the hood I presume?",
      "created_at": "2025-05-17T22:58:00Z",
      "updated_at": "2025-05-17T22:58:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094232317",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232454",
      "pull_request_review_id": 2848442232,
      "id": 2094232454,
      "node_id": "PRRC_kwDOABII585803OG",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 118,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085643521,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. I use `BufReader` and read 16 bytes at a time. Memory usage is much lower. Speed doesn't seem to be impacted.",
      "created_at": "2025-05-17T22:59:32Z",
      "updated_at": "2025-05-17T22:59:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094232454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232466",
      "pull_request_review_id": 2848442250,
      "id": 2094232466,
      "node_id": "PRRC_kwDOABII585803OS",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 112,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085640823,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-17T22:59:40Z",
      "updated_at": "2025-05-17T22:59:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094232466",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232479",
      "pull_request_review_id": 2848442265,
      "id": 2094232479,
      "node_id": "PRRC_kwDOABII585803Of",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 77,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085638849,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-17T22:59:52Z",
      "updated_at": "2025-05-17T22:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094232479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232512",
      "pull_request_review_id": 2848442335,
      "id": 2094232512,
      "node_id": "PRRC_kwDOABII585803PA",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 64,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085638116,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed, we don't overwrite the key now if we didn't create a new one. We also call `sync_data` after writing the new random one.",
      "created_at": "2025-05-17T23:00:25Z",
      "updated_at": "2025-05-17T23:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094232512",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232615",
      "pull_request_review_id": 2848442456,
      "id": 2094232615,
      "node_id": "PRRC_kwDOABII585803Qn",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 36,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085634531,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. We just use `read` now.",
      "created_at": "2025-05-17T23:01:21Z",
      "updated_at": "2025-05-17T23:01:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094232615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232624",
      "pull_request_review_id": 2848442471,
      "id": 2094232624,
      "node_id": "PRRC_kwDOABII585803Qw",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 25,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085633551,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-17T23:01:28Z",
      "updated_at": "2025-05-17T23:01:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094232624",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094232624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094235373",
      "pull_request_review_id": 2848447025,
      "id": 2094235373,
      "node_id": "PRRC_kwDOABII5858037t",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 60,
      "original_position": 16,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085633049,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have unfortunately not tested on Windows. If anyone could test I would be grateful. If this is the wrong home dir though then a user can just specify it manually using the `-datadir=` option.\r\n\r\nIt seems this function will be undeprecated in a future release https://github.com/rust-lang/rust/issues/132650.",
      "created_at": "2025-05-17T23:03:57Z",
      "updated_at": "2025-05-17T23:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094235373",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094235373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094235788",
      "pull_request_review_id": 2848448606,
      "id": 2094235788,
      "node_id": "PRRC_kwDOABII585804CM",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 14,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2083250679,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added checking for `-datadir=` and `--datadir=`, but not `datadir=` or `---datadir=`. Just like `bitcoind` :).\r\n\r\n> I'd like to see here is having proper usage page if no arguments are provided\r\n\r\nIf no args are provided, it just picks up the default datadir. IMO that's the best behavior. If you give more than 1 arg it prints out a usage instruction as an error.\r\nIs that what you had in mind?",
      "created_at": "2025-05-17T23:05:53Z",
      "updated_at": "2025-05-17T23:05:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094235788",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094235788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094235834",
      "pull_request_review_id": 2848448684,
      "id": 2094235834,
      "node_id": "PRRC_kwDOABII585804C6",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;\n+    block\n+        .iter_mut()\n+        .enumerate()\n+        .for_each(|(i, b)| *b ^= key[i % key.len()]);",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 122,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2080400271,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. I went one further and use Rust's `u128`, so we double the key and xor 16 bytes at a time.",
      "created_at": "2025-05-17T23:06:27Z",
      "updated_at": "2025-05-17T23:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094235834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094235834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094547839",
      "pull_request_review_id": 2849011587,
      "id": 2094547839,
      "node_id": "PRRC_kwDOABII58582EN_",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    println!(\"Unknown OS\");\n+                    return Ok(());\n+                }\n+            })\n+            .join(\"blocks\")\n+    };\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let xor_path: std::path::PathBuf = blocks_path.join(\"xor.dat\");\n+    if !fs::exists(&xor_path)? {\n+        println!(\"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\");\n+        return Ok(());\n+    }\n+\n+    println!(\"Xor'ing blocks dir. Do not start bitcoind until finished!\");\n+\n+    let key: [u8; 8] = fs::read(&xor_path)?\n+        .try_into()\n+        .expect(\"xor.dat to be 8 bytes\");\n+    if key[0..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        println!(\"This script doesn't work with a non-zero key with 4 bytes of leading zeros\");\n+        return Ok(());\n+    }\n+    let key = if key == [0u8; 8] {\n+        loop {\n+            let key: [u8; 8] = rand::random();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[0..4] == [0u8; 4] {\n+                continue;\n+            }\n+            break key;\n+        }\n+    } else {\n+        key\n+    };\n+\n+    fs::write(xor_path, key)?;\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    paths.into_iter().for_each(|path| {\n+        if let Err(e) = xor_block(&path, key) {\n+            println!(\n+                \"Error xor-ing file {:?}: {e:?}\",\n+                path.iter()\n+                    .next_back()\n+                    .expect(\"path to have a last component\")\n+            )\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            println!(\"Xor'd {done} / {total} files\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now xor'd.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_block(path: &Path, key: [u8; 8]) -> Result<(), io::Error> {\n+    if path.extension().is_none_or(|f| f != \"dat\") {\n+        return Ok(());\n+    }\n+\n+    let file_name = path\n+        .iter()\n+        .next_back()\n+        .expect(\"there to be a last path component\");\n+\n+    if file_name == \"xor.dat\" {\n+        return Ok(());\n+    }\n+\n+    let mut file = fs::File::open(path)?;\n+    let mut buf = [0u8; 4];\n+    file.read_exact(&mut buf)?;\n+\n+    if buf != MAGIC {\n+        return Ok(());\n+    }\n+\n+    let mut block = fs::read(path)?;\n+    block\n+        .iter_mut()\n+        .enumerate()\n+        .for_each(|(i, b)| *b ^= key[i % key.len()]);\n+\n+    let mut tmp_path = path.as_os_str().to_owned();\n+    tmp_path.push(\".tmp\");\n+    fs::write(&tmp_path, block)?;\n+    fs::rename(&tmp_path, path)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 190,
      "original_position": 127,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085644865,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unfortunately it does not. I fixed with `writer.into_inner()?.sync_data()?;`. The `into_inner` will flush the writer before returning.",
      "created_at": "2025-05-18T14:54:29Z",
      "updated_at": "2025-05-18T14:54:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094547839",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094547839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094550287",
      "pull_request_review_id": 2849014393,
      "id": 2094550287,
      "node_id": "PRRC_kwDOABII58582E0P",
      "diff_hunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;\n+            break key;\n+        }\n+    } else {\n+        // Use the existing random key\n+        key\n+    };\n+\n+    println!(\"Obfuscating blocks dir. Do not start bitcoind until finished!\");\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    let mut double_key = [0u8; 16];\n+    double_key[..8].copy_from_slice(&key);\n+    double_key[8..].copy_from_slice(&key);\n+\n+    paths.into_iter().for_each(|path| {\n+        if path.extension().is_none_or(|f| f != \"dat\") {\n+            return;\n+        }\n+\n+        if path.file_name().expect(\"there to be a file name\") == XOR_FILE_NAME {\n+            return;\n+        }\n+\n+        if let Err(e) = xor_file(&path, double_key) {\n+            println!(\"Error obfuscating file {}: {e}\", path.display())\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            let rate = done / start.elapsed().as_secs();\n+            println!(\"Obfuscated {done} / {total} files ({rate}/sec)\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now obfuscated.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_file(path: &Path, key: [u8; 16]) -> Result<(), io::Error> {\n+    let file = File::open(path)?;\n+    let mut reader = BufReader::new(file);\n+\n+    let mut buf = [0u8; 16];\n+    reader.read_exact(&mut buf)?;\n+\n+    if buf[..4] != MAGIC {\n+        // This file is already obfuscated\n+        return Ok(());\n+    }\n+\n+    let mut tmp_path = path.as_os_str().to_owned();\n+    tmp_path.push(\".tmp\");\n+    let file = File::options()\n+        .write(true)\n+        .create(true)\n+        .truncate(true)\n+        .open(&tmp_path)?;\n+    let mut writer = BufWriter::new(file);\n+\n+    let key_u128 = unsafe { *(&key as *const _ as *const u128) };",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 173,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "15aeb390b80878f5b59c78340940dd36cef1bdc5",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "are you sure this is always safe from an alignment perspective? (IIUC bytes don't have to be aligned, but u128 may have to). So it seems safer to make the storage u128 and then cast the other way (to u8)?",
      "created_at": "2025-05-18T15:04:37Z",
      "updated_at": "2025-05-18T15:04:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094550287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094550287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094569036",
      "pull_request_review_id": 2849035518,
      "id": 2094569036,
      "node_id": "PRRC_kwDOABII58582JZM",
      "diff_hunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;\n+            break key;\n+        }\n+    } else {\n+        // Use the existing random key\n+        key\n+    };\n+\n+    println!(\"Obfuscating blocks dir. Do not start bitcoind until finished!\");\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    let mut double_key = [0u8; 16];\n+    double_key[..8].copy_from_slice(&key);\n+    double_key[8..].copy_from_slice(&key);\n+\n+    paths.into_iter().for_each(|path| {\n+        if path.extension().is_none_or(|f| f != \"dat\") {\n+            return;\n+        }\n+\n+        if path.file_name().expect(\"there to be a file name\") == XOR_FILE_NAME {\n+            return;\n+        }\n+\n+        if let Err(e) = xor_file(&path, double_key) {\n+            println!(\"Error obfuscating file {}: {e}\", path.display())\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            let rate = done / start.elapsed().as_secs();\n+            println!(\"Obfuscated {done} / {total} files ({rate}/sec)\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now obfuscated.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_file(path: &Path, key: [u8; 16]) -> Result<(), io::Error> {\n+    let file = File::open(path)?;\n+    let mut reader = BufReader::new(file);\n+\n+    let mut buf = [0u8; 16];\n+    reader.read_exact(&mut buf)?;\n+\n+    if buf[..4] != MAGIC {\n+        // This file is already obfuscated\n+        return Ok(());\n+    }\n+\n+    let mut tmp_path = path.as_os_str().to_owned();\n+    tmp_path.push(\".tmp\");\n+    let file = File::options()\n+        .write(true)\n+        .create(true)\n+        .truncate(true)\n+        .open(&tmp_path)?;\n+    let mut writer = BufWriter::new(file);\n+\n+    let key_u128 = unsafe { *(&key as *const _ as *const u128) };",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 173,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "15aeb390b80878f5b59c78340940dd36cef1bdc5",
      "in_reply_to_id": 2094550287,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right, a byte array is alignment of 1, u128 is 16. I removed the unsafe cast for the key, but we still use unsafe for casting the buffer. It seems to always be at an address aligned to 16, but not sure how we can guarantee that.",
      "created_at": "2025-05-18T16:19:23Z",
      "updated_at": "2025-05-18T16:19:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094569036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094569036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094577106",
      "pull_request_review_id": 2849042779,
      "id": 2094577106,
      "node_id": "PRRC_kwDOABII58582LXS",
      "diff_hunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Local\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;\n+            break key;\n+        }\n+    } else {\n+        // Use the existing random key\n+        key\n+    };\n+\n+    println!(\"Obfuscating blocks dir. Do not start bitcoind until finished!\");\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    let mut double_key = [0u8; 16];\n+    double_key[..8].copy_from_slice(&key);\n+    double_key[8..].copy_from_slice(&key);\n+\n+    paths.into_iter().for_each(|path| {\n+        if path.extension().is_none_or(|f| f != \"dat\") {\n+            return;\n+        }\n+\n+        if path.file_name().expect(\"there to be a file name\") == XOR_FILE_NAME {\n+            return;\n+        }\n+\n+        if let Err(e) = xor_file(&path, double_key) {\n+            println!(\"Error obfuscating file {}: {e}\", path.display())\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            let rate = done / start.elapsed().as_secs();\n+            println!(\"Obfuscated {done} / {total} files ({rate}/sec)\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now obfuscated.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_file(path: &Path, key: [u8; 16]) -> Result<(), io::Error> {\n+    let file = File::open(path)?;\n+    let mut reader = BufReader::new(file);\n+\n+    let mut buf = [0u8; 16];\n+    reader.read_exact(&mut buf)?;\n+\n+    if buf[..4] != MAGIC {\n+        // This file is already obfuscated\n+        return Ok(());\n+    }\n+\n+    let mut tmp_path = path.as_os_str().to_owned();\n+    tmp_path.push(\".tmp\");\n+    let file = File::options()\n+        .write(true)\n+        .create(true)\n+        .truncate(true)\n+        .open(&tmp_path)?;\n+    let mut writer = BufWriter::new(file);\n+\n+    let key_u128 = unsafe { *(&key as *const _ as *const u128) };",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": null,
      "original_position": 173,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "15aeb390b80878f5b59c78340940dd36cef1bdc5",
      "in_reply_to_id": 2094550287,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah I figured it out. Declare a u128 first then point to it as the buffer.",
      "created_at": "2025-05-18T16:55:48Z",
      "updated_at": "2025-05-18T16:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094577106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094577106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094597729",
      "pull_request_review_id": 2849062475,
      "id": 2094597729,
      "node_id": "PRRC_kwDOABII58582QZh",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 60,
      "original_position": 16,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085633049,
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> If this is the wrong home dir though then a user can just specify it manually using the -datadir= option.\r\n\r\nI tested on Windows and it works with `-datadir=`\r\n\r\n1. Installed bitcoin core v27.0 to sync a few signet blocks\r\n2. Installed bitcoin core v29.0 to sync more blocks and create xor.dat file\r\n3. Tried this tool which works only with `-datadir=` set\r\n\r\n```\r\n> cargo run --release\r\n    Finished `release` profile [optimized] target(s) in 0.11s\r\n     Running `target\\release\\blocks-xor.exe`\r\nError: Error { msg: \"The system cannot find the path specified. (os error 3)\" }\r\nerror: process didn't exit successfully: `target\\release\\blocks-xor.exe` (exit code: 1)\r\n\r\n> cargo run --release -- -datadir=\"C:\\Users\\test\\AppData\\Roaming\\Bitcoin\\signet\"\r\n    Finished `release` profile [optimized] target(s) in 0.02s\r\n     Running `target\\release\\blocks-xor.exe -datadir=C:\\Users\\test\\AppData\\Roaming\\Bitcoin\\signet`\r\nObfuscating blocks dir. Do not start bitcoind until finished!\r\nDone in 0 seconds! Blocksdir is now obfuscated.\r\n```",
      "created_at": "2025-05-18T18:39:58Z",
      "updated_at": "2025-05-18T18:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094597729",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094597729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094599201",
      "pull_request_review_id": 2849063889,
      "id": 2094599201,
      "node_id": "PRRC_kwDOABII58582Qwh",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 60,
      "original_position": 16,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085633049,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@1440000bytes thanks for testing! Unfortunately this tool will only work for mainnet. It looks like I also have to rename `Local` to `Roaming` in the Windows default datadir.",
      "created_at": "2025-05-18T18:47:38Z",
      "updated_at": "2025-05-18T18:47:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094599201",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094599201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094601966",
      "pull_request_review_id": 2849066278,
      "id": 2094601966,
      "node_id": "PRRC_kwDOABII58582Rbu",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 60,
      "original_position": 16,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085633049,
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think new bitcoin core versions use `local` for data directory. So, you will have to support both `local` and `roaming` in this tool.\r\n\r\nYes, it works for mainnet. I re-tested.",
      "created_at": "2025-05-18T19:00:16Z",
      "updated_at": "2025-05-18T19:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094601966",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094601966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094602422",
      "pull_request_review_id": 2849066711,
      "id": 2094602422,
      "node_id": "PRRC_kwDOABII58582Ri2",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 60,
      "original_position": 16,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085633049,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@1440000bytes do you know which version switched to `Local`? If it was 28 or 29 then we only have to support `Roaming`.",
      "created_at": "2025-05-18T19:02:37Z",
      "updated_at": "2025-05-18T19:02:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094602422",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094602422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094604563",
      "pull_request_review_id": 2849068578,
      "id": 2094604563,
      "node_id": "PRRC_kwDOABII58582SET",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 60,
      "original_position": 16,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085633049,
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "v28.0 https://github.com/bitcoin/bitcoin/pull/27064",
      "created_at": "2025-05-18T19:13:48Z",
      "updated_at": "2025-05-18T19:13:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2094604563",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094604563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2106257312",
      "pull_request_review_id": 2866900791,
      "id": 2106257312,
      "node_id": "PRRC_kwDOABII5859iu-g",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+use std::{\n+    env, fs,\n+    io::{self, Read},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+\n+fn main() -> Result<(), io::Error> {\n+    let start = Instant::now();\n+\n+    let blocks_path = if env::args().len() > 1 {\n+        env::args().nth(1).expect(\"the arg to exist\").into()\n+    } else {\n+        #[allow(deprecated)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 60,
      "original_position": 16,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "dc41366454b4fe9ab1ae9bc55f32748f04d87d77",
      "in_reply_to_id": 2085633049,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-25T17:11:49Z",
      "updated_at": "2025-05-25T17:11:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2106257312",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2106257312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108652853",
      "pull_request_review_id": 2870286845,
      "id": 2108652853,
      "node_id": "PRRC_kwDOABII5859r301",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 18,
      "original_position": 18,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see you're using this to display the messages from `main`. However that will lead to horrible messages containing `Error { msg: \"...\" }`. I suggest you implement `Debug` manually instead just displaying the string.",
      "created_at": "2025-05-27T09:05:50Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108652853",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108652853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108657220",
      "pull_request_review_id": 2870286845,
      "id": 2108657220,
      "node_id": "PRRC_kwDOABII5859r45E",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 37,
      "original_position": 37,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This loses error sources. The proper way to do this is to create a mutable string and then append the sources in a loop with `\": \"` as a separator. (You could also do cargo-style `\"\\n\\tcaused by: \"`).",
      "created_at": "2025-05-27T09:07:50Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108657220",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108657220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108663194",
      "pull_request_review_id": 2870286845,
      "id": 2108663194,
      "node_id": "PRRC_kwDOABII5859r6Wa",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 51,
      "original_position": 51,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Using `args` is problematic for paths because it breaks for some values. `args_os` is the appropriate solution.",
      "created_at": "2025-05-27T09:09:59Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108663194",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108663194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108685983",
      "pull_request_review_id": 2870286845,
      "id": 2108685983,
      "node_id": "PRRC_kwDOABII5859r_6f",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 59,
      "original_position": 59,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This kind of c-style handling is not idiomatic Rust. I'd do something like:\r\n\r\n```rust\r\nlet mut args = std::env::args_os();\r\nargs.next().ok_or(\"Missing program name\")?;\r\nlet data_dir_path = if let Some(first_arg) = args.next() {\r\n    let data_dir = if first_arg == \"-datadir\" || first_arg == \"--datadir\" {\r\n        args.next().ok_or(\"the datadir argument is missing a value\")?\r\n    } else if let Some(data_dir) = first_arg.strip_prefix(\"-datadir=\") {\r\n        data_dir.to_owned()\r\n    } else if let Some(data_dir) = first_arg.strip_prefix(\"--datadir=\") {\r\n        data_dir.to_owned()\r\n    } else {\r\n        return Err(Error::new(format!(\"Unknown argument: {:?}\", first_arg));\r\n    };\r\n    if args.next().is_some() {\r\n        return Err(\"Too many arguments\".into());\r\n    }\r\n    data_dir\r\n} else {\r\n    // fallback to home here.\r\n}\r\n```",
      "created_at": "2025-05-27T09:20:47Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108685983",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108685983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108691581",
      "pull_request_review_id": 2870286845,
      "id": 2108691581,
      "node_id": "PRRC_kwDOABII5859sBR9",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 75,
      "original_position": 75,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reminds me that non-mainnet use paths like `/regtest/blocks`, perhaps we should accept `-chain` argument as well.",
      "created_at": "2025-05-27T09:23:24Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108691581",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108691581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108718168",
      "pull_request_review_id": 2870286845,
      "id": 2108718168,
      "node_id": "PRRC_kwDOABII5859sHxY",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 96,
      "original_position": 96,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A comment explaining that this doesn't need to be cryptographic would be nice.",
      "created_at": "2025-05-27T09:35:47Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108718168",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108718168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108721393",
      "pull_request_review_id": 2870286845,
      "id": 2108721393,
      "node_id": "PRRC_kwDOABII5859sIjx",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 104,
      "original_position": 104,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To be atomic, this should create a temporary file first, write it, sync it, and then rename.",
      "created_at": "2025-05-27T09:37:19Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108721393",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108721393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108737971",
      "pull_request_review_id": 2870286845,
      "id": 2108737971,
      "node_id": "PRRC_kwDOABII5859sMmz",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;\n+            break key;\n+        }\n+    } else {\n+        // Use the existing random key\n+        key\n+    };\n+\n+    println!(\"Obfuscating blocks dir. Do not start bitcoind until finished!\");\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    let mut double_key = [0u8; 16];\n+    double_key[..8].copy_from_slice(&key);\n+    double_key[8..].copy_from_slice(&key);\n+    let key = u128::from_ne_bytes(double_key);\n+\n+    paths.into_iter().for_each(|path| {\n+        if path.extension().is_none_or(|f| f != \"dat\") {\n+            return;\n+        }\n+\n+        if path.file_name().expect(\"there to be a file name\") == XOR_FILE_NAME {\n+            return;\n+        }\n+\n+        if let Err(e) = xor_file(&path, key) {\n+            println!(\"Error obfuscating file {}: {e}\", path.display())\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            let rate = done / start.elapsed().as_secs();\n+            println!(\"Obfuscated {done} / {total} files ({rate}/sec)\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now obfuscated.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_file(path: &Path, key: u128) -> Result<(), io::Error> {\n+    let mut buf_u128 = 0u128;\n+    let buf = unsafe { (&mut buf_u128 as *mut _ as *mut [u8; 16]).as_mut() }.unwrap();",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 155,
      "original_position": 155,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems over-complicated and not needed. You're not saing anything by \"avoiding the conversion\" - the optimizer would take care of that for you.",
      "created_at": "2025-05-27T09:44:51Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108737971",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108737971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 155,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108739385",
      "pull_request_review_id": 2870286845,
      "id": 2108739385,
      "node_id": "PRRC_kwDOABII5859sM85",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;\n+            break key;\n+        }\n+    } else {\n+        // Use the existing random key\n+        key\n+    };\n+\n+    println!(\"Obfuscating blocks dir. Do not start bitcoind until finished!\");\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    let mut double_key = [0u8; 16];\n+    double_key[..8].copy_from_slice(&key);\n+    double_key[8..].copy_from_slice(&key);\n+    let key = u128::from_ne_bytes(double_key);\n+\n+    paths.into_iter().for_each(|path| {\n+        if path.extension().is_none_or(|f| f != \"dat\") {\n+            return;\n+        }\n+\n+        if path.file_name().expect(\"there to be a file name\") == XOR_FILE_NAME {\n+            return;\n+        }\n+\n+        if let Err(e) = xor_file(&path, key) {\n+            println!(\"Error obfuscating file {}: {e}\", path.display())\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            let rate = done / start.elapsed().as_secs();\n+            println!(\"Obfuscated {done} / {total} files ({rate}/sec)\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now obfuscated.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_file(path: &Path, key: u128) -> Result<(), io::Error> {\n+    let mut buf_u128 = 0u128;\n+    let buf = unsafe { (&mut buf_u128 as *mut _ as *mut [u8; 16]).as_mut() }.unwrap();\n+\n+    let file = File::open(path)?;\n+    let mut reader = BufReader::new(file);\n+\n+    reader.read_exact(buf)?;\n+\n+    if buf[..4] != MAGIC {\n+        // This file is already obfuscated\n+        return Ok(());\n+    }\n+\n+    let tmp_path = path.with_extension(\"dat.tmp\");\n+    let file = File::options()\n+        .write(true)\n+        .create(true)\n+        .truncate(true)\n+        .open(&tmp_path)?;\n+    let mut writer = BufWriter::new(file);\n+\n+    loop {\n+        buf_u128 ^= key;\n+        writer.write_all(buf)?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 177,
      "original_position": 177,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is clearly unsound, you're doing shared mutability which is forbidden in Rust.",
      "created_at": "2025-05-27T09:45:33Z",
      "updated_at": "2025-05-27T09:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108739385",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108739385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108748571",
      "pull_request_review_id": 2870286845,
      "id": 2108748571,
      "node_id": "PRRC_kwDOABII5859sPMb",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;\n+            break key;\n+        }\n+    } else {\n+        // Use the existing random key\n+        key\n+    };\n+\n+    println!(\"Obfuscating blocks dir. Do not start bitcoind until finished!\");\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    let mut double_key = [0u8; 16];\n+    double_key[..8].copy_from_slice(&key);\n+    double_key[8..].copy_from_slice(&key);\n+    let key = u128::from_ne_bytes(double_key);\n+\n+    paths.into_iter().for_each(|path| {\n+        if path.extension().is_none_or(|f| f != \"dat\") {\n+            return;\n+        }\n+\n+        if path.file_name().expect(\"there to be a file name\") == XOR_FILE_NAME {\n+            return;\n+        }\n+\n+        if let Err(e) = xor_file(&path, key) {\n+            println!(\"Error obfuscating file {}: {e}\", path.display())\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            let rate = done / start.elapsed().as_secs();\n+            println!(\"Obfuscated {done} / {total} files ({rate}/sec)\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now obfuscated.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_file(path: &Path, key: u128) -> Result<(), io::Error> {\n+    let mut buf_u128 = 0u128;\n+    let buf = unsafe { (&mut buf_u128 as *mut _ as *mut [u8; 16]).as_mut() }.unwrap();\n+\n+    let file = File::open(path)?;\n+    let mut reader = BufReader::new(file);\n+\n+    reader.read_exact(buf)?;\n+\n+    if buf[..4] != MAGIC {\n+        // This file is already obfuscated\n+        return Ok(());\n+    }\n+\n+    let tmp_path = path.with_extension(\"dat.tmp\");\n+    let file = File::options()\n+        .write(true)\n+        .create(true)\n+        .truncate(true)\n+        .open(&tmp_path)?;\n+    let mut writer = BufWriter::new(file);\n+\n+    loop {\n+        buf_u128 ^= key;\n+        writer.write_all(buf)?;\n+        let n = reader.read(buf)?;\n+        if n < 16 {\n+            let key = key.to_ne_bytes();\n+            for i in 0..n {\n+                buf[i] ^= key[i];\n+            }\n+            writer.write_all(&buf[..n])?;\n+            break;\n+        }\n+    }",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 187,
      "original_position": 187,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `read` API doesn't guarantee that `n < 16` means EOF, so the loop may break prematurely leading to garbage data.\r\n\r\nIt's also not as fast as it could be - reading larger chunks (e.g. 4096) and then processing them with `chunks_exact` would allow auto-vectorization. Also you wouldn't need `BufReader` in that case.",
      "created_at": "2025-05-27T09:50:08Z",
      "updated_at": "2025-05-27T09:52:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108748571",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108748571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108751295",
      "pull_request_review_id": 2870286845,
      "id": 2108751295,
      "node_id": "PRRC_kwDOABII5859sP2_",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;\n+            break key;\n+        }\n+    } else {\n+        // Use the existing random key\n+        key\n+    };\n+\n+    println!(\"Obfuscating blocks dir. Do not start bitcoind until finished!\");\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    let mut double_key = [0u8; 16];\n+    double_key[..8].copy_from_slice(&key);\n+    double_key[8..].copy_from_slice(&key);\n+    let key = u128::from_ne_bytes(double_key);\n+\n+    paths.into_iter().for_each(|path| {\n+        if path.extension().is_none_or(|f| f != \"dat\") {\n+            return;\n+        }\n+\n+        if path.file_name().expect(\"there to be a file name\") == XOR_FILE_NAME {\n+            return;\n+        }\n+\n+        if let Err(e) = xor_file(&path, key) {\n+            println!(\"Error obfuscating file {}: {e}\", path.display())\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            let rate = done / start.elapsed().as_secs();\n+            println!(\"Obfuscated {done} / {total} files ({rate}/sec)\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now obfuscated.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_file(path: &Path, key: u128) -> Result<(), io::Error> {\n+    let mut buf_u128 = 0u128;\n+    let buf = unsafe { (&mut buf_u128 as *mut _ as *mut [u8; 16]).as_mut() }.unwrap();\n+\n+    let file = File::open(path)?;\n+    let mut reader = BufReader::new(file);\n+\n+    reader.read_exact(buf)?;\n+\n+    if buf[..4] != MAGIC {\n+        // This file is already obfuscated\n+        return Ok(());\n+    }\n+\n+    let tmp_path = path.with_extension(\"dat.tmp\");\n+    let file = File::options()\n+        .write(true)\n+        .create(true)\n+        .truncate(true)\n+        .open(&tmp_path)?;\n+    let mut writer = BufWriter::new(file);\n+\n+    loop {\n+        buf_u128 ^= key;\n+        writer.write_all(buf)?;\n+        let n = reader.read(buf)?;\n+        if n < 16 {\n+            let key = key.to_ne_bytes();\n+            for i in 0..n {\n+                buf[i] ^= key[i];\n+            }\n+            writer.write_all(&buf[..n])?;\n+            break;\n+        }\n+    }\n+\n+    writer.into_inner()?.sync_data()?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 189,
      "original_position": 189,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": null,
      "user": {
        "login": "Kixunil",
        "id": 1178779,
        "node_id": "MDQ6VXNlcjExNzg3Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kixunil",
        "html_url": "https://github.com/Kixunil",
        "followers_url": "https://api.github.com/users/Kixunil/followers",
        "following_url": "https://api.github.com/users/Kixunil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kixunil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kixunil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions",
        "organizations_url": "https://api.github.com/users/Kixunil/orgs",
        "repos_url": "https://api.github.com/users/Kixunil/repos",
        "events_url": "https://api.github.com/users/Kixunil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kixunil/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You need to call `flush()` before `into_inner`.",
      "created_at": "2025-05-27T09:51:23Z",
      "updated_at": "2025-05-27T09:52:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2108751295",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108751295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 189,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109251771",
      "pull_request_review_id": 2871174996,
      "id": 2109251771,
      "node_id": "PRRC_kwDOABII5859uKC7",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 104,
      "original_position": 104,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": 2108721393,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does it matter though? If it crashes before sync_all we either have all zero in xor.dat or a random key that has not yet been used for xoring anything. On next run it will either rewrite a new key if still zero or start using the previously written random key.",
      "created_at": "2025-05-27T13:49:14Z",
      "updated_at": "2025-05-27T13:49:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2109251771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109251771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109256380",
      "pull_request_review_id": 2871182098,
      "id": 2109256380,
      "node_id": "PRRC_kwDOABII5859uLK8",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+use std::{\n+    env,\n+    fmt::{self, Debug, Display, Formatter},\n+    fs::{self, File},\n+    hash::{BuildHasher, Hasher, RandomState},\n+    io::{self, BufReader, BufWriter, Read, Write},\n+    path::Path,\n+    time::{Duration, Instant},\n+};\n+\n+const MAGIC: [u8; 4] = [0xf9, 0xbe, 0xb4, 0xd9];\n+const XOR_FILE_NAME: &str = \"xor.dat\";\n+\n+#[derive(Debug)]\n+struct Error {\n+    msg: String,\n+}\n+\n+impl Error {\n+    fn new(msg: String) -> Self {\n+        Self { msg }\n+    }\n+}\n+\n+impl Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.msg)\n+    }\n+}\n+\n+impl From<io::Error> for Error {\n+    fn from(value: io::Error) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+impl From<&str> for Error {\n+    fn from(value: &str) -> Self {\n+        Error::new(value.to_string())\n+    }\n+}\n+\n+fn main() -> Result<(), Error> {\n+    let start = Instant::now();\n+\n+    let data_dir_path = if env::args().len() == 2 {\n+        let arg = env::args().nth(1).expect(\"the arg to exist\");\n+        if !arg.starts_with(\"--datadir=\") && !arg.starts_with(\"-datadir=\") {\n+            return Err(Error::new(format!(\n+                \"Error parsing command line arguments: Invalid parameter {arg}\"\n+            )));\n+        }\n+        let (_, datadir) = arg.split_once(\"-datadir=\").expect(\"split to be some\");\n+        datadir.into()\n+    } else if env::args().len() == 1 {\n+        #[allow(deprecated)]\n+        env::home_dir()\n+            .expect(\"to have a home directory\")\n+            .join(match env::consts::OS {\n+                \"macos\" => \"Library/Application Support/Bitcoin\",\n+                \"windows\" => \"AppData\\\\Roaming\\\\Bitcoin\",\n+                \"linux\" => \".bitcoin\",\n+                _ => {\n+                    return Err(\"Unknown OS\".into());\n+                }\n+            })\n+    } else {\n+        return Err(\"Invalid number of arguments. Run with `cargo run --release` if using default datadir. Otherwise run with `cargo run --release -- -datadir=<custom datadir>`.\".into());\n+    };\n+\n+    let blocks_path = data_dir_path.join(\"blocks\");\n+\n+    let paths = fs::read_dir(&blocks_path)?\n+        .map(|res| res.map(|e| e.path()))\n+        .collect::<Result<Vec<_>, io::Error>>()?;\n+\n+    let key_path = blocks_path.join(XOR_FILE_NAME);\n+    let key: [u8; 8] = fs::read(&key_path)\n+        .map_err(|_| \"No xor.dat file. Make sure you are running Bitcoin Core v28 or higher.\")?\n+        .try_into()\n+        .map_err(|_| \"Invalid xor.dat file.\")?;\n+\n+    if key[..4] == [0u8; 4] && key[4..] != [0u8; 4] {\n+        return Err(\n+            \"This tool doesn't work with a non-zero key with 4 bytes of leading zeros\".into(),\n+        );\n+    }\n+\n+    let key = if key == [0u8; 8] {\n+        // The key in the file is zero, so overwrite with a new random one\n+        loop {\n+            let key: [u8; 8] = RandomState::new().build_hasher().finish().to_le_bytes();\n+            // Don't use keys with 4 bytes of leading zeros\n+            // They won't let us detect the first 4 bytes of magic in the files\n+            if key[..4] == [0u8; 4] {\n+                continue;\n+            }\n+            let mut out_file = File::options().write(true).open(&key_path)?;\n+            out_file.write_all(&key)?;\n+            out_file.sync_data()?;\n+            break key;\n+        }\n+    } else {\n+        // Use the existing random key\n+        key\n+    };\n+\n+    println!(\"Obfuscating blocks dir. Do not start bitcoind until finished!\");\n+\n+    let total = paths.len();\n+    let mut done = 0;\n+    let mut timer = Instant::now();\n+    let duration = Duration::from_secs(5);\n+\n+    let mut double_key = [0u8; 16];\n+    double_key[..8].copy_from_slice(&key);\n+    double_key[8..].copy_from_slice(&key);\n+    let key = u128::from_ne_bytes(double_key);\n+\n+    paths.into_iter().for_each(|path| {\n+        if path.extension().is_none_or(|f| f != \"dat\") {\n+            return;\n+        }\n+\n+        if path.file_name().expect(\"there to be a file name\") == XOR_FILE_NAME {\n+            return;\n+        }\n+\n+        if let Err(e) = xor_file(&path, key) {\n+            println!(\"Error obfuscating file {}: {e}\", path.display())\n+        };\n+\n+        done += 1;\n+        if timer.elapsed() > duration {\n+            let rate = done / start.elapsed().as_secs();\n+            println!(\"Obfuscated {done} / {total} files ({rate}/sec)\");\n+            timer = Instant::now();\n+        }\n+    });\n+\n+    println!(\n+        \"Done in {} seconds! Blocksdir is now obfuscated.\",\n+        start.elapsed().as_secs()\n+    );\n+\n+    Ok(())\n+}\n+\n+fn xor_file(path: &Path, key: u128) -> Result<(), io::Error> {\n+    let mut buf_u128 = 0u128;\n+    let buf = unsafe { (&mut buf_u128 as *mut _ as *mut [u8; 16]).as_mut() }.unwrap();\n+\n+    let file = File::open(path)?;\n+    let mut reader = BufReader::new(file);\n+\n+    reader.read_exact(buf)?;\n+\n+    if buf[..4] != MAGIC {\n+        // This file is already obfuscated\n+        return Ok(());\n+    }\n+\n+    let tmp_path = path.with_extension(\"dat.tmp\");\n+    let file = File::options()\n+        .write(true)\n+        .create(true)\n+        .truncate(true)\n+        .open(&tmp_path)?;\n+    let mut writer = BufWriter::new(file);\n+\n+    loop {\n+        buf_u128 ^= key;\n+        writer.write_all(buf)?;\n+        let n = reader.read(buf)?;\n+        if n < 16 {\n+            let key = key.to_ne_bytes();\n+            for i in 0..n {\n+                buf[i] ^= key[i];\n+            }\n+            writer.write_all(&buf[..n])?;\n+            break;\n+        }\n+    }\n+\n+    writer.into_inner()?.sync_data()?;",
      "path": "contrib/xor-blocks/src/main.rs",
      "position": 189,
      "original_position": 189,
      "commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "original_commit_id": "c2acb6f41d875132128c5af477680ee435195245",
      "in_reply_to_id": 2108751295,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`into_inner` flushes before returning. https://doc.rust-lang.org/std/io/struct.BufWriter.html#method.into_inner",
      "created_at": "2025-05-27T13:51:04Z",
      "updated_at": "2025-05-27T13:51:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32451#discussion_r2109256380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109256380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32451"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 189,
      "original_line": 189,
      "side": "RIGHT"
    }
  ]
}