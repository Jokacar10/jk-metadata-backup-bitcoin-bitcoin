{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495",
    "id": 2234616382,
    "node_id": "PR_kwDOABII586FMYo-",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31495",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31495.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31495.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31495",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31495/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d5e28457a099cd546e757984043f28ba9f6689b1",
    "number": 31495,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "wallet: Utilize IsMine() and CanProvide() in migration to cover edge cases",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The legacy wallet `IsMine()` is essentially a black box that would tell us whether the wallet is watching an output script. In order to migrate legacy wallets to descriptor wallets, we need to be able to compute all of the output scripts that a legacy wallet would watch. The original approach for this was to understand `IsMine()` and write a function which would be its inverse. This was partially done in the original migration code, and attempted to be completed in #30328. However, further analysis of `IsMine()` has continued to reveal additional edge cases which make writing an inverse function increasingly difficult to verify correctness.\r\n\r\nThis PR instead changes migration to utilize `IsMine()` to produce the output scripts by first computing a superset of all of the output scripts that `IsMine()` would watch and testing each script against `IsMine()` to filter for the ones that actually are watched. The superset is constructed by computing all possible output scripts for the keys and scripts in the wallet - for keys, every key could be a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH; for scripts, every script could be an output script, the redeemScript of a P2SH, the witnessScript of a P2WSH, and the witnessScript of a P2SH-P2WSH.\r\n\r\nAdditionally, the legacy wallet can contain scripts that are redeemScripts and witnessScripts, while not watching for any output script utilizing that script. These are known as solvable scripts and are migrated to a separate \"solvables\" wallet. The previous approach to identifying these solvables was similar to identifying output scripts - finding known solvable conditions and computing the scripts. However, this also can miss scripts, so the solvables are now identified in a manner similar to the output scripts but using the function `CanProvide()`. Using the same superset as before, all output scripts which are `ISMINE_NO` are put through `CanProvide()` which will perform a dummy signing and then a key lookup to determine whether the legacy wallet could provide any solving data for the output script. The scripts that pass will have their descriptors inferred and the script included in the solvables wallet.\r\n\r\nThe main downside of this approach is that `IsMine()` and `CanProvide()` can no longer be deleted. They will need to be refactored to be migration only code instead in #28710.\r\n\r\nLastly, I've added 2 test cases for the edge cases that prompted this change of approach. In particular, miniscript witnessScripts and `rawtr()` output scripts are  solvable and signable in a legacy wallet, although never `ISMINE_SPENDABLE`.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/69",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/69",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/69/labels",
      "id": 11324346,
      "node_id": "MI_kwDOABII584ArMu6",
      "number": 69,
      "state": "open",
      "title": "29.0",
      "description": "",
      "creator": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 30,
      "closed_issues": 53,
      "created_at": "2024-07-17T08:47:56Z",
      "updated_at": "2025-02-05T15:48:35Z"
    },
    "created_at": "2024-12-13T22:07:10Z",
    "updated_at": "2025-02-05T15:48:47Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "aed1f7434ea544b46d04a871fdba546cca3dd046",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:migrate-corner-case-scripts",
      "ref": "migrate-corner-case-scripts",
      "sha": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 8,
        "stargazers_count": 39,
        "watchers_count": 39,
        "size": 288928,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-01T02:30:17Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2024-10-04T23:43:44Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "85f96b01b77b779dba71b906d73e0e4a3f84b330",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36662,
        "stargazers_count": 81826,
        "watchers_count": 81826,
        "size": 275107,
        "default_branch": "master",
        "open_issues_count": 692,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-05T15:30:55Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-02-05T15:57:20Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 417,
    "deletions": 109,
    "changed_files": 3,
    "commits": 10,
    "review_comments": 70,
    "comments": 5
  },
  "events": [
    {
      "event": "commented",
      "id": 2542459023,
      "node_id": "IC_kwDOABII586XitiP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2542459023",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T22:07:13Z",
      "updated_at": "2025-02-05T14:52:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31495.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [Sjors](https://github.com/bitcoin/bitcoin/pull/31495#issuecomment-2630633024) |\n| Concept ACK | [sipa](https://github.com/bitcoin/bitcoin/pull/31495#issuecomment-2543324905), [theStack](https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2530939442), [brunoerg](https://github.com/bitcoin/bitcoin/pull/31495#issuecomment-2595294790), [rkrux](https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2595302398) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31423](https://github.com/bitcoin/bitcoin/pull/31423) (wallet: migration, don't create spendable wallet from a watch-only legacy wallet by furszy)\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#issuecomment-2542459023",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31495"
    },
    {
      "event": "labeled",
      "id": 15654009826,
      "node_id": "LE_lADOABII586jRhxQzwAAAAOlDTvi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15654009826",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T22:07:16Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15654029170,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAOlDYdy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15654029170",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ef20f9f476aa9e38df8358f4a0293cb669f2a336",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/ef20f9f476aa9e38df8358f4a0293cb669f2a336",
      "created_at": "2024-12-13T22:10:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15654040451,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAOlDbOD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15654040451",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1780617cdb38742d820bfb2d66a798c0e3ce3afc",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/1780617cdb38742d820bfb2d66a798c0e3ce3afc",
      "created_at": "2024-12-13T22:12:19Z"
    },
    {
      "event": "commented",
      "id": 2543324905,
      "node_id": "IC_kwDOABII586XmA7p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2543324905",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-14T19:46:53Z",
      "updated_at": "2024-12-14T19:46:53Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#issuecomment-2543324905",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31495"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15675947653,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAOmW_qF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15675947653",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d8608d140cf3064ecccd09ce5714a04375d8a78e",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/d8608d140cf3064ecccd09ce5714a04375d8a78e",
      "created_at": "2024-12-16T20:09:35Z"
    },
    {
      "event": "reviewed",
      "id": 2530939442,
      "node_id": "PRR_kwDOABII586W2xIy",
      "url": null,
      "actor": null,
      "commit_id": "d8608d140cf3064ecccd09ce5714a04375d8a78e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2530939442",
      "submitted_at": "2025-01-05T19:16:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15830206734,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAOvjckO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15830206734",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3474524ee56dc3d0d009fe1462092ae5d6cbd775",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/3474524ee56dc3d0d009fe1462092ae5d6cbd775",
      "created_at": "2025-01-06T19:43:50Z"
    },
    {
      "event": "labeled",
      "id": 15831675342,
      "node_id": "LE_lADOABII586jRhxQzwAAAAOvpDHO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15831675342",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T22:46:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 15835612736,
      "node_id": "UNLE_lADOABII586jRhxQzwAAAAOv4EZA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15835612736",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T08:54:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2547082375,
      "node_id": "PRR_kwDOABII586X0WSH",
      "url": null,
      "actor": null,
      "commit_id": "3474524ee56dc3d0d009fe1462092ae5d6cbd775",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some questions in the form of feedback...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2547082375",
      "submitted_at": "2025-01-13T17:16:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "commented",
      "id": 2595294790,
      "node_id": "IC_kwDOABII586asQ5G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2595294790",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T11:40:23Z",
      "updated_at": "2025-01-16T11:40:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#issuecomment-2595294790",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31495"
    },
    {
      "event": "reviewed",
      "id": 2556310008,
      "node_id": "PRR_kwDOABII586YXjH4",
      "url": null,
      "actor": null,
      "commit_id": "88b67c95cbc9c3ae75ccbc39e4aba215b9910b8b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2556310008",
      "submitted_at": "2025-01-16T14:20:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "reviewed",
      "id": 2556701280,
      "node_id": "PRR_kwDOABII586YZCpg",
      "url": null,
      "actor": null,
      "commit_id": "0f0ce579fffe533534dc117c854ebef3f277f18e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2556701280",
      "submitted_at": "2025-01-16T16:43:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "reviewed",
      "id": 2556856579,
      "node_id": "PRR_kwDOABII586YZokD",
      "url": null,
      "actor": null,
      "commit_id": "56d5a6a495bfa5da540e9832443ce8f130c4c960",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2556856579",
      "submitted_at": "2025-01-16T17:55:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "reviewed",
      "id": 2559952973,
      "node_id": "PRR_kwDOABII586YlchN",
      "url": null,
      "actor": null,
      "commit_id": "3474524ee56dc3d0d009fe1462092ae5d6cbd775",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2559952973",
      "submitted_at": "2025-01-17T21:02:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16005264417,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAO5_PQh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16005264417",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "76a6c9610b61e4b7f86bfff3b60c0ddee0e4ea35",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/76a6c9610b61e4b7f86bfff3b60c0ddee0e4ea35",
      "created_at": "2025-01-20T23:24:37Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMzOWIzY2ZjZDFiYzUwMDJhYTA2ZDFiNzljOTQ4Y2U5NGYzZWM4ZGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c39b3cfcd1bc5002aa06d1b79c948ce94f3ec8dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c39b3cfcd1bc5002aa06d1b79c948ce94f3ec8dc",
      "tree": {
        "sha": "e17bfa8ed0c5b6e3c0359a29d06d1d1f67f82392",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e17bfa8ed0c5b6e3c0359a29d06d1d1f67f82392"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d73f37dda221835b5109ede1b84db2dc7c4b74a1",
          "sha": "d73f37dda221835b5109ede1b84db2dc7c4b74a1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d73f37dda221835b5109ede1b84db2dc7c4b74a1"
        }
      ],
      "message": "test: Extra verification that migratewallet migrates",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-21T00:03:22Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-12-07T16:34:26Z"
      },
      "sha": "c39b3cfcd1bc5002aa06d1b79c948ce94f3ec8dc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16005438929,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAO5_53R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16005438929",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "feb96d8c1c4dfcdf087250a55f893aed0c768398",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/feb96d8c1c4dfcdf087250a55f893aed0c768398",
      "created_at": "2025-01-21T00:03:26Z"
    },
    {
      "event": "commented",
      "id": 2603384536,
      "node_id": "IC_kwDOABII586bLH7Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2603384536",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T00:04:14Z",
      "updated_at": "2025-01-21T00:04:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/35901153066</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#issuecomment-2603384536",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31495"
    },
    {
      "event": "labeled",
      "id": 16005442694,
      "node_id": "LE_lADOABII586jRhxQzwAAAAO5_6yG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16005442694",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T00:04:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 16005953698,
      "node_id": "UNLE_lADOABII586jRhxQzwAAAAO6B3ii",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16005953698",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T01:53:11Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2564262259,
      "node_id": "PRR_kwDOABII586Y14lz",
      "url": null,
      "actor": null,
      "commit_id": "feb96d8c1c4dfcdf087250a55f893aed0c768398",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nMostly happy with feb96d8c1c4dfcdf087250a55f893aed0c768398",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2564262259",
      "submitted_at": "2025-01-21T12:48:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU5MjBhMTVhYWVkZmQyZjVhYzQ2Zjk3YTIxZmQ4ZGM4OGE1OTZhMzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e920a15aaedfd2f5ac46f97a21fd8dc88a596a35",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e920a15aaedfd2f5ac46f97a21fd8dc88a596a35",
      "tree": {
        "sha": "feeffee5059dec7155c1bf453549654c05ddc289",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/feeffee5059dec7155c1bf453549654c05ddc289"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c39b3cfcd1bc5002aa06d1b79c948ce94f3ec8dc",
          "sha": "c39b3cfcd1bc5002aa06d1b79c948ce94f3ec8dc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c39b3cfcd1bc5002aa06d1b79c948ce94f3ec8dc"
        }
      ],
      "message": "tests: Test migration of additional P2WSH scripts",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-21T18:57:15Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-11-16T01:22:18Z"
      },
      "sha": "e920a15aaedfd2f5ac46f97a21fd8dc88a596a35"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNlNDkyYmU4ZWJmOGIxN2Q0MjlkYzVmM2E1ZjI3YjFjOGJlYzA5OTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce492be8ebf8b17d429dc5f3a5f27b1c8bec0995",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ce492be8ebf8b17d429dc5f3a5f27b1c8bec0995",
      "tree": {
        "sha": "816c07bad150628c5af5f3d2bd93ba24456119bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/816c07bad150628c5af5f3d2bd93ba24456119bf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e920a15aaedfd2f5ac46f97a21fd8dc88a596a35",
          "sha": "e920a15aaedfd2f5ac46f97a21fd8dc88a596a35",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e920a15aaedfd2f5ac46f97a21fd8dc88a596a35"
        }
      ],
      "message": "legacy spkm: Move CanProvide to LegacyDataSPKM\n\nThis function will be needed in migration",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-21T18:57:17Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-12-13T19:41:00Z"
      },
      "sha": "ce492be8ebf8b17d429dc5f3a5f27b1c8bec0995"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16019159419,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAO60Pl7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16019159419",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "52de36df8ea3bd32cf598dab8391032d2a9b5fda",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/52de36df8ea3bd32cf598dab8391032d2a9b5fda",
      "created_at": "2025-01-21T19:19:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16019507652,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAO61knE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16019507652",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "86c54283f860f3feb5c96d470a7590d2e89b6000",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/86c54283f860f3feb5c96d470a7590d2e89b6000",
      "created_at": "2025-01-21T19:54:53Z"
    },
    {
      "event": "labeled",
      "id": 16019509369,
      "node_id": "LE_lADOABII586jRhxQzwAAAAO61lB5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16019509369",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T19:55:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 16020779765,
      "node_id": "UNLE_lADOABII586jRhxQzwAAAAO66bL1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16020779765",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T22:07:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "milestoned",
      "id": 16047445159,
      "node_id": "MIE_lADOABII586jRhxQzwAAAAO8gJSn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16047445159",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T17:27:06Z",
      "milestone": {
        "title": "29.0"
      }
    },
    {
      "event": "reviewed",
      "id": 2570570158,
      "node_id": "PRR_kwDOABII586ZN8mu",
      "url": null,
      "actor": null,
      "commit_id": "86c54283f860f3feb5c96d470a7590d2e89b6000",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2570570158",
      "submitted_at": "2025-01-23T18:53:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY4ZTBiMTMwNmQ2ZmM0Nzc3NDk1ZGY1NDFkMjI2MWZjN2RjYmEyY2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68e0b1306d6fc4777495df541d2261fc7dcba2cf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/68e0b1306d6fc4777495df541d2261fc7dcba2cf",
      "tree": {
        "sha": "12a96c7a02107ecc6cca17acc3c78815f07ac7e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12a96c7a02107ecc6cca17acc3c78815f07ac7e9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce492be8ebf8b17d429dc5f3a5f27b1c8bec0995",
          "sha": "ce492be8ebf8b17d429dc5f3a5f27b1c8bec0995",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ce492be8ebf8b17d429dc5f3a5f27b1c8bec0995"
        }
      ],
      "message": "legacy spkm: use IsMine() to extract watched output scripts\n\nInstead of (partially) trying to reverse IsMine() to get the output\nscripts that a LegacySPKM would track, we can preserve it in migration\nonly code and utilize it to get an accurate set of output scripts.\n\nThis is accomplished by computing a set of output script candidates from\nmap(Crypted)Keys, mapScripts, and setWatchOnly. This candidate set is an\nupper bound on the scripts tracked by the wallet. Then IsMine() is used\nto filter to the exact output scripts that LegacySPKM would track.\n\nBy changing GetScriptPubKeys() this way, we can avoid complexities in\nreversing IsMine() and get a more complete set of output scripts.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-31T22:54:02Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-12-13T19:41:32Z"
      },
      "sha": "68e0b1306d6fc4777495df541d2261fc7dcba2cf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZlZGRmOGVhOWZjZTIzYjNlNmQxYzdlNzNkN2YzOWU4MzliZWIzYjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6eddf8ea9fce23b3e6d1c7e73d7f39e839beb3b5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6eddf8ea9fce23b3e6d1c7e73d7f39e839beb3b5",
      "tree": {
        "sha": "32da47ef81aa2fc14a46e82093d25a1d3637c64a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32da47ef81aa2fc14a46e82093d25a1d3637c64a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68e0b1306d6fc4777495df541d2261fc7dcba2cf",
          "sha": "68e0b1306d6fc4777495df541d2261fc7dcba2cf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/68e0b1306d6fc4777495df541d2261fc7dcba2cf"
        }
      ],
      "message": "migration: Skip descriptors which do not parse\n\nInferDescriptors can sometimes make descriptors which are actually\ninvalid and cannot be parsed. Detect and skip such descriptors by doing\na Parse() check before adding the descriptor to the wallet.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-31T22:54:20Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-12-13T19:45:32Z"
      },
      "sha": "6eddf8ea9fce23b3e6d1c7e73d7f39e839beb3b5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgxMGI0NjVmNTllMjg3MjQ5NDRhODU3ZTFkYTQ4N2QyODY4YjU2ZjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/810b465f59e28724944a857e1da487d2868b56f5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/810b465f59e28724944a857e1da487d2868b56f5",
      "tree": {
        "sha": "535846a9ae987c34270eb0ec11d721ceb32e18c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/535846a9ae987c34270eb0ec11d721ceb32e18c3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6eddf8ea9fce23b3e6d1c7e73d7f39e839beb3b5",
          "sha": "6eddf8ea9fce23b3e6d1c7e73d7f39e839beb3b5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6eddf8ea9fce23b3e6d1c7e73d7f39e839beb3b5"
        }
      ],
      "message": "wallet migration: Determine Solvables with CanProvide\n\nLegacySPKM would determine whether it could provide any script data to a\ntransaction through the use of the CanProvide function. Instead of\npartially reversing signing logic to figure out the output scripts of\nsolvable things, we use the same candidate set approach in\nGetScriptPubKeys() and instead filter the candidate set first for\nthings that are ISMINE_NO, and second with CanProvide(). This should\ngive a more accurate solvables wallet.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-31T22:58:53Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-12-13T19:46:31Z"
      },
      "sha": "810b465f59e28724944a857e1da487d2868b56f5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViNmMzMmVjNTQwYTdiMGI5MDFiZDY0ZWUxMDljN2NhNmExY2NmNzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb6c32ec540a7b0b901bd64ee109c7ca6a1ccf75",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/eb6c32ec540a7b0b901bd64ee109c7ca6a1ccf75",
      "tree": {
        "sha": "8439cffc4b450db359d3f2db40b8450d16bc2385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8439cffc4b450db359d3f2db40b8450d16bc2385"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/810b465f59e28724944a857e1da487d2868b56f5",
          "sha": "810b465f59e28724944a857e1da487d2868b56f5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/810b465f59e28724944a857e1da487d2868b56f5"
        }
      ],
      "message": "test: Test migration of miniscript in legacy wallets",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-31T22:58:55Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-12-13T21:07:10Z"
      },
      "sha": "eb6c32ec540a7b0b901bd64ee109c7ca6a1ccf75"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEzZmY5MGRiYmMxZjgwMDQ3YWQ2Y2MyOTFjODE0Nzc5MzVkMGM0YTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "tree": {
        "sha": "2c8fdc545997efa6106aec7e202d3c0936a4e720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c8fdc545997efa6106aec7e202d3c0936a4e720"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb6c32ec540a7b0b901bd64ee109c7ca6a1ccf75",
          "sha": "eb6c32ec540a7b0b901bd64ee109c7ca6a1ccf75",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/eb6c32ec540a7b0b901bd64ee109c7ca6a1ccf75"
        }
      ],
      "message": "test: Test migration of taproot output scripts",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-31T22:59:00Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-12-13T21:49:40Z"
      },
      "sha": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFhNDliMDNiMmFlNjVhMTgzY2ZmODZlYTE2Yjk3NmU5MGJhMjU5Mjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa49b03b2ae65a183cff86ea16b976e90ba25929",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aa49b03b2ae65a183cff86ea16b976e90ba25929",
      "tree": {
        "sha": "8c12e3140306e3daecfbafdbdb02b7908e5c87aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c12e3140306e3daecfbafdbdb02b7908e5c87aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
          "sha": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a3ff90dbbc1f80047ad6cc291c81477935d0c4a7"
        }
      ],
      "message": "test: Test migration of a solvable script with no privkeys\n\nThe legacy wallet will be able to solve output scripts where the\nredeemScript or witnessScript is known, but does not know any of the\nprivate keys involved in that script. These should be migrated to the\nsolvables wallet.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-31T22:59:00Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-12-16T20:07:19Z"
      },
      "sha": "aa49b03b2ae65a183cff86ea16b976e90ba25929"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ1ZTI4NDU3YTA5OWNkNTQ2ZTc1Nzk4NDA0M2YyOGJhOWY2Njg5YjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5e28457a099cd546e757984043f28ba9f6689b1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d5e28457a099cd546e757984043f28ba9f6689b1",
      "tree": {
        "sha": "4104d77174e3265fc478e99edfaa0f28da8c36a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4104d77174e3265fc478e99edfaa0f28da8c36a3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa49b03b2ae65a183cff86ea16b976e90ba25929",
          "sha": "aa49b03b2ae65a183cff86ea16b976e90ba25929",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aa49b03b2ae65a183cff86ea16b976e90ba25929"
        }
      ],
      "message": "fixup! wallet migration: Determine Solvables with CanProvide",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-31T23:29:40Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-01-31T23:29:40Z"
      },
      "sha": "d5e28457a099cd546e757984043f28ba9f6689b1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16147306443,
      "node_id": "HRFPE_lADOABII586jRhxQzwAAAAPCdFfL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16147306443",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/d5e28457a099cd546e757984043f28ba9f6689b1",
      "created_at": "2025-02-01T00:35:52Z"
    },
    {
      "event": "labeled",
      "id": 16147773997,
      "node_id": "LE_lADOABII586jRhxQzwAAAAPCe3ot",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16147773997",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-01T01:48:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2630633024,
      "node_id": "IC_kwDOABII586czEZA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2630633024",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T11:06:29Z",
      "updated_at": "2025-02-03T11:06:29Z",
      "author_association": "MEMBER",
      "body": "ACK d5e28457a099cd546e757984043f28ba9f6689b1 modulo fixup squash\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#issuecomment-2630633024",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31495"
    },
    {
      "event": "review_requested",
      "id": 16160506759,
      "node_id": "RRE_lADOABII586jRhxQzwAAAAPDPcOH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16160506759",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T11:06:34Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 16160506885,
      "node_id": "RRE_lADOABII586jRhxQzwAAAAPDPcQF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16160506885",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T11:06:34Z",
      "requested_reviewer": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 16160507064,
      "node_id": "RRE_lADOABII586jRhxQzwAAAAPDPcS4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16160507064",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T11:06:35Z",
      "requested_reviewer": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2589543430,
      "node_id": "PRR_kwDOABII586aWUwG",
      "url": null,
      "actor": null,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2589543430",
      "submitted_at": "2025-02-03T11:06:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    },
    {
      "event": "unlabeled",
      "id": 16164212495,
      "node_id": "UNLE_lADOABII586jRhxQzwAAAAPDdk8P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16164212495",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T15:25:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2595302398,
      "node_id": "PRR_kwDOABII586asSv-",
      "url": null,
      "actor": null,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Build and migration tests successful at d5e28457a099cd546e757984043f28ba9f6689b1.\r\n\r\nUtilising `isMine()` instead of reverse engineering looks to me a cautious approach to take, Concept ACK.\r\nGreat PR and enough context to go through for which I will review the PR again. ",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#pullrequestreview-2595302398",
      "submitted_at": "2025-02-05T14:52:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1903312194",
      "pull_request_review_id": 2530939442,
      "id": 1903312194,
      "node_id": "PRRC_kwDOABII585xcj1C",
      "diff_hunk": "@@ -1063,6 +1065,155 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"p2wsh\")\n+\n+        # Craft wsh(pkh(key))\n+        pubkey = wallet.getaddressinfo(wallet.getnewaddress())[\"pubkey\"]\n+        pkh_script = key_to_p2pkh_script(pubkey).hex()\n+        wsh_pkh_script = script_to_p2wsh_script(pkh_script).hex()\n+        wsh_pkh_addr = script_to_p2wsh(pkh_script)\n+\n+        wallet.importaddress(address=pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_pkh_script, p2sh=False)\n+\n+        def_wallet.sendtoaddress(wsh_pkh_addr, 5)\n+        self.generate(self.nodes[0], 6)\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+\n+        _, wallet = self.migrate_and_get_rpc(\"p2wsh\")\n+\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+        addr_info = wallet.getaddressinfo(wsh_pkh_addr)\n+        assert_equal(addr_info[\"ismine\"], True)\n+        assert_equal(addr_info[\"iswatchonly\"], False)\n+        assert_equal(addr_info[\"solvable\"], True)\n+\n+        wallet.unloadwallet()\n+\n+    def test_disallowed_p2wsh(self):\n+        self.log.info(\"Test that P2WSH output scripts with invalid witnessScripts are not migrated and do not cause migration failure\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"invalid_p2wsh\")\n+\n+        invalid_addrs = []\n+\n+        # For a P2WSH output script stored in the legacy wallet's mapScripts, both the native P2WSH\n+        # and the P2SH-P2WSH are detected by IsMine. We need to verify that descriptors for both\n+        # output scripts are added to the resulting descriptor wallet.\n+        # However, this cannot be done using a multisig as wallet migration treats multisigs specially.\n+        # Instead, this is tested by importing a wsh(pkh()) script. But importing this directly will\n+        # insert the wsh() into setWatchOnly which means that the setWatchOnly migration ends up handling\n+        # this case, which we do not want.\n+        # In order to get the wsh(pkh()) into only mapScripts and not setWatchOnly, we need to utilize\n+        # importmulti and wrap the wsh(pkh()) inside of a sh(). This will insert the sh(wsh(pkh())) into\n+        # setWatchOnly but not the wsh(pkh()).\n+        # Furthermore, migration should not migrate the wsh(pkh()) if the key is uncompressed.\n+        comp_eckey = ECKey()\n+        comp_eckey.generate(compressed=True)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 71,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9c21b8f581542aee0f599f1d8996ac97071bdf6f",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "seems like the picked commit 9c21b8f581542aee0f599f1d8996ac97071bdf6f is out-dated, as this sub-test was already changed to use `generate_keypair` in #30328 (see e.g. https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1878288769)",
      "created_at": "2025-01-05T17:37:04Z",
      "updated_at": "2025-01-05T19:16:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1903312194",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1903312194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": 1116,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1903322566",
      "pull_request_review_id": 2530939442,
      "id": 1903322566,
      "node_id": "PRRC_kwDOABII585xcmXG",
      "diff_hunk": "@@ -1955,6 +1955,7 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         std::string desc_str;\n         bool watchonly = !desc->ToPrivateString(*this, desc_str);\n         if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            WalletLogPrintf(\"%s\\n\", desc->ToString());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "850962d0074683cccbe0f63c864a70e0f31a8caf",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 850962d0074683cccbe0f63c864a70e0f31a8caf: is this a left-over from debugging or introduced intentionally?",
      "created_at": "2025-01-05T18:56:57Z",
      "updated_at": "2025-01-05T19:16:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1903322566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1903322566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1958,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904565515",
      "pull_request_review_id": 2532847501,
      "id": 1904565515,
      "node_id": "PRRC_kwDOABII585xhV0L",
      "diff_hunk": "@@ -1063,6 +1065,155 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"p2wsh\")\n+\n+        # Craft wsh(pkh(key))\n+        pubkey = wallet.getaddressinfo(wallet.getnewaddress())[\"pubkey\"]\n+        pkh_script = key_to_p2pkh_script(pubkey).hex()\n+        wsh_pkh_script = script_to_p2wsh_script(pkh_script).hex()\n+        wsh_pkh_addr = script_to_p2wsh(pkh_script)\n+\n+        wallet.importaddress(address=pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_pkh_script, p2sh=False)\n+\n+        def_wallet.sendtoaddress(wsh_pkh_addr, 5)\n+        self.generate(self.nodes[0], 6)\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+\n+        _, wallet = self.migrate_and_get_rpc(\"p2wsh\")\n+\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+        addr_info = wallet.getaddressinfo(wsh_pkh_addr)\n+        assert_equal(addr_info[\"ismine\"], True)\n+        assert_equal(addr_info[\"iswatchonly\"], False)\n+        assert_equal(addr_info[\"solvable\"], True)\n+\n+        wallet.unloadwallet()\n+\n+    def test_disallowed_p2wsh(self):\n+        self.log.info(\"Test that P2WSH output scripts with invalid witnessScripts are not migrated and do not cause migration failure\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"invalid_p2wsh\")\n+\n+        invalid_addrs = []\n+\n+        # For a P2WSH output script stored in the legacy wallet's mapScripts, both the native P2WSH\n+        # and the P2SH-P2WSH are detected by IsMine. We need to verify that descriptors for both\n+        # output scripts are added to the resulting descriptor wallet.\n+        # However, this cannot be done using a multisig as wallet migration treats multisigs specially.\n+        # Instead, this is tested by importing a wsh(pkh()) script. But importing this directly will\n+        # insert the wsh() into setWatchOnly which means that the setWatchOnly migration ends up handling\n+        # this case, which we do not want.\n+        # In order to get the wsh(pkh()) into only mapScripts and not setWatchOnly, we need to utilize\n+        # importmulti and wrap the wsh(pkh()) inside of a sh(). This will insert the sh(wsh(pkh())) into\n+        # setWatchOnly but not the wsh(pkh()).\n+        # Furthermore, migration should not migrate the wsh(pkh()) if the key is uncompressed.\n+        comp_eckey = ECKey()\n+        comp_eckey.generate(compressed=True)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 71,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9c21b8f581542aee0f599f1d8996ac97071bdf6f",
      "in_reply_to_id": 1903312194,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, fixed.",
      "created_at": "2025-01-06T19:44:07Z",
      "updated_at": "2025-01-06T19:44:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1904565515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904565515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": 1116,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904565593",
      "pull_request_review_id": 2532847639,
      "id": 1904565593,
      "node_id": "PRRC_kwDOABII585xhV1Z",
      "diff_hunk": "@@ -1955,6 +1955,7 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         std::string desc_str;\n         bool watchonly = !desc->ToPrivateString(*this, desc_str);\n         if (watchonly && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            WalletLogPrintf(\"%s\\n\", desc->ToString());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "850962d0074683cccbe0f63c864a70e0f31a8caf",
      "in_reply_to_id": 1903322566,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed",
      "created_at": "2025-01-06T19:44:13Z",
      "updated_at": "2025-01-06T19:44:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1904565593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904565593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1958,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913418467",
      "pull_request_review_id": 2547082375,
      "id": 1913418467,
      "node_id": "PRRC_kwDOABII585yDHLj",
      "diff_hunk": "@@ -111,7 +112,9 @@ def migrate_and_get_rpc(self, wallet_name, **kwargs):\n         # Migrate, checking that rescan does not occur\n         with self.master_node.assert_debug_log(expected_msgs=[], unexpected_msgs=[\"Rescanning\"]):\n             migrate_info = self.master_node.migratewallet(wallet_name=wallet_name, **kwargs)\n-        return migrate_info, self.master_node.get_wallet_rpc(wallet_name)\n+        rpc = self.master_node.get_wallet_rpc(wallet_name)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 13,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "88b67c95cbc9c3ae75ccbc39e4aba215b9910b8b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "88b67c95cbc9c3ae75ccbc39e4aba215b9910b8b nit: `wallet =` would be more consistent",
      "created_at": "2025-01-13T15:54:08Z",
      "updated_at": "2025-01-13T17:16:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1913418467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913418467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913428791",
      "pull_request_review_id": 2547082375,
      "id": 1913428791,
      "node_id": "PRRC_kwDOABII585yDJs3",
      "diff_hunk": "@@ -1063,6 +1064,151 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)",
      "path": "test/functional/wallet_migration.py",
      "position": 119,
      "original_position": 18,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9452f06a0283299c420a52f6b7f59f484cb60ca3",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "9452f06a0283299c420a52f6b7f59f484cb60ca3 nit: maybe call it `funding_wallet =`, or `default =` for consistency with `test_basic`. Alternatively you could introduce a helper `self.fund(address, amount)`",
      "created_at": "2025-01-13T16:00:43Z",
      "updated_at": "2025-01-13T17:16:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1913428791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913428791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1054,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913528143",
      "pull_request_review_id": 2547082375,
      "id": 1913528143,
      "node_id": "PRRC_kwDOABII585yDh9P",
      "diff_hunk": "@@ -1063,6 +1064,151 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"p2wsh\")\n+\n+        # Craft wsh(pkh(key))\n+        pubkey = wallet.getaddressinfo(wallet.getnewaddress())[\"pubkey\"]\n+        pkh_script = key_to_p2pkh_script(pubkey).hex()\n+        wsh_pkh_script = script_to_p2wsh_script(pkh_script).hex()\n+        wsh_pkh_addr = script_to_p2wsh(pkh_script)\n+\n+        wallet.importaddress(address=pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_pkh_script, p2sh=False)",
      "path": "test/functional/wallet_migration.py",
      "position": 133,
      "original_position": 29,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9452f06a0283299c420a52f6b7f59f484cb60ca3",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "9452f06a0283299c420a52f6b7f59f484cb60ca3: maybe add a comment to explain what's going on here. In particular why `pkh_script` needs to be imported, even though the legacy wallet tracks a `pkh(pubkey)` for every address you generate.\r\n\r\nIIUC:\r\n- normally the legacy wallet doesn't consider the `wsh(pkh(pubkey))` variant\r\n- It only has `pkh(pubkey)`, `wpkh(pubkey)` and `sh(wpkh(pukey)`\r\n  - but `pkh(pubkey)` is not in `mapScripts` (?) \r\n- The two `importaddress` calls add `pkh(pubkey)` and `wsh(pkh(pubkey))` scripts\r\n  - now `pkh(pubkey)` is in `mapScripts` (?)\r\n- The reason this doesn't end up in the seperate watch-only wallet, i.e. `ismine` and `solvable` below are true and `iswatchonly` is false:\r\n  - magic in the legacy IsMine when asked about `wsh(pkh(pubkey))`\r\n  - it goes through `case TxoutType::WITNESS_V0_SCRIPTHASH:`\r\n  - which looks for the subscript `pkh(pubkey)`, only in `mapScripts`\r\n  - and then recurses into `LegacyWalletIsMineInner` for `pkh(pubkey)`\r\n    -  which identifies it as a PUBKEYHASH, which finds `pubkey` in `mapKeys` and so we know it's spendable ",
      "created_at": "2025-01-13T17:09:23Z",
      "updated_at": "2025-01-13T17:16:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1913528143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913528143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1068,
      "original_line": 1068,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918646257",
      "pull_request_review_id": 2556310008,
      "id": 1918646257,
      "node_id": "PRRC_kwDOABII585yXDfx",
      "diff_hunk": "@@ -111,7 +112,9 @@ def migrate_and_get_rpc(self, wallet_name, **kwargs):\n         # Migrate, checking that rescan does not occur\n         with self.master_node.assert_debug_log(expected_msgs=[], unexpected_msgs=[\"Rescanning\"]):\n             migrate_info = self.master_node.migratewallet(wallet_name=wallet_name, **kwargs)\n-        return migrate_info, self.master_node.get_wallet_rpc(wallet_name)\n+        rpc = self.master_node.get_wallet_rpc(wallet_name)\n+        assert_equal(rpc.getwalletinfo()[\"descriptors\"], True)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 14,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "88b67c95cbc9c3ae75ccbc39e4aba215b9910b8b",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "88b67c95cbc9c3ae75ccbc39e4aba215b9910b8b: Since you're checking the \"descriptors\" field into `migrate_and_get_rpc`, you could also assert the wallet is sqlite and then remove the duplicated code along the test. e.g.:\r\n\r\n```py\r\n_, multisig0 = self.migrate_and_get_rpc(\"multisig0\")\r\nassert_equal(multisig0.getwalletinfo()[\"descriptors\"], True)\r\nself.assert_is_sqlite(\"multisig0\")\r\n```\r\n\r\n```py\r\n_, multisig1 = self.migrate_and_get_rpc(\"multisig1\")\r\nassert_equal(multisig1.getwalletinfo()[\"descriptors\"], True)\r\nself.assert_is_sqlite(\"multisig1\")\r\n```",
      "created_at": "2025-01-16T14:20:48Z",
      "updated_at": "2025-01-16T14:21:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1918646257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918646257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918868486",
      "pull_request_review_id": 2556687827,
      "id": 1918868486,
      "node_id": "PRRC_kwDOABII585yX5wG",
      "diff_hunk": "@@ -1063,6 +1064,151 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"p2wsh\")\n+\n+        # Craft wsh(pkh(key))\n+        pubkey = wallet.getaddressinfo(wallet.getnewaddress())[\"pubkey\"]\n+        pkh_script = key_to_p2pkh_script(pubkey).hex()\n+        wsh_pkh_script = script_to_p2wsh_script(pkh_script).hex()\n+        wsh_pkh_addr = script_to_p2wsh(pkh_script)\n+\n+        wallet.importaddress(address=pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_pkh_script, p2sh=False)",
      "path": "test/functional/wallet_migration.py",
      "position": 133,
      "original_position": 29,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9452f06a0283299c420a52f6b7f59f484cb60ca3",
      "in_reply_to_id": 1913528143,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I had same doubt. I understand that the generated address would be watch-only if we do not import as it's done in the test.",
      "created_at": "2025-01-16T16:38:05Z",
      "updated_at": "2025-01-16T16:38:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1918868486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918868486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1068,
      "original_line": 1068,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918877108",
      "pull_request_review_id": 2556701280,
      "id": 1918877108,
      "node_id": "PRRC_kwDOABII585yX720",
      "diff_hunk": "@@ -1925,6 +1925,19 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed\n+        // Re-parse the descriptors to detect that, and skip any that do not parse.\n+        {\n+            std::string desc_str = desc->ToString();\n+            FlatSigningProvider parsed_keys;\n+            std::string parse_error;\n+            std::vector<std::unique_ptr<Descriptor>> parsed_descs = Parse(desc_str, parsed_keys, parse_error, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "0f0ce579fffe533534dc117c854ebef3f277f18e",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "0f0ce579fffe533534dc117c854ebef3f277f18e: nit: No need to set `require_checksum`. It's false by default.",
      "created_at": "2025-01-16T16:43:34Z",
      "updated_at": "2025-01-16T16:43:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1918877108",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918877108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1935,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918971327",
      "pull_request_review_id": 2556856579,
      "id": 1918971327,
      "node_id": "PRRC_kwDOABII585yYS2_",
      "diff_hunk": "@@ -1209,6 +1209,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of a legacy wallet containing miniscript\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"miniscript\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        # Make a descriptor where we only have some of the keys. This will be migrated to the watchonly wallet.\n+        some_keys_priv_desc = descsum_create(f\"wsh(or_b(pk({privkey}),s:pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0)))\")\n+        some_keys_addr = self.master_node.deriveaddresses(some_keys_priv_desc)[0]\n+\n+        # Make a descriptor where we have all of the keys. This will stay in the migrated wallet\n+        all_keys_priv_desc = descsum_create(f\"wsh(and_v(v:pk({privkey}),1))\")\n+        all_keys_addr = self.master_node.deriveaddresses(all_keys_priv_desc)[0]\n+\n+        imp = wallet.importmulti([\n+            {\n+                \"desc\": some_keys_priv_desc,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                \"desc\": all_keys_priv_desc,\n+                \"timestamp\": \"now\",\n+            }\n+        ])\n+        assert_equal(imp[0][\"success\"], True)\n+        assert_equal(imp[1][\"success\"], True)\n+\n+        def_wallet.sendtoaddress(some_keys_addr, 1)\n+        def_wallet.sendtoaddress(all_keys_addr, 1)\n+        self.generate(self.master_node, 6)\n+        # Double check that the miniscript can be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{some_keys_addr: 1},{all_keys_addr: 0.75}], include_watching=True, change_address=def_wallet.getnewaddress())\n+        assert_equal(send_res[\"complete\"], True)\n+        self.generate(self.old_node, 6)\n+        assert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 1.75)\n+\n+        res, wallet = self.migrate_and_get_rpc(\"miniscript\")",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 44,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "56d5a6a495bfa5da540e9832443ce8f130c4c960",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "56d5a6a495bfa5da540e9832443ce8f130c4c960: nit: `res` is not being used.",
      "created_at": "2025-01-16T17:55:21Z",
      "updated_at": "2025-01-16T17:55:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1918971327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918971327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920735492",
      "pull_request_review_id": 2559952973,
      "id": 1920735492,
      "node_id": "PRRC_kwDOABII585yfBkE",
      "diff_hunk": "@@ -1320,6 +1320,34 @@ def test_taproot(self):\n         assert_equal(watchonly.getaddressinfo(tr_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(tr_script_addr)[\"ismine\"], True)\n \n+    def test_solvable_no_privs(self):\n+        self.log.info(\"Test migrating a multisig that we do not have any private keys for\")\n+        wallet = self.create_legacy_wallet(\"multisig_noprivs\")\n+\n+        privkey, pubkey = generate_keypair(compressed=True, wif=True)\n+\n+        add_ms_res = wallet.addmultisigaddress(nrequired=1, keys=[pubkey.hex()])\n+        addr = add_ms_res[\"address\"]\n+\n+        # The multisig address should be ISMINE_NO but we should have the script info\n+        addr_info = wallet.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], False)\n+        assert \"hex\" in addr_info\n+\n+        migrate_res, wallet = self.migrate_and_get_rpc(\"multisig_noprivs\")\n+        assert_equal(migrate_res[\"solvables_name\"], \"multisig_noprivs_solvables\")\n+        solvables = self.master_node.get_wallet_rpc(migrate_res[\"solvables_name\"])\n+\n+        # The multisig should not be in the spendable wallet\n+        addr_info = wallet.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], False)\n+        assert \"hex\" not in addr_info\n+\n+        # The multisig address should be in the solvables wallet\n+        addr_info = solvables.getaddressinfo(addr)",
      "path": "test/functional/wallet_migration.py",
      "position": 404,
      "original_position": 28,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "3474524ee56dc3d0d009fe1462092ae5d6cbd775",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "3474524ee56dc3d0d009fe1462092ae5d6cbd775: It should be in the solvables wallet, so we could check it in `getaddressinfo`:\r\n```diff\r\n@@ -1346,6 +1346,7 @@ class WalletMigrationTest(BitcoinTestFramework):\r\n         # The multisig address should be in the solvables wallet\r\n         addr_info = solvables.getaddressinfo(addr)\r\n         assert_equal(addr_info[\"ismine\"], True)\r\n+        assert_equal(addr_info['solvable'], True)\r\n         assert \"hex\" in addr_info\r\n```",
      "created_at": "2025-01-17T21:02:41Z",
      "updated_at": "2025-01-17T21:02:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1920735492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920735492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1339,
      "original_line": 1339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922902352",
      "pull_request_review_id": 2563224089,
      "id": 1922902352,
      "node_id": "PRRC_kwDOABII585ynSlQ",
      "diff_hunk": "@@ -1063,6 +1064,151 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)",
      "path": "test/functional/wallet_migration.py",
      "position": 119,
      "original_position": 18,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9452f06a0283299c420a52f6b7f59f484cb60ca3",
      "in_reply_to_id": 1913428791,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`def_wallet` is a common name used for several other test cases, I don't think it's necessary to rename it.\r\n\r\nI don't think a `self.fund()` helper would be all that useful considering that this is basically 2 lines, and several tests still need to access the default wallet anyways outside of funding the test wallet.",
      "created_at": "2025-01-20T23:10:11Z",
      "updated_at": "2025-01-20T23:10:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1922902352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922902352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1054,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922907885",
      "pull_request_review_id": 2563231853,
      "id": 1922907885,
      "node_id": "PRRC_kwDOABII585ynT7t",
      "diff_hunk": "@@ -111,7 +112,9 @@ def migrate_and_get_rpc(self, wallet_name, **kwargs):\n         # Migrate, checking that rescan does not occur\n         with self.master_node.assert_debug_log(expected_msgs=[], unexpected_msgs=[\"Rescanning\"]):\n             migrate_info = self.master_node.migratewallet(wallet_name=wallet_name, **kwargs)\n-        return migrate_info, self.master_node.get_wallet_rpc(wallet_name)\n+        rpc = self.master_node.get_wallet_rpc(wallet_name)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 13,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "88b67c95cbc9c3ae75ccbc39e4aba215b9910b8b",
      "in_reply_to_id": 1913418467,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-01-20T23:25:14Z",
      "updated_at": "2025-01-20T23:25:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1922907885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922907885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922907952",
      "pull_request_review_id": 2563231940,
      "id": 1922907952,
      "node_id": "PRRC_kwDOABII585ynT8w",
      "diff_hunk": "@@ -1063,6 +1064,151 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"p2wsh\")\n+\n+        # Craft wsh(pkh(key))\n+        pubkey = wallet.getaddressinfo(wallet.getnewaddress())[\"pubkey\"]\n+        pkh_script = key_to_p2pkh_script(pubkey).hex()\n+        wsh_pkh_script = script_to_p2wsh_script(pkh_script).hex()\n+        wsh_pkh_addr = script_to_p2wsh(pkh_script)\n+\n+        wallet.importaddress(address=pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_pkh_script, p2sh=False)",
      "path": "test/functional/wallet_migration.py",
      "position": 133,
      "original_position": 29,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9452f06a0283299c420a52f6b7f59f484cb60ca3",
      "in_reply_to_id": 1913528143,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment.",
      "created_at": "2025-01-20T23:25:24Z",
      "updated_at": "2025-01-20T23:25:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1922907952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922907952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1068,
      "original_line": 1068,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922907977",
      "pull_request_review_id": 2563231999,
      "id": 1922907977,
      "node_id": "PRRC_kwDOABII585ynT9J",
      "diff_hunk": "@@ -111,7 +112,9 @@ def migrate_and_get_rpc(self, wallet_name, **kwargs):\n         # Migrate, checking that rescan does not occur\n         with self.master_node.assert_debug_log(expected_msgs=[], unexpected_msgs=[\"Rescanning\"]):\n             migrate_info = self.master_node.migratewallet(wallet_name=wallet_name, **kwargs)\n-        return migrate_info, self.master_node.get_wallet_rpc(wallet_name)\n+        rpc = self.master_node.get_wallet_rpc(wallet_name)\n+        assert_equal(rpc.getwalletinfo()[\"descriptors\"], True)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 14,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "88b67c95cbc9c3ae75ccbc39e4aba215b9910b8b",
      "in_reply_to_id": 1918646257,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-01-20T23:25:28Z",
      "updated_at": "2025-01-20T23:25:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1922907977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922907977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922908018",
      "pull_request_review_id": 2563232039,
      "id": 1922908018,
      "node_id": "PRRC_kwDOABII585ynT9y",
      "diff_hunk": "@@ -1925,6 +1925,19 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed\n+        // Re-parse the descriptors to detect that, and skip any that do not parse.\n+        {\n+            std::string desc_str = desc->ToString();\n+            FlatSigningProvider parsed_keys;\n+            std::string parse_error;\n+            std::vector<std::unique_ptr<Descriptor>> parsed_descs = Parse(desc_str, parsed_keys, parse_error, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "0f0ce579fffe533534dc117c854ebef3f277f18e",
      "in_reply_to_id": 1918877108,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-01-20T23:25:32Z",
      "updated_at": "2025-01-20T23:25:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1922908018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922908018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1935,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922908068",
      "pull_request_review_id": 2563232182,
      "id": 1922908068,
      "node_id": "PRRC_kwDOABII585ynT-k",
      "diff_hunk": "@@ -1209,6 +1209,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of a legacy wallet containing miniscript\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"miniscript\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        # Make a descriptor where we only have some of the keys. This will be migrated to the watchonly wallet.\n+        some_keys_priv_desc = descsum_create(f\"wsh(or_b(pk({privkey}),s:pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0)))\")\n+        some_keys_addr = self.master_node.deriveaddresses(some_keys_priv_desc)[0]\n+\n+        # Make a descriptor where we have all of the keys. This will stay in the migrated wallet\n+        all_keys_priv_desc = descsum_create(f\"wsh(and_v(v:pk({privkey}),1))\")\n+        all_keys_addr = self.master_node.deriveaddresses(all_keys_priv_desc)[0]\n+\n+        imp = wallet.importmulti([\n+            {\n+                \"desc\": some_keys_priv_desc,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                \"desc\": all_keys_priv_desc,\n+                \"timestamp\": \"now\",\n+            }\n+        ])\n+        assert_equal(imp[0][\"success\"], True)\n+        assert_equal(imp[1][\"success\"], True)\n+\n+        def_wallet.sendtoaddress(some_keys_addr, 1)\n+        def_wallet.sendtoaddress(all_keys_addr, 1)\n+        self.generate(self.master_node, 6)\n+        # Double check that the miniscript can be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{some_keys_addr: 1},{all_keys_addr: 0.75}], include_watching=True, change_address=def_wallet.getnewaddress())\n+        assert_equal(send_res[\"complete\"], True)\n+        self.generate(self.old_node, 6)\n+        assert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 1.75)\n+\n+        res, wallet = self.migrate_and_get_rpc(\"miniscript\")",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 44,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "56d5a6a495bfa5da540e9832443ce8f130c4c960",
      "in_reply_to_id": 1918971327,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed",
      "created_at": "2025-01-20T23:25:38Z",
      "updated_at": "2025-01-20T23:25:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1922908068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922908068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922908116",
      "pull_request_review_id": 2563232311,
      "id": 1922908116,
      "node_id": "PRRC_kwDOABII585ynT_U",
      "diff_hunk": "@@ -1320,6 +1320,34 @@ def test_taproot(self):\n         assert_equal(watchonly.getaddressinfo(tr_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(tr_script_addr)[\"ismine\"], True)\n \n+    def test_solvable_no_privs(self):\n+        self.log.info(\"Test migrating a multisig that we do not have any private keys for\")\n+        wallet = self.create_legacy_wallet(\"multisig_noprivs\")\n+\n+        privkey, pubkey = generate_keypair(compressed=True, wif=True)\n+\n+        add_ms_res = wallet.addmultisigaddress(nrequired=1, keys=[pubkey.hex()])\n+        addr = add_ms_res[\"address\"]\n+\n+        # The multisig address should be ISMINE_NO but we should have the script info\n+        addr_info = wallet.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], False)\n+        assert \"hex\" in addr_info\n+\n+        migrate_res, wallet = self.migrate_and_get_rpc(\"multisig_noprivs\")\n+        assert_equal(migrate_res[\"solvables_name\"], \"multisig_noprivs_solvables\")\n+        solvables = self.master_node.get_wallet_rpc(migrate_res[\"solvables_name\"])\n+\n+        # The multisig should not be in the spendable wallet\n+        addr_info = wallet.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], False)\n+        assert \"hex\" not in addr_info\n+\n+        # The multisig address should be in the solvables wallet\n+        addr_info = solvables.getaddressinfo(addr)",
      "path": "test/functional/wallet_migration.py",
      "position": 404,
      "original_position": 28,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "3474524ee56dc3d0d009fe1462092ae5d6cbd775",
      "in_reply_to_id": 1920735492,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added",
      "created_at": "2025-01-20T23:25:42Z",
      "updated_at": "2025-01-20T23:25:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1922908116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1922908116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1339,
      "original_line": 1339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923515986",
      "pull_request_review_id": 2564262259,
      "id": 1923515986,
      "node_id": "PRRC_kwDOABII585ypoZS",
      "diff_hunk": "@@ -1047,6 +1048,154 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"p2wsh\")\n+\n+        # Craft wsh(pkh(key))\n+        pubkey = wallet.getaddressinfo(wallet.getnewaddress())[\"pubkey\"]\n+        pkh_script = key_to_p2pkh_script(pubkey).hex()\n+        wsh_pkh_script = script_to_p2wsh_script(pkh_script).hex()\n+        wsh_pkh_addr = script_to_p2wsh(pkh_script)\n+\n+        # Legacy single key scripts (i.e. pkh(key) and pk(key)) are not inserted into mapScripts\n+        # automatically, they need to be imported directly if we want to receive to P2WSH (or P2SH)\n+        # wrappings of such scripts.\n+        wallet.importaddress(address=pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_pkh_script, p2sh=False)\n+\n+        def_wallet.sendtoaddress(wsh_pkh_addr, 5)\n+        self.generate(self.nodes[0], 6)\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+\n+        _, wallet = self.migrate_and_get_rpc(\"p2wsh\")\n+\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+        addr_info = wallet.getaddressinfo(wsh_pkh_addr)\n+        assert_equal(addr_info[\"ismine\"], True)\n+        assert_equal(addr_info[\"iswatchonly\"], False)\n+        assert_equal(addr_info[\"solvable\"], True)\n+\n+        wallet.unloadwallet()\n+\n+    def test_disallowed_p2wsh(self):\n+        self.log.info(\"Test that P2WSH output scripts with invalid witnessScripts are not migrated and do not cause migration failure\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"invalid_p2wsh\")\n+\n+        invalid_addrs = []\n+\n+        # For a P2WSH output script stored in the legacy wallet's mapScripts, both the native P2WSH\n+        # and the P2SH-P2WSH are detected by IsMine. We need to verify that descriptors for both\n+        # output scripts are added to the resulting descriptor wallet.\n+        # However, this cannot be done using a multisig as wallet migration treats multisigs specially.\n+        # Instead, this is tested by importing a wsh(pkh()) script. But importing this directly will\n+        # insert the wsh() into setWatchOnly which means that the setWatchOnly migration ends up handling\n+        # this case, which we do not want.\n+        # In order to get the wsh(pkh()) into only mapScripts and not setWatchOnly, we need to utilize\n+        # importmulti and wrap the wsh(pkh()) inside of a sh(). This will insert the sh(wsh(pkh())) into\n+        # setWatchOnly but not the wsh(pkh()).\n+        # Furthermore, migration should not migrate the wsh(pkh()) if the key is uncompressed.\n+        comp_wif, comp_pubkey = generate_keypair(compressed=True, wif=True)\n+        comp_pkh_script = key_to_p2pkh_script(comp_pubkey).hex()\n+        comp_wsh_pkh_script = script_to_p2wsh_script(comp_pkh_script).hex()\n+        comp_sh_wsh_pkh_script = script_to_p2sh_script(comp_wsh_pkh_script).hex()\n+        comp_wsh_pkh_addr = script_to_p2wsh(comp_pkh_script)\n+\n+        uncomp_wif, uncomp_pubkey = generate_keypair(compressed=False, wif=True)\n+        uncomp_pkh_script = key_to_p2pkh_script(uncomp_pubkey).hex()\n+        uncomp_wsh_pkh_script = script_to_p2wsh_script(uncomp_pkh_script).hex()\n+        uncomp_sh_wsh_pkh_script = script_to_p2sh_script(uncomp_wsh_pkh_script).hex()\n+        uncomp_wsh_pkh_addr = script_to_p2wsh(uncomp_pkh_script)\n+        invalid_addrs.append(uncomp_wsh_pkh_addr)\n+\n+        import_res = wallet.importmulti([\n+            {\n+                \"scriptPubKey\": comp_sh_wsh_pkh_script,\n+                \"timestamp\": \"now\",\n+                \"redeemscript\": comp_wsh_pkh_script,\n+                \"witnessscript\": comp_pkh_script,\n+                \"keys\": [\n+                    comp_wif,\n+                ],\n+            },\n+            {\n+                \"scriptPubKey\": uncomp_sh_wsh_pkh_script,\n+                \"timestamp\": \"now\",\n+                \"redeemscript\": uncomp_wsh_pkh_script,\n+                \"witnessscript\": uncomp_pkh_script,\n+                \"keys\": [\n+                    uncomp_wif,\n+                ],\n+            },\n+        ])\n+        assert_equal(import_res[0][\"success\"], True)\n+        assert_equal(import_res[1][\"success\"], True)\n+\n+        # Create a wsh(sh(pkh())) - P2SH inside of P2WSH is invalid\n+        comp_sh_pkh_script = script_to_p2sh_script(comp_pkh_script).hex()\n+        wsh_sh_pkh_script = script_to_p2wsh_script(comp_sh_pkh_script).hex()\n+        wsh_sh_pkh_addr = script_to_p2wsh(comp_sh_pkh_script)\n+        invalid_addrs.append(wsh_sh_pkh_addr)\n+\n+        # Import wsh(sh(pkh()))\n+        wallet.importaddress(address=comp_sh_pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_sh_pkh_script, p2sh=False)\n+\n+        # Create a wsh(wsh(pkh())) - P2WSH inside of P2WSH is invalid\n+        wsh_wsh_pkh_script = script_to_p2wsh_script(comp_wsh_pkh_script).hex()\n+        wsh_wsh_pkh_addr = script_to_p2wsh(comp_wsh_pkh_script)\n+        invalid_addrs.append(wsh_wsh_pkh_addr)\n+\n+        # Import wsh(wsh(pkh()))\n+        wallet.importaddress(address=wsh_wsh_pkh_script, p2sh=False)\n+\n+        # The wsh(pkh()) with a compressed key is always valid, so we should see that the wallet detects it as ismine, not\n+        # watchonly, and can provide us information about the witnessScript via \"embedded\"\n+        comp_wsh_pkh_addr_info = wallet.getaddressinfo(comp_wsh_pkh_addr)\n+        assert_equal(comp_wsh_pkh_addr_info[\"ismine\"], True)\n+        assert_equal(comp_wsh_pkh_addr_info[\"iswatchonly\"], False)\n+        assert \"embedded\" in comp_wsh_pkh_addr_info\n+\n+        # The invalid addresses are invalid, so the legcy wallet should not detect them as ismine,\n+        # nor consider them watchonly. However, because the legacy wallet has the witnessScripts/redeemScripts,\n+        # we should see information about those in \"embedded\"\n+        for addr in invalid_addrs:\n+            addr_info = wallet.getaddressinfo(addr)\n+            assert_equal(addr_info[\"ismine\"], False)\n+            assert_equal(addr_info[\"iswatchonly\"], False)\n+            assert \"embedded\" in addr_info\n+\n+        # Fund those output scripts\n+        def_wallet.send([{comp_wsh_pkh_addr: 1}] + [{k: i + 1} for i, k in enumerate(invalid_addrs)])\n+        self.generate(self.nodes[0], 6)\n+        assert_equal(wallet.getbalances()[\"mine\"][\"trusted\"], 1)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 140,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9c0d5856d2065119232bb4ca651391ed829a99d4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "9c0d5856d2065119232bb4ca651391ed829a99d4: maybe add a comment here that coins sent to invalid addresses won't show up in the destination wallet.\r\n\r\nYou can also add:\r\n\r\n```py\r\nassert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 0)\r\n```\r\n\r\nAnd maybe:\r\n\r\n```py\r\nassert_equal(len(wallet.listtransactions(include_watchonly=True)), 1)\r\n```",
      "created_at": "2025-01-21T11:00:30Z",
      "updated_at": "2025-01-21T12:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1923515986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923515986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923553764",
      "pull_request_review_id": 2564262259,
      "id": 1923553764,
      "node_id": "PRRC_kwDOABII585ypxnk",
      "diff_hunk": "@@ -1700,59 +1700,59 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys() const\n+std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetCandidateScriptPubKeys() const\n {\n     LOCK(cs_KeyStore);\n-    std::unordered_set<CScript, SaltedSipHasher> spks;\n+    std::unordered_set<CScript, SaltedSipHasher> candidate_spks;\n \n-    // All keys have at least P2PK and P2PKH\n-    for (const auto& key_pair : mapKeys) {\n-        const CPubKey& pub = key_pair.second.GetPubKey();\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    // For every private key in the wallet, there should be a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 25,
      "original_position": 16,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "936fe5899f9086f99a9a7f05584f467add2bc45b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "936fe5899f9086f99a9a7f05584f467add2bc45b: should or could? IIUC if we migrate a pre-segwit wallet, then the `IsMine()` check below will throw out `P2WPKH` and `P2SH-P2WPKH`. But the migrated wallet will watch those addresses anyway, because it uses a `combo()` descriptor.\r\n\r\nIf so, it would be good to note that.",
      "created_at": "2025-01-21T11:28:33Z",
      "updated_at": "2025-01-21T12:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1923553764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923553764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1708,
      "original_line": 1708,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923574532",
      "pull_request_review_id": 2564262259,
      "id": 1923574532,
      "node_id": "PRRC_kwDOABII585yp2sE",
      "diff_hunk": "@@ -1700,59 +1700,59 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys() const\n+std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetCandidateScriptPubKeys() const\n {\n     LOCK(cs_KeyStore);\n-    std::unordered_set<CScript, SaltedSipHasher> spks;\n+    std::unordered_set<CScript, SaltedSipHasher> candidate_spks;\n \n-    // All keys have at least P2PK and P2PKH\n-    for (const auto& key_pair : mapKeys) {\n-        const CPubKey& pub = key_pair.second.GetPubKey();\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    // For every private key in the wallet, there should be a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH\n+    const auto& add_pubkey = [&candidate_spks](const CPubKey& pub) -> void {\n+        candidate_spks.insert(GetScriptForRawPubKey(pub));\n+        candidate_spks.insert(GetScriptForDestination(PKHash(pub)));\n+\n+        CScript wpkh = GetScriptForDestination(WitnessV0KeyHash(pub));\n+        candidate_spks.insert(wpkh);\n+        candidate_spks.insert(GetScriptForDestination(ScriptHash(wpkh)));\n+    };\n+    for (const auto& [_, key] : mapKeys) {\n+        add_pubkey(key.GetPubKey());\n     }\n-    for (const auto& key_pair : mapCryptedKeys) {\n-        const CPubKey& pub = key_pair.second.first;\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    for (const auto& [_, ckeypair] : mapCryptedKeys) {\n+        add_pubkey(ckeypair.first);\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n-    // The watchonly ones will be in setWatchOnly which we deal with later\n-    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n-                spks.insert(GetScriptForDestination(ScriptHash(script)));\n-            }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n-                spks.insert(script);\n-            }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n-                }\n-            }\n-        }\n+    // mapScripts contains all redeemScripts and witnessScripts. Therefore each script in it has\n+    // itself, P2SH, P2WSH, and P2SH-P2WSH as a candidate.",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 82,
      "original_position": 65,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "936fe5899f9086f99a9a7f05584f467add2bc45b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "936fe5899f9086f99a9a7f05584f467add2bc45b: it seems worth noting here that we'll add some p2sh-of-p2sh scripts, but that those will get filtered, so we don't bother with a `script.IsPayToScriptHash()` check.\r\n\r\nDitto for the segwit and multisig checks that are now removed, I think it's worth mentioning that are intentionally added here for simplicity, and then filtered.",
      "created_at": "2025-01-21T11:45:40Z",
      "updated_at": "2025-01-21T12:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1923574532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923574532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1725,
      "original_line": 1725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923583439",
      "pull_request_review_id": 2564262259,
      "id": 1923583439,
      "node_id": "PRRC_kwDOABII585yp43P",
      "diff_hunk": "@@ -1925,6 +1925,19 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed\n+        // Re-parse the descriptors to detect that, and skip any that do not parse.\n+        {\n+            std::string desc_str = desc->ToString();\n+            FlatSigningProvider parsed_keys;\n+            std::string parse_error;\n+            std::vector<std::unique_ptr<Descriptor>> parsed_descs = Parse(desc_str, parsed_keys, parse_error);\n+            if (parsed_descs.empty()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 131,
      "original_position": 12,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "7d199d062d8794cde46631e61f2c116b9e37f573",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "7d199d062d8794cde46631e61f2c116b9e37f573: why is it safe to not abort the migration over this?\r\n\r\nAlso, won't this hit the `assert(spks.size() == 0);` added by the next commit?",
      "created_at": "2025-01-21T11:52:32Z",
      "updated_at": "2025-01-21T12:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1923583439",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923583439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1939,
      "original_line": 1939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923632724",
      "pull_request_review_id": 2564262259,
      "id": 1923632724,
      "node_id": "PRRC_kwDOABII585yqE5U",
      "diff_hunk": "@@ -1987,57 +1987,51 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);\n+\n+    // Legacy wallets can also contains scripts whose P2SH, P2WSH, or P2SH-P2WSH it is not watching for\n+    // but can provide script data to a PSBT spending them. These \"solvable\" output scripts will need to\n+    // be put into the separate \"solvables\" wallet.\n+    // These can be detected by going through the entire candidate output scripts, finding the ISMINE_NO scripts,\n+    // and checking CanProvide() which will dummy sign.\n+    for (const CScript& script : GetCandidateScriptPubKeys()) {\n+        // Since we only care about P2SH, P2WSH, and P2SH-P2WSH, filter out any scripts that are not those\n+        if (!script.IsPayToScriptHash() && !script.IsPayToWitnessScriptHash()) {\n+            continue;\n+        }\n+        if (IsMine(script) != ISMINE_NO) {\n+            continue;\n+        }\n+        SignatureData dummy_sigdata;\n+        if (!CanProvide(script, dummy_sigdata)) {\n+            continue;\n+        }\n \n         // Get birthdate from script meta\n         uint64_t creation_time = 0;\n-        const auto& it = m_script_metadata.find(CScriptID(script));\n-        if (it != m_script_metadata.end()) {\n-            creation_time = it->second.nCreateTime;\n+        const auto& mit = m_script_metadata.find(CScriptID(script));\n+        if (mit != m_script_metadata.end()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "ca0564e02c72ea57d89ec37f0f4948e6a5d0096e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ca0564e02c72ea57d89ec37f0f4948e6a5d0096e: you're renaming `it` to `mit` for consistency with above? Not sure if it's helpful though.",
      "created_at": "2025-01-21T12:23:06Z",
      "updated_at": "2025-01-21T12:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1923632724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923632724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923639342",
      "pull_request_review_id": 2564262259,
      "id": 1923639342,
      "node_id": "PRRC_kwDOABII585yqGgu",
      "diff_hunk": "@@ -1987,57 +1987,51 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);\n+\n+    // Legacy wallets can also contains scripts whose P2SH, P2WSH, or P2SH-P2WSH it is not watching for\n+    // but can provide script data to a PSBT spending them. These \"solvable\" output scripts will need to\n+    // be put into the separate \"solvables\" wallet.\n+    // These can be detected by going through the entire candidate output scripts, finding the ISMINE_NO scripts,\n+    // and checking CanProvide() which will dummy sign.\n+    for (const CScript& script : GetCandidateScriptPubKeys()) {\n+        // Since we only care about P2SH, P2WSH, and P2SH-P2WSH, filter out any scripts that are not those\n+        if (!script.IsPayToScriptHash() && !script.IsPayToWitnessScriptHash()) {\n+            continue;\n+        }\n+        if (IsMine(script) != ISMINE_NO) {\n+            continue;\n+        }\n+        SignatureData dummy_sigdata;\n+        if (!CanProvide(script, dummy_sigdata)) {\n+            continue;\n+        }\n \n         // Get birthdate from script meta\n         uint64_t creation_time = 0;\n-        const auto& it = m_script_metadata.find(CScriptID(script));\n-        if (it != m_script_metadata.end()) {\n-            creation_time = it->second.nCreateTime;\n+        const auto& mit = m_script_metadata.find(CScriptID(script));\n+        if (mit != m_script_metadata.end()) {\n+            creation_time = mit->second.nCreateTime;\n         }\n \n-        std::vector<std::vector<unsigned char>> sols;\n-        TxoutType type = Solver(script, sols);\n-        if (type == TxoutType::MULTISIG) {\n-            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n-            CTxDestination witdest = WitnessV0ScriptHash(script);\n-            CScript witprog = GetScriptForDestination(witdest);\n-            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n-\n-            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 187,
      "original_position": 47,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "ca0564e02c72ea57d89ec37f0f4948e6a5d0096e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ca0564e02c72ea57d89ec37f0f4948e6a5d0096e: I think it's worth preserving some of this comment, if only to explain to future readers why we went for the `GetCandidateScriptPubKeys() | CanProvide` approach.\r\n\r\nPerhaps in `CanProvide`?",
      "created_at": "2025-01-21T12:26:32Z",
      "updated_at": "2025-01-21T12:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1923639342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923639342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1997,
      "original_line": 1997,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923653059",
      "pull_request_review_id": 2564262259,
      "id": 1923653059,
      "node_id": "PRRC_kwDOABII585yqJ3D",
      "diff_hunk": "@@ -1196,6 +1196,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.",
      "path": "test/functional/wallet_migration.py",
      "position": 273,
      "original_position": 7,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "e41f47597d86022d5a9947ee0b08151d4336cffc",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e41f47597d86022d5a9947ee0b08151d4336cffc: Is this only intended for users who called `importmulti` on a legacy wallet? Or could those scripts have ended up in legacy wallets in other ways?\r\n\r\nIf the latter is the case, do you mean that only modern node versions with miniscript support can sign them? Or could pre-miniscript nodes spend them as well? Might be worth illustrating with an older node (< v25?), if the `miniscript ` wallet here can be loaded by that older version.\r\n",
      "created_at": "2025-01-21T12:36:40Z",
      "updated_at": "2025-01-21T12:48:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1923653059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923653059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1208,
      "original_line": 1208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923657743",
      "pull_request_review_id": 2564262259,
      "id": 1923657743,
      "node_id": "PRRC_kwDOABII585yqLAP",
      "diff_hunk": "@@ -1196,6 +1196,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of a legacy wallet containing miniscript\")",
      "path": "test/functional/wallet_migration.py",
      "position": 274,
      "original_position": 8,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "e41f47597d86022d5a9947ee0b08151d4336cffc",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e41f47597d86022d5a9947ee0b08151d4336cffc: \"containing scripts matching miniscript\" / \"containing scripts imported from miniscript\"?",
      "created_at": "2025-01-21T12:39:50Z",
      "updated_at": "2025-01-21T12:50:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1923657743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1923657743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1209,
      "original_line": 1209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924134722",
      "pull_request_review_id": 2565308406,
      "id": 1924134722,
      "node_id": "PRRC_kwDOABII585yr_dC",
      "diff_hunk": "@@ -1925,6 +1925,19 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed\n+        // Re-parse the descriptors to detect that, and skip any that do not parse.\n+        {\n+            std::string desc_str = desc->ToString();\n+            FlatSigningProvider parsed_keys;\n+            std::string parse_error;\n+            std::vector<std::unique_ptr<Descriptor>> parsed_descs = Parse(desc_str, parsed_keys, parse_error);\n+            if (parsed_descs.empty()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 131,
      "original_position": 12,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "7d199d062d8794cde46631e61f2c116b9e37f573",
      "in_reply_to_id": 1923583439,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Also, won't this hit the `assert(spks.size() == 0);` added by the next commit?\r\n\r\nWas also wondering about this. IIUC, we can't directly `continue` here, but would need execute the \"`// Remove the scriptPubKeys from our current set`\" loop below for also for skipped output scripts, as otherwise the set isn't empty and the assertion throws. Would be good to have test coverage for the skipping scenario, but I presume that isn't possible, as we'd need to intentionally modify the behaviour of `InferDescriptor` only for the test (to re-introduce past bugs that caused this)?",
      "created_at": "2025-01-21T17:36:22Z",
      "updated_at": "2025-01-21T17:36:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924134722",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924134722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1939,
      "original_line": 1939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924202539",
      "pull_request_review_id": 2565421658,
      "id": 1924202539,
      "node_id": "PRRC_kwDOABII585ysQAr",
      "diff_hunk": "@@ -1700,59 +1700,59 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys() const\n+std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetCandidateScriptPubKeys() const\n {\n     LOCK(cs_KeyStore);\n-    std::unordered_set<CScript, SaltedSipHasher> spks;\n+    std::unordered_set<CScript, SaltedSipHasher> candidate_spks;\n \n-    // All keys have at least P2PK and P2PKH\n-    for (const auto& key_pair : mapKeys) {\n-        const CPubKey& pub = key_pair.second.GetPubKey();\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    // For every private key in the wallet, there should be a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 25,
      "original_position": 16,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "936fe5899f9086f99a9a7f05584f467add2bc45b",
      "in_reply_to_id": 1923553764,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should, because loading a legacy wallet will add the P2WPKH script to `mapScripts` for all keys, regardless of pre or post segwit. This is done in memory only, on loading.",
      "created_at": "2025-01-21T18:34:37Z",
      "updated_at": "2025-01-21T18:34:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924202539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924202539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1708,
      "original_line": 1708,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924211960",
      "pull_request_review_id": 2565437878,
      "id": 1924211960,
      "node_id": "PRRC_kwDOABII585ysST4",
      "diff_hunk": "@@ -1196,6 +1196,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.",
      "path": "test/functional/wallet_migration.py",
      "position": 273,
      "original_position": 7,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "e41f47597d86022d5a9947ee0b08151d4336cffc",
      "in_reply_to_id": 1923653059,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe the only way is through `importmulti`.\r\n\r\nVersions without miniscript cannot sign for miniscript. I feel like that's obvious and we don't need a test for that.",
      "created_at": "2025-01-21T18:43:18Z",
      "updated_at": "2025-01-21T18:43:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924211960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924211960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1208,
      "original_line": 1208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924212782",
      "pull_request_review_id": 2565439206,
      "id": 1924212782,
      "node_id": "PRRC_kwDOABII585ysSgu",
      "diff_hunk": "@@ -1196,6 +1196,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of a legacy wallet containing miniscript\")",
      "path": "test/functional/wallet_migration.py",
      "position": 274,
      "original_position": 8,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "e41f47597d86022d5a9947ee0b08151d4336cffc",
      "in_reply_to_id": 1923657743,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Miniscript is a subset of script. Definitionally, a miniscript is also a script, so this sentence is correct.",
      "created_at": "2025-01-21T18:44:03Z",
      "updated_at": "2025-01-21T18:44:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924212782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924212782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1209,
      "original_line": 1209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924251495",
      "pull_request_review_id": 2565505475,
      "id": 1924251495,
      "node_id": "PRRC_kwDOABII585ysb9n",
      "diff_hunk": "@@ -1987,57 +1987,51 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);\n+\n+    // Legacy wallets can also contains scripts whose P2SH, P2WSH, or P2SH-P2WSH it is not watching for\n+    // but can provide script data to a PSBT spending them. These \"solvable\" output scripts will need to\n+    // be put into the separate \"solvables\" wallet.\n+    // These can be detected by going through the entire candidate output scripts, finding the ISMINE_NO scripts,\n+    // and checking CanProvide() which will dummy sign.\n+    for (const CScript& script : GetCandidateScriptPubKeys()) {\n+        // Since we only care about P2SH, P2WSH, and P2SH-P2WSH, filter out any scripts that are not those\n+        if (!script.IsPayToScriptHash() && !script.IsPayToWitnessScriptHash()) {\n+            continue;\n+        }\n+        if (IsMine(script) != ISMINE_NO) {\n+            continue;\n+        }\n+        SignatureData dummy_sigdata;\n+        if (!CanProvide(script, dummy_sigdata)) {\n+            continue;\n+        }\n \n         // Get birthdate from script meta\n         uint64_t creation_time = 0;\n-        const auto& it = m_script_metadata.find(CScriptID(script));\n-        if (it != m_script_metadata.end()) {\n-            creation_time = it->second.nCreateTime;\n+        const auto& mit = m_script_metadata.find(CScriptID(script));\n+        if (mit != m_script_metadata.end()) {\n+            creation_time = mit->second.nCreateTime;\n         }\n \n-        std::vector<std::vector<unsigned char>> sols;\n-        TxoutType type = Solver(script, sols);\n-        if (type == TxoutType::MULTISIG) {\n-            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n-            CTxDestination witdest = WitnessV0ScriptHash(script);\n-            CScript witprog = GetScriptForDestination(witdest);\n-            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n-\n-            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 187,
      "original_position": 47,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "ca0564e02c72ea57d89ec37f0f4948e6a5d0096e",
      "in_reply_to_id": 1923639342,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think any part of this comment is relevant to the current code.",
      "created_at": "2025-01-21T19:19:36Z",
      "updated_at": "2025-01-21T19:19:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924251495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924251495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1997,
      "original_line": 1997,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924252155",
      "pull_request_review_id": 2565506403,
      "id": 1924252155,
      "node_id": "PRRC_kwDOABII585yscH7",
      "diff_hunk": "@@ -1047,6 +1048,154 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"p2wsh\")\n+\n+        # Craft wsh(pkh(key))\n+        pubkey = wallet.getaddressinfo(wallet.getnewaddress())[\"pubkey\"]\n+        pkh_script = key_to_p2pkh_script(pubkey).hex()\n+        wsh_pkh_script = script_to_p2wsh_script(pkh_script).hex()\n+        wsh_pkh_addr = script_to_p2wsh(pkh_script)\n+\n+        # Legacy single key scripts (i.e. pkh(key) and pk(key)) are not inserted into mapScripts\n+        # automatically, they need to be imported directly if we want to receive to P2WSH (or P2SH)\n+        # wrappings of such scripts.\n+        wallet.importaddress(address=pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_pkh_script, p2sh=False)\n+\n+        def_wallet.sendtoaddress(wsh_pkh_addr, 5)\n+        self.generate(self.nodes[0], 6)\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+\n+        _, wallet = self.migrate_and_get_rpc(\"p2wsh\")\n+\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+        addr_info = wallet.getaddressinfo(wsh_pkh_addr)\n+        assert_equal(addr_info[\"ismine\"], True)\n+        assert_equal(addr_info[\"iswatchonly\"], False)\n+        assert_equal(addr_info[\"solvable\"], True)\n+\n+        wallet.unloadwallet()\n+\n+    def test_disallowed_p2wsh(self):\n+        self.log.info(\"Test that P2WSH output scripts with invalid witnessScripts are not migrated and do not cause migration failure\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"invalid_p2wsh\")\n+\n+        invalid_addrs = []\n+\n+        # For a P2WSH output script stored in the legacy wallet's mapScripts, both the native P2WSH\n+        # and the P2SH-P2WSH are detected by IsMine. We need to verify that descriptors for both\n+        # output scripts are added to the resulting descriptor wallet.\n+        # However, this cannot be done using a multisig as wallet migration treats multisigs specially.\n+        # Instead, this is tested by importing a wsh(pkh()) script. But importing this directly will\n+        # insert the wsh() into setWatchOnly which means that the setWatchOnly migration ends up handling\n+        # this case, which we do not want.\n+        # In order to get the wsh(pkh()) into only mapScripts and not setWatchOnly, we need to utilize\n+        # importmulti and wrap the wsh(pkh()) inside of a sh(). This will insert the sh(wsh(pkh())) into\n+        # setWatchOnly but not the wsh(pkh()).\n+        # Furthermore, migration should not migrate the wsh(pkh()) if the key is uncompressed.\n+        comp_wif, comp_pubkey = generate_keypair(compressed=True, wif=True)\n+        comp_pkh_script = key_to_p2pkh_script(comp_pubkey).hex()\n+        comp_wsh_pkh_script = script_to_p2wsh_script(comp_pkh_script).hex()\n+        comp_sh_wsh_pkh_script = script_to_p2sh_script(comp_wsh_pkh_script).hex()\n+        comp_wsh_pkh_addr = script_to_p2wsh(comp_pkh_script)\n+\n+        uncomp_wif, uncomp_pubkey = generate_keypair(compressed=False, wif=True)\n+        uncomp_pkh_script = key_to_p2pkh_script(uncomp_pubkey).hex()\n+        uncomp_wsh_pkh_script = script_to_p2wsh_script(uncomp_pkh_script).hex()\n+        uncomp_sh_wsh_pkh_script = script_to_p2sh_script(uncomp_wsh_pkh_script).hex()\n+        uncomp_wsh_pkh_addr = script_to_p2wsh(uncomp_pkh_script)\n+        invalid_addrs.append(uncomp_wsh_pkh_addr)\n+\n+        import_res = wallet.importmulti([\n+            {\n+                \"scriptPubKey\": comp_sh_wsh_pkh_script,\n+                \"timestamp\": \"now\",\n+                \"redeemscript\": comp_wsh_pkh_script,\n+                \"witnessscript\": comp_pkh_script,\n+                \"keys\": [\n+                    comp_wif,\n+                ],\n+            },\n+            {\n+                \"scriptPubKey\": uncomp_sh_wsh_pkh_script,\n+                \"timestamp\": \"now\",\n+                \"redeemscript\": uncomp_wsh_pkh_script,\n+                \"witnessscript\": uncomp_pkh_script,\n+                \"keys\": [\n+                    uncomp_wif,\n+                ],\n+            },\n+        ])\n+        assert_equal(import_res[0][\"success\"], True)\n+        assert_equal(import_res[1][\"success\"], True)\n+\n+        # Create a wsh(sh(pkh())) - P2SH inside of P2WSH is invalid\n+        comp_sh_pkh_script = script_to_p2sh_script(comp_pkh_script).hex()\n+        wsh_sh_pkh_script = script_to_p2wsh_script(comp_sh_pkh_script).hex()\n+        wsh_sh_pkh_addr = script_to_p2wsh(comp_sh_pkh_script)\n+        invalid_addrs.append(wsh_sh_pkh_addr)\n+\n+        # Import wsh(sh(pkh()))\n+        wallet.importaddress(address=comp_sh_pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_sh_pkh_script, p2sh=False)\n+\n+        # Create a wsh(wsh(pkh())) - P2WSH inside of P2WSH is invalid\n+        wsh_wsh_pkh_script = script_to_p2wsh_script(comp_wsh_pkh_script).hex()\n+        wsh_wsh_pkh_addr = script_to_p2wsh(comp_wsh_pkh_script)\n+        invalid_addrs.append(wsh_wsh_pkh_addr)\n+\n+        # Import wsh(wsh(pkh()))\n+        wallet.importaddress(address=wsh_wsh_pkh_script, p2sh=False)\n+\n+        # The wsh(pkh()) with a compressed key is always valid, so we should see that the wallet detects it as ismine, not\n+        # watchonly, and can provide us information about the witnessScript via \"embedded\"\n+        comp_wsh_pkh_addr_info = wallet.getaddressinfo(comp_wsh_pkh_addr)\n+        assert_equal(comp_wsh_pkh_addr_info[\"ismine\"], True)\n+        assert_equal(comp_wsh_pkh_addr_info[\"iswatchonly\"], False)\n+        assert \"embedded\" in comp_wsh_pkh_addr_info\n+\n+        # The invalid addresses are invalid, so the legcy wallet should not detect them as ismine,\n+        # nor consider them watchonly. However, because the legacy wallet has the witnessScripts/redeemScripts,\n+        # we should see information about those in \"embedded\"\n+        for addr in invalid_addrs:\n+            addr_info = wallet.getaddressinfo(addr)\n+            assert_equal(addr_info[\"ismine\"], False)\n+            assert_equal(addr_info[\"iswatchonly\"], False)\n+            assert \"embedded\" in addr_info\n+\n+        # Fund those output scripts\n+        def_wallet.send([{comp_wsh_pkh_addr: 1}] + [{k: i + 1} for i, k in enumerate(invalid_addrs)])\n+        self.generate(self.nodes[0], 6)\n+        assert_equal(wallet.getbalances()[\"mine\"][\"trusted\"], 1)",
      "path": "test/functional/wallet_migration.py",
      "position": null,
      "original_position": 140,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "9c0d5856d2065119232bb4ca651391ed829a99d4",
      "in_reply_to_id": 1923515986,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-01-21T19:20:09Z",
      "updated_at": "2025-01-21T19:20:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924252155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924252155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924252349",
      "pull_request_review_id": 2565506701,
      "id": 1924252349,
      "node_id": "PRRC_kwDOABII585yscK9",
      "diff_hunk": "@@ -1700,59 +1700,59 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys() const\n+std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetCandidateScriptPubKeys() const\n {\n     LOCK(cs_KeyStore);\n-    std::unordered_set<CScript, SaltedSipHasher> spks;\n+    std::unordered_set<CScript, SaltedSipHasher> candidate_spks;\n \n-    // All keys have at least P2PK and P2PKH\n-    for (const auto& key_pair : mapKeys) {\n-        const CPubKey& pub = key_pair.second.GetPubKey();\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    // For every private key in the wallet, there should be a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH\n+    const auto& add_pubkey = [&candidate_spks](const CPubKey& pub) -> void {\n+        candidate_spks.insert(GetScriptForRawPubKey(pub));\n+        candidate_spks.insert(GetScriptForDestination(PKHash(pub)));\n+\n+        CScript wpkh = GetScriptForDestination(WitnessV0KeyHash(pub));\n+        candidate_spks.insert(wpkh);\n+        candidate_spks.insert(GetScriptForDestination(ScriptHash(wpkh)));\n+    };\n+    for (const auto& [_, key] : mapKeys) {\n+        add_pubkey(key.GetPubKey());\n     }\n-    for (const auto& key_pair : mapCryptedKeys) {\n-        const CPubKey& pub = key_pair.second.first;\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    for (const auto& [_, ckeypair] : mapCryptedKeys) {\n+        add_pubkey(ckeypair.first);\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n-    // The watchonly ones will be in setWatchOnly which we deal with later\n-    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n-                spks.insert(GetScriptForDestination(ScriptHash(script)));\n-            }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n-                spks.insert(script);\n-            }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n-                }\n-            }\n-        }\n+    // mapScripts contains all redeemScripts and witnessScripts. Therefore each script in it has\n+    // itself, P2SH, P2WSH, and P2SH-P2WSH as a candidate.",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 82,
      "original_position": 65,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "936fe5899f9086f99a9a7f05584f467add2bc45b",
      "in_reply_to_id": 1923574532,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Expanded the comment a bit.",
      "created_at": "2025-01-21T19:20:18Z",
      "updated_at": "2025-01-21T19:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924252349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924252349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1725,
      "original_line": 1725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924252703",
      "pull_request_review_id": 2565507234,
      "id": 1924252703,
      "node_id": "PRRC_kwDOABII585yscQf",
      "diff_hunk": "@@ -1925,6 +1925,19 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed\n+        // Re-parse the descriptors to detect that, and skip any that do not parse.\n+        {\n+            std::string desc_str = desc->ToString();\n+            FlatSigningProvider parsed_keys;\n+            std::string parse_error;\n+            std::vector<std::unique_ptr<Descriptor>> parsed_descs = Parse(desc_str, parsed_keys, parse_error);\n+            if (parsed_descs.empty()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 131,
      "original_position": 12,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "7d199d062d8794cde46631e61f2c116b9e37f573",
      "in_reply_to_id": 1923583439,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed this to also delete the offending script from `spks`.",
      "created_at": "2025-01-21T19:20:37Z",
      "updated_at": "2025-01-21T19:20:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924252703",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924252703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1939,
      "original_line": 1939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924253038",
      "pull_request_review_id": 2565507780,
      "id": 1924253038,
      "node_id": "PRRC_kwDOABII585yscVu",
      "diff_hunk": "@@ -1987,57 +1987,51 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);\n+\n+    // Legacy wallets can also contains scripts whose P2SH, P2WSH, or P2SH-P2WSH it is not watching for\n+    // but can provide script data to a PSBT spending them. These \"solvable\" output scripts will need to\n+    // be put into the separate \"solvables\" wallet.\n+    // These can be detected by going through the entire candidate output scripts, finding the ISMINE_NO scripts,\n+    // and checking CanProvide() which will dummy sign.\n+    for (const CScript& script : GetCandidateScriptPubKeys()) {\n+        // Since we only care about P2SH, P2WSH, and P2SH-P2WSH, filter out any scripts that are not those\n+        if (!script.IsPayToScriptHash() && !script.IsPayToWitnessScriptHash()) {\n+            continue;\n+        }\n+        if (IsMine(script) != ISMINE_NO) {\n+            continue;\n+        }\n+        SignatureData dummy_sigdata;\n+        if (!CanProvide(script, dummy_sigdata)) {\n+            continue;\n+        }\n \n         // Get birthdate from script meta\n         uint64_t creation_time = 0;\n-        const auto& it = m_script_metadata.find(CScriptID(script));\n-        if (it != m_script_metadata.end()) {\n-            creation_time = it->second.nCreateTime;\n+        const auto& mit = m_script_metadata.find(CScriptID(script));\n+        if (mit != m_script_metadata.end()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "ca0564e02c72ea57d89ec37f0f4948e6a5d0096e",
      "in_reply_to_id": 1923632724,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reverted",
      "created_at": "2025-01-21T19:20:55Z",
      "updated_at": "2025-01-21T19:20:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1924253038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1924253038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925023954",
      "pull_request_review_id": 2566716898,
      "id": 1925023954,
      "node_id": "PRRC_kwDOABII585yvYjS",
      "diff_hunk": "@@ -1700,59 +1700,59 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys() const\n+std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetCandidateScriptPubKeys() const\n {\n     LOCK(cs_KeyStore);\n-    std::unordered_set<CScript, SaltedSipHasher> spks;\n+    std::unordered_set<CScript, SaltedSipHasher> candidate_spks;\n \n-    // All keys have at least P2PK and P2PKH\n-    for (const auto& key_pair : mapKeys) {\n-        const CPubKey& pub = key_pair.second.GetPubKey();\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    // For every private key in the wallet, there should be a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 25,
      "original_position": 16,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "936fe5899f9086f99a9a7f05584f467add2bc45b",
      "in_reply_to_id": 1923553764,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, I suppose we could drop the code that does that eventually, but not here.",
      "created_at": "2025-01-22T09:52:02Z",
      "updated_at": "2025-01-22T09:52:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1925023954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925023954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1708,
      "original_line": 1708,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925034229",
      "pull_request_review_id": 2566733544,
      "id": 1925034229,
      "node_id": "PRRC_kwDOABII585yvbD1",
      "diff_hunk": "@@ -1196,6 +1196,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of a legacy wallet containing miniscript\")",
      "path": "test/functional/wallet_migration.py",
      "position": 274,
      "original_position": 8,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "e41f47597d86022d5a9947ee0b08151d4336cffc",
      "in_reply_to_id": 1923657743,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Miniscript is a language for writing (a subset of) Bitcoin Scripts \r\n\r\nhttps://bitcoin.sipa.be/miniscript/\r\n\r\nSo when I read \"containing miniscript\" I interpret that as containing a descriptor using the miniscript language. But these are legacy wallets, which don't have descriptors, so they can only contain script itself.",
      "created_at": "2025-01-22T09:58:35Z",
      "updated_at": "2025-01-22T09:58:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1925034229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925034229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1209,
      "original_line": 1209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925037538",
      "pull_request_review_id": 2566739010,
      "id": 1925037538,
      "node_id": "PRRC_kwDOABII585yvb3i",
      "diff_hunk": "@@ -1196,6 +1196,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.",
      "path": "test/functional/wallet_migration.py",
      "position": 273,
      "original_position": 7,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "e41f47597d86022d5a9947ee0b08151d4336cffc",
      "in_reply_to_id": 1923653059,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's not going to obvious for most people looking at this in the future, so I think it's worth a comment (a test might be overkill).",
      "created_at": "2025-01-22T10:00:47Z",
      "updated_at": "2025-01-22T10:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1925037538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925037538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1208,
      "original_line": 1208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925038708",
      "pull_request_review_id": 2566740931,
      "id": 1925038708,
      "node_id": "PRRC_kwDOABII585yvcJ0",
      "diff_hunk": "@@ -1925,6 +1925,19 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed\n+        // Re-parse the descriptors to detect that, and skip any that do not parse.\n+        {\n+            std::string desc_str = desc->ToString();\n+            FlatSigningProvider parsed_keys;\n+            std::string parse_error;\n+            std::vector<std::unique_ptr<Descriptor>> parsed_descs = Parse(desc_str, parsed_keys, parse_error);\n+            if (parsed_descs.empty()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 131,
      "original_position": 12,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "7d199d062d8794cde46631e61f2c116b9e37f573",
      "in_reply_to_id": 1923583439,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But then the script just disappears, shouldn't we warn about that or even abort?",
      "created_at": "2025-01-22T10:01:36Z",
      "updated_at": "2025-01-22T10:01:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1925038708",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925038708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1939,
      "original_line": 1939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927399780",
      "pull_request_review_id": 2570570158,
      "id": 1927399780,
      "node_id": "PRRC_kwDOABII585y4clk",
      "diff_hunk": "@@ -132,10 +136,6 @@ def test_basic(self):\n         # Note: migration could take a while.\n         _, basic0 = self.migrate_and_get_rpc(\"basic0\")\n \n-        # Verify created descriptors",
      "path": "test/functional/wallet_migration.py",
      "position": 44,
      "original_position": 24,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "c39b3cfcd1bc5002aa06d1b79c948ce94f3ec8dc",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Extra verification that migratewallet migrates\"\r\n\r\nWhy are these test lines removed?",
      "created_at": "2025-01-23T17:33:21Z",
      "updated_at": "2025-01-23T18:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1927399780",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927399780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927415305",
      "pull_request_review_id": 2570570158,
      "id": 1927415305,
      "node_id": "PRRC_kwDOABII585y4gYJ",
      "diff_hunk": "@@ -302,6 +302,9 @@ class LegacyDataSPKM : public ScriptPubKeyMan, public FillableSigningProvider\n     virtual bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n     bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n \n+    // Helper function to retrieve a set of all output scripts that may be relevant to this LegacyDataSPKM",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 4,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "50874815272281d611ab4bb274fb44a7b4340aa9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"legacy spkm: use IsMine() to extract watched output scripts\"\r\n\r\nMaybe explicitly mention this is a conservative superset of the actually relevant output scripts.",
      "created_at": "2025-01-23T17:45:48Z",
      "updated_at": "2025-01-23T18:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1927415305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927415305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927416717",
      "pull_request_review_id": 2570570158,
      "id": 1927416717,
      "node_id": "PRRC_kwDOABII585y4guN",
      "diff_hunk": "@@ -1928,6 +1928,21 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "525458f38c2902826c9190f7c3c2ae26cd41599f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"migration: Skip descriptors which do not parse\"\r\n\r\nGrammar nit: `has` -> `have`. Add `.` at end of sentence.",
      "created_at": "2025-01-23T17:47:00Z",
      "updated_at": "2025-01-23T18:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1927416717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927416717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927498705",
      "pull_request_review_id": 2570570158,
      "id": 1927498705,
      "node_id": "PRRC_kwDOABII585y40vR",
      "diff_hunk": "@@ -1992,10 +1992,26 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "0944298372127e498586d06fd24599ee6b206dc6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"wallet migration: Determine Solvables with CanProvide\"\r\n\r\nCould this use `CHECK_NONFATAL` to give an RPC error in case of failure, rather than crashing the process?",
      "created_at": "2025-01-23T18:44:22Z",
      "updated_at": "2025-01-23T18:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1927498705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927498705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1996,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927527361",
      "pull_request_review_id": 2570570158,
      "id": 1927527361,
      "node_id": "PRRC_kwDOABII585y47vB",
      "diff_hunk": "@@ -1201,6 +1201,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of a legacy wallet containing miniscript\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"miniscript\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        # Make a descriptor where we only have some of the keys. This will be migrated to the watchonly wallet.\n+        some_keys_priv_desc = descsum_create(f\"wsh(or_b(pk({privkey}),s:pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0)))\")\n+        some_keys_addr = self.master_node.deriveaddresses(some_keys_priv_desc)[0]\n+\n+        # Make a descriptor where we have all of the keys. This will stay in the migrated wallet\n+        all_keys_priv_desc = descsum_create(f\"wsh(and_v(v:pk({privkey}),1))\")\n+        all_keys_addr = self.master_node.deriveaddresses(all_keys_priv_desc)[0]\n+\n+        imp = wallet.importmulti([\n+            {\n+                \"desc\": some_keys_priv_desc,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                \"desc\": all_keys_priv_desc,\n+                \"timestamp\": \"now\",\n+            }\n+        ])\n+        assert_equal(imp[0][\"success\"], True)\n+        assert_equal(imp[1][\"success\"], True)\n+\n+        def_wallet.sendtoaddress(some_keys_addr, 1)\n+        def_wallet.sendtoaddress(all_keys_addr, 1)\n+        self.generate(self.master_node, 6)\n+        # Double check that the miniscript can be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{some_keys_addr: 1},{all_keys_addr: 0.75}], include_watching=True, change_address=def_wallet.getnewaddress())\n+        assert_equal(send_res[\"complete\"], True)\n+        self.generate(self.old_node, 6)\n+        assert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 1.75)\n+\n+        _, wallet = self.migrate_and_get_rpc(\"miniscript\")\n+\n+        # The miniscript with all keys should be in the migrated wallet\n+        assert_equal(wallet.getbalances()[\"mine\"], {\"trusted\": 0.75, \"untrusted_pending\": 0, \"immature\": 0})\n+        assert_equal(wallet.getaddressinfo(all_keys_addr)[\"ismine\"], True)\n+        assert_equal(wallet.getaddressinfo(some_keys_addr)[\"ismine\"], False)\n+\n+        # The miniscript with some keys should be in the watchonly wallet",
      "path": "test/functional/wallet_migration.py",
      "position": 317,
      "original_position": 51,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "c429ba3c3a3fd9023593a127c36f3f0497eea583",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Test migration of miniscript in legacy wallets\", is it possible to also construct an example involving miniscript that ends up in the solvables wallet?",
      "created_at": "2025-01-23T18:52:26Z",
      "updated_at": "2025-01-23T18:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1927527361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1927527361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1252,
      "original_line": 1252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938059816",
      "pull_request_review_id": 2588005807,
      "id": 1938059816,
      "node_id": "PRRC_kwDOABII585zhHIo",
      "diff_hunk": "@@ -132,10 +136,6 @@ def test_basic(self):\n         # Note: migration could take a while.\n         _, basic0 = self.migrate_and_get_rpc(\"basic0\")\n \n-        # Verify created descriptors",
      "path": "test/functional/wallet_migration.py",
      "position": 44,
      "original_position": 24,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "c39b3cfcd1bc5002aa06d1b79c948ce94f3ec8dc",
      "in_reply_to_id": 1927399780,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These checks all occur inside of `migrate_and_get_rpc` now so they're redundant.",
      "created_at": "2025-01-31T22:42:20Z",
      "updated_at": "2025-01-31T22:42:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1938059816",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938059816"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938121255",
      "pull_request_review_id": 2588106147,
      "id": 1938121255,
      "node_id": "PRRC_kwDOABII585zhWIn",
      "diff_hunk": "@@ -1201,6 +1201,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of a legacy wallet containing miniscript\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"miniscript\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        # Make a descriptor where we only have some of the keys. This will be migrated to the watchonly wallet.\n+        some_keys_priv_desc = descsum_create(f\"wsh(or_b(pk({privkey}),s:pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0)))\")\n+        some_keys_addr = self.master_node.deriveaddresses(some_keys_priv_desc)[0]\n+\n+        # Make a descriptor where we have all of the keys. This will stay in the migrated wallet\n+        all_keys_priv_desc = descsum_create(f\"wsh(and_v(v:pk({privkey}),1))\")\n+        all_keys_addr = self.master_node.deriveaddresses(all_keys_priv_desc)[0]\n+\n+        imp = wallet.importmulti([\n+            {\n+                \"desc\": some_keys_priv_desc,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                \"desc\": all_keys_priv_desc,\n+                \"timestamp\": \"now\",\n+            }\n+        ])\n+        assert_equal(imp[0][\"success\"], True)\n+        assert_equal(imp[1][\"success\"], True)\n+\n+        def_wallet.sendtoaddress(some_keys_addr, 1)\n+        def_wallet.sendtoaddress(all_keys_addr, 1)\n+        self.generate(self.master_node, 6)\n+        # Double check that the miniscript can be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{some_keys_addr: 1},{all_keys_addr: 0.75}], include_watching=True, change_address=def_wallet.getnewaddress())\n+        assert_equal(send_res[\"complete\"], True)\n+        self.generate(self.old_node, 6)\n+        assert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 1.75)\n+\n+        _, wallet = self.migrate_and_get_rpc(\"miniscript\")\n+\n+        # The miniscript with all keys should be in the migrated wallet\n+        assert_equal(wallet.getbalances()[\"mine\"], {\"trusted\": 0.75, \"untrusted_pending\": 0, \"immature\": 0})\n+        assert_equal(wallet.getaddressinfo(all_keys_addr)[\"ismine\"], True)\n+        assert_equal(wallet.getaddressinfo(some_keys_addr)[\"ismine\"], False)\n+\n+        # The miniscript with some keys should be in the watchonly wallet",
      "path": "test/functional/wallet_migration.py",
      "position": 317,
      "original_position": 51,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "c429ba3c3a3fd9023593a127c36f3f0497eea583",
      "in_reply_to_id": 1927527361,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it's possible, but I can't figure it out right now.",
      "created_at": "2025-02-01T00:36:05Z",
      "updated_at": "2025-02-01T00:36:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1938121255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938121255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1252,
      "original_line": 1252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938121303",
      "pull_request_review_id": 2588106215,
      "id": 1938121303,
      "node_id": "PRRC_kwDOABII585zhWJX",
      "diff_hunk": "@@ -302,6 +302,9 @@ class LegacyDataSPKM : public ScriptPubKeyMan, public FillableSigningProvider\n     virtual bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n     bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n \n+    // Helper function to retrieve a set of all output scripts that may be relevant to this LegacyDataSPKM",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 4,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "50874815272281d611ab4bb274fb44a7b4340aa9",
      "in_reply_to_id": 1927415305,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-02-01T00:36:12Z",
      "updated_at": "2025-02-01T00:36:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1938121303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938121303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938121319",
      "pull_request_review_id": 2588106240,
      "id": 1938121319,
      "node_id": "PRRC_kwDOABII585zhWJn",
      "diff_hunk": "@@ -1928,6 +1928,21 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "525458f38c2902826c9190f7c3c2ae26cd41599f",
      "in_reply_to_id": 1927416717,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-02-01T00:36:15Z",
      "updated_at": "2025-02-01T00:36:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1938121319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938121319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938121540",
      "pull_request_review_id": 2588106798,
      "id": 1938121540,
      "node_id": "PRRC_kwDOABII585zhWNE",
      "diff_hunk": "@@ -1992,10 +1992,26 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    assert(spks.size() == 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "0944298372127e498586d06fd24599ee6b206dc6",
      "in_reply_to_id": 1927498705,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I changed it to `Assume` and added an early return here so that the failed migration is cleaned up.",
      "created_at": "2025-02-01T00:36:56Z",
      "updated_at": "2025-02-01T00:36:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1938121540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938121540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1996,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939171395",
      "pull_request_review_id": 2589543430,
      "id": 1939171395,
      "node_id": "PRRC_kwDOABII585zlWhD",
      "diff_hunk": "@@ -1928,6 +1928,21 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor hav caused it to create descriptors which cannot be re-parsed.",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 124,
      "original_position": 5,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "6eddf8ea9fce23b3e6d1c7e73d7f39e839beb3b5",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6eddf8ea9fce23b3e6d1c7e73d7f39e839beb3b5 \"migration: Skip descriptors which do not parse\" typo: `hav`",
      "created_at": "2025-02-03T10:47:28Z",
      "updated_at": "2025-02-03T11:06:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1939171395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939171395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1932,
      "original_line": 1932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939194885",
      "pull_request_review_id": 2589543430,
      "id": 1939194885,
      "node_id": "PRRC_kwDOABII585zlcQF",
      "diff_hunk": "@@ -1925,6 +1925,19 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n \n         // InferDescriptor as that will get us all the solving info if it is there\n         std::unique_ptr<Descriptor> desc = InferDescriptor(spk, *GetSolvingProvider(spk));\n+\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed\n+        // Re-parse the descriptors to detect that, and skip any that do not parse.\n+        {\n+            std::string desc_str = desc->ToString();\n+            FlatSigningProvider parsed_keys;\n+            std::string parse_error;\n+            std::vector<std::unique_ptr<Descriptor>> parsed_descs = Parse(desc_str, parsed_keys, parse_error);\n+            if (parsed_descs.empty()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 131,
      "original_position": 12,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "7d199d062d8794cde46631e61f2c116b9e37f573",
      "in_reply_to_id": 1923583439,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah I misunderstood the comment. It's not referring to \"past bugs\" that somehow left bad scripts in the wallet, but rather it's saying that `InferDescriptor` is potentially unreliable.",
      "created_at": "2025-02-03T11:04:53Z",
      "updated_at": "2025-02-03T11:06:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1939194885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939194885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1939,
      "original_line": 1939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942646524",
      "pull_request_review_id": 2595302398,
      "id": 1942646524,
      "node_id": "PRRC_kwDOABII585zym78",
      "diff_hunk": "@@ -1047,6 +1048,159 @@ def test_manual_keys_import(self):\n         assert_equal(expected_descs, migrated_desc)\n         wo_wallet.unloadwallet()\n \n+    def test_p2wsh(self):\n+        self.log.info(\"Test that non-multisig P2WSH output scripts are migrated\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"p2wsh\")\n+\n+        # Craft wsh(pkh(key))\n+        pubkey = wallet.getaddressinfo(wallet.getnewaddress())[\"pubkey\"]\n+        pkh_script = key_to_p2pkh_script(pubkey).hex()\n+        wsh_pkh_script = script_to_p2wsh_script(pkh_script).hex()\n+        wsh_pkh_addr = script_to_p2wsh(pkh_script)\n+\n+        # Legacy single key scripts (i.e. pkh(key) and pk(key)) are not inserted into mapScripts\n+        # automatically, they need to be imported directly if we want to receive to P2WSH (or P2SH)\n+        # wrappings of such scripts.\n+        wallet.importaddress(address=pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_pkh_script, p2sh=False)\n+\n+        def_wallet.sendtoaddress(wsh_pkh_addr, 5)\n+        self.generate(self.nodes[0], 6)\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+\n+        _, wallet = self.migrate_and_get_rpc(\"p2wsh\")\n+\n+        assert_equal(wallet.getbalances()['mine']['trusted'], 5)\n+        addr_info = wallet.getaddressinfo(wsh_pkh_addr)\n+        assert_equal(addr_info[\"ismine\"], True)\n+        assert_equal(addr_info[\"iswatchonly\"], False)\n+        assert_equal(addr_info[\"solvable\"], True)\n+\n+        wallet.unloadwallet()\n+\n+    def test_disallowed_p2wsh(self):\n+        self.log.info(\"Test that P2WSH output scripts with invalid witnessScripts are not migrated and do not cause migration failure\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+\n+        wallet = self.create_legacy_wallet(\"invalid_p2wsh\")\n+\n+        invalid_addrs = []\n+\n+        # For a P2WSH output script stored in the legacy wallet's mapScripts, both the native P2WSH\n+        # and the P2SH-P2WSH are detected by IsMine. We need to verify that descriptors for both\n+        # output scripts are added to the resulting descriptor wallet.\n+        # However, this cannot be done using a multisig as wallet migration treats multisigs specially.\n+        # Instead, this is tested by importing a wsh(pkh()) script. But importing this directly will\n+        # insert the wsh() into setWatchOnly which means that the setWatchOnly migration ends up handling\n+        # this case, which we do not want.\n+        # In order to get the wsh(pkh()) into only mapScripts and not setWatchOnly, we need to utilize\n+        # importmulti and wrap the wsh(pkh()) inside of a sh(). This will insert the sh(wsh(pkh())) into\n+        # setWatchOnly but not the wsh(pkh()).\n+        # Furthermore, migration should not migrate the wsh(pkh()) if the key is uncompressed.\n+        comp_wif, comp_pubkey = generate_keypair(compressed=True, wif=True)\n+        comp_pkh_script = key_to_p2pkh_script(comp_pubkey).hex()\n+        comp_wsh_pkh_script = script_to_p2wsh_script(comp_pkh_script).hex()\n+        comp_sh_wsh_pkh_script = script_to_p2sh_script(comp_wsh_pkh_script).hex()\n+        comp_wsh_pkh_addr = script_to_p2wsh(comp_pkh_script)\n+\n+        uncomp_wif, uncomp_pubkey = generate_keypair(compressed=False, wif=True)\n+        uncomp_pkh_script = key_to_p2pkh_script(uncomp_pubkey).hex()\n+        uncomp_wsh_pkh_script = script_to_p2wsh_script(uncomp_pkh_script).hex()\n+        uncomp_sh_wsh_pkh_script = script_to_p2sh_script(uncomp_wsh_pkh_script).hex()\n+        uncomp_wsh_pkh_addr = script_to_p2wsh(uncomp_pkh_script)\n+        invalid_addrs.append(uncomp_wsh_pkh_addr)\n+\n+        import_res = wallet.importmulti([\n+            {\n+                \"scriptPubKey\": comp_sh_wsh_pkh_script,\n+                \"timestamp\": \"now\",\n+                \"redeemscript\": comp_wsh_pkh_script,\n+                \"witnessscript\": comp_pkh_script,\n+                \"keys\": [\n+                    comp_wif,\n+                ],\n+            },\n+            {\n+                \"scriptPubKey\": uncomp_sh_wsh_pkh_script,\n+                \"timestamp\": \"now\",\n+                \"redeemscript\": uncomp_wsh_pkh_script,\n+                \"witnessscript\": uncomp_pkh_script,\n+                \"keys\": [\n+                    uncomp_wif,\n+                ],\n+            },\n+        ])\n+        assert_equal(import_res[0][\"success\"], True)\n+        assert_equal(import_res[1][\"success\"], True)\n+\n+        # Create a wsh(sh(pkh())) - P2SH inside of P2WSH is invalid\n+        comp_sh_pkh_script = script_to_p2sh_script(comp_pkh_script).hex()\n+        wsh_sh_pkh_script = script_to_p2wsh_script(comp_sh_pkh_script).hex()\n+        wsh_sh_pkh_addr = script_to_p2wsh(comp_sh_pkh_script)\n+        invalid_addrs.append(wsh_sh_pkh_addr)\n+\n+        # Import wsh(sh(pkh()))\n+        wallet.importaddress(address=comp_sh_pkh_script, p2sh=False)\n+        wallet.importaddress(address=wsh_sh_pkh_script, p2sh=False)\n+\n+        # Create a wsh(wsh(pkh())) - P2WSH inside of P2WSH is invalid\n+        wsh_wsh_pkh_script = script_to_p2wsh_script(comp_wsh_pkh_script).hex()\n+        wsh_wsh_pkh_addr = script_to_p2wsh(comp_wsh_pkh_script)\n+        invalid_addrs.append(wsh_wsh_pkh_addr)\n+\n+        # Import wsh(wsh(pkh()))\n+        wallet.importaddress(address=wsh_wsh_pkh_script, p2sh=False)\n+\n+        # The wsh(pkh()) with a compressed key is always valid, so we should see that the wallet detects it as ismine, not\n+        # watchonly, and can provide us information about the witnessScript via \"embedded\"\n+        comp_wsh_pkh_addr_info = wallet.getaddressinfo(comp_wsh_pkh_addr)\n+        assert_equal(comp_wsh_pkh_addr_info[\"ismine\"], True)\n+        assert_equal(comp_wsh_pkh_addr_info[\"iswatchonly\"], False)\n+        assert \"embedded\" in comp_wsh_pkh_addr_info\n+\n+        # The invalid addresses are invalid, so the legcy wallet should not detect them as ismine,",
      "path": "test/functional/wallet_migration.py",
      "position": 229,
      "original_position": 128,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "e920a15aaedfd2f5ac46f97a21fd8dc88a596a35",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`legacy`",
      "created_at": "2025-02-05T10:48:02Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1942646524",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942646524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1164,
      "original_line": 1163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942786866",
      "pull_request_review_id": 2595302398,
      "id": 1942786866,
      "node_id": "PRRC_kwDOABII585zzJMy",
      "diff_hunk": "@@ -1992,10 +1992,29 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    if (!Assume(spks.size() == 0)) {\n+        LogPrintf(STR_INTERNAL_BUG(\"Error: Some output scripts were not migrated.\\n\"));\n+        return std::nullopt;\n+    }\n+\n+    // Legacy wallets can also contains scripts whose P2SH, P2WSH, or P2SH-P2WSH it is not watching for",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 155,
      "original_position": 14,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "810b465f59e28724944a857e1da487d2868b56f5",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`contain`",
      "created_at": "2025-02-05T12:25:09Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1942786866",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942786866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2001,
      "original_line": 2001,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942794684",
      "pull_request_review_id": 2595302398,
      "id": 1942794684,
      "node_id": "PRRC_kwDOABII585zzLG8",
      "diff_hunk": "@@ -1700,59 +1700,62 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys() const\n+std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetCandidateScriptPubKeys() const\n {\n     LOCK(cs_KeyStore);\n-    std::unordered_set<CScript, SaltedSipHasher> spks;\n+    std::unordered_set<CScript, SaltedSipHasher> candidate_spks;\n \n-    // All keys have at least P2PK and P2PKH\n-    for (const auto& key_pair : mapKeys) {\n-        const CPubKey& pub = key_pair.second.GetPubKey();\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    // For every private key in the wallet, there should be a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH\n+    const auto& add_pubkey = [&candidate_spks](const CPubKey& pub) -> void {\n+        candidate_spks.insert(GetScriptForRawPubKey(pub));\n+        candidate_spks.insert(GetScriptForDestination(PKHash(pub)));\n+\n+        CScript wpkh = GetScriptForDestination(WitnessV0KeyHash(pub));\n+        candidate_spks.insert(wpkh);\n+        candidate_spks.insert(GetScriptForDestination(ScriptHash(wpkh)));\n+    };\n+    for (const auto& [_, key] : mapKeys) {\n+        add_pubkey(key.GetPubKey());\n     }\n-    for (const auto& key_pair : mapCryptedKeys) {\n-        const CPubKey& pub = key_pair.second.first;\n-        spks.insert(GetScriptForRawPubKey(pub));\n-        spks.insert(GetScriptForDestination(PKHash(pub)));\n+    for (const auto& [_, ckeypair] : mapCryptedKeys) {\n+        add_pubkey(ckeypair.first);\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n-    // The watchonly ones will be in setWatchOnly which we deal with later\n-    // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n-                spks.insert(GetScriptForDestination(ScriptHash(script)));\n-            }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n-                spks.insert(script);\n-            }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n-                }\n-            }\n-        }\n+    // mapScripts contains all redeemScripts and witnessScripts. Therefore each script in it has\n+    // itself, P2SH, P2WSH, and P2SH-P2WSH as a candidate.\n+    // Invalid scripts such as P2SH-P2SH and P2WSH-P2SH, among others, will be added as candidates.",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 83,
      "original_position": 66,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "68e0b1306d6fc4777495df541d2261fc7dcba2cf",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`// Invalid scripts such as P2SH-P2SH and P2WSH-P2SH, among others, will be added as candidates.`\r\n\r\nIn the below function, I notice script itself, P2SH, P2WSH, P2SH-P2WSH being added only. These invalid scripts could be added as candidates because the underlying `script` could be a P2SH?\r\n\r\nWith this script nesting involved, it makes me want to read the logic of `IsMine` to see how it handles it!",
      "created_at": "2025-02-05T12:28:04Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1942794684",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942794684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1726,
      "original_line": 1726,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942841714",
      "pull_request_review_id": 2595302398,
      "id": 1942841714,
      "node_id": "PRRC_kwDOABII585zzWly",
      "diff_hunk": "@@ -1992,10 +1992,29 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    if (!Assume(spks.size() == 0)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 150,
      "original_position": 9,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "810b465f59e28724944a857e1da487d2868b56f5",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit:\r\n\r\n```diff\r\n- if (!Assume(spks.size() == 0)) {\r\n+ if (!Assume(spks.empty())) {\r\n```",
      "created_at": "2025-02-05T12:37:58Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1942841714",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942841714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1996,
      "original_line": 1996,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942865073",
      "pull_request_review_id": 2595302398,
      "id": 1942865073,
      "node_id": "PRRC_kwDOABII585zzcSx",
      "diff_hunk": "@@ -1992,10 +1992,29 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n         }\n     }\n \n-    // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-    // So we have to check if any of our scripts are a multisig and if so, add the P2SH\n-    for (const auto& script_pair : mapScripts) {\n-        const CScript script = script_pair.second;\n+    // Make sure that we have accounted for all scriptPubKeys\n+    if (!Assume(spks.size() == 0)) {\n+        LogPrintf(STR_INTERNAL_BUG(\"Error: Some output scripts were not migrated.\\n\"));\n+        return std::nullopt;\n+    }\n+\n+    // Legacy wallets can also contains scripts whose P2SH, P2WSH, or P2SH-P2WSH it is not watching for\n+    // but can provide script data to a PSBT spending them. These \"solvable\" output scripts will need to\n+    // be put into the separate \"solvables\" wallet.\n+    // These can be detected by going through the entire candidate output scripts, finding the ISMINE_NO scripts,\n+    // and checking CanProvide() which will dummy sign.",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 159,
      "original_position": 18,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "810b465f59e28724944a857e1da487d2868b56f5",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for this comment, very helpful!",
      "created_at": "2025-02-05T12:43:43Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1942865073",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942865073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": 2002,
      "original_start_line": 2002,
      "start_side": "RIGHT",
      "line": 2005,
      "original_line": 2005,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942897067",
      "pull_request_review_id": 2595302398,
      "id": 1942897067,
      "node_id": "PRRC_kwDOABII585zzkGr",
      "diff_hunk": "@@ -2004,45 +2023,28 @@ std::optional<MigrationData> LegacyDataSPKM::MigrateToDescriptor()\n             creation_time = it->second.nCreateTime;\n         }\n \n-        std::vector<std::vector<unsigned char>> sols;\n-        TxoutType type = Solver(script, sols);\n-        if (type == TxoutType::MULTISIG) {\n-            CScript sh_spk = GetScriptForDestination(ScriptHash(script));\n-            CTxDestination witdest = WitnessV0ScriptHash(script);\n-            CScript witprog = GetScriptForDestination(witdest);\n-            CScript sh_wsh_spk = GetScriptForDestination(ScriptHash(witprog));\n-\n-            // We only want the multisigs that we have not already seen, i.e. they are not watchonly and not spendable\n-            // For P2SH, a multisig is not ISMINE_NO when:\n-            // * All keys are in the wallet\n-            // * The multisig itself is watch only\n-            // * The P2SH is watch only\n-            // For P2SH-P2WSH, if the script is in the wallet, then it will have the same conditions as P2SH.\n-            // For P2WSH, a multisig is not ISMINE_NO when, other than the P2SH conditions:\n-            // * The P2WSH script is in the wallet and it is being watched\n-            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n-            if (HaveWatchOnly(sh_spk) || HaveWatchOnly(script) || HaveKeys(keys, *this) || (HaveCScript(CScriptID(witprog)) && HaveWatchOnly(witprog))) {\n-                // The above emulates IsMine for these 3 scriptPubKeys, so double check that by running IsMine\n-                assert(IsMine(sh_spk) != ISMINE_NO || IsMine(witprog) != ISMINE_NO || IsMine(sh_wsh_spk) != ISMINE_NO);\n-                continue;\n-            }\n-            assert(IsMine(sh_spk) == ISMINE_NO && IsMine(witprog) == ISMINE_NO && IsMine(sh_wsh_spk) == ISMINE_NO);\n-\n-            std::unique_ptr<Descriptor> sh_desc = InferDescriptor(sh_spk, *GetSolvingProvider(sh_spk));\n-            out.solvable_descs.emplace_back(sh_desc->ToString(), creation_time);\n+        // InferDescriptor as that will get us all the solving info if it is there\n+        std::unique_ptr<Descriptor> desc = InferDescriptor(script, *GetSolvingProvider(script));\n+        if (!desc->IsSolvable()) {\n+            // The wallet was able to provide some information, but not enough to make a descriptor that actually\n+            // contains anything useful. This is probably because the script itself is actually unsignable (e.g. P2WSH-P2WSH).\n+            continue;\n+        }\n \n-            const auto desc = InferDescriptor(witprog, *this);\n-            if (desc->IsSolvable()) {\n-                std::unique_ptr<Descriptor> wsh_desc = InferDescriptor(witprog, *GetSolvingProvider(witprog));\n-                out.solvable_descs.emplace_back(wsh_desc->ToString(), creation_time);\n-                std::unique_ptr<Descriptor> sh_wsh_desc = InferDescriptor(sh_wsh_spk, *GetSolvingProvider(sh_wsh_spk));\n-                out.solvable_descs.emplace_back(sh_wsh_desc->ToString(), creation_time);\n+        // Past bugs in InferDescriptor has caused it to create descriptors which cannot be re-parsed",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 219,
      "original_position": 78,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "810b465f59e28724944a857e1da487d2868b56f5",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`have`",
      "created_at": "2025-02-05T12:54:49Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1942897067",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942897067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2034,
      "original_line": 2034,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942924927",
      "pull_request_review_id": 2595302398,
      "id": 1942924927,
      "node_id": "PRRC_kwDOABII585zzq5_",
      "diff_hunk": "@@ -1201,6 +1201,60 @@ def test_disallowed_p2wsh(self):\n \n         wallet.unloadwallet()\n \n+    def test_miniscript(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have valid miniscript witnessScripts\n+        # and the private keys for them can still sign and spend them, even though output scripts involving them\n+        # as a witnessScript would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of a legacy wallet containing miniscript\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"miniscript\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        # Make a descriptor where we only have some of the keys. This will be migrated to the watchonly wallet.\n+        some_keys_priv_desc = descsum_create(f\"wsh(or_b(pk({privkey}),s:pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0)))\")\n+        some_keys_addr = self.master_node.deriveaddresses(some_keys_priv_desc)[0]\n+\n+        # Make a descriptor where we have all of the keys. This will stay in the migrated wallet\n+        all_keys_priv_desc = descsum_create(f\"wsh(and_v(v:pk({privkey}),1))\")\n+        all_keys_addr = self.master_node.deriveaddresses(all_keys_priv_desc)[0]",
      "path": "test/functional/wallet_migration.py",
      "position": 286,
      "original_position": 20,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "eb6c32ec540a7b0b901bd64ee109c7ca6a1ccf75",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Although not a bug but for sanity shouldn't these `deriveaddresses` calls be done in the `old_node` because the `wallet` has been created on `old_node` & has not been migrated at this stage (which happens in the `master_node`)?",
      "created_at": "2025-02-05T13:13:43Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1942924927",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942924927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": 1217,
      "original_start_line": 1216,
      "start_side": "RIGHT",
      "line": 1221,
      "original_line": 1220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942990827",
      "pull_request_review_id": 2595302398,
      "id": 1942990827,
      "node_id": "PRRC_kwDOABII585zz6_r",
      "diff_hunk": "@@ -1255,6 +1256,62 @@ def test_miniscript(self):\n         assert_equal(watchonly.getaddressinfo(some_keys_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(all_keys_addr)[\"ismine\"], False)\n \n+    def test_taproot(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have the private key for a Taproot\n+        # output key will be able to sign and spend those scripts, even though they would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of Taproot scripts\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"taproot\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        rawtr_desc = descsum_create(f\"rawtr({privkey})\")\n+        rawtr_addr = self.master_node.deriveaddresses(rawtr_desc)[0]\n+        rawtr_spk = self.master_node.validateaddress(rawtr_addr)[\"scriptPubKey\"]\n+        tr_desc = descsum_create(f\"tr({privkey})\")\n+        tr_addr = self.master_node.deriveaddresses(tr_desc)[0]\n+        tr_spk = self.master_node.validateaddress(tr_addr)[\"scriptPubKey\"]\n+        tr_script_desc = descsum_create(f\"tr(9ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0,pk({privkey}))\")\n+        tr_script_addr = self.master_node.deriveaddresses(tr_script_desc)[0]\n+        tr_script_spk = self.master_node.validateaddress(tr_script_addr)[\"scriptPubKey\"]",
      "path": "test/functional/wallet_migration.py",
      "position": 341,
      "original_position": 29,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`self.old_node`?",
      "created_at": "2025-02-05T13:56:09Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1942990827",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1942990827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": 1268,
      "original_start_line": 1268,
      "start_side": "RIGHT",
      "line": 1276,
      "original_line": 1276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943008904",
      "pull_request_review_id": 2595302398,
      "id": 1943008904,
      "node_id": "PRRC_kwDOABII585zz_aI",
      "diff_hunk": "@@ -1255,6 +1256,62 @@ def test_miniscript(self):\n         assert_equal(watchonly.getaddressinfo(some_keys_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(all_keys_addr)[\"ismine\"], False)\n \n+    def test_taproot(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have the private key for a Taproot\n+        # output key will be able to sign and spend those scripts, even though they would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of Taproot scripts\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"taproot\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        rawtr_desc = descsum_create(f\"rawtr({privkey})\")\n+        rawtr_addr = self.master_node.deriveaddresses(rawtr_desc)[0]\n+        rawtr_spk = self.master_node.validateaddress(rawtr_addr)[\"scriptPubKey\"]\n+        tr_desc = descsum_create(f\"tr({privkey})\")\n+        tr_addr = self.master_node.deriveaddresses(tr_desc)[0]\n+        tr_spk = self.master_node.validateaddress(tr_addr)[\"scriptPubKey\"]\n+        tr_script_desc = descsum_create(f\"tr(9ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0,pk({privkey}))\")\n+        tr_script_addr = self.master_node.deriveaddresses(tr_script_desc)[0]\n+        tr_script_spk = self.master_node.validateaddress(tr_script_addr)[\"scriptPubKey\"]\n+\n+        wallet.importaddress(rawtr_spk)\n+        wallet.importaddress(tr_spk)\n+        wallet.importaddress(tr_script_spk)\n+        wallet.importprivkey(privkey)\n+\n+        txid = def_wallet.send([{rawtr_addr: 1},{tr_addr: 2}, {tr_script_addr: 3}])[\"txid\"]\n+        rawtr_vout = find_vout_for_address(self.master_node, txid, rawtr_addr)\n+        tr_vout = find_vout_for_address(self.master_node, txid, tr_addr)\n+        tr_script_vout = find_vout_for_address(self.master_node, txid, tr_script_addr)\n+        self.generate(self.master_node, 6)\n+\n+        # Double check that the rawtr can be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{rawtr_addr: 0.5}], include_watching=True, change_address=def_wallet.getnewaddress(), inputs=[{\"txid\": txid, \"vout\": rawtr_vout}])\n+        assert_equal(send_res[\"complete\"], True)\n+        self.generate(self.old_node, 6)\n+        assert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 5.5)",
      "path": "test/functional/wallet_migration.py",
      "position": 358,
      "original_position": 46,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: Can add a corresponding call before sending the transaction that checks the balance is 6.",
      "created_at": "2025-02-05T14:07:17Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943008904",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943008904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1293,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943021410",
      "pull_request_review_id": 2595302398,
      "id": 1943021410,
      "node_id": "PRRC_kwDOABII585z0Cdi",
      "diff_hunk": "@@ -1255,6 +1256,62 @@ def test_miniscript(self):\n         assert_equal(watchonly.getaddressinfo(some_keys_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(all_keys_addr)[\"ismine\"], False)\n \n+    def test_taproot(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have the private key for a Taproot\n+        # output key will be able to sign and spend those scripts, even though they would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of Taproot scripts\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"taproot\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        rawtr_desc = descsum_create(f\"rawtr({privkey})\")\n+        rawtr_addr = self.master_node.deriveaddresses(rawtr_desc)[0]\n+        rawtr_spk = self.master_node.validateaddress(rawtr_addr)[\"scriptPubKey\"]\n+        tr_desc = descsum_create(f\"tr({privkey})\")\n+        tr_addr = self.master_node.deriveaddresses(tr_desc)[0]\n+        tr_spk = self.master_node.validateaddress(tr_addr)[\"scriptPubKey\"]\n+        tr_script_desc = descsum_create(f\"tr(9ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0,pk({privkey}))\")\n+        tr_script_addr = self.master_node.deriveaddresses(tr_script_desc)[0]\n+        tr_script_spk = self.master_node.validateaddress(tr_script_addr)[\"scriptPubKey\"]\n+\n+        wallet.importaddress(rawtr_spk)\n+        wallet.importaddress(tr_spk)\n+        wallet.importaddress(tr_script_spk)\n+        wallet.importprivkey(privkey)\n+\n+        txid = def_wallet.send([{rawtr_addr: 1},{tr_addr: 2}, {tr_script_addr: 3}])[\"txid\"]\n+        rawtr_vout = find_vout_for_address(self.master_node, txid, rawtr_addr)\n+        tr_vout = find_vout_for_address(self.master_node, txid, tr_addr)\n+        tr_script_vout = find_vout_for_address(self.master_node, txid, tr_script_addr)\n+        self.generate(self.master_node, 6)\n+\n+        # Double check that the rawtr can be spent by the legacy wallet",
      "path": "test/functional/wallet_migration.py",
      "position": 354,
      "original_position": 42,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Where was the first check?",
      "created_at": "2025-02-05T14:14:53Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943021410",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943021410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1289,
      "original_line": 1289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943043551",
      "pull_request_review_id": 2595302398,
      "id": 1943043551,
      "node_id": "PRRC_kwDOABII585z0H3f",
      "diff_hunk": "@@ -1255,6 +1256,62 @@ def test_miniscript(self):\n         assert_equal(watchonly.getaddressinfo(some_keys_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(all_keys_addr)[\"ismine\"], False)\n \n+    def test_taproot(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have the private key for a Taproot\n+        # output key will be able to sign and spend those scripts, even though they would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of Taproot scripts\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"taproot\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        rawtr_desc = descsum_create(f\"rawtr({privkey})\")\n+        rawtr_addr = self.master_node.deriveaddresses(rawtr_desc)[0]\n+        rawtr_spk = self.master_node.validateaddress(rawtr_addr)[\"scriptPubKey\"]\n+        tr_desc = descsum_create(f\"tr({privkey})\")\n+        tr_addr = self.master_node.deriveaddresses(tr_desc)[0]\n+        tr_spk = self.master_node.validateaddress(tr_addr)[\"scriptPubKey\"]\n+        tr_script_desc = descsum_create(f\"tr(9ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0,pk({privkey}))\")\n+        tr_script_addr = self.master_node.deriveaddresses(tr_script_desc)[0]\n+        tr_script_spk = self.master_node.validateaddress(tr_script_addr)[\"scriptPubKey\"]\n+\n+        wallet.importaddress(rawtr_spk)\n+        wallet.importaddress(tr_spk)\n+        wallet.importaddress(tr_script_spk)\n+        wallet.importprivkey(privkey)\n+\n+        txid = def_wallet.send([{rawtr_addr: 1},{tr_addr: 2}, {tr_script_addr: 3}])[\"txid\"]\n+        rawtr_vout = find_vout_for_address(self.master_node, txid, rawtr_addr)\n+        tr_vout = find_vout_for_address(self.master_node, txid, tr_addr)\n+        tr_script_vout = find_vout_for_address(self.master_node, txid, tr_script_addr)\n+        self.generate(self.master_node, 6)\n+\n+        # Double check that the rawtr can be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{rawtr_addr: 0.5}], include_watching=True, change_address=def_wallet.getnewaddress(), inputs=[{\"txid\": txid, \"vout\": rawtr_vout}])\n+        assert_equal(send_res[\"complete\"], True)\n+        self.generate(self.old_node, 6)\n+        assert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 5.5)\n+\n+        # Check that the tr() cannot be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{def_wallet.getnewaddress(): 4}], include_watching=True, inputs=[{\"txid\": txid, \"vout\": tr_vout}, {\"txid\": txid, \"vout\": tr_script_vout}])",
      "path": "test/functional/wallet_migration.py",
      "position": 361,
      "original_position": 49,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I can understand why `tr_script_vout` can't be spent because it contains another key that the wallet doesn't have the private key for. Why can't the `tr_vout` be spent? IIUC, there's just 1 internal key with no script path.",
      "created_at": "2025-02-05T14:27:15Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943043551",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943043551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": 1295,
      "original_start_line": 1295,
      "start_side": "RIGHT",
      "line": 1296,
      "original_line": 1296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943047284",
      "pull_request_review_id": 2595302398,
      "id": 1943047284,
      "node_id": "PRRC_kwDOABII585z0Ix0",
      "diff_hunk": "@@ -1255,6 +1256,62 @@ def test_miniscript(self):\n         assert_equal(watchonly.getaddressinfo(some_keys_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(all_keys_addr)[\"ismine\"], False)\n \n+    def test_taproot(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have the private key for a Taproot",
      "path": "test/functional/wallet_migration.py",
      "position": 325,
      "original_position": 13,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "` It turns out that due to how signing logic works,`\r\n\r\nCurious how did you end up finding this?",
      "created_at": "2025-02-05T14:29:25Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943047284",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943047284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1260,
      "original_line": 1260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943052305",
      "pull_request_review_id": 2595302398,
      "id": 1943052305,
      "node_id": "PRRC_kwDOABII585z0KAR",
      "diff_hunk": "@@ -1255,6 +1256,62 @@ def test_miniscript(self):\n         assert_equal(watchonly.getaddressinfo(some_keys_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(all_keys_addr)[\"ismine\"], False)\n \n+    def test_taproot(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have the private key for a Taproot\n+        # output key will be able to sign and spend those scripts, even though they would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of Taproot scripts\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"taproot\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        rawtr_desc = descsum_create(f\"rawtr({privkey})\")\n+        rawtr_addr = self.master_node.deriveaddresses(rawtr_desc)[0]\n+        rawtr_spk = self.master_node.validateaddress(rawtr_addr)[\"scriptPubKey\"]\n+        tr_desc = descsum_create(f\"tr({privkey})\")\n+        tr_addr = self.master_node.deriveaddresses(tr_desc)[0]\n+        tr_spk = self.master_node.validateaddress(tr_addr)[\"scriptPubKey\"]\n+        tr_script_desc = descsum_create(f\"tr(9ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0,pk({privkey}))\")\n+        tr_script_addr = self.master_node.deriveaddresses(tr_script_desc)[0]\n+        tr_script_spk = self.master_node.validateaddress(tr_script_addr)[\"scriptPubKey\"]\n+\n+        wallet.importaddress(rawtr_spk)\n+        wallet.importaddress(tr_spk)\n+        wallet.importaddress(tr_script_spk)\n+        wallet.importprivkey(privkey)\n+\n+        txid = def_wallet.send([{rawtr_addr: 1},{tr_addr: 2}, {tr_script_addr: 3}])[\"txid\"]\n+        rawtr_vout = find_vout_for_address(self.master_node, txid, rawtr_addr)\n+        tr_vout = find_vout_for_address(self.master_node, txid, tr_addr)\n+        tr_script_vout = find_vout_for_address(self.master_node, txid, tr_script_addr)\n+        self.generate(self.master_node, 6)\n+\n+        # Double check that the rawtr can be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{rawtr_addr: 0.5}], include_watching=True, change_address=def_wallet.getnewaddress(), inputs=[{\"txid\": txid, \"vout\": rawtr_vout}])\n+        assert_equal(send_res[\"complete\"], True)\n+        self.generate(self.old_node, 6)\n+        assert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 5.5)",
      "path": "test/functional/wallet_migration.py",
      "position": 358,
      "original_position": 46,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "in_reply_to_id": 1943008904,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can also add below check because there is one later down (with only 1 getbalances call though).\r\n\r\n`assert_equal(wallet.getbalances()[\"mine\"][\"trusted\"], 0)`",
      "created_at": "2025-02-05T14:32:21Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943052305",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943052305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1293,
      "original_line": 1293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943057213",
      "pull_request_review_id": 2595302398,
      "id": 1943057213,
      "node_id": "PRRC_kwDOABII585z0LM9",
      "diff_hunk": "@@ -1255,6 +1256,62 @@ def test_miniscript(self):\n         assert_equal(watchonly.getaddressinfo(some_keys_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(all_keys_addr)[\"ismine\"], False)\n \n+    def test_taproot(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have the private key for a Taproot\n+        # output key will be able to sign and spend those scripts, even though they would not be detected as ISMINE_SPENDABLE.\n+        self.log.info(\"Test migration of Taproot scripts\")\n+        def_wallet = self.master_node.get_wallet_rpc(self.default_wallet_name)\n+        wallet = self.create_legacy_wallet(\"taproot\")\n+\n+        privkey, _ = generate_keypair(compressed=True, wif=True)\n+\n+        rawtr_desc = descsum_create(f\"rawtr({privkey})\")\n+        rawtr_addr = self.master_node.deriveaddresses(rawtr_desc)[0]\n+        rawtr_spk = self.master_node.validateaddress(rawtr_addr)[\"scriptPubKey\"]\n+        tr_desc = descsum_create(f\"tr({privkey})\")\n+        tr_addr = self.master_node.deriveaddresses(tr_desc)[0]\n+        tr_spk = self.master_node.validateaddress(tr_addr)[\"scriptPubKey\"]\n+        tr_script_desc = descsum_create(f\"tr(9ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0,pk({privkey}))\")\n+        tr_script_addr = self.master_node.deriveaddresses(tr_script_desc)[0]\n+        tr_script_spk = self.master_node.validateaddress(tr_script_addr)[\"scriptPubKey\"]\n+\n+        wallet.importaddress(rawtr_spk)\n+        wallet.importaddress(tr_spk)\n+        wallet.importaddress(tr_script_spk)\n+        wallet.importprivkey(privkey)\n+\n+        txid = def_wallet.send([{rawtr_addr: 1},{tr_addr: 2}, {tr_script_addr: 3}])[\"txid\"]\n+        rawtr_vout = find_vout_for_address(self.master_node, txid, rawtr_addr)\n+        tr_vout = find_vout_for_address(self.master_node, txid, tr_addr)\n+        tr_script_vout = find_vout_for_address(self.master_node, txid, tr_script_addr)\n+        self.generate(self.master_node, 6)\n+\n+        # Double check that the rawtr can be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{rawtr_addr: 0.5}], include_watching=True, change_address=def_wallet.getnewaddress(), inputs=[{\"txid\": txid, \"vout\": rawtr_vout}])\n+        assert_equal(send_res[\"complete\"], True)\n+        self.generate(self.old_node, 6)\n+        assert_equal(wallet.getbalances()[\"watchonly\"][\"trusted\"], 5.5)\n+\n+        # Check that the tr() cannot be spent by the legacy wallet\n+        send_res = wallet.send(outputs=[{def_wallet.getnewaddress(): 4}], include_watching=True, inputs=[{\"txid\": txid, \"vout\": tr_vout}, {\"txid\": txid, \"vout\": tr_script_vout}])\n+        assert_equal(send_res[\"complete\"], False)\n+\n+        res, wallet = self.migrate_and_get_rpc(\"taproot\")\n+\n+        # The rawtr should be migrated\n+        assert_equal(wallet.getbalances()[\"mine\"], {\"trusted\": 0.5, \"untrusted_pending\": 0, \"immature\": 0})\n+        assert_equal(wallet.getaddressinfo(rawtr_addr)[\"ismine\"], True)\n+        assert_equal(wallet.getaddressinfo(tr_addr)[\"ismine\"], False)\n+        assert_equal(wallet.getaddressinfo(tr_script_addr)[\"ismine\"], False)\n+\n+        # The miniscript with some keys should be in the watchonly wallet",
      "path": "test/functional/wallet_migration.py",
      "position": 372,
      "original_position": 60,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is the comment of the `test_miniscript` test in the previous commit. Below can be added instead.\r\n\r\n```\r\nThe tr() should be in the watchonly wallet\r\n```",
      "created_at": "2025-02-05T14:35:05Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943057213",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943057213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1307,
      "original_line": 1307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943070516",
      "pull_request_review_id": 2595302398,
      "id": 1943070516,
      "node_id": "PRRC_kwDOABII585z0Oc0",
      "diff_hunk": "@@ -1312,6 +1312,35 @@ def test_taproot(self):\n         assert_equal(watchonly.getaddressinfo(tr_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(tr_script_addr)[\"ismine\"], True)\n \n+    def test_solvable_no_privs(self):\n+        self.log.info(\"Test migrating a multisig that we do not have any private keys for\")\n+        wallet = self.create_legacy_wallet(\"multisig_noprivs\")\n+\n+        privkey, pubkey = generate_keypair(compressed=True, wif=True)",
      "path": "test/functional/wallet_migration.py",
      "position": 384,
      "original_position": 8,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "aa49b03b2ae65a183cff86ea16b976e90ba25929",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n- privkey, pubkey = generate_keypair(compressed=True, wif=True)\r\n+ _, pubkey = generate_keypair(compressed=True, wif=True)\r\n```\r\n\r\nBesides the fact that the `privkey` is not used in the test, also to relate to the test name \"we do not have any private keys for\".",
      "created_at": "2025-02-05T14:42:29Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943070516",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943070516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1319,
      "original_line": 1319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943080801",
      "pull_request_review_id": 2595302398,
      "id": 1943080801,
      "node_id": "PRRC_kwDOABII585z0Q9h",
      "diff_hunk": "@@ -1312,6 +1312,35 @@ def test_taproot(self):\n         assert_equal(watchonly.getaddressinfo(tr_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(tr_script_addr)[\"ismine\"], True)\n \n+    def test_solvable_no_privs(self):\n+        self.log.info(\"Test migrating a multisig that we do not have any private keys for\")\n+        wallet = self.create_legacy_wallet(\"multisig_noprivs\")\n+\n+        privkey, pubkey = generate_keypair(compressed=True, wif=True)\n+\n+        add_ms_res = wallet.addmultisigaddress(nrequired=1, keys=[pubkey.hex()])\n+        addr = add_ms_res[\"address\"]\n+\n+        # The multisig address should be ISMINE_NO but we should have the script info\n+        addr_info = wallet.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], False)\n+        assert \"hex\" in addr_info\n+\n+        migrate_res, wallet = self.migrate_and_get_rpc(\"multisig_noprivs\")\n+        assert_equal(migrate_res[\"solvables_name\"], \"multisig_noprivs_solvables\")\n+        solvables = self.master_node.get_wallet_rpc(migrate_res[\"solvables_name\"])\n+\n+        # The multisig should not be in the spendable wallet\n+        addr_info = wallet.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], False)\n+        assert \"hex\" not in addr_info\n+\n+        # The multisig address should be in the solvables wallet\n+        addr_info = solvables.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], True)\n+        assert_equal(addr_info[\"solvable\"], True)",
      "path": "test/functional/wallet_migration.py",
      "position": 406,
      "original_position": 30,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "aa49b03b2ae65a183cff86ea16b976e90ba25929",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does it make sense to check for `iswatchonly: false` as well to make the migration assertions more robust?",
      "created_at": "2025-02-05T14:47:21Z",
      "updated_at": "2025-02-05T14:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943080801",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943080801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": 1340,
      "original_start_line": 1340,
      "start_side": "RIGHT",
      "line": 1341,
      "original_line": 1341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943202181",
      "pull_request_review_id": 2596208896,
      "id": 1943202181,
      "node_id": "PRRC_kwDOABII585z0umF",
      "diff_hunk": "@@ -1312,6 +1312,35 @@ def test_taproot(self):\n         assert_equal(watchonly.getaddressinfo(tr_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(tr_script_addr)[\"ismine\"], True)\n \n+    def test_solvable_no_privs(self):\n+        self.log.info(\"Test migrating a multisig that we do not have any private keys for\")\n+        wallet = self.create_legacy_wallet(\"multisig_noprivs\")\n+\n+        privkey, pubkey = generate_keypair(compressed=True, wif=True)\n+\n+        add_ms_res = wallet.addmultisigaddress(nrequired=1, keys=[pubkey.hex()])\n+        addr = add_ms_res[\"address\"]\n+\n+        # The multisig address should be ISMINE_NO but we should have the script info\n+        addr_info = wallet.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], False)\n+        assert \"hex\" in addr_info\n+\n+        migrate_res, wallet = self.migrate_and_get_rpc(\"multisig_noprivs\")\n+        assert_equal(migrate_res[\"solvables_name\"], \"multisig_noprivs_solvables\")\n+        solvables = self.master_node.get_wallet_rpc(migrate_res[\"solvables_name\"])\n+\n+        # The multisig should not be in the spendable wallet\n+        addr_info = wallet.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], False)\n+        assert \"hex\" not in addr_info\n+\n+        # The multisig address should be in the solvables wallet\n+        addr_info = solvables.getaddressinfo(addr)\n+        assert_equal(addr_info[\"ismine\"], True)\n+        assert_equal(addr_info[\"solvable\"], True)",
      "path": "test/functional/wallet_migration.py",
      "position": 406,
      "original_position": 30,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "aa49b03b2ae65a183cff86ea16b976e90ba25929",
      "in_reply_to_id": 1943080801,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The solvables wallet itself is watch-only, so I think `iswatchonly` should be `true`?",
      "created_at": "2025-02-05T15:41:25Z",
      "updated_at": "2025-02-05T15:41:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943202181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943202181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": 1340,
      "original_start_line": 1340,
      "start_side": "RIGHT",
      "line": 1341,
      "original_line": 1341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943215423",
      "pull_request_review_id": 2596229840,
      "id": 1943215423,
      "node_id": "PRRC_kwDOABII585z0x0_",
      "diff_hunk": "@@ -1255,6 +1256,62 @@ def test_miniscript(self):\n         assert_equal(watchonly.getaddressinfo(some_keys_addr)[\"ismine\"], True)\n         assert_equal(watchonly.getaddressinfo(all_keys_addr)[\"ismine\"], False)\n \n+    def test_taproot(self):\n+        # It turns out that due to how signing logic works, legacy wallets that have the private key for a Taproot",
      "path": "test/functional/wallet_migration.py",
      "position": 325,
      "original_position": 13,
      "commit_id": "d5e28457a099cd546e757984043f28ba9f6689b1",
      "original_commit_id": "a3ff90dbbc1f80047ad6cc291c81477935d0c4a7",
      "in_reply_to_id": 1943047284,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think there was an earlier bugfix PR / issue around this, but I can't find it.",
      "created_at": "2025-02-05T15:48:47Z",
      "updated_at": "2025-02-05T15:48:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31495#discussion_r1943215423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1943215423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31495"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1260,
      "original_line": 1260,
      "side": "RIGHT"
    }
  ]
}