{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595",
    "id": 2005623544,
    "node_id": "PR_kwDOABII5853i2L4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30595",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30595.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30595.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
    "number": 30595,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "kernel: Introduce initial C header API",
    "user": {
      "login": "TheCharlatan",
      "id": 8421793,
      "node_id": "MDQ6VXNlcjg0MjE3OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheCharlatan",
      "html_url": "https://github.com/TheCharlatan",
      "followers_url": "https://api.github.com/users/TheCharlatan/followers",
      "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
      "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
      "repos_url": "https://api.github.com/users/TheCharlatan/repos",
      "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a first attempt at introducing a C header for the libbitcoinkernel library that may be used by external applications for interfacing with Bitcoin Core's validation logic. It currently is limited to operations on blocks. This is a conscious choice, since it already offers a lot of powerful functionality, but sits just on the cusp of still being reviewable scope-wise while giving some pointers on how the rest of the API could look like.\r\n\r\nThe current design was informed by the development of some tools using the C header:\r\n\r\n* A re-implementation (part of this pull request) of [bitcoin-chainstate](https://github.com/bitcoin/bitcoin/blob/master/src/bitcoin-chainstate.cpp).\r\n* A re-implementation of the python [block linearize](https://github.com/bitcoin/bitcoin/tree/master/contrib/linearize) scripts: https://github.com/TheCharlatan/bitcoin/tree/kernelLinearize \r\n* A silent payment scanner: https://github.com/josibake/silent-payments-scanner\r\n* An electrs index builder: https://github.com/josibake/electrs/commits/electrs-kernel-integration\r\n* A rust bitcoin node: https://github.com/TheCharlatan/kernel-node\r\n* A reindexer: https://github.com/TheCharlatan/bitcoin/tree/kernelApi_Reindexer\r\n\r\nNext to the C++ header also made available in this pull request, bindings for other languages are available here: \r\n\r\n* Rust: https://github.com/TheCharlatan/rust-bitcoinkernel\r\n* Python https://github.com/stickies-v/py-bitcoinkernel \r\n\r\nThe rust bindings include unit and fuzz tests for the API.\r\n\r\nThe header currently exposes logic for enabling the following functionality:\r\n* Feature-parity with the now deprecated libbitcoin-consensus\r\n* Optimized sha256 implementations that were not available to previous users of libbitcoin-consensus thanks to a static kernel context\r\n* Full support for logging as well as control over categories and severity\r\n* Feature parity with the existing experimental bitcoin-chainstate\r\n* Traversing the block index as well as using block index entries for reading block and undo data.\r\n* Running the chainstate in memory\r\n* Reindexing (both full and chainstate-only)\r\n* Interrupting long-running functions\r\n\r\nThe pull request introduces a new kernel-only test binary that purely relies on the kernel C header and the C++ standard library. This is intentionally done to show its capabilities without relying on other code inside the project. This may be relaxed to include some of the existing utilities, or even be merged into the existing test suite.\r\n\r\nThe complete docs for the API as well as some usage examples are hosted on [thecharlatan.ch/kernel-docs](https://thecharlatan.ch/kernel-docs/index.html). The docs are generated from the following repository (which also holds the examples): [github.com/TheCharlatan/kernel-docs](https://github.com/TheCharlatan/kernel-docs).\r\n\r\n#### How can I review this PR?\r\n\r\nScrutinize the commit messages, run the tests, write your own little applications using the library, let your favorite code sanitizer loose on it, hook it up to your fuzzing infrastructure, profile the difference between the existing bitcoin-chainstate and the bitcoin-chainstate introduced here, be nitty on the documentation, police the C interface, opine on your own API design philosophy.\r\n\r\nTo get a feeling for the API, read through the tests, or one of the examples.\r\n\r\nPlease try to avoid nits for the tests, these can wait for later and easily be improved over time. Docs exhaustively explaining all the intricacies of the internal goings-on of the library can also be added later.\r\n\r\nTo configure this PR for making the shared library and the bitcoin-chainstate and test_kernel utilities available:\r\n```\r\ncmake -B build -DBUILD_KERNEL_LIB=ON -DBUILD_UTIL_CHAINSTATE=ON\r\n```\r\n\r\nOnce compiled the library is part of the build artifacts that can be installed with:\r\n```\r\ncmake --install build\r\n```\r\n\r\nPython headers might also be useful for testing. [ctypeslib2](https://pypi.org/project/ctypeslib2/)'s [clang2py](https://github.com/trolldbois/ctypeslib/blob/master/ctypeslib/clang2py.py) can be used to auto-generate bindings:\r\n```\r\nclang2py src/kernel/bitcoinkernel.h -l /path/to/bitcoin/src/.libs/libbitcoinkernel.so > test_wrapper.py\r\n```\r\nOr alternatively on macOS (after `cmake --install build`):\r\n```\r\nclang2py /usr/local/include/bitcoinkernel.h -l /usr/local/lib/libbitcoinkernel.dylib --nm $(PWD)/nm_patch.py > test_wrapper.py\r\n```\r\n\r\n#### Why a C header (and not a C++ header)\r\n\r\n* Shipping a shared library with a C++ header is hard, because of name mangling.\r\n* Mature and well-supported tooling for integrating C exists for nearly every popular language.\r\n* C offers a reasonably stable ABI\r\n\r\nAlso see https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2285719575.\r\n\r\n#### What about versioning?\r\n\r\nThe header and library are still experimental and I would expect this to remain so for some time, so best not to worry about versioning yet.\r\n\r\n#### Potential future additions\r\n\r\nIn future, the C header could be expanded to support (some of these have been roughly implemented):\r\n\r\n* Handling transactions, block headers, coins cache, utxo set, meta data, and the mempool\r\n* Adapters for an abstract coins store\r\n* Adapters for an abstract block store\r\n* Allocators and buffers for more efficient memory usage\r\n* An \"[io-less](https://sans-io.readthedocs.io/how-to-sans-io.html)\" interface\r\n\r\n#### Current drawbacks\r\n\r\n* For external applications to read the block index of an existing Bitcoin Core node, Bitcoin Core needs to shut down first, since leveldb does not support reading across multiple processes. Other than migrating away from leveldb, there does not seem to be a solution for this problem.\r\n* The fatal error handling through the notifications is awkward.\r\n* Handling shared pointers in the interfaces is unfortunate. They make ownership and freeing of the resources fuzzy and poison the interfaces with additional types and complexity. However, they seem to be an artifact of the current code that interfaces with the validation engine. The validation engine itself does not seem to make extensive use of these shared pointers.\r\n* If multiple instances of the same type of objects are used, there is no mechanism for distinguishing the log messages produced by each of them.\r\n* The background leveldb compaction thread may not finish in time leading to a non-clean exit. There seems to be nothing we can do about this, outside of patching leveldb.",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "created_at": "2024-08-06T09:18:27Z",
    "updated_at": "2025-03-28T09:40:46Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "04a75c6e4f4bbd0337abca1de45b632bbf3b6c6c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "TheCharlatan:kernelApi",
      "ref": "kernelApi",
      "sha": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 94456368,
        "node_id": "MDEwOlJlcG9zaXRvcnk5NDQ1NjM2OA==",
        "name": "bitcoin",
        "full_name": "TheCharlatan/bitcoin",
        "owner": {
          "login": "TheCharlatan",
          "id": 8421793,
          "node_id": "MDQ6VXNlcjg0MjE3OTM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/TheCharlatan",
          "html_url": "https://github.com/TheCharlatan",
          "followers_url": "https://api.github.com/users/TheCharlatan/followers",
          "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
          "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
          "repos_url": "https://api.github.com/users/TheCharlatan/repos",
          "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/TheCharlatan/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/TheCharlatan/bitcoin",
        "archive_url": "https://api.github.com/repos/TheCharlatan/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/TheCharlatan/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/TheCharlatan/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/TheCharlatan/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/TheCharlatan/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/TheCharlatan/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/TheCharlatan/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/TheCharlatan/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/TheCharlatan/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/TheCharlatan/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/TheCharlatan/bitcoin/events",
        "forks_url": "https://api.github.com/repos/TheCharlatan/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/TheCharlatan/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/TheCharlatan/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/TheCharlatan/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/TheCharlatan/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/TheCharlatan/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/TheCharlatan/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/TheCharlatan/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/TheCharlatan/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/TheCharlatan/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:TheCharlatan/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/TheCharlatan/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/TheCharlatan/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/TheCharlatan/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/TheCharlatan/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/TheCharlatan/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/TheCharlatan/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/TheCharlatan/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/TheCharlatan/bitcoin/hooks",
        "svn_url": "https://github.com/TheCharlatan/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 259095,
        "default_branch": "master",
        "open_issues_count": 4,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-28T09:40:38Z",
        "created_at": "2017-06-15T16:03:35Z",
        "updated_at": "2025-03-28T09:02:29Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "0a1e36effaa5aa27bc5f2c4955c1fa2eb2f0c8fa",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36971,
        "stargazers_count": 82670,
        "watchers_count": 82670,
        "size": 278951,
        "default_branch": "master",
        "open_issues_count": 685,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-28T02:32:50Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-03-28T07:18:59Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 4256,
    "deletions": 239,
    "changed_files": 17,
    "commits": 22,
    "review_comments": 68,
    "comments": 62
  },
  "events": [
    {
      "event": "commented",
      "id": 2270798867,
      "node_id": "IC_kwDOABII586HWaQT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2270798867",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T09:18:31Z",
      "updated_at": "2025-03-28T02:58:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30595.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [josibake](https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2325848908), [stickies-v](https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2297633388), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2518337899) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31802](https://github.com/bitcoin/bitcoin/pull/31802) (Add bitcoin-{node,gui} to release binaries for IPC by Sjors)\n* [#31507](https://github.com/bitcoin/bitcoin/pull/31507) ([POC] build: Use clang-cl to build on Windows natively by hebasto)\n* [#31382](https://github.com/bitcoin/bitcoin/pull/31382) (kernel: Flush in ChainstateManager destructor by TheCharlatan)\n* [#31176](https://github.com/bitcoin/bitcoin/pull/31176) (ci: Test cross-built Windows executables on Windows natively by hebasto)\n* [#30975](https://github.com/bitcoin/bitcoin/pull/30975) (ci: build multiprocess on most jobs by Sjors)\n* [#30610](https://github.com/bitcoin/bitcoin/pull/30610) (validation: do not wipe utxo cache for stats/scans/snapshots by sipa)\n* [#30437](https://github.com/bitcoin/bitcoin/pull/30437) (multiprocess: add bitcoin-mine test program by ryanofsky)\n* [#30214](https://github.com/bitcoin/bitcoin/pull/30214) (refactor: Improve assumeutxo state representation by ryanofsky)\n* [#29700](https://github.com/bitcoin/bitcoin/pull/29700) (kernel, refactor: return error status on all fatal errors by ryanofsky)\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n* [#28792](https://github.com/bitcoin/bitcoin/pull/28792) (Embed default ASMap as binary dump header file by fjahr)\n* [#26022](https://github.com/bitcoin/bitcoin/pull/26022) (Add util::ResultPtr class by ryanofsky)\n* [#25665](https://github.com/bitcoin/bitcoin/pull/25665) (refactor: Add util::Result failure values, multiple error and warning messages by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2270798867",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "labeled",
      "id": 13775536223,
      "node_id": "LE_lADOABII586SDdapzwAAAAM1FgBf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13775536223",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T09:18:33Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13776622682,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAM1JpRa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13776622682",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "13d9cbba755cfab74982c741ceb415190b9621e3",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/13d9cbba755cfab74982c741ceb415190b9621e3",
      "created_at": "2024-08-06T10:42:04Z"
    },
    {
      "event": "labeled",
      "id": 13776623455,
      "node_id": "LE_lADOABII586SDdapzwAAAAM1Jpdf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13776623455",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T10:42:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2270967742,
      "node_id": "IC_kwDOABII586HXDe-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2270967742",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T10:42:08Z",
      "updated_at": "2024-08-06T10:42:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/28396412371</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2270967742",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13776932895,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAM1K1Af",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13776932895",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7d3154faecb71a7df1c4a95554984b3adec555cb",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/7d3154faecb71a7df1c4a95554984b3adec555cb",
      "created_at": "2024-08-06T11:07:12Z"
    },
    {
      "event": "unlabeled",
      "id": 13778638981,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAM1RViF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13778638981",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T13:18:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2274440199,
      "node_id": "IC_kwDOABII586HkTQH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2274440199",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-07T22:14:51Z",
      "updated_at": "2024-08-07T22:14:51Z",
      "author_association": "MEMBER",
      "body": "Very cool. Can't wait to dig in when I have some free time.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2274440199",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2284621389,
      "node_id": "IC_kwDOABII586ILI5N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2284621389",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-12T18:05:53Z",
      "updated_at": "2024-08-12T18:05:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "This seems to offer a lot of nice features, but can you explain the tradeoffs of wrapping the C++ interface in C instead of using C++ from rust directly? It seems like having a C middle layer introduces a lot of boilerplate, and I'm wondering if it is really necessary. For example it seems like there is a rust cxx crate (https://docs.rs/cxx/latest/cxx/, https://chatgpt.com/share/dd4dde59-66d6-4486-88a6-2f42144be056) that lets you call C++ directly from Rust and avoid the need for C boilerplate. It looks like https://cppyy.readthedocs.io/en/latest/index.html is an even more full-featured way of calling c++ from python.\r\n\r\nAnother drawback of going through a C API seems like not just increased boilerplate, but reduced safety. For example, the implementation is using reinterpret_cast everywhere and it seems like the exposed C functions use a `kernel_ErrorCode` enum type with the union of every possible error type, so callers don't have a way to know which functions can return which errors.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2284621389",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2285719575,
      "node_id": "IC_kwDOABII586IPVAX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2285719575",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T08:54:20Z",
      "updated_at": "2024-09-03T12:03:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for the questions and kicking this discussion off @ryanofsky! I'll update the PR description with a better motiviation re. C vs C++ header, but will also try to answer your questions here.\r\n\r\n> This seems to offer a lot of nice features, but can you explain the tradeoffs of wrapping the C++ interface in C instead of using C++ from rust directly? It seems like having a C middle layer introduces a lot of boilerplate, and I'm wondering if it is really necessary. For example it seems like there is a rust cxx crate (https://docs.rs/cxx/latest/cxx/, https://chatgpt.com/share/dd4dde59-66d6-4486-88a6-2f42144be056) that lets you call C++ directly from Rust and avoid the need for C boilerplate. It looks like https://cppyy.readthedocs.io/en/latest/index.html is an even more full-featured way of calling c++ from python.\r\n\r\nIt is true that the interoperability between C++ and Rust has become very good. In fact there is someone working on wrapping the entirety of Bitcoin Core in Rust: https://github.com/klebs6/bitcoin-rs.\r\n\r\nDuring the last Core Dev meeting in Berlin I also asked if a C API were desirable in the first place ([notes here](https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/)) during the libbitcoinkernel session. I moved forward with this implementation, because the consensus at the time with many contributors in the room was that it was desirable. The reasons for this as discussed during the session at the meeting can be briefly summarised:\r\n\r\n* Shipping a shared library with a C++ header is hard\r\n* Mature and well-supported tooling for integrating C exists for nearly every popular language.\r\n* C offers a reasonably stable ABI\r\n\r\nSo if we want the broadest possible support, across as many languages as possible with both dynamic and statically compiled libraries, a C header is the go-to option. I'm speculating here, but a C++ header might also make future standard version bumps and adoption of new standard library features harder. If having some trade-offs with compatibility, library portability, and language support is acceptable, a C++ header might be acceptaple though. It would be nice to hear more reviewers give their opinions here. \r\n\r\nI'd also like to add that two libraries that we use and depend on in this project, [minisketch](https://github.com/sipa/minisketch/tree/master) and [zeromq](https://github.com/zeromq/libzmq/), use the same pattern. They are C++ codebases, that only expose a C API that in both instances can be used with a C++ RAII wrapper. So there is precedent in the free software ecosystem for doing things this way.\r\n\r\nThe quality of C++ language interop seems to vary a lot between languages. Python and Rust seem to have decent support, ziglang on the other hand has no support for C++ bindings. JVM family languages are a bit hit and miss, and many of the common academic and industrial data analysis languages, like Julia, R, and Matlab have no support for direct C++ bindings. The latter category should not be disregarded as potential future users, since this library might be useful to access Bitcoin Core data for data analysis projects.\r\n\r\n> Another drawback of going through a C API seems like not just increased boilerplate, but reduced safety. For example, the implementation is using reinterpret_cast everywhere\r\n\r\nI feel like the reduced type safety due to casting is bit of a red herring. The type casting can be harder to abuse if you always use a dedicated helper function for interpreting passed in data types (as I believe is implemented here). Casting is also a pattern used in many other projects; both minisketch and libzmq use similar type casts extensively. It should definitely be possible to scrutinize the API in this PR to a point where it offers decent safety to its users as well as contributors to and maintainers of this code base.\r\n\r\nThe concerns around boilerplate are more serious in my view, but at least with the current internal code and headers I feel like exposing a _safe_ C++ API is not trivial either. The current headers do not lend themselves to it well, for example through tricky locking mechanics, exposing boost types, or confusing lifetimes. There also comes a point where we should probably stop extensively refactoring internal code for the kernel. I've heard some voices during the last two Core Dev meetings with concerns that the kernel project might turn the validation code into an extensive forever building site. Having some boilerplate and glue to abstract some the ugliness and make it safe seems like an acceptable solution for this dilemma. If this means boilerplate is required anyway, I would personally prefer a C API.\r\n\r\nSome of the boilerplate-y duplicate definitions in the header could be dropped again eventually if some of the `enum`s are moved to C-style `enum`s instead of `class enum`. As long as they are properly namespaced, I don't see a big drawback for this. Similarly, some of the structs could be defined in a way where they can be used on both sides using pimpl or similar idioms. All in all, most of these translations seem very straightforward.\r\n\r\nIt might be interesting to see how some of the RPC methods could be re-implemented using the kernel header. There have been some RPC implementation bugs over the years that were due to unsafe usage of our internal code within the method implementations. Using the kernel header instead might make this safer and reduce boilerplate. To  be clear, I am not suggesting replacing the implementations, but separately re-implementing some of them to show where the kernel header might shine.\r\n\r\n> it seems like the exposed C functions use a kernel_ErrorCode enum type with the union of every possible error type, so callers don't have a way to know which functions can return which errors.\r\n\r\nWe have disagreed on the design of this before. If I understood you correctly, consolidating all error codes into a single enumeration was one of the reasons you opened your version for handling fatal errors in the kernel: https://github.com/bitcoin/bitcoin/pull/29700 as an alternative to my original: https://github.com/bitcoin/bitcoin/pull/29642. I am still a bit torn by the two approaches. I get that it may be useful to exactly see which errors may be encountered by invoking a certain routine, but at the same time I get the feeling this often ends up splintering the error handling to the point where you end up with a catch all approach after all. I also think that it is nice to have a single, central list for looking up all error codes and defining some routines for handling them in close proximity to their definition. It would be nice to finally hear some more voices besides the two of us discussing this. real-or-random has recently provided some good points on error handling in the libsecp [silent payments pr](https://github.com/bitcoin-core/secp256k1/pull/1519#issuecomment-2142599641) (that I mostly did not adopt in this PR) and argues that most error codes are not useful to the user. As mentioned in the description, error handling is a weak spot of this pull request and I would like to improve it.\r\n\r\n\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2285719575",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 13860034421,
      "node_id": "MEE_lADOABII586SDdapzwAAAAM6H1d1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13860034421",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T08:54:22Z"
    },
    {
      "event": "subscribed",
      "id": 13860034437,
      "node_id": "SE_lADOABII586SDdapzwAAAAM6H1eF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13860034437",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T08:54:22Z"
    },
    {
      "event": "commented",
      "id": 2286604343,
      "node_id": "IC_kwDOABII586IStA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2286604343",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T16:01:30Z",
      "updated_at": "2024-08-13T17:31:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "I guess another thing I'd like to know is if this is the initial C API, and the implementation is around 3000 lines, and it doesn't handle \"transactions, block headers, coins cache, utxo set, meta data, and the mempool\", how much bigger do you think it will get if it does cover most of the things you would like it to cover? Like is this 20%, 30%, or 50% of the expected size?\r\n\r\nI like the idea of reviewing and merging this PR, and establishing a way to interoperate with rust libraries and external projects. I just think going forward we should not lock ourselves into an approach that requires everything to go through a C interface. As we build on this and add features, we should experiment with other approaches that use C++ directly, especially when it can reduce boilerplate and avoid bugs.\r\n\r\nThanks for pointing to me to the other error handling discussion. I very much agree with the post that says having a single error handling path is highly desirable. I especially agree with this in cases where detailed error messages are still provided (keeping in mind that error handling != error reporting, you can return simple error states with detailed messages or logging). Of course there are places where callers do need to handle separate error cases, especially when there are temporary failures, timeouts, and interruptions, and in these cases functions should return 2 or 3 error states instead of 1. But I don't think there is a reason in modern application code for functions to be able to return 5, 10, 20, or 50 error states generally. In low-level or very general OS, networking or DBMS code it might make sense, but for application code it seems like a cargo cult programming practice that made IBM service manuals very impressive in the 1980s but does not have a present day rationale. There are special cases, but I don't think it should be a normal thing for functions to be returning 15 error codes if we are trying to provide a safe and easy to use API.\r\n\r\nAgain though, if this approach is the easiest way to get cross-language interoperability working right now, I think we should try it. I just think we should be looking for ways to make things simpler and safer going forward.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2286604343",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2286994610,
      "node_id": "IC_kwDOABII586IUMSy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2286994610",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T19:38:46Z",
      "updated_at": "2024-08-13T19:38:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I guess another thing I'd like to know is if this is the initial C API, and the implementation is around 3000 lines, and it doesn't handle \"transactions, block headers, coins cache, utxo set, meta data, and the mempool\", how much bigger do you think it will get if it does cover most of the things you would like it to cover? Like is this 20%, 30%, or 50% of the expected size?\r\n\r\nI think a fair comparison would be comparing the amount of code \"glue\" required, e.g. the size of the `bitcoinkernel.cpp` file in this pull request. The size of the header is very dependent on the detail of documentation and I think judging it by the amount of test code is also hard. On my branch including iterators for the UTXO set, handling headers, and simple mempool processing, basically all the stuff required to drop-in replace the calls to validation code in `net_processing` with the C API, is about similar in size: https://github.com/bitcoin/bitcoin/pull/30595/files#diff-cc28221ef8d0c7294dda4e3df9f70bb6c062006b387468380c2c2cc02b6762c3 . The code on that branch is more hacky than the code here, so I would expect a bit less than a doubling in size to get all the features  required to run a full node with transaction relay.\r\n\r\n> In low-level or very general OS, networking or DBMS code it might make sense, but for application code it seems like a cargo cult programming practice that made IBM service manuals very impressive in the 1980s but does not have a present day rationale.\r\n\r\nHeh, well put. I think for most functions here it could be feasible to have more concise error codes without too much effort, but I feel like I have to detach from this a bit before being able to come up with an alternative.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2286994610",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2287225308,
      "node_id": "IC_kwDOABII586IVEnc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2287225308",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T22:09:05Z",
      "updated_at": "2024-08-13T22:09:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think for most functions here it could be feasible to have more concise error codes without too much effort, but I feel like I have to detach from this a bit before being able to come up with an alternative.\r\n\r\nThanks, I think I'd need to look at this more to give concrete suggestions, but I'd hope most functions would just return a simple success or failure status, with a descriptive error message in the case of failure. When functions need to return more complicated information or can fail in different ways that callers will want to distinguish, it should be easy to return the relevant information in custom struct or enum types. I think it's usually better for functions to return simpler custom types than more complicated shared types, because it lets callers know what values functions can return just by looking at their declarations.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2287225308",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "labeled",
      "id": 13908890225,
      "node_id": "LE_lADOABII586SDdapzwAAAAM9CNJx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13908890225",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T10:00:58Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14044032945,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANFFu-x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14044032945",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cdec7404bf204edf957edad899004caf2cb27553",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/cdec7404bf204edf957edad899004caf2cb27553",
      "created_at": "2024-08-28T10:10:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14058087390,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANF7WPe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14058087390",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1932d1039d7b07b1dade253b209faee59273e922",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/1932d1039d7b07b1dade253b209faee59273e922",
      "created_at": "2024-08-29T08:48:07Z"
    },
    {
      "event": "unlabeled",
      "id": 14059546247,
      "node_id": "UNLE_lADOABII586SDdapzwAAAANGA6aH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14059546247",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T10:35:37Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14070483742,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANGqose",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14070483742",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9246f36013b7caeabd531c32ee02457b56f7e175",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/9246f36013b7caeabd531c32ee02457b56f7e175",
      "created_at": "2024-08-29T21:11:37Z"
    },
    {
      "event": "labeled",
      "id": 14075219831,
      "node_id": "LE_lADOABII586SDdapzwAAAANG8s93",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14075219831",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T04:56:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14077777424,
      "node_id": "UNLE_lADOABII586SDdapzwAAAANHGdYQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14077777424",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T08:59:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14095507400,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANIKF_I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14095507400",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "de298e6d94684b3a7b29ecd1fdea03ce07bdbbc6",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/de298e6d94684b3a7b29ecd1fdea03ce07bdbbc6",
      "created_at": "2024-09-01T19:46:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14095512074,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANIKHIK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14095512074",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8345e0ec6e5cd76bf6dbc7c27cef6f1f370613b7",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/8345e0ec6e5cd76bf6dbc7c27cef6f1f370613b7",
      "created_at": "2024-09-01T19:48:20Z"
    },
    {
      "event": "commented",
      "id": 2323487524,
      "node_id": "IC_kwDOABII586KfZsk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2323487524",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-01T20:29:45Z",
      "updated_at": "2024-09-01T20:29:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think for most functions here it could be feasible to have more concise error codes without too much effort, but I feel like I have to detach from this a bit before being able to come up with an alternative.\r\n\r\nCompletely got rid of the `kernel_Error` with the last push. Thanks for laying out your logic ryanofsky, I feel like this is cleaner now. When looking at the Rust wrapper, the code seems much clearer too. Errors are now communicated through nullptr or false values. Where required, so far only for the verification functions, a richer status code is communicated to the developer.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2323487524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2325264926,
      "node_id": "IC_kwDOABII586KmLoe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2325264926",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:34Z",
      "updated_at": "2024-09-02T20:13:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the update. It's good to drop the error codes so the C API can correspond 1:1 with the C++ API and not be tied to a more old fashioned and cumbersome error handling paradigm (for callers that want to know which errors are possible and not have to code defensively or fall back to failing generically).\r\n\r\nI am still -0 on the approach of introducing a C API to begin with, but happy to help review this and get merged and maintain it if other developers think this is the right approach to take (short term or long term). **It would be great to have more concept and approach ACKs for this PR** particularly from the @theuni who commented earlier and @josibake who seems to have some projects built on this and linked in the PR description.\r\n\r\nI think personally, if I wanted to use bitcoin core code from python or rust I would use tools like:\r\n\r\n- https://github.com/pybind/pybind11\r\n- https://docs.rs/cxx/latest/cxx/\r\n- https://hkalbasi.github.io/zngur/\r\n\r\nAnd interoperate with C++ directly,  instead of wrapping the C++ interface in a C interface first. Tools like these do not support all C++ types and features, and can make it necessary to selectively wrap more complicated C++ interfaces with simpler C++ interfaces, or even C interfaces, but I don't think this would be a justification for preemptively requiring every C++ type and function to be wrapped in C before it can be exposed. I just think the resulting boilerplate code:\r\n\r\n```c++\r\nkernel_Warning cast_kernel_warning(kernel::Warning warning)\r\n{\r\n    switch (warning) {\r\n    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\r\n        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\r\n    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\r\n        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\r\n    } // no default case, so the compiler can warn about missing cases\r\n    assert(false);\r\n}\r\n```\r\n\r\nand duplicative type definitions and documentation:\r\n\r\n```c++\r\n/**\r\n * A struct for holding the kernel notification callbacks. The user data pointer\r\n * may be used to point to user-defined structures to make processing the\r\n * notifications easier.\r\n */\r\ntypedef struct {\r\n    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\r\n    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\r\n    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\r\n    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\r\n    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\r\n    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\r\n    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\r\n    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\r\n} kernel_NotificationInterfaceCallbacks;\r\n```\r\n\r\nare fundamentally unnecessary and not worth effort of writing and maintaining when C++ is not a new or unusual language and not meaningfully less accessible or interoperable than C is.\r\n\r\nThere are legitimate reasons to wrap C++ in C. One reason would be to provide ABI compatibility. Another would be to make code accessible with dlopen/dlsym. But I think even in these cases you would want to wrap C++ in C selectively, or just define an intermediate C interface to pass pointers but use C++ on either side of the interface. I don't think you would want to drop down to C when not otherwise needed.\r\n\r\nThis is just to explain my point of view though. Overall I think this is very nice work, and I want to help with it, not hold it up.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2325264926",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 14106972079,
      "node_id": "MEE_lADOABII586SDdapzwAAAANI10-v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14106972079",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:35Z"
    },
    {
      "event": "subscribed",
      "id": 14106972088,
      "node_id": "SE_lADOABII586SDdapzwAAAANI10-4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14106972088",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:35Z"
    },
    {
      "event": "mentioned",
      "id": 14106972097,
      "node_id": "MEE_lADOABII586SDdapzwAAAANI10_B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14106972097",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:35Z"
    },
    {
      "event": "subscribed",
      "id": 14106972099,
      "node_id": "SE_lADOABII586SDdapzwAAAANI10_D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14106972099",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:35Z"
    },
    {
      "event": "commented",
      "id": 2325272366,
      "node_id": "IC_kwDOABII586KmNcu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2325272366",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:24:15Z",
      "updated_at": "2024-09-02T20:25:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Another idea worth mentioning is that a bitcoin kernel C API could be implemented as a separate C library depending on the C++ library. The new code here does not necessarily need to be part of the main bitcoin core git repository, and it could be in a separate project. A benefit of this approach is it could relieve bitcoin core developers from the responsibility of updating the C API and API documention when they change the C++ code. But a drawback is that C API might not always be up to date with latest version of bitcoin core code and could be broken between releases. Also it might not be as well reviewed or understood and might have more bugs.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2325272366",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2325848908,
      "node_id": "IC_kwDOABII586KoaNM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2325848908",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:36Z",
      "updated_at": "2024-09-03T07:59:36Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nAlso an implicit approach ACK despite not heavily reviewing the code (yet). I have been focusing on using the kernel library in proof of concept applications to get a better sense of how well the library works for downstream users and to hopefully uncover any pain points preemptively. A few of these projects are linked in the PR description.\r\n\r\nRegarding a C header vs C++ header, thanks @ryanofsky for taking the time to explain your thought process. I think you raise some excellent points. I'll try to respond as best I can, despite being slightly out of my depth on this topic 😅 \r\n\r\n---\r\n\r\nFor me, the value of libbitcoinkernel is only fully realised with the broadest possible language support and ease of use for downstream projects. This is why I strongly prefer the C header approach for the following reasons:\r\n\r\n1. Mature tooling for C language bindings\r\n2. Stable ABI\r\n3. Well established pattern in other open source projects\r\n\r\nIf we agree that broad language support is a goal of libbitcoinkernel, highlighting languages that _do not_ support C++ bindings is a much more compelling argument for a C header than highlighting languages that _do_ support C++ bindings as an argument for a C++ header.\r\n\r\nRegarding some of the mentioned languages/tools which do have C++ language binding support: \r\n\r\n> Tools like these do not support all C++ types and features, and can make it necessary to selectively wrap more complicated C++ interfaces with simpler C++ interfaces, or even C interfaces\r\n\r\nIn this example, who is doing the wrapping to be able to use these tools? If it's us, this seems much more complicated to ship and maintain a mixed wrapper and also feels over engineered to a specific set of tools and languages. It also does nothing for languages that do not support C++ bindings at all. As @TheCharlatan mentioned, languages favoured by academia lack C++ binding support and making libbitcoinkernel useful for academic research is a particularly important use case of libbitcoinkernel for me. \r\n\r\nIf we are exposing just a C++ header and expecting the downstream user to wrap selective parts in C interfaces to use libbitcoinkernel, we've eroded a fundamental value proposition of libbitcoinkernel, in my opinion. Namely, we want to provide a safe to use consensus library for users and minimise the risk of downstream projects introducing consensus bugs. Requiring downstream projects to write their own C++/C interfaces to be able to use kernel means that a) they just won't use libbitcoinkernel or b) will introduce bugs when writing these wrappers. Said differently, if boilerplate will be needed for broad language support, I would prefer we focus our energy on writing and reviewing boilerplate code that ensures the usefulness of the library for the broadest possible user base, instead of requiring a subset of users to each write their own boilerplate without any review from us.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2325848908",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 14110905700,
      "node_id": "MEE_lADOABII586SDdapzwAAAANJE1Vk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14110905700",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:37Z"
    },
    {
      "event": "subscribed",
      "id": 14110905724,
      "node_id": "SE_lADOABII586SDdapzwAAAANJE1V8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14110905724",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:37Z"
    },
    {
      "event": "mentioned",
      "id": 14110905746,
      "node_id": "MEE_lADOABII586SDdapzwAAAANJE1WS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14110905746",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:38Z"
    },
    {
      "event": "subscribed",
      "id": 14110905768,
      "node_id": "SE_lADOABII586SDdapzwAAAANJE1Wo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14110905768",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:38Z"
    },
    {
      "event": "labeled",
      "id": 14121577521,
      "node_id": "LE_lADOABII586SDdapzwAAAANJtiwx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14121577521",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T21:47:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14132738442,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANKYHmK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14132738442",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/33c71843e3fde0b795687a8626220f02f7243662",
      "created_at": "2024-09-04T14:55:31Z"
    },
    {
      "event": "unlabeled",
      "id": 14134579721,
      "node_id": "UNLE_lADOABII586SDdapzwAAAANKfJIJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14134579721",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T16:58:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 14235825318,
      "node_id": "LE_lADOABII586SDdapzwAAAANQhXSm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14235825318",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T16:28:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14239085806,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANQtzTu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14239085806",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "acca9ee21652d8cffac14926511c2d7a3e40043d",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/acca9ee21652d8cffac14926511c2d7a3e40043d",
      "created_at": "2024-09-12T21:19:08Z"
    },
    {
      "event": "commented",
      "id": 2347263134,
      "node_id": "IC_kwDOABII586L6GSe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2347263134",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T21:19:19Z",
      "updated_at": "2024-09-12T21:19:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2347263134",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 14239824640,
      "node_id": "UNLE_lADOABII586SDdapzwAAAANQwnsA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14239824640",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T22:52:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14250154975,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANRYBvf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14250154975",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c2806df5200e9f2a10f02ce7730d74bb4d47f05b",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/c2806df5200e9f2a10f02ce7730d74bb4d47f05b",
      "created_at": "2024-09-13T14:47:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14250745451,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANRaR5r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14250745451",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "20e0b8178ff931672717ba401c083d03712b3f28",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/20e0b8178ff931672717ba401c083d03712b3f28",
      "created_at": "2024-09-13T15:33:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14260729113,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANSAXUZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14260729113",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8777c555fc2da3fab14e7031f80681d9f2e193c6",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/8777c555fc2da3fab14e7031f80681d9f2e193c6",
      "created_at": "2024-09-14T20:06:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14562230874,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANj-gJa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14562230874",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b129d35f682d02d32a1915c922f2941ca37b42a0",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/b129d35f682d02d32a1915c922f2941ca37b42a0",
      "created_at": "2024-10-08T20:01:05Z"
    },
    {
      "event": "commented",
      "id": 2400726577,
      "node_id": "IC_kwDOABII586PGC4x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2400726577",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T20:07:11Z",
      "updated_at": "2024-10-08T20:07:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reworked after receiving a bunch of out-of-band feedback. In short:\r\n\r\n* Got rid of the `void *` option handling. Options are now set through dedicated functions instead of a single setter for all options.\r\n* Got rid of the `kernel_TaskRunner`. The context now holds an immediate task runner internally on which a user can register various validation interfaces. It is now the user's responsibility to process the validation callbacks in a non-blocking fashion with their own infrastructure.\r\n* Got rid of raw data types in validation functions. Instead the raw data is now parsed and processed beforehand and the user always passes opaque data types.\r\n* Got rid of the explicit transaction output struct. The user can now retrieve the data with helper functions applied on opaque transaction output objects.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2400726577",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14613502863,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANnCFuP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14613502863",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e70e527ef215197cac56b3f6e065abd891724c13",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/e70e527ef215197cac56b3f6e065abd891724c13",
      "created_at": "2024-10-11T19:47:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14657994685,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANprz-9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14657994685",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aa59e3323aad98560204f6dead4bfec5feff8078",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/aa59e3323aad98560204f6dead4bfec5feff8078",
      "created_at": "2024-10-15T13:47:39Z"
    },
    {
      "event": "review_requested",
      "id": 14787629773,
      "node_id": "RRE_lADOABII586SDdapzwAAAANxaVLN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787629773",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T15:17:04Z",
      "requested_reviewer": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "subscribed",
      "id": 14789856226,
      "node_id": "SE_lADOABII586SDdapzwAAAANxi0vi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14789856226",
      "actor": {
        "login": "Kasucode101",
        "id": 177804498,
        "node_id": "U_kgDOCpkU0g",
        "avatar_url": "https://avatars.githubusercontent.com/u/177804498?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kasucode101",
        "html_url": "https://github.com/Kasucode101",
        "followers_url": "https://api.github.com/users/Kasucode101/followers",
        "following_url": "https://api.github.com/users/Kasucode101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kasucode101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kasucode101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kasucode101/subscriptions",
        "organizations_url": "https://api.github.com/users/Kasucode101/orgs",
        "repos_url": "https://api.github.com/users/Kasucode101/repos",
        "events_url": "https://api.github.com/users/Kasucode101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kasucode101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T17:34:48Z"
    },
    {
      "event": "comment_deleted",
      "id": 14792106355,
      "node_id": "CDE_lADOABII586SDdapzwAAAANxraFz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14792106355",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T20:13:08Z"
    },
    {
      "event": "labeled",
      "id": 14845106922,
      "node_id": "LE_lADOABII586SDdapzwAAAAN01lrq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14845106922",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T09:18:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14847200048,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAN09ksw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14847200048",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "60e81f72a4fc4a45a0a48e434174813367a57a36",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/60e81f72a4fc4a45a0a48e434174813367a57a36",
      "created_at": "2024-10-24T10:12:34Z"
    },
    {
      "event": "unlabeled",
      "id": 14849342084,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAN1FvqE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14849342084",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T11:32:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14852191297,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAN1QnRB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14852191297",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a3f95c7c5e41da0439f4398249a60fb7b4f72548",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/a3f95c7c5e41da0439f4398249a60fb7b4f72548",
      "created_at": "2024-10-24T14:00:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14869766856,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAN2TqLI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14869766856",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8a7167c2bdd7d5629013a5c43ed48f724f92fa56",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/8a7167c2bdd7d5629013a5c43ed48f724f92fa56",
      "created_at": "2024-10-25T10:19:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15084388468,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAODGYB0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15084388468",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1047757ea3b4b78b51d7338ea44e2123851143fe",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/1047757ea3b4b78b51d7338ea44e2123851143fe",
      "created_at": "2024-11-02T20:39:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15211184239,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOKqEBv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15211184239",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a65c1cb6bc34010e81501ae0f3d3859cfb8e9650",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/a65c1cb6bc34010e81501ae0f3d3859cfb8e9650",
      "created_at": "2024-11-08T11:01:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15242060548,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOMf2ME",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15242060548",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2795c1c0786ea63a5bae65a985fbf7890e8fcd0c",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/2795c1c0786ea63a5bae65a985fbf7890e8fcd0c",
      "created_at": "2024-11-10T21:13:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15296213529,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOPubIZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15296213529",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "48158303fe276cb2f8fbc53ff31a4162d8f55c84",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/48158303fe276cb2f8fbc53ff31a4162d8f55c84",
      "created_at": "2024-11-14T10:17:15Z"
    },
    {
      "event": "subscribed",
      "id": 15303468226,
      "node_id": "SE_lADOABII586SDdapzwAAAAOQKGTC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15303468226",
      "actor": {
        "login": "rsantacroce",
        "id": 112706229,
        "node_id": "U_kgDOBrfCtQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/112706229?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rsantacroce",
        "html_url": "https://github.com/rsantacroce",
        "followers_url": "https://api.github.com/users/rsantacroce/followers",
        "following_url": "https://api.github.com/users/rsantacroce/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rsantacroce/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rsantacroce/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rsantacroce/subscriptions",
        "organizations_url": "https://api.github.com/users/rsantacroce/orgs",
        "repos_url": "https://api.github.com/users/rsantacroce/repos",
        "events_url": "https://api.github.com/users/rsantacroce/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rsantacroce/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T19:29:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15324983917,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAORcLJt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15324983917",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "26042c718462bc4e484526fa14fb962e95e8bc13",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/26042c718462bc4e484526fa14fb962e95e8bc13",
      "created_at": "2024-11-17T14:13:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15325411292,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAORdzfc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15325411292",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "created_at": "2024-11-17T16:51:40Z"
    },
    {
      "event": "reviewed",
      "id": 2297633388,
      "node_id": "PRR_kwDOABII586I8xps",
      "url": null,
      "actor": null,
      "commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Strong concept ACK.\r\n\r\nI've started building a python wrapper library to get familiar with and actually use the interface, so most of my comments for now will be based on that experience and reading the documentation.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2297633388",
      "submitted_at": "2024-11-19T19:19:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "commented",
      "id": 2486794714,
      "node_id": "IC_kwDOABII586UOXna",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2486794714",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T21:31:43Z",
      "updated_at": "2024-11-19T21:31:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for the review @stickies-v!\r\n\r\nUpdated 6c9121f7907262b2bf065a7ceeb8bca620060a7f -> 6c9121f7907262b2bf065a7ceeb8bca620060a7f ([kernelApi_0](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_0) -> [kernelApi_1](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_1), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_0..kernelApi_1))\r\n\r\n* Added, cleaned up, and precised a bunch of documentation\r\n* Slightly changed the order of a function's arguments, such that it takes the kernel context first.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2486794714",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15355609963,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOTRANr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15355609963",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T21:31:45Z"
    },
    {
      "event": "subscribed",
      "id": 15355609974,
      "node_id": "SE_lADOABII586SDdapzwAAAAOTRAN2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15355609974",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T21:31:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15355610268,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOTRASc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15355610268",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6c9121f7907262b2bf065a7ceeb8bca620060a7f",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/6c9121f7907262b2bf065a7ceeb8bca620060a7f",
      "created_at": "2024-11-19T21:31:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15370401029,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOUJbUF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15370401029",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "97fe2b25af31ca612c1f8d9f3de739fa3dee3902",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/97fe2b25af31ca612c1f8d9f3de739fa3dee3902",
      "created_at": "2024-11-20T17:04:13Z"
    },
    {
      "event": "commented",
      "id": 2489128571,
      "node_id": "IC_kwDOABII586UXRZ7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2489128571",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T17:04:18Z",
      "updated_at": "2024-11-20T17:04:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 6c9121f7907262b2bf065a7ceeb8bca620060a7f -> 97fe2b25af31ca612c1f8d9f3de739fa3dee3902 ([kernelApi_1](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_1) -> [kernelApi_2](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_2), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_1..kernelApi_2))\r\n\r\n* Added @stickies-v's [suggestion](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757015877), implementing variadic args for nonnull attribute macro.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2489128571",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15370403729,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOUJb-R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15370403729",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T17:04:20Z"
    },
    {
      "event": "subscribed",
      "id": 15370403751,
      "node_id": "SE_lADOABII586SDdapzwAAAAOUJb-n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15370403751",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T17:04:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15389463292,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOVSJL8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389463292",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5910f9bb18da35101144304d385618d7b82420f5",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/5910f9bb18da35101144304d385618d7b82420f5",
      "created_at": "2024-11-21T22:11:01Z"
    },
    {
      "event": "commented",
      "id": 2492442146,
      "node_id": "IC_kwDOABII586Uj6Yi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2492442146",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:11:03Z",
      "updated_at": "2024-11-21T22:18:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 97fe2b25af31ca612c1f8d9f3de739fa3dee3902 -> a9b71eadb8eff5530500cdb7d7227b8575948df6 ([kernelApi_2](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_2) -> [kernelApi_3](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_3), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_2..kernelApi_3))\r\n\r\n* As discussed with @stickies-v out of band, make callbacks only return `const` pointers, which further ensures that the user does not de-allocate or take ownership of them.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2492442146",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15389463705,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOVSJSZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389463705",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:11:04Z"
    },
    {
      "event": "subscribed",
      "id": 15389463721,
      "node_id": "SE_lADOABII586SDdapzwAAAAOVSJSp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389463721",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:11:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15389525737,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOVSYbp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389525737",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a9b71eadb8eff5530500cdb7d7227b8575948df6",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/a9b71eadb8eff5530500cdb7d7227b8575948df6",
      "created_at": "2024-11-21T22:18:49Z"
    },
    {
      "event": "labeled",
      "id": 15389526570,
      "node_id": "LE_lADOABII586SDdapzwAAAAOVSYoq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389526570",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:18:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2492461843,
      "node_id": "IC_kwDOABII586Uj_MT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2492461843",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:18:55Z",
      "updated_at": "2024-11-21T22:18:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33351144688</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2492461843",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 15390044587,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAOVUXGr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15390044587",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T23:07:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15395688304,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOVp49w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15395688304",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fc67047b7e1fb7031285f790ea3a7ea349474f31",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/fc67047b7e1fb7031285f790ea3a7ea349474f31",
      "created_at": "2024-11-22T10:36:41Z"
    },
    {
      "event": "commented",
      "id": 2493443688,
      "node_id": "IC_kwDOABII586Unu5o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2493443688",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T10:36:47Z",
      "updated_at": "2024-11-22T10:37:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated a9b71eadb8eff5530500cdb7d7227b8575948df6 -> fc67047b7e1fb7031285f790ea3a7ea349474f31 ([kernelApi_3](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_3) -> [kernelApi_4](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_4), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_3..kernelApi_4))\r\n\r\n* Made the `user_data` argument passed in with the callbacks `const` to better convey that the library doesn't do anything with it besides passing it back to the user when the callback is triggered. This mimics the behaviour in libsecp: https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1.h#L361",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2493443688",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15397783487,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOVx4e_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15397783487",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "created_at": "2024-11-22T13:47:23Z"
    },
    {
      "event": "commented",
      "id": 2493809430,
      "node_id": "IC_kwDOABII586UpIMW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2493809430",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T13:47:29Z",
      "updated_at": "2024-11-22T13:47:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated fc67047b7e1fb7031285f790ea3a7ea349474f31 -> 34a8429ff3a870c0caaf4c4790becd86c5acde38 ([kernelApi_4](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_4) -> [kernelApi_5](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_5), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_4..kernelApi_5))\r\n\r\n* More consistent `const` usage ",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2493809430",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "reviewed",
      "id": 2448664774,
      "node_id": "PRR_kwDOABII586R86jG",
      "url": null,
      "actor": null,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2448664774",
      "submitted_at": "2024-11-25T21:41:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15427548828,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOXjbac",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15427548828",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "35f8503285c672e8ee7e98617e236b38d8ce7a7f",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/35f8503285c672e8ee7e98617e236b38d8ce7a7f",
      "created_at": "2024-11-25T22:32:27Z"
    },
    {
      "event": "commented",
      "id": 2499171169,
      "node_id": "IC_kwDOABII586U9lNh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2499171169",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T22:32:40Z",
      "updated_at": "2024-11-25T22:32:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review @stickies-v!\r\n\r\nUpdated 34a8429ff3a870c0caaf4c4790becd86c5acde38 -> 35f8503285c672e8ee7e98617e236b38d8ce7a7f ([kernelApi_5](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_5) -> [kernelApi_6](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_6), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_5..kernelApi_6))\r\n\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1850657572), fixed worker threads docstring.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1852510169), make argument ordering more consistent.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1852512769), name functions consistently that return a new object with the help of other objects with `from` instead of `by`.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2499171169",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15427550576,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOXjb1w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15427550576",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T22:32:41Z"
    },
    {
      "event": "subscribed",
      "id": 15427550590,
      "node_id": "SE_lADOABII586SDdapzwAAAAOXjb1-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15427550590",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T22:32:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15464373294,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOZv5wu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15464373294",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "403c20980ec118f6efdd21d7c25646e20574583b",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/403c20980ec118f6efdd21d7c25646e20574583b",
      "created_at": "2024-11-28T11:43:37Z"
    },
    {
      "event": "commented",
      "id": 2505923802,
      "node_id": "IC_kwDOABII586VXVza",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2505923802",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-28T11:43:42Z",
      "updated_at": "2024-11-28T11:43:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 35f8503285c672e8ee7e98617e236b38d8ce7a7f -> 403c20980ec118f6efdd21d7c25646e20574583b ([kernelApi_6](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_6) -> [kernelApi_7](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_7), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_6..kernelApi_7))\r\n\r\n* Integrate the validation interface into the context. This avoids having to create/destroy and register/deregister a standalone validation interface object and should make it a bit easier to use. I was hesitant to do this, because it doesn't allow the user to register multiple interfaces anymore. However, since the user can multiplex the notifications by themselves, I don't think this is something worth keeping around.\r\n* Consistently apply the block hash deleter ",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2505923802",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15492449188,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAObbAOk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15492449188",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8598bc9e5d3fb7ebc08cf0c6422b3e44c56230d6",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/8598bc9e5d3fb7ebc08cf0c6422b3e44c56230d6",
      "created_at": "2024-12-02T12:41:52Z"
    },
    {
      "event": "commented",
      "id": 2511440437,
      "node_id": "IC_kwDOABII586VsYo1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2511440437",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-02T12:42:24Z",
      "updated_at": "2024-12-02T12:42:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 403c20980ec118f6efdd21d7c25646e20574583b -> 8598bc9e5d3fb7ebc08cf0c6422b3e44c56230d6 ([kernelApi_7](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_7) -> [kernelApi_8](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_8), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_7..kernelApi_8))\r\n\r\n* Get build system fixes from #31395 and #31357",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2511440437",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15520834085,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOdHSIl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15520834085",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6090df267dfece6192b567fed6582445aa811e7f",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/6090df267dfece6192b567fed6582445aa811e7f",
      "created_at": "2024-12-04T08:01:26Z"
    },
    {
      "event": "commented",
      "id": 2516465730,
      "node_id": "IC_kwDOABII586V_jhC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2516465730",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T08:01:31Z",
      "updated_at": "2024-12-04T08:01:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 8598bc9e5d3fb7ebc08cf0c6422b3e44c56230d6 -> 6090df267dfece6192b567fed6582445aa811e7f ([kernelApi_8](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_8) -> [kernelApi_9](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_9), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_8..kernelApi_9))\r\n\r\n* Alligned process block pre-checks through https://github.com/bitcoin/bitcoin/pull/31175\r\n* Clamp the work threads number so we properly handle the value range through  https://github.com/bitcoin/bitcoin/pull/31313\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2516465730",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15662470033,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOljlOR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15662470033",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "247a8a02c636250ee7e5c06f08cd18ddb1de6be5",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/247a8a02c636250ee7e5c06f08cd18ddb1de6be5",
      "created_at": "2024-12-15T22:52:37Z"
    },
    {
      "event": "commented",
      "id": 2544151447,
      "node_id": "IC_kwDOABII586XpKuX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2544151447",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-15T22:54:08Z",
      "updated_at": "2024-12-15T22:54:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 6090df267dfece6192b567fed6582445aa811e7f -> 247a8a02c636250ee7e5c06f08cd18ddb1de6be5 ([kernelApi_9](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_9) -> [kernelApi_10](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_10), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_9..kernelApi_10))\r\n\r\n* Tweaked docs to be more doxygen friendly.\r\n* Corrected transaction in taproot script validation tests. I must have committed a version where I was testing a different invariant by mistake. The test now correctly asserts that a taproot transaction can pass validation.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2544151447",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15668897562,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOl8Gca",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15668897562",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9e203b460d8ab1d92949ab8714a9265c343a5eee",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/9e203b460d8ab1d92949ab8714a9265c343a5eee",
      "created_at": "2024-12-16T11:23:37Z"
    },
    {
      "event": "commented",
      "id": 2545355032,
      "node_id": "IC_kwDOABII586XtwkY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2545355032",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-16T11:23:41Z",
      "updated_at": "2024-12-16T11:23:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 247a8a02c636250ee7e5c06f08cd18ddb1de6be5 -> 9e203b460d8ab1d92949ab8714a9265c343a5eee ([kernelApi_10](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_10) -> [kernelApi_11](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_11), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_10..kernelApi_11))\r\n\r\n* Changed how the notification callbacks are set. There was no real need for a separate notifications object, so I removed it.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2545355032",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "reviewed",
      "id": 2508874952,
      "node_id": "PRR_kwDOABII586VimTI",
      "url": null,
      "actor": null,
      "commit_id": "9e203b460d8ab1d92949ab8714a9265c343a5eee",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2508874952",
      "submitted_at": "2024-12-17T13:23:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15687423979,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOnCxfr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15687423979",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "73acb3ff8a04cddc4904c446c2521dd2b2abc84d",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/73acb3ff8a04cddc4904c446c2521dd2b2abc84d",
      "created_at": "2024-12-17T14:57:50Z"
    },
    {
      "event": "commented",
      "id": 2548677901,
      "node_id": "IC_kwDOABII586X6b0N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2548677901",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T14:58:36Z",
      "updated_at": "2024-12-17T14:58:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for having a look @laanwj!\r\n\r\nUpdated 9e203b460d8ab1d92949ab8714a9265c343a5eee -> 73acb3ff8a04cddc4904c446c2521dd2b2abc84d ([kernelApi_11](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_11) -> [kernelApi_12](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_12), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_11..kernelApi_12))\r\n\r\n* Addressed @laanwj's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1888513807), added a size parameter to all functions taking a null terminated `const char*` string parameter. This is arguably safer, since we don't completely rely on the null terminator for safety.\r\n* Removed '\\n' newlines in the log calls in the kernel wrapper calls.\r\n* Added the `progress` callback back again. I disabled it some time ago, and forgot to add it back again.\r\n* Use string views instead of `const char*` in the c++ wrapper.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2548677901",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15687438141,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOnC089",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15687438141",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T14:58:38Z"
    },
    {
      "event": "subscribed",
      "id": 15687438159,
      "node_id": "SE_lADOABII586SDdapzwAAAAOnC09P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15687438159",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T14:58:38Z"
    },
    {
      "event": "commented",
      "id": 2548839707,
      "node_id": "IC_kwDOABII586X7DUb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2548839707",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T15:54:42Z",
      "updated_at": "2024-12-17T15:54:42Z",
      "author_association": "MEMBER",
      "body": "To make the [doxygen documentation](http://thecharlatan.ch/kernel-docs/bitcoinkernel_8h.html) nicer to read, i've added grouping to the list of functions, and reordered a bit to make sure `create` is first and `destroy` always last within the group (if applicable), feel free to take over this patch:\r\n\r\nhttps://github.com/laanwj/bitcoin/commit/c222651aca4578857f5d432bd6ce221b5602ee38",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2548839707",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15690259436,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOnNlvs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15690259436",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "20eec64b5e417cac8c68100826c0adf2152a49eb",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/20eec64b5e417cac8c68100826c0adf2152a49eb",
      "created_at": "2024-12-17T17:40:31Z"
    },
    {
      "event": "commented",
      "id": 2549143345,
      "node_id": "IC_kwDOABII586X8Ncx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2549143345",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T17:40:37Z",
      "updated_at": "2024-12-17T17:40:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the doc suggestions @laanwj, I just moved a few functions to different places compared to your patch. Feel free to send me another me, if you think it still is not ideal. The groupings do look very nice in the docs now and also makes it a bit more straight forward to decide where to put new functions.\r\n\r\nUpdated 73acb3ff8a04cddc4904c446c2521dd2b2abc84d -> 20eec64b5e417cac8c68100826c0adf2152a49eb ([kernelApi_12](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_12) -> [kernelApi_13](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_13), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_12..kernelApi_13))\r\n\r\n* Applied @laanwj's [patch](https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2548839707), introducing doc groupings for the header functions.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2549143345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15690260923,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOnNmG7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15690260923",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T17:40:39Z"
    },
    {
      "event": "subscribed",
      "id": 15690260945,
      "node_id": "SE_lADOABII586SDdapzwAAAAOnNmHR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15690260945",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T17:40:39Z"
    },
    {
      "event": "referenced",
      "id": 15707084769,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoNxfh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707084769",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d7c4348efefdb3858184a42678f1571dbb820361",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/d7c4348efefdb3858184a42678f1571dbb820361",
      "created_at": "2024-12-18T17:59:40Z"
    },
    {
      "event": "referenced",
      "id": 15707084784,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoNxfw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707084784",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "576176ce7962b31a76948bfdf524b3fd0acffc89",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/576176ce7962b31a76948bfdf524b3fd0acffc89",
      "created_at": "2024-12-18T17:59:40Z"
    },
    {
      "event": "referenced",
      "id": 15707084801,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoNxgB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707084801",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "198280656b70fd7eef9bf4c0e2260475539d24b7",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/198280656b70fd7eef9bf4c0e2260475539d24b7",
      "created_at": "2024-12-18T17:59:40Z"
    },
    {
      "event": "referenced",
      "id": 15707084827,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoNxgb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707084827",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1ed55b80716d4b82ca27caa014b2295792d4d03f",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/1ed55b80716d4b82ca27caa014b2295792d4d03f",
      "created_at": "2024-12-18T17:59:40Z"
    },
    {
      "event": "referenced",
      "id": 15707492152,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoPU84",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707492152",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7fac90b9cc71863a6246444da96c9346de0e3389",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/7fac90b9cc71863a6246444da96c9346de0e3389",
      "created_at": "2024-12-18T18:39:51Z"
    },
    {
      "event": "referenced",
      "id": 15707492165,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoPU9F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707492165",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9e5d92ac2f6c7c4e1d7eb1ae17be096de26e3841",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/9e5d92ac2f6c7c4e1d7eb1ae17be096de26e3841",
      "created_at": "2024-12-18T18:39:51Z"
    },
    {
      "event": "referenced",
      "id": 15707492181,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoPU9V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707492181",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d624a26513a6448412b34d128b94fb951ae5a468",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/d624a26513a6448412b34d128b94fb951ae5a468",
      "created_at": "2024-12-18T18:39:51Z"
    },
    {
      "event": "referenced",
      "id": 15707492209,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoPU9x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707492209",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7e4c76c9d80f21e34bc1fe86131c6185d413fbd1",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/7e4c76c9d80f21e34bc1fe86131c6185d413fbd1",
      "created_at": "2024-12-18T18:39:51Z"
    },
    {
      "event": "referenced",
      "id": 15707822293,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoQljV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707822293",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4103e2cb36b189fed5112b3461d7e673ee4b2533",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/4103e2cb36b189fed5112b3461d7e673ee4b2533",
      "created_at": "2024-12-18T19:12:30Z"
    },
    {
      "event": "referenced",
      "id": 15707822308,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoQljk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707822308",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b7b739325c31e44d482e7c35ece13160fe5a843f",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/b7b739325c31e44d482e7c35ece13160fe5a843f",
      "created_at": "2024-12-18T19:12:30Z"
    },
    {
      "event": "referenced",
      "id": 15707822323,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoQljz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707822323",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1db5599b6d0ca92085b9f0970724abc0155a96f7",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/1db5599b6d0ca92085b9f0970724abc0155a96f7",
      "created_at": "2024-12-18T19:12:30Z"
    },
    {
      "event": "referenced",
      "id": 15707822343,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOoQlkH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707822343",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b42cf6ac982c210856fb5c5c12d2cc9a088b7194",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/b42cf6ac982c210856fb5c5c12d2cc9a088b7194",
      "created_at": "2024-12-18T19:12:31Z"
    },
    {
      "event": "reviewed",
      "id": 2512695597,
      "node_id": "PRR_kwDOABII586VxLEt",
      "url": null,
      "actor": null,
      "commit_id": "20eec64b5e417cac8c68100826c0adf2152a49eb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2512695597",
      "submitted_at": "2024-12-18T19:26:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "reviewed",
      "id": 2513154038,
      "node_id": "PRR_kwDOABII586Vy6_2",
      "url": null,
      "actor": null,
      "commit_id": "20eec64b5e417cac8c68100826c0adf2152a49eb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2513154038",
      "submitted_at": "2024-12-19T01:36:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15715703477,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOoupq1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15715703477",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f157b0cbc7d90075858a6522d13a7bc4f0b25a5f",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/f157b0cbc7d90075858a6522d13a7bc4f0b25a5f",
      "created_at": "2024-12-19T10:57:50Z"
    },
    {
      "event": "commented",
      "id": 2553418201,
      "node_id": "IC_kwDOABII586YMhHZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2553418201",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T10:58:01Z",
      "updated_at": "2024-12-19T10:58:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the suggestion @stickies-v, I think it is the right call.\r\n\r\nUpdated 20eec64b5e417cac8c68100826c0adf2152a49eb -> f157b0cbc7d90075858a6522d13a7bc4f0b25a5f ([kernelApi_13](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_13) -> [kernelApi_14](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_14), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_13..kernelApi_14))\r\n\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1890734754), applying the suggestion for rolling chainstate loading into chainstate creation.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2553418201",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15715706191,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOouqVP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15715706191",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T10:58:02Z"
    },
    {
      "event": "subscribed",
      "id": 15715706210,
      "node_id": "SE_lADOABII586SDdapzwAAAAOouqVi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15715706210",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T10:58:02Z"
    },
    {
      "event": "referenced",
      "id": 15719682717,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOo91Kd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15719682717",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "523dee4273f1020c25695e81f62014178cc19205",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/523dee4273f1020c25695e81f62014178cc19205",
      "created_at": "2024-12-19T14:19:10Z"
    },
    {
      "event": "referenced",
      "id": 15720728795,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOpB0jb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15720728795",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "514f22fc450944ddb27d313ae0db95241e7f2989",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/514f22fc450944ddb27d313ae0db95241e7f2989",
      "created_at": "2024-12-19T15:08:59Z"
    },
    {
      "event": "referenced",
      "id": 15720991178,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOpC0nK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15720991178",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dec7ebd46919d799ee011a71768090b046a2d0a1",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/dec7ebd46919d799ee011a71768090b046a2d0a1",
      "created_at": "2024-12-19T15:23:45Z"
    },
    {
      "event": "referenced",
      "id": 15721024220,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOpC8rc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15721024220",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f9408aadadfc566c4250b3158139921ebc0fd02a",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/f9408aadadfc566c4250b3158139921ebc0fd02a",
      "created_at": "2024-12-19T15:25:40Z"
    },
    {
      "event": "referenced",
      "id": 15721045447,
      "node_id": "REFE_lADOABII586SDdapzwAAAAOpDB3H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15721045447",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "befc5e7a09e5505c1faab78f249d3d9ab5aadf0c",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/befc5e7a09e5505c1faab78f249d3d9ab5aadf0c",
      "created_at": "2024-12-19T15:26:46Z"
    },
    {
      "event": "reviewed",
      "id": 2518337899,
      "node_id": "PRR_kwDOABII586WGslr",
      "url": null,
      "actor": null,
      "commit_id": "f157b0cbc7d90075858a6522d13a7bc4f0b25a5f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\n",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2518337899",
      "submitted_at": "2024-12-20T21:03:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "reviewed",
      "id": 2552730240,
      "node_id": "PRR_kwDOABII586YJ5KA",
      "url": null,
      "actor": null,
      "commit_id": "f157b0cbc7d90075858a6522d13a7bc4f0b25a5f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2552730240",
      "submitted_at": "2025-01-15T13:18:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "reviewed",
      "id": 2552732729,
      "node_id": "PRR_kwDOABII586YJ5w5",
      "url": null,
      "actor": null,
      "commit_id": "f157b0cbc7d90075858a6522d13a7bc4f0b25a5f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2552732729",
      "submitted_at": "2025-01-15T13:19:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "labeled",
      "id": 15945075638,
      "node_id": "LE_lADOABII586SDdapzwAAAAO2Zou2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15945075638",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-15T18:10:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15947065131,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAO2hOcr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15947065131",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4dde75858a3b08f84d71176c7be14bae62020b1f",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/4dde75858a3b08f84d71176c7be14bae62020b1f",
      "created_at": "2025-01-15T21:00:17Z"
    },
    {
      "event": "commented",
      "id": 2593925274,
      "node_id": "IC_kwDOABII586anCia",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2593925274",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-15T21:00:27Z",
      "updated_at": "2025-01-15T21:00:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the suggestions @laanwj,\r\n\r\nRebased f157b0cbc7d90075858a6522d13a7bc4f0b25a5f -> f25616bec485ee6a70e4b797758d4987d25a7c25 ([kernelApi_14](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_14) -> [kernelApi_15](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_15), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_14..kernelApi_15))\r\n\r\n* Fixed conflict with #31061\r\n\r\nUpdated f25616bec485ee6a70e4b797758d4987d25a7c25 -> 4dde75858a3b08f84d71176c7be14bae62020b1f ([kernelApi_15](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_15) -> [kernelApi_16](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_16), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_15..kernelApi_16))\r\n\r\n* Took @laanwj's [suggestion](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1916637752), avoiding strtol in hex string to byte vector conversion\r\n* Addressed @laanwj's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1916639299), added missing `vector` include.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2593925274",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15947069715,
      "node_id": "MEE_lADOABII586SDdapzwAAAAO2hPkT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15947069715",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-15T21:00:29Z"
    },
    {
      "event": "subscribed",
      "id": 15947069734,
      "node_id": "SE_lADOABII586SDdapzwAAAAO2hPkm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15947069734",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-15T21:00:29Z"
    },
    {
      "event": "unlabeled",
      "id": 15951226105,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAO2xGT5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15951226105",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T04:13:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15974098528,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAO4IWZg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15974098528",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3eefbda3710aad3adc4aac3a6a36e381f9e9f555",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/3eefbda3710aad3adc4aac3a6a36e381f9e9f555",
      "created_at": "2025-01-17T09:30:28Z"
    },
    {
      "event": "commented",
      "id": 2597803878,
      "node_id": "IC_kwDOABII586a11dm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2597803878",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-17T09:30:32Z",
      "updated_at": "2025-01-17T09:34:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 4dde75858a3b08f84d71176c7be14bae62020b1f -> 538671edce5813a62405b9bd5c50c39263c58435 ([kernelApi_16](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_16) -> [kernelApi_17](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_17), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_16..kernelApi_17))\r\n\r\n* Get new method for computing cache sizes from https://github.com/bitcoin/bitcoin/pull/31483",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2597803878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15974144234,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAO4Ihjq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15974144234",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "538671edce5813a62405b9bd5c50c39263c58435",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/538671edce5813a62405b9bd5c50c39263c58435",
      "created_at": "2025-01-17T09:34:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15976852232,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAO4S2sI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15976852232",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "01a43b24436e0aed7b8f79d3857630a4bf6a0545",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/01a43b24436e0aed7b8f79d3857630a4bf6a0545",
      "created_at": "2025-01-17T12:34:56Z"
    },
    {
      "event": "commented",
      "id": 2599599923,
      "node_id": "IC_kwDOABII586a8r8z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2599599923",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-18T07:55:49Z",
      "updated_at": "2025-01-18T07:55:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 538671edce5813a62405b9bd5c50c39263c58435 -> 01a43b24436e0aed7b8f79d3857630a4bf6a0545 ([kernelApi_17](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_17) -> [kernelApi_18](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_18), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_17..kernelApi_18))\r\n\r\n* Get functional test fix from #31675",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2599599923",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "reviewed",
      "id": 2584276519,
      "node_id": "PRR_kwDOABII586aCO4n",
      "url": null,
      "actor": null,
      "commit_id": "01a43b24436e0aed7b8f79d3857630a4bf6a0545",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2584276519",
      "submitted_at": "2025-01-30T15:39:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "unsubscribed",
      "id": 16129570394,
      "node_id": "UE_lADOABII586SDdapzwAAAAPBZbZa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16129570394",
      "actor": {
        "login": "PRADACANDI18",
        "id": 91190628,
        "node_id": "MDQ6VXNlcjkxMTkwNjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/91190628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PRADACANDI18",
        "html_url": "https://github.com/PRADACANDI18",
        "followers_url": "https://api.github.com/users/PRADACANDI18/followers",
        "following_url": "https://api.github.com/users/PRADACANDI18/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PRADACANDI18/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PRADACANDI18/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PRADACANDI18/subscriptions",
        "organizations_url": "https://api.github.com/users/PRADACANDI18/orgs",
        "repos_url": "https://api.github.com/users/PRADACANDI18/repos",
        "events_url": "https://api.github.com/users/PRADACANDI18/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PRADACANDI18/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T20:14:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16138805067,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPB8p9L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16138805067",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "10e71b4c47e1b199622280d100155ed5d6ef6d66",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/10e71b4c47e1b199622280d100155ed5d6ef6d66",
      "created_at": "2025-01-31T12:20:24Z"
    },
    {
      "event": "commented",
      "id": 2627079274,
      "node_id": "IC_kwDOABII586clgxq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2627079274",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T12:20:31Z",
      "updated_at": "2025-01-31T12:20:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 01a43b24436e0aed7b8f79d3857630a4bf6a0545 -> 10e71b4c47e1b199622280d100155ed5d6ef6d66 ([kernelApi_18](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_18) -> [kernelApi_19](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_19), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_18..kernelApi_19))\r\n\r\n* Hooked up kernel tests to cmake so the CI can run them through `ctest`\r\n* Added `test_kernel`, `libbitcoinkernel.so`, and `kernel/bitcoin-chainstate` to some more CI builds.\r\n* Patched some small build errors related to unused variables and type narrowing.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1935834281), fixing path to string conversion.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2627079274",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16138806644,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPB8qV0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16138806644",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T12:20:33Z"
    },
    {
      "event": "subscribed",
      "id": 16138806760,
      "node_id": "SE_lADOABII586SDdapzwAAAAPB8qXo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16138806760",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T12:20:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16138978742,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPB9UW2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16138978742",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f4cdffba0d8c60ff6e6eb9732bd1b1f02fcada56",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/f4cdffba0d8c60ff6e6eb9732bd1b1f02fcada56",
      "created_at": "2025-01-31T12:27:44Z"
    },
    {
      "event": "commented",
      "id": 2627119867,
      "node_id": "IC_kwDOABII586clqr7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2627119867",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T12:27:54Z",
      "updated_at": "2025-01-31T15:30:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased  10e71b4c47e1b199622280d100155ed5d6ef6d66 -> fb6e0deee18dff38219c9646d2461a40de03ed66 ([kernelApi_19](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_19) -> [kernelApi_20](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_20), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_19..kernelApi_20))\r\n\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2627119867",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2627360248,
      "node_id": "IC_kwDOABII586cmlX4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2627360248",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T13:36:47Z",
      "updated_at": "2025-01-31T13:36:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/36477768799</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2627360248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "labeled",
      "id": 16140552502,
      "node_id": "LE_lADOABII586SDdapzwAAAAPCDUk2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16140552502",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T13:36:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16141820420,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPCIKIE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16141820420",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8a2a44012f0250026ce3f0e00b0014c59b4bbe7d",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/8a2a44012f0250026ce3f0e00b0014c59b4bbe7d",
      "created_at": "2025-01-31T15:08:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16142178152,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPCJhdo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16142178152",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fb6e0deee18dff38219c9646d2461a40de03ed66",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/fb6e0deee18dff38219c9646d2461a40de03ed66",
      "created_at": "2025-01-31T15:31:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16150099004,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPCnvQ8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16150099004",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f926d7ef34773b7836e94491a16021288c125b11",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/f926d7ef34773b7836e94491a16021288c125b11",
      "created_at": "2025-02-01T13:12:53Z"
    },
    {
      "event": "commented",
      "id": 2628948969,
      "node_id": "IC_kwDOABII586cspPp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2628948969",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-01T13:13:02Z",
      "updated_at": "2025-02-01T13:13:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated fb6e0deee18dff38219c9646d2461a40de03ed66 -> f926d7ef34773b7836e94491a16021288c125b11 ([kernelApi_20](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_20) -> [kernelApi_21](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_21), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_20..kernelApi_21))\r\n\r\n* Added symbol exports where appropriate in the header to enable windows support\r\n* Completely replaced the existing bitcoin-chainstate with the new kernel-API-only bitcoin-chainstate.\r\n* Removed the cmake symbol visibility patch, instead relying on the header.\r\n* Removed flaky filesystem-related chainman and blockman opts tests.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2628948969",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16150383863,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPCo0z3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16150383863",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "817865d57daa822370b0f67e1e079fdd25ab3130",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/817865d57daa822370b0f67e1e079fdd25ab3130",
      "created_at": "2025-02-01T15:32:35Z"
    },
    {
      "event": "commented",
      "id": 2628997388,
      "node_id": "IC_kwDOABII586cs1EM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2628997388",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-01T15:33:00Z",
      "updated_at": "2025-02-01T15:33:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased f926d7ef34773b7836e94491a16021288c125b11 -> 817865d57daa822370b0f67e1e079fdd25ab3130 ([kernelApi_21](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_21) -> [kernelApi_22](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_22), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_21..kernelApi_22))\r\n\r\n* Fixed conflict with #30965, which necessitated some changes to the API: The block manager options are now responsible for the options affecting the block tree db.  ",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2628997388",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 16163946539,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAPDckAr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16163946539",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T15:08:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2592272385,
      "node_id": "PRR_kwDOABII586agvAB",
      "url": null,
      "actor": null,
      "commit_id": "817865d57daa822370b0f67e1e079fdd25ab3130",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Armss9936",
        "id": 193652958,
        "node_id": "U_kgDOC4ro3g",
        "avatar_url": "https://avatars.githubusercontent.com/u/193652958?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Armss9936",
        "html_url": "https://github.com/Armss9936",
        "followers_url": "https://api.github.com/users/Armss9936/followers",
        "following_url": "https://api.github.com/users/Armss9936/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Armss9936/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Armss9936/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Armss9936/subscriptions",
        "organizations_url": "https://api.github.com/users/Armss9936/orgs",
        "repos_url": "https://api.github.com/users/Armss9936/repos",
        "events_url": "https://api.github.com/users/Armss9936/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Armss9936/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2592272385",
      "submitted_at": "2025-02-04T09:44:04Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "reviewed",
      "id": 2592273156,
      "node_id": "PRR_kwDOABII586agvME",
      "url": null,
      "actor": null,
      "commit_id": "817865d57daa822370b0f67e1e079fdd25ab3130",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Armss9936",
        "id": 193652958,
        "node_id": "U_kgDOC4ro3g",
        "avatar_url": "https://avatars.githubusercontent.com/u/193652958?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Armss9936",
        "html_url": "https://github.com/Armss9936",
        "followers_url": "https://api.github.com/users/Armss9936/followers",
        "following_url": "https://api.github.com/users/Armss9936/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Armss9936/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Armss9936/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Armss9936/subscriptions",
        "organizations_url": "https://api.github.com/users/Armss9936/orgs",
        "repos_url": "https://api.github.com/users/Armss9936/repos",
        "events_url": "https://api.github.com/users/Armss9936/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Armss9936/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2592273156",
      "submitted_at": "2025-02-04T09:44:23Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "reviewed",
      "id": 2599912096,
      "node_id": "PRR_kwDOABII586a94Kg",
      "url": null,
      "actor": null,
      "commit_id": "817865d57daa822370b0f67e1e079fdd25ab3130",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2599912096",
      "submitted_at": "2025-02-06T20:56:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16282819593,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPKiBwJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16282819593",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "efbd187a1ff4409ca54ef94bcd97359e0948077e",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/efbd187a1ff4409ca54ef94bcd97359e0948077e",
      "created_at": "2025-02-12T15:23:04Z"
    },
    {
      "event": "commented",
      "id": 2654044188,
      "node_id": "IC_kwDOABII586eMYAc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2654044188",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T15:23:20Z",
      "updated_at": "2025-02-12T17:17:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for all the suggestions made over the past week @stickies-v!\r\n\r\nUpdated 817865d57daa822370b0f67e1e079fdd25ab3130 -> 5aeaa3f49d10562b8936ef36b1c25a6466dbe03e ([kernelApi_22](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_22) -> [kernelApi_23](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_23), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_22..kernelApi_23))\r\n\r\n* Adapted @stickies-v's suggestion made in https://github.com/TheCharlatan/bitcoin/pull/24 , by merging the `ChainstateManager::Options`, `BlockManager::Options`, or `ChainstateLoadOptions` into a single options struct. This should simplifies `ChainstateManager` initialization and slims down the API a bit.\r\n* Ran `clang-format` over the commits\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1945424649), taking the suggestion for making building the kernel tests only conditional on the kernel lib.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2654044188",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16282824053,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPKiC11",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16282824053",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T15:23:23Z"
    },
    {
      "event": "subscribed",
      "id": 16282824077,
      "node_id": "SE_lADOABII586SDdapzwAAAAPKiC2N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16282824077",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T15:23:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16284048307,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPKmtuz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16284048307",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5aeaa3f49d10562b8936ef36b1c25a6466dbe03e",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/5aeaa3f49d10562b8936ef36b1c25a6466dbe03e",
      "created_at": "2025-02-12T16:41:00Z"
    },
    {
      "event": "labeled",
      "id": 16284049550,
      "node_id": "LE_lADOABII586SDdapzwAAAAPKmuCO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16284049550",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T16:41:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2654274331,
      "node_id": "IC_kwDOABII586eNQMb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2654274331",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T16:41:07Z",
      "updated_at": "2025-02-12T16:41:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/37104019999</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2654274331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 16285363682,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAPKru3i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16285363682",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T18:25:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16312778223,
      "node_id": "LE_lADOABII586SDdapzwAAAAPMUT3v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16312778223",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-14T14:38:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16313195955,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPMV52z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16313195955",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a604321c3e4bd50b52fa28e8567f6b068b2d2fb3",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/a604321c3e4bd50b52fa28e8567f6b068b2d2fb3",
      "created_at": "2025-02-14T15:10:20Z"
    },
    {
      "event": "commented",
      "id": 2659582312,
      "node_id": "IC_kwDOABII586ehgFo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2659582312",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-14T15:10:26Z",
      "updated_at": "2025-02-14T15:10:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 5aeaa3f49d10562b8936ef36b1c25a6466dbe03e -> a604321c3e4bd50b52fa28e8567f6b068b2d2fb3 ([kernelApi_23](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_23) -> [kernelApi_24](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_24), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_23..kernelApi_24))\r\n\r\n* Fixed conflict with #31844",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2659582312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 16314779708,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAPMb8g8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16314779708",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-14T16:48:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2619786584,
      "node_id": "PRR_kwDOABII586cJsVY",
      "url": null,
      "actor": null,
      "commit_id": "a604321c3e4bd50b52fa28e8567f6b068b2d2fb3",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "walterl",
        "id": 23798,
        "node_id": "MDQ6VXNlcjIzNzk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/23798?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/walterl",
        "html_url": "https://github.com/walterl",
        "followers_url": "https://api.github.com/users/walterl/followers",
        "following_url": "https://api.github.com/users/walterl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/walterl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/walterl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/walterl/subscriptions",
        "organizations_url": "https://api.github.com/users/walterl/orgs",
        "repos_url": "https://api.github.com/users/walterl/repos",
        "events_url": "https://api.github.com/users/walterl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/walterl/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2619786584",
      "submitted_at": "2025-02-17T00:59:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16335402679,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPNqna3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16335402679",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2b743adeb0c59b815b84d8473486f46eaba12ad4",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/2b743adeb0c59b815b84d8473486f46eaba12ad4",
      "created_at": "2025-02-17T15:19:42Z"
    },
    {
      "event": "labeled",
      "id": 16360037364,
      "node_id": "LE_lADOABII586SDdapzwAAAAPPIlv0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16360037364",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-19T06:59:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16364179160,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPPYY7Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16364179160",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "251a55f2f0cc3cdfb7fa0015b76772586134cde3",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/251a55f2f0cc3cdfb7fa0015b76772586134cde3",
      "created_at": "2025-02-19T11:41:07Z"
    },
    {
      "event": "commented",
      "id": 2668392827,
      "node_id": "IC_kwDOABII586fDHF7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2668392827",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-19T11:41:35Z",
      "updated_at": "2025-02-19T11:41:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased a604321c3e4bd50b52fa28e8567f6b068b2d2fb3 -> 251a55f2f0cc3cdfb7fa0015b76772586134cde3 ([kernelApi_24](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_24) -> [kernelApi_25](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_25), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_24..kernelApi_25))\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2668392827",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 16365555730,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAPPdpAS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16365555730",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-19T13:20:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16386468773,
      "node_id": "LE_lADOABII586SDdapzwAAAAPQtaul",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16386468773",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-20T17:21:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16386952044,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPQvQts",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16386952044",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c72b2c2883d4c8791267133f326e3f9347d1520b",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/c72b2c2883d4c8791267133f326e3f9347d1520b",
      "created_at": "2025-02-20T17:58:30Z"
    },
    {
      "event": "commented",
      "id": 2672264338,
      "node_id": "IC_kwDOABII586fR4SS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2672264338",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-20T17:58:54Z",
      "updated_at": "2025-02-20T17:58:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 251a55f2f0cc3cdfb7fa0015b76772586134cde3 -> c72b2c2883d4c8791267133f326e3f9347d1520b ([kernelApi_25](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_25) -> [kernelApi_26](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_26), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_25..kernelApi_26))",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2672264338",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 16388214887,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAPQ0FBn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16388214887",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-20T19:43:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16412466696,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPSQl4I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16412466696",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/29513955891e40e78466f2c666dfa13e9c1b2914",
      "created_at": "2025-02-22T11:54:38Z"
    },
    {
      "event": "commented",
      "id": 2676164722,
      "node_id": "IC_kwDOABII586fgwhy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2676164722",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-22T11:54:41Z",
      "updated_at": "2025-02-22T11:54:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated c72b2c2883d4c8791267133f326e3f9347d1520b -> 29513955891e40e78466f2c666dfa13e9c1b2914 ([kernelApi_26](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_26) -> [kernelApi_27](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_27), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_26..kernelApi_27))\r\n\r\n* Cleaned up some dead code missed while removing the `kernel_ValidationInterface`.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2676164722",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "reviewed",
      "id": 2675490600,
      "node_id": "PRR_kwDOABII586feL8o",
      "url": null,
      "actor": null,
      "commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I've been looking at thread-safety, and left some comments on it (as well as some unrelated ones).\r\n\r\nI think the API is pretty close to being thread-safe. Would be nice if we can make some guarantees on it and document it as such?",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2675490600",
      "submitted_at": "2025-03-13T13:35:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "labeled",
      "id": 16752228712,
      "node_id": "LE_lADOABII586SDdapzwAAAAPmgrlo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16752228712",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T01:28:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2725437236,
      "node_id": "IC_kwDOABII586ict80",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2725437236",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T18:16:38Z",
      "updated_at": "2025-03-14T18:16:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "rust-bitcoin maintains a file of [constants](https://github.com/tcharding/rust-bitcoin/blob/0ca9fcfd0ea81a7bb0d781bdc07a136cea9d0796/bitcoin/src/policy.rs) which are meant to mirror values in core.  We've discussed trying to find an automated solution to keep these consts synchronized since right now, these are manually maintained.  This is a point of annoyance since these values are constantly becoming stale (pun intended).  Would it be possible to use these C headers to automatically build a rust crate of constants from a C header API?  Or would that be overkill..",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2725437236",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2725441239,
      "node_id": "IC_kwDOABII586icu7X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2725441239",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T18:18:03Z",
      "updated_at": "2025-03-14T18:18:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Furthermore, besides keeping values synchronized, an automated solution which would generate all available consts would be ideal.",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2725441239",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "reviewed",
      "id": 2685229851,
      "node_id": "PRR_kwDOABII586gDVsb",
      "url": null,
      "actor": null,
      "commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "A few comments regarding logging. It's a bit awkward to have LoggingConnection instances, but only global setters to update their granularity, so #30342 looks like a welcome improvement.\r\n\r\nBesides that, hooking up a downstream log viewer in py-bitcoinkernel was fairly straightforward. Having a struct `kernel_Log` callback instead of having to parse a string for various fields (time, threadname, level, ...) would be nice, and I think not even a huge left (can be done without upstream changes, even if that would be more efficient).",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2685229851",
      "submitted_at": "2025-03-14T18:41:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "commented",
      "id": 2725832595,
      "node_id": "IC_kwDOABII586ieOeT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2725832595",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T21:42:36Z",
      "updated_at": "2025-03-14T21:42:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2725437236 and https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2725441239\r\n\r\nThank you for your suggestions!\r\n\r\n> Would it be possible to use these C headers to automatically build a rust crate of constants from a C header API? Or would that be overkill..\r\n\r\nLooking at the constants in the linked file they all seem to be policy-related, which is out of scope for now. I don't think we'll add a header for that in the near future. Generally speaking I am open towards exposing details of Bitcoin Core's policy to applications that use it already anyway. For example it might be useful to expose some parts of policy for protocols using pre-signed transactions.\r\n\r\n> Furthermore, besides keeping values synchronized, an automated solution which would generate all available consts would be ideal.\r\n\r\nWe've recently discussed  auto-generating parts of the header and library code instead of writing it by hand as done here. I think for exposing some of the consensus-related constants in that manner might be a good way forward eventually.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2725832595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16781632816,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPoQ2Uw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16781632816",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "21f6a3de77a9eedcca5d47f694d540d42b3ddbcc",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/21f6a3de77a9eedcca5d47f694d540d42b3ddbcc",
      "created_at": "2025-03-14T22:33:14Z"
    },
    {
      "event": "commented",
      "id": 2725912225,
      "node_id": "IC_kwDOABII586ieh6h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2725912225",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T22:33:17Z",
      "updated_at": "2025-03-14T22:33:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 29513955891e40e78466f2c666dfa13e9c1b2914 -> 21f6a3de77a9eedcca5d47f694d540d42b3ddbcc ([kernelApi_27](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_27) -> [kernelApi_28](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_28), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_27..kernelApi_28))\r\n\r\n* Fixed conflict with #31649",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2725912225",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 16781634719,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAPoQ2yf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16781634719",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T22:33:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2726938039,
      "node_id": "IC_kwDOABII586iicW3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2726938039",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T19:00:37Z",
      "updated_at": "2025-03-15T19:00:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "> We've recently discussed auto-generating parts of the header and library code instead of writing it by hand as done here. I think for exposing some of the consensus-related constants in that manner might be a good way forward eventually.\r\n\r\n@TheCharlatan thanks for the reply.  How would auto-generating parts work?  That does sound potentially promising as a way to build rust crates as well if we can use the same input data for auto-generating.",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2726938039",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16787883355,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPoosVb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16787883355",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T19:00:38Z"
    },
    {
      "event": "subscribed",
      "id": 16787883359,
      "node_id": "SE_lADOABII586SDdapzwAAAAPoosVf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16787883359",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T19:00:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16788468693,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPoq7PV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16788468693",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5991a69ee0000de551955846d7d21733c326a748",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/5991a69ee0000de551955846d7d21733c326a748",
      "created_at": "2025-03-15T21:45:22Z"
    },
    {
      "event": "commented",
      "id": 2727013588,
      "node_id": "IC_kwDOABII586iiuzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2727013588",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T21:46:06Z",
      "updated_at": "2025-03-15T21:46:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 21f6a3de77a9eedcca5d47f694d540d42b3ddbcc -> 5991a69ee0000de551955846d7d21733c326a748 ([kernelApi_28](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_28) -> [kernelApi_29](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_29), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_28..kernelApi_29))\r\n\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1989793614), removed outdated comment about the validation interface in the `kernel_Context`.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1991230564), removed const qualifier from `kernel_ChainParameters`.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1991236489), removed unneeded const cast.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1991290582), removed unneeded mention of thread safety for the `kernel_Context`.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1995405051), introduce a helper function in the `Logger` to allow us to get rid of the string conversion functions.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1995880696), use the same order for the kernel log levels as done in the internal enum.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1995386796), make the logging setter functions return `void` instead of `bool`. With the new methods, there is no error case to report anymore.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2727013588",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16788469949,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPoq7i9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16788469949",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T21:46:07Z"
    },
    {
      "event": "subscribed",
      "id": 16788469955,
      "node_id": "SE_lADOABII586SDdapzwAAAAPoq7jD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16788469955",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T21:46:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16815047565,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPqQUON",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16815047565",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2dc27e2860b97c2bffa5f18706917b21858e5594",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/2dc27e2860b97c2bffa5f18706917b21858e5594",
      "created_at": "2025-03-17T21:45:51Z"
    },
    {
      "event": "commented",
      "id": 2731007985,
      "node_id": "IC_kwDOABII586ix9_x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2731007985",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T21:46:15Z",
      "updated_at": "2025-03-17T21:46:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 5991a69ee0000de551955846d7d21733c326a748 -> 2dc27e2860b97c2bffa5f18706917b21858e5594 ([kernelApi_29](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_29) -> [kernelApi_30](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_30), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_29..kernelApi_30))\r\n\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1999116127), add notice in the documentation about logging settings being thread unsafe and global.\r\n* Added a mutex to the options objects to make setting them thread safe.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2731007985",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16815051941,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPqQVSl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16815051941",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T21:46:16Z"
    },
    {
      "event": "subscribed",
      "id": 16815051966,
      "node_id": "SE_lADOABII586SDdapzwAAAAPqQVS-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16815051966",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T21:46:16Z"
    },
    {
      "event": "commented",
      "id": 2736469179,
      "node_id": "IC_kwDOABII586jGzS7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2736469179",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T12:31:18Z",
      "updated_at": "2025-03-19T12:31:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "I had an idea I wanted to suggest here. What if instead of adding C bindings to the bitcoin/bitcoin git repository we took inspiration from @darosior's thoughts about [project scope](https://delvingbitcoin.org/t/antoine-poinsot-on-bitcoin-cores-priorities/1470) and developed the C, rust, and python bindings in a separate bitcoin-core/bindings repository, or even separate bitcoin-core/bindings-{c,rust,python} repositories?\r\n\r\nTechnically I think there are two ways we could implement this:\r\n\r\n1. Add cmake install rules to `bitcoin/bitcoin` to install kernel and util headers to `$prefix/include/`, install the kernel library to `$prefix/lib/`, and install a cmake [config package](https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html#id1) to `$prefix/lib/cmake/Libbitcoinkernel/LibbitcoinkernelConfig.cmake` that the `bitcoin-core/bindings` repo can import with [`find_package` config mode](https://cmake.org/cmake/help/latest/command/find_package.html#search-modes). This approach was implemented by @hebasto for libmultiprocess in https://github.com/bitcoin-core/libmultiprocess/pull/96 and I've been impressed by how easily it lets different cmake projects share code while still providing a clear boundary between them.\r\n\r\n2. Avoid needing to write cmake install rules and just include the `bitcoin/bitcoin` repository as a git subtree in the `bitcoin-core/bindings` repository that can be built with [`add_subdirectory`](https://cmake.org/cmake/help/latest/command/add_subdirectory.html) in the same cmake project.\r\n\r\nHaving a separate repository for C bindings could have a number of advantages over merging this PR to `bitcoin/bitcoin`:\r\n\r\n- It could allow faster development of C/rust/python bindings since they could take place outside the main repository and potentially have faster release cycles.\r\n  \r\n- It could reduce burden on other core bitcoin developers since they would not have to worry about maintaining the C bindings implementation and keeping the C and C++ interfaces in sync.\r\n\r\n- It could enable other approaches to building bindings and using kernel code in external projects. It is great if developers want to build on the C++>C>Python and C++>C>Rust approaches we are providing. But I also think it would be great if developers could try other approaches like going directly from C++ to Python with [pybind](https://github.com/pybind/pybind11) or [nanobind](https://github.com/wjakob/nanobind), or directly to from C++ to Rust with [cxx](https://cxx.rs/), [autocxx](https://github.com/google/autocxx),  or [zngur](https://github.com/HKalbasi/zngur) or going directly from C++ to any number of other languages with [SWIG](https://www.swig.org/). These approaches may not be preferred by us but they are proven and established (particularly pybind and SWIG, which has been around for decades) that can be much more convenient than dropping down to C.\r\n\r\n - It could open a way to expose other bitcoin core code besides the kernel code externally. For example, it's possible to imagine exposing python or javascript bindings for bitcoin wallet code and having tools and UIs written in different languages that are able to use bitcoin wallet files.\r\n\r\nThere would be some disadvantages to having a separate repository for C bindings:\r\n\r\n- It would not be posssible to use C++ wrappers that have been written around the C bindings to write internal tools in the bitcoin/bitcoin repository. \r\n\r\n- We would need to clearly communicate to outside developers that bitcoin/bitcoin C++ interfaces are not stable, and that if projects want a more stable interface they need to use the C interface or the C++ wrappers around the C interface.\r\n\r\nThis idea should not be incompatible with the current PR and I'd be happy to see this PR being merged whenever it is ready. But it could be something we think about going forward.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2736469179",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16863809663,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPtKVB_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16863809663",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T12:31:19Z"
    },
    {
      "event": "subscribed",
      "id": 16863809696,
      "node_id": "SE_lADOABII586SDdapzwAAAAPtKVCg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16863809696",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T12:31:19Z"
    },
    {
      "event": "mentioned",
      "id": 16863809728,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPtKVDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16863809728",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T12:31:19Z"
    },
    {
      "event": "subscribed",
      "id": 16863809756,
      "node_id": "SE_lADOABII586SDdapzwAAAAPtKVDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16863809756",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T12:31:19Z"
    },
    {
      "event": "commented",
      "id": 2738349197,
      "node_id": "IC_kwDOABII586jN-SN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2738349197",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T22:40:41Z",
      "updated_at": "2025-03-19T22:40:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "> It could enable other approaches to building bindings and using kernel code in external projects. \r\n\r\nI have done some experimentation with using c++ bindings directly. \r\n\r\n> [SWIG](https://www.swig.org/)\r\n\r\nI tried creating python bindings through swig without looping through the C bindings and I could not get it to work within a reasonable amount of time. While likely a skill issue, it does seem to be struggling with some of our c++20 features and heavily templated code.\r\n\r\n> [pybind](https://github.com/pybind/pybind11)\r\n\r\nI was more successful here; this took me about a day to setup: https://github.com/TheCharlatan/bitcoinkernel-pybind. For now it just exposes a chainparams and one of its methods, but it does use our c++ methods directly. While an llm helped with the boilerplate, I did spend most of the time figuring out how to pass in some of our required pre-processor definitions and compiler options. Comparing it to my experience with the C headers the setup seems a bit more involved, but also not too horrible in comparison.\r\n\r\n> [cxx](https://cxx.rs/)\r\n\r\nI tried this quite some time ago now (iirc one and half years ago). It seemed to work as well, but was a bit rough to use, so I ended up wrapping it in more rust code. Having to wrap it again would take away some of the utility over using C bindings, so not too sure about this approach. I might revisit `cxx` soon though.\r\n\r\nI think the key differences between using these frameworks on our existing code and curating our own API are safety, documentation, consistency, and discoverability. Developers wishing to create language bindings can take the C header here and understand how to use it in reasonable time. I don't think this is true for our current c++ code. Whether this is worth the additional maintenance is another question though. As you say:\r\n\r\n> It could reduce burden on other core bitcoin developers since they would not have to worry about maintaining the C bindings implementation and keeping the C and C++ interfaces in sync.\r\n\r\nLooking at the footprint introduced here, I am not too worried about creating significantly more maintenance burden. On the contrary, just like the current `bitcoin-chainstate` binary acted as a north star for the kernel library development leading up to this pull request, the code in `bitcoinkernel.cpp` can act as a way to directly inform us on useful future changes. This could include things like logging, locking and mutexes, removing more \"Bitcoin Core\"-isms, adding hooks for db and file readers, and validating against user-provided UTXOs. It might be a bit more cognitive load when introducing new code to also think about potential external usage, but that might just mean the code changes are a bit better thought through on an architectural level. However, future feature additions to the API and the bindings would obviously mean more open PRs.\r\n\r\n> It could open a way to expose other bitcoin core code besides the kernel code externally. For example, it's possible to imagine exposing python or javascript bindings for bitcoin wallet code and having tools and UIs written in different languages that are able to use bitcoin wallet files.\r\n\r\nI'm not sure how this would be related with moving the API introduced here into a separate repository , but given that we already have a hierarchy of internal libraries, isn't that already possible? \r\n\r\n> This idea should not be incompatible with the current PR and I'd be happy to see this PR being merged whenever it is ready. But it could be something we think about going forward.\r\n\r\nThe work leading up to this pull request has focused on improving the existing c++ code. If there comes a time where the internal code is consistent and documented enough, I think splitting out foreign bindings could indeed be a final step. Next to @darosior, I would be keen on hearing other people's thoughts, like @laanwj and @theuni, that have advocated for the C bindings as part of bitcoin/bitcoin in the past. Some people have expressed their long-term hope that this library and header could become one of the few things shipped directly from the bitcoin/bitcoin repository, while most of the other existing components are split out into feature repositories. I think for this PR to move forward it would have to get a bit more contributor buy-in anyway. The projects built on top of this PR already gained some users, but I am not sure if that is enough to get it merged.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2738349197",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16882015257,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPuPxwZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16882015257",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T22:40:42Z"
    },
    {
      "event": "subscribed",
      "id": 16882015270,
      "node_id": "SE_lADOABII586SDdapzwAAAAPuPxwm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16882015270",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T22:40:42Z"
    },
    {
      "event": "mentioned",
      "id": 16882015281,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPuPxwx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16882015281",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T22:40:42Z"
    },
    {
      "event": "subscribed",
      "id": 16882015288,
      "node_id": "SE_lADOABII586SDdapzwAAAAPuPxw4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16882015288",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T22:40:42Z"
    },
    {
      "event": "mentioned",
      "id": 16882015299,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPuPxxD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16882015299",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T22:40:42Z"
    },
    {
      "event": "subscribed",
      "id": 16882015314,
      "node_id": "SE_lADOABII586SDdapzwAAAAPuPxxS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16882015314",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T22:40:42Z"
    },
    {
      "event": "commented",
      "id": 2741144182,
      "node_id": "IC_kwDOABII586jYop2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2741144182",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T17:09:50Z",
      "updated_at": "2025-03-20T17:09:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2738349197\r\n\r\nThanks, if you don't think a separate repository for C bindings would be good, or worth the tradeoffs, that's fine. I was just excited about the idea because I realized with cmake config modules it would be easy to implement technically, and it seemed like a natural starting point to experiment with splitting the project up into different repositories while being able to share utilities and infrastructure.\r\n\r\nJust to explain my perspective:\r\n\r\n- My main motivation for suggesting this was that I thought it might help with development of the C bindings. This was speculation on my part because I can see they are about 4K lines now, but I don't have an idea of how big they will be when they are complete. This was also speculation because I can see you and others hashing out issues and making progress here, but don't know if there could be more progress if there were a github repository people could push to and open PRs and issues against, so work could happen in parallel and developments might be easier to track. I also didn't know if bindings might benefit from having more frequent releases as they are developed, or if they could benefit from being built against bitcoin core stable releases instead a embedding custom or bleeding edge versions of bitcoin core code. If using a separate repository wouldn't help with these things or solve real problems, then I wouldn't favor having one.\r\n\r\n- I may also have a different view of this PR because I look at C and C++ as being different languages with some syntax in common but pretty different features and idioms. To me C++ has more in common with Python than it does with C in how code is written and what features are used. So the choice to expose C++ code with a C API does not seem very natural to me. I understand the value of treating the C++ code as unstable and having a translation layer to expose it to other projects and languages, but I'd think different approaches to translation should be possible and we wouldn't need to choose a single one and maintain it the main repository, even if it'd be fine to do that.\r\n\r\n> I have done some experimentation with using c++ bindings directly.\r\n\r\nThanks for the details and links and this is interesting to know about. I have a lot of experience with swig but mostly just think any of these approaches could work and be useful, and it should be fine to choose what seems convenient and expose a simple and stable API.\r\n\r\n> Looking at the footprint introduced here, I am not too worried about creating significantly more maintenance burden. On the contrary, just like the current `bitcoin-chainstate` binary acted as a north star for the kernel library development leading up to this pull request, the code in `bitcoinkernel.cpp` can act as a way to directly inform us on useful future changes. This could include things like logging, locking and mutexes, removing more \"Bitcoin Core\"-isms, adding hooks for db and file readers, and validating against user-provided UTXOs. It might be a bit more cognitive load when introducing new code to also think about potential external usage, but that might just mean the code changes are a bit better thought through on an architectural level. However, future feature additions to the API and the bindings would obviously mean more open PRs.\r\n\r\nI can see the analogy, but not really how it applies. The chainstate program was useful because it was small and we could see it doing clumsy things because the C++ API was clumsy, so we would improve the C++ API, and the chainstate program would get simpler. Maybe I need to think about it more, but I don't see how a similar process could play out between the C++ API and the C bindings, or how there could be other benefits to the C++ code from just maintaining the C bindings. I could see there being benefits from developing the bindings, but would expect those to be the same regardless of repository layout.\r\n\r\n> > It could open a way to expose other bitcoin core code besides the kernel code externally. For example, it's possible to imagine exposing python or javascript bindings for bitcoin wallet code and having tools and UIs written in different languages that are able to use bitcoin wallet files.\r\n> \r\n> I'm not sure how this would be related with moving the API introduced here into a separate repository , but given that we already have a hierarchy of internal libraries, isn't that already possible?\r\n\r\nYes, I was just thinking a bitcoin-core/bindings repository would be a natural place for an API like that to live, be discoverable, have documentation, and have issues reported against, rather than the main repository.\r\n\r\n> I think for this PR to move forward it would have to get a bit more contributor buy-in anyway. The projects built on top of this PR already gained some users, but I am not sure if that is enough to get it merged.\r\n\r\nIt seems fine to me to merge this PR and maintain this code as a separate library in the main repository. My reason for bringing this up was to question whether we actually needed to do that, and if there might be benefits to maintaining it in a separate repository. I don't have a great sense of the tradeoffs and both approaches do seem reasonable to me.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2741144182",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "reviewed",
      "id": 2694197292,
      "node_id": "PRR_kwDOABII586gljAs",
      "url": null,
      "actor": null,
      "commit_id": "2dc27e2860b97c2bffa5f18706917b21858e5594",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2694197292",
      "submitted_at": "2025-03-20T19:03:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "reviewed",
      "id": 2703841630,
      "node_id": "PRR_kwDOABII586hKVle",
      "url": null,
      "actor": null,
      "commit_id": "2dc27e2860b97c2bffa5f18706917b21858e5594",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2703841630",
      "submitted_at": "2025-03-20T19:10:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16918201013,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPwZ0K1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16918201013",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9fc6accf89ed001f70e107a8e9936f6dc3a35f41",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/9fc6accf89ed001f70e107a8e9936f6dc3a35f41",
      "created_at": "2025-03-20T21:21:27Z"
    },
    {
      "event": "commented",
      "id": 2741688322,
      "node_id": "IC_kwDOABII586jatgC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2741688322",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T21:21:33Z",
      "updated_at": "2025-03-20T21:21:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 2dc27e2860b97c2bffa5f18706917b21858e5594 -> 9fc6accf89ed001f70e107a8e9936f6dc3a35f41 ([kernelApi_30](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_30) -> [kernelApi_31](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_31), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_30..kernelApi_31))\r\n\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r2000864918), fixed naming in docstring for `kernel_LoggingConnection`.\r\n* Addressed @stickies-v's [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r2006272875), fixed constructor for `Context` and added a test to catch the regression.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2741688322",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16918202116,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPwZ0cE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16918202116",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T21:21:34Z"
    },
    {
      "event": "subscribed",
      "id": 16918202132,
      "node_id": "SE_lADOABII586SDdapzwAAAAPwZ0cU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16918202132",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T21:21:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16918754366,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAPwb7Q-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16918754366",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "29f05b91cf8a479e403b0322afeb5ff1133da221",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/29f05b91cf8a479e403b0322afeb5ff1133da221",
      "created_at": "2025-03-20T22:14:40Z"
    },
    {
      "event": "commented",
      "id": 2741785172,
      "node_id": "IC_kwDOABII586jbFJU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2741785172",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T22:14:52Z",
      "updated_at": "2025-03-20T22:14:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/39141725876</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2741785172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "labeled",
      "id": 16918756032,
      "node_id": "LE_lADOABII586SDdapzwAAAAPwb7rA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16918756032",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T22:14:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2741785465,
      "node_id": "IC_kwDOABII586jbFN5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2741785465",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T22:15:04Z",
      "updated_at": "2025-03-20T22:15:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 9fc6accf89ed001f70e107a8e9936f6dc3a35f41 -> 29f05b91cf8a479e403b0322afeb5ff1133da221 ([kernelApi_31](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_31) -> [kernelApi_32](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_32), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_31..kernelApi_32))\r\n\r\n* Fixed silent merge conflict with #31519",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2741785465",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 16920597415,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAPwi9On",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16920597415",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T02:03:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2742398706,
      "node_id": "IC_kwDOABII586jda7y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2742398706",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T06:00:43Z",
      "updated_at": "2025-03-21T06:00:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I had an idea I wanted to suggest here. What if instead of adding C bindings to the bitcoin/bitcoin git repository we took inspiration from @darosior's thoughts about [project scope](https://delvingbitcoin.org/t/antoine-poinsot-on-bitcoin-cores-priorities/1470) and developed the C, rust, and python bindings in a separate bitcoin-core/bindings repository, or even separate bitcoin-core/bindings-{c,rust,python} repositories?\r\n\r\nI think this is an interesting idea, and may be worth exploring independently of this PR. Couple of comments:\r\n\r\n>     * It would not be posssible to use C++ wrappers that have been written around the C bindings to write internal tools in the bitcoin/bitcoin repository.\r\n\r\nI think for things like that we'd just include the wrapper in core because it's not an external maintenance burden but a natural part of core, and we'd already judged that that was less maintenance burden in total than writing the code in C++ in the first place.\r\n\r\n>     * We would need to clearly communicate to outside developers that bitcoin/bitcoin C++ interfaces are not stable, and that if projects want a more stable interface they need to use the C interface or the C++ wrappers around the C interface.\r\n\r\nI think you could just treat that as part of API versioning -- bitcoin core updates to version 30.0, tweaking a bunch of internal structures that result in C/python/rust API changes, so that results in a semver bump to version 30 for the C/python/rust API. But if the API is an independent product, that doesn't have to happen on any particular schedule -- you can keep using API version 28 even if your node is running v31 (modulo security update policies perhaps).\r\n\r\nI find having the test framework code handy for doing python bitcoin things and use jamesob's [verystable](https://github.com/jamesob/verystable) for that (eg [powcoins](https://github.com/ajtowns/powcoins/tree/master/verystable), [bllsh](https://github.com/ajtowns/powcoins/tree/master/verystable). It's just an externally maintained copy of relevant bits of bitcoin core code, that is manually synced to new upstream releases every now and then. That model seems workable to me.\r\n\r\nI think maybe exposing some of our complicated internal logic for direct manipulation/experimentation in python might be helpful for debugging -- the new [txgraph](https://github.com/bitcoin/bitcoin/pull/31363#pullrequestreview-2684192006) stuff in particular, but perhaps also the fee estimation code. \r\n\r\nI think separate repos for python/rust APIs is probably more compelling than for C, since C APIs are naturally fairly basic and are also pretty well supported by C++ without introducing any extra dependencies. With good python/rust APIs available externally, I could imagine the C API not being very useful, but wouldn't want to bet on it either way.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2742398706",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16922444626,
      "node_id": "MEE_lADOABII586SDdapzwAAAAPwqANS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16922444626",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T06:00:43Z"
    },
    {
      "event": "subscribed",
      "id": 16922444640,
      "node_id": "SE_lADOABII586SDdapzwAAAAPwqANg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16922444640",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T06:00:44Z"
    },
    {
      "event": "commented",
      "id": 2742479648,
      "node_id": "IC_kwDOABII586jdusg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2742479648",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T06:38:33Z",
      "updated_at": "2025-03-21T06:38:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Maybe I need to think about it more, but I don't see how a similar process could play out between the C++ API and the C bindings, or how there could be other benefits to the C++ code from just maintaining the C bindings. I could see there being benefits from developing the bindings, but would expect those to be the same regardless of repository layout.\r\n\r\nI think I was conflating the introduction of some consolidating code here, like a separate context, methods that map to multiple calls to our validation code, logging initialization, etc., and the code really only required to do the C translation. The former could probably be viewed as a safe \"interface\" of sorts into some of the existing code in the kernel library and could be useful for our internal code, while the latter is more useful for external callers. A long term goal if this gets merged would be evolving the internal code to absorb most of the code in this \"interface\". Maybe the approach taken here is not ideal for actually surfacing that, but it is also not clear to me what a better approach might be, since such an \"interface\" is best designed based on the requirements of an actual user (i.e. the C API in the case of this PR).",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2742479648",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2752629027,
      "node_id": "IC_kwDOABII586kEckj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2752629027",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T21:50:58Z",
      "updated_at": "2025-03-27T12:22:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "@stickies-v found an interesting example of a library, [SFML](https://www.sfml-dev.org/), that ships C++ headers from its \"core\" [repository](https://github.com/SFML/SFML), but also hosts C bindings in [another repository](https://github.com/SFML/CSFML/tree/master) in their organisation. They have a list of all known bindings to their library on their website: https://www.sfml-dev.org/download/bindings. I did a tour of some of them and most seem to be using the C bindings, but interestingly there seems to be a trend among them to move from the C headers to the C++ headers. For example the [first python bindings](https://github.com/bastienleonard/pysfml-cython) used the C header, while the [current python bindings](https://github.com/intjelic/python-sfml/tree/master) use a mix. The [ocaml bindings](https://github.com/fccm/ocaml-sfml) even mention in their project readme how they migrated over time to the C++ headers. What I also find interesting is that SFML has a mix of internal and external headers, that live in the `src` and `include` directory respectively, but use both of them in their core codebase.\r\nEDIT: I looked through their git history a bit and saw that they originally had their bindings in the same codebase.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2752629027",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 16982401391,
      "node_id": "MEE_lADOABII586SDdapzwAAAAP0OuFv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16982401391",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T21:50:58Z"
    },
    {
      "event": "subscribed",
      "id": 16982401408,
      "node_id": "SE_lADOABII586SDdapzwAAAAP0OuGA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16982401408",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T21:50:58Z"
    },
    {
      "event": "commented",
      "id": 2754051147,
      "node_id": "IC_kwDOABII586kJ3xL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2754051147",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-26T11:14:21Z",
      "updated_at": "2025-03-26T11:14:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pushed 29f05b91cf8a479e403b0322afeb5ff1133da221 -> 97d1edcdafe074e910ed647dcb6beedd24744b17 ([kernelApi_32](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_32) -> [kernelApi_33](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_33), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_32..kernelApi_33))\r\n\r\n* Added a commit introducing a small purpose section in the header documentation. It briefly mentions the features, that the header is unversioned, might just break with future updates, and won't be released yet.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2754051147",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "referenced",
      "id": 17015634917,
      "node_id": "REFE_lADOABII586SDdapzwAAAAP2Nfvl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17015634917",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "74c23f80abbe72c1cc00604ec438498e6a20d3e6",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74c23f80abbe72c1cc00604ec438498e6a20d3e6",
      "created_at": "2025-03-27T15:02:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk4N2FkMjViZDllZTUyMGRjZjFjYTk2NzAyZmY0YWQ1MTM5MmY3NjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/987ad25bd9ee520dcf1ca96702ff4ad51392f765",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/987ad25bd9ee520dcf1ca96702ff4ad51392f765",
      "tree": {
        "sha": "9cfb86b8c24878e9d819a23ac3581763b6ee1303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cfb86b8c24878e9d819a23ac3581763b6ee1303"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9cfb86b8c24878e9d819a23ac3581763b6ee1303\nparent 0a1e36effaa5aa27bc5f2c4955c1fa2eb2f0c8fa\nauthor TheCharlatan <seb.kung@gmail.com> 1716885172 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152551 +0100\n\nkernel: Introduce initial kernel C header API\n\nAs a first step, implement the equivalent of what was implemented in the\nnow deprecated libbitcoinconsensus header. Also add a test binary to\nexercise the header and library.\n\nUnlike the deprecated libbitcoinconsensus the kernel library can now use\nthe hardware-accelerated sha256 implementations thanks for its\nstatically-initialzed context. The functions kept around for\nbackwards-compatibility in the libbitcoinconsensus header are not ported\nover. As a new header, it should not be burdened by previous\nimplementations. Also add a new error code for handling invalid flag\ncombinations, which would otherwise cause a crash.\n\nThe macros used in the new C header were adapted from the libsecp256k1\nheader.\n\nTo make use of the C header from C++ code, a C++ header is also\nintroduced for wrapping the C header. This makes it safer and easier to\nuse from C++ code.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZacACgkQm3m0VpHb\nQXOF2A/8C2qxLkKuhQ1QCu2QOvSvkZIaflxnzpOLyRFrO/Ap4tlwSeiX4DEHrQaW\nUyazuvajH6hxKSBgmzcstnwrSvZgjX/UFcpysn8Hc1OH0Rmnm0WAdOStz5s9tDrM\naE0VALSRxyc6pqZUak2bYRuDH0hL2SU0IQNI4vDI0YvQoEptzsiqKZJ83Mx9q9OF\nLpSKsTWp1OG2iF0uLd7u1xeeWvjCDht0XOahukbekgg65UuFhhNBoBE/xfZJasvT\nYujVtnRlYofX7nIzAfhxdMaXiKtGlT5ue6NdkW2na8JXUn6UvHOm18Eg0d2Eicwn\nahNiXCr9qYfLFmRip0yaWoqEqymmIw4grQWhPwERT9krovqKk8oE+1KiHkPE+MxP\naJPHaXpMgTpflIIgDoiVclv4yC8t2QrJzbmcQg8+5VMRpsaRSqflgoA4rYovszcT\nSP5Nnp5LA1L8xpugV8dZHfrIWflaUGjgH4Mxerjndxrymd1IIWkwTZI3KxzsL28R\n0wZDrnoxd3icHrBayrKN94rNGQIBigg8eAX9BdRtPWw7dtorpeWDUWel5p+jo8O4\nc1biOtyXl6DQ3X3RVyO7slq+3Umj3pxC6+UF+fbC4gpmTHadwqKuTpCUqvydL0gt\nvTsDoL+idoAVs2MiDPgO6ANFqoaxCT9Op2Gk3piiwty8yoi56FI=\n=35jH\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a1e36effaa5aa27bc5f2c4955c1fa2eb2f0c8fa",
          "sha": "0a1e36effaa5aa27bc5f2c4955c1fa2eb2f0c8fa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0a1e36effaa5aa27bc5f2c4955c1fa2eb2f0c8fa"
        }
      ],
      "message": "kernel: Introduce initial kernel C header API\n\nAs a first step, implement the equivalent of what was implemented in the\nnow deprecated libbitcoinconsensus header. Also add a test binary to\nexercise the header and library.\n\nUnlike the deprecated libbitcoinconsensus the kernel library can now use\nthe hardware-accelerated sha256 implementations thanks for its\nstatically-initialzed context. The functions kept around for\nbackwards-compatibility in the libbitcoinconsensus header are not ported\nover. As a new header, it should not be burdened by previous\nimplementations. Also add a new error code for handling invalid flag\ncombinations, which would otherwise cause a crash.\n\nThe macros used in the new C header were adapted from the libsecp256k1\nheader.\n\nTo make use of the C header from C++ code, a C++ header is also\nintroduced for wrapping the C header. This makes it safer and easier to\nuse from C++ code.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:31Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-28T08:32:52Z"
      },
      "sha": "987ad25bd9ee520dcf1ca96702ff4ad51392f765"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgyNGVmN2VkMDIwYjQ3NTc2MWQ3ZDdhZTI1NTdkNjBhMGY1OGY2ZmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/824ef7ed020b475761d7d7ae2557d60a0f58f6fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/824ef7ed020b475761d7d7ae2557d60a0f58f6fc",
      "tree": {
        "sha": "2d2769bd0f10d59a24d15ee7432ec9f97a7fbcc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d2769bd0f10d59a24d15ee7432ec9f97a7fbcc8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2d2769bd0f10d59a24d15ee7432ec9f97a7fbcc8\nparent 987ad25bd9ee520dcf1ca96702ff4ad51392f765\nauthor TheCharlatan <seb.kung@gmail.com> 1716992025 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152556 +0100\n\nkernel: Add logging to kernel library C header\n\nExposing logging in the kernel library allows users to follow what is\ngoing on when using it. Users of the C header can use\n`kernel_logging_connection_create(...)` to pass a callback function to\nBitcoin Core's internal logger. Additionally the level and severity can\nbe globally configured.\n\nBy default, the logger buffers messages until\n`kernel_loggin_connection_create(...)` is called. If the user does not\nwant any logging messages, it is recommended that\n`kernel_disable_logging()` is called, which permanently disables the\nlogging and any buffering of messages.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZawACgkQm3m0VpHb\nQXODMBAAxwR9qHhgE632O6ak1ggn6XVYxJgD4l3EG5HuuqvHq2Pg6lHyV9TfWmB5\nVgGNfcoaTlIlUXYsSLQvfDVQ3WwTKrNXTH6SOSSXb03eaV0fVTlkg1XBrXSloSCh\nEnXVFC3UyInA5i4nx3Y3mnyh4u51b1wkEm2WY912nxV+vbG03Gszy2vB1eKbb1oa\nG2aU+Z4JFvVeL/z1dneozQp4SIVxGxswp31qKj8AABYqN1TrAtHvgkU1z9wc15An\nJazpkC3Y9aQ43037eEQSJl3VBHVSc4ozIJYYjYkCXNKa6UWC2zp9C5/t8q9xSMYZ\n4Ij8h9Oh0lZcXWD43CfA6ORS2jWDCJURFMGSh4/TkA+IcYd4eRQVR28zUzpsU29F\n202Rw67mSViCkz/C1aNdlpInoZglTcgmJzOysM0NELDTEUPz0OGbgvaQrPS8BxYL\nbxOjUdfNgMK/GRhIE2vtIGzascXdqgPwRGBsP34gGKKsCuUrsLSfiPEuUmiiElir\nOyksiN/4SwYE75W8hItVF1W7bEep8CaVczbQv6FIMWXaeMIgGq8aK7zBbiuw0rkw\nlpx1eIKlj7QzlZXO3yb6PpxkXwyunLKNXr7zlVyOUU6/K9nIyQ+DNifUi+cfcv/k\nA9ds+b7PU4yKOMcK44K5csCS8DrQ5JAKY9K64nuejDg593VnegI=\n=9pJv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/987ad25bd9ee520dcf1ca96702ff4ad51392f765",
          "sha": "987ad25bd9ee520dcf1ca96702ff4ad51392f765",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/987ad25bd9ee520dcf1ca96702ff4ad51392f765"
        }
      ],
      "message": "kernel: Add logging to kernel library C header\n\nExposing logging in the kernel library allows users to follow what is\ngoing on when using it. Users of the C header can use\n`kernel_logging_connection_create(...)` to pass a callback function to\nBitcoin Core's internal logger. Additionally the level and severity can\nbe globally configured.\n\nBy default, the logger buffers messages until\n`kernel_loggin_connection_create(...)` is called. If the user does not\nwant any logging messages, it is recommended that\n`kernel_disable_logging()` is called, which permanently disables the\nlogging and any buffering of messages.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:36Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-29T14:13:45Z"
      },
      "sha": "824ef7ed020b475761d7d7ae2557d60a0f58f6fc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVhMzU0ZmE1OTVhM2FjZjdhZmE3NzY4NjE2OGM4ZWMyOWU2NTU3ZjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea354fa595a3acf7afa77686168c8ec29e6557f2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ea354fa595a3acf7afa77686168c8ec29e6557f2",
      "tree": {
        "sha": "b898f8ece4f6a700ae2518b98bebfb124af900b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b898f8ece4f6a700ae2518b98bebfb124af900b4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b898f8ece4f6a700ae2518b98bebfb124af900b4\nparent 824ef7ed020b475761d7d7ae2557d60a0f58f6fc\nauthor TheCharlatan <seb.kung@gmail.com> 1717418147 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152557 +0100\n\nkernel: Add kernel library context object\n\nThe context introduced here holds the objects that will be required for\nrunning validation tasks, such as the chosen chain parameters, callbacks\nfor validation events, and an interrupt utility. These will be used in a\nfew commits, once the chainstate manager is introduced.\n\nThis commit also introduces conventions for defining option objects. A\ncommon pattern throughout the C header will be:\n```\noptions = object_option_create();\nobject = object_create(options);\n```\nThis allows for more consistent usage of a \"builder pattern\" for\nobjects where options can be configured independently from\ninstantiation.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZa0ACgkQm3m0VpHb\nQXPSqA/8D7jr6tcxbejFsFXmWXQX6RjGnxB6n7GvClk7auJLMNQ3oR8UTpPX8Nw5\nlqUBaUikCKMcghCjlN32yeHSdQGWm/+iKuUYwyHM0YBnwvmK1ekyB+t4BK6cIwma\nghocfpuIoLYvmqikkEQmgMKQPbTsDBZa6x1dUZx7mbv4p9Pl8KnKJeRWxrSd8W0k\n5dXYmRez0D7J9QD0SYHvhahweWA56TK7X/aAmgHauQQbNL1X/0GNg6qm3Xfhru8Z\nxPS+eJkeJxHiUKP/17tcc4C8FNbqYN+UdCaaTSq7F1mfOj94T1WuxkHv24nL0Mru\nSZ8OOhqthxkG+7kv4Ck8/LfC6TduFog1jem/ALAVzTvnpwkAj3z62tQEnPm2hgJC\npwQvWqbn7SdrLdIzphJk/aQ8Huc2Kd+Vuew9wmuDbWMjVVtusYhQoeMrqC6+4fug\n5iflaidwprx1ZdvIEsyVQAQyXzLiWo5DBxqVYnWzfVrVFPLW9Z9IzWQeJRrYUFv6\ngftq6j5Ed0RV5SfjUC/TVX2N4ept92Vgvxu1cfXkfXWbM7eyJ6ZxPoTYbNwanBQx\nntyeTwMeSoC7fF50ze70SH/wrxVFrRCVLBK0ke4FGNS1OLbKbDI4V0YLYPZEHQLc\nKHxBpjA/tvFHPTKPurL/Ngw1HO/2EIF1I93RT5aj5eQ80xMNrqg=\n=YqpC\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/824ef7ed020b475761d7d7ae2557d60a0f58f6fc",
          "sha": "824ef7ed020b475761d7d7ae2557d60a0f58f6fc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/824ef7ed020b475761d7d7ae2557d60a0f58f6fc"
        }
      ],
      "message": "kernel: Add kernel library context object\n\nThe context introduced here holds the objects that will be required for\nrunning validation tasks, such as the chosen chain parameters, callbacks\nfor validation events, and an interrupt utility. These will be used in a\nfew commits, once the chainstate manager is introduced.\n\nThis commit also introduces conventions for defining option objects. A\ncommon pattern throughout the C header will be:\n```\noptions = object_option_create();\nobject = object_create(options);\n```\nThis allows for more consistent usage of a \"builder pattern\" for\nobjects where options can be configured independently from\ninstantiation.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:37Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-03T12:35:47Z"
      },
      "sha": "ea354fa595a3acf7afa77686168c8ec29e6557f2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA1MTU1Mjg3NGY1NzcxOTQ5OTFiOWI2ZDQ2OTgyNTlkMjk1ZDE0MTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/051552874f577194991b9b6d4698259d295d1415",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/051552874f577194991b9b6d4698259d295d1415",
      "tree": {
        "sha": "c3fbff8eb9be5801329aa200ceab9f705621a246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3fbff8eb9be5801329aa200ceab9f705621a246"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c3fbff8eb9be5801329aa200ceab9f705621a246\nparent ea354fa595a3acf7afa77686168c8ec29e6557f2\nauthor TheCharlatan <seb.kung@gmail.com> 1717418695 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152558 +0100\n\nkernel: Add chain params context option to C header\n\nAs a first option, add the chainparams. For now these can only be\ninstantiated with default values. In future they may be expanded to take\ntheir own options for regtest and signet configurations.\n\nThis commit also introduces a unique pattern for setting the option\nvalues when calling the `*_set(...)` function.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZa4ACgkQm3m0VpHb\nQXN7hQ//TpZcDNE0cpQIKOLWiJn+wvhboxQ0Ii0PRylYhQpygIuA65cRL/+bWPWq\nDHkz7sDihOzj2oHFc3NhdG7xbpWa7grDkArhZNPRFUlTcuQTwef705q2zG97pJmn\ncjHJiSfSdMqv8zwxGFazKYVwJe1ZL5Nn9qAxgJy+ZNrK+ac+vG6jj8sQr8M9jVV5\n1YyzNAzWmOr2DmCIh61vygHfJFRRWem+9ugsnwACW+mQF7S9p8ScA7yjeT6YNwy3\nAB3TWm/2FbUXgkxZZs/ycG5Jowbj3kVdP8/5URX7sgdOdZNpT96QYiC5x06SMR+U\nffY3XbmC8ydJSwajhxIB4u1owfhfj8jY4BKEHajne1FVceb3dJnja50fdDQiEW0Z\nO1St9jbwLGappepFRiD3Z3PI928sBc1MQuawBRVR6/1QDph4XBU9ghyuR/eSmWP9\npS6JHFA6vM7rKmPhW1+nJbsIOeXrzptgQ4O6IUDHCTz06ERIsZIz0DAjdlT0zxYk\nkeM0yvZDBBernAIcSRqks38EDZBIdrlmWZ2n9QsxIflE5rXxaPnYzqzf24qJO8jB\ncn3r7XCbIXRKXVpd+ILfWv9GreZs+rxwFl0eGOz1QiseEsgtrK2gXKkFxCb+ovDD\nMg8qqCUwW5jNA2GAhMyLRonzY+EyYNKoPvz/i8wLrLpiJjWTUVQ=\n=S6Jh\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea354fa595a3acf7afa77686168c8ec29e6557f2",
          "sha": "ea354fa595a3acf7afa77686168c8ec29e6557f2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ea354fa595a3acf7afa77686168c8ec29e6557f2"
        }
      ],
      "message": "kernel: Add chain params context option to C header\n\nAs a first option, add the chainparams. For now these can only be\ninstantiated with default values. In future they may be expanded to take\ntheir own options for regtest and signet configurations.\n\nThis commit also introduces a unique pattern for setting the option\nvalues when calling the `*_set(...)` function.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:38Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-03T12:44:55Z"
      },
      "sha": "051552874f577194991b9b6d4698259d295d1415"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQzNTBmN2YxNTRlZTNkNWVjNTRmMGRkZjQzOTViMzI2ZDQ4ZDdiZjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d350f7f154ee3d5ec54f0ddf4395b326d48d7bf2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d350f7f154ee3d5ec54f0ddf4395b326d48d7bf2",
      "tree": {
        "sha": "921f9773c91a39252f5c003b026de7e50dee5521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/921f9773c91a39252f5c003b026de7e50dee5521"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 921f9773c91a39252f5c003b026de7e50dee5521\nparent 051552874f577194991b9b6d4698259d295d1415\nauthor TheCharlatan <seb.kung@gmail.com> 1717419089 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152560 +0100\n\nkernel: Add notifications context option to C header\n\nThe notifications are used for notifying on connected blocks and on\nwarning and fatal error conditions.\n\nThe user of the C header may define callbacks that gets passed to the\ninternal notification object in the\n`kernel_NotificationInterfaceCallbacks` struct. Each of the callbacks\ntake a `user_data` argument that gets populated from the `user_data`\nvalue in the struct. It can be used to recreate the structure containing\nthe callbacks on the user's side, or to give the callbacks additional\ncontextual information.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbAACgkQm3m0VpHb\nQXO1vg/9FJjdaKf32vu2bAZxGDMUD2jxcDNkveN8jDGJ4axNPk0W7DQyiQRJiiE7\nzV8xQ+sOPb16z9cfgrnRfvWpsgawQA/gX7GDaK5SIn4s3FDJvDp0PlvJaTBQ1hlG\nql+MXMf33iN/TPG184asF+2M09SjVMQNvibUeFK8taJjVsixb1S1pQ1Kd3BgB9rG\nlZtuPSJqSJcVMunWPo9n5pdz+XiiVWF+SyLCEz5mjMXJVGEB7nwx6yJi7gmRyxqc\nmTkaf4/jZfLv1snWdNkGoRMAvcsugWrfaTezjRfkICSjLFGALI79moo/Ijv20s1B\nZUL8HBARjXTb/anQcqCidNEYE3aTSgn37hXogX/E8xxXe8vLxleHmhGa6lkEjsCf\ntUz0WULaiDexB6S5poqRKAKl2jE6NZPS/jjGEsr0Xz6U7MgQf8clAaJvl/tMk8Cq\npFlshPoPlVfcaoy//l7i8NvIn/bY5e1DxpiC/cOhnsIWAHsistvbCXuGl1ayrgn/\nhyqGI20KotcXpTveTE2QBZOIlHX5FLOTTB/Sjl2Gr+Ilwqx6I96ZxaVj+anebZaH\n4Kw3Km+k4rNv3adweQbeAUu1lMcxV8c6WF7a1LhXFWJqH5ktG/EHa0RWIfb8igLn\nsvrtxfyHvP99Hc+KjRkEHYiC7cIdxOONmrZNPDz7/CTd0/iFjHk=\n=7hvW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/051552874f577194991b9b6d4698259d295d1415",
          "sha": "051552874f577194991b9b6d4698259d295d1415",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/051552874f577194991b9b6d4698259d295d1415"
        }
      ],
      "message": "kernel: Add notifications context option to C header\n\nThe notifications are used for notifying on connected blocks and on\nwarning and fatal error conditions.\n\nThe user of the C header may define callbacks that gets passed to the\ninternal notification object in the\n`kernel_NotificationInterfaceCallbacks` struct. Each of the callbacks\ntake a `user_data` argument that gets populated from the `user_data`\nvalue in the struct. It can be used to recreate the structure containing\nthe callbacks on the user's side, or to give the callbacks additional\ncontextual information.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:40Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-03T12:51:29Z"
      },
      "sha": "d350f7f154ee3d5ec54f0ddf4395b326d48d7bf2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY4NTFiNzMyZWJiYzk3Y2Q3OGNkOWMzMWU2ZDJjOTEyYzRhODAxN2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f851b732ebbc97cd78cd9c31e6d2c912c4a8017f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f851b732ebbc97cd78cd9c31e6d2c912c4a8017f",
      "tree": {
        "sha": "bef3a6ef763bf598af96bf7e3618082327562d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bef3a6ef763bf598af96bf7e3618082327562d70"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bef3a6ef763bf598af96bf7e3618082327562d70\nparent d350f7f154ee3d5ec54f0ddf4395b326d48d7bf2\nauthor TheCharlatan <seb.kung@gmail.com> 1716922728 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152561 +0100\n\nkernel: Add chainstate manager object to C header\n\nThis is the main driver class for anything validation related, so expose\nit here.\n\nCreating the chainstate manager options will currently also trigger the\ncreation of their respectively configured directories.\n\nThe chainstate manager and block manager options are consolidated into a\nsingle object. The kernel might eventually introduce a separate block\nmanager object for the purposes of being a light-weight block store\nreader.\n\nThe chainstate manager will associate with the context with which it was\ncreated for the duration of its lifetime. It is only valid if that\ncontext remains in memory too.\n\nThe tests now also create dedicated temporary directories. This is\nsimilar to the behaviour in the existing unit test framework.\n\nCo-authored-by: stickies-v <stickies-v@protonmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbEACgkQm3m0VpHb\nQXN/QA//Skoi3LcQxqnDmRSm/SqeLRx0cfaNirQxt0bXzQ87i5MOPhAT6foGiywi\nckTOUYx1SkyhcdTGieFcB06SZWiqThXco7rzas/AijuTWEjxtq+n0ByfBUIcYn6d\nMbZrBpP9diRWg/jWPLAFwN4+t7drbpYkJB3pmGUYZ8kJRm08OQyfI9IPPSJtb8Ao\nQTMKPXxXvUd+XRDS0/3zjmqAuke7lgNt/6A9fjbWHHnnOrm3YPp8iWTxYiVFNotr\nSWtZALHek/T+EeFQMV4IPkWQT3J9wJ2kswibRn0Nf0xogbwxOdChSv5Yzb2sq6qc\nroQvoMRfmpuOqd8Onrnsi36uQBbg7wOB6j/GbpCyT72pQEzdnHrR7Ld0rxEVMt2a\nBxt0wILsFXVAY2L9G2nnGMlVuXvGb3l2zPvb75loara7GVMW+ZLTLPAnRp3uL9Q7\ngx1vr441r85LhvY2U4Oz/w+lMNVT0nfSOfO+ios7cYA4Kw9GwyTMOnizLXX1xei3\nsimVDdtfD+sKRWRz9qUAqOB4ovAjTEkQeBHdxRDkHxmX+aCuBeIibLMMmJS1nPig\ny+C0Lrgp3oSsmuFD0ipPRgWJL8zzQpqSWLhftXXWN/0dhrDR02016igD/AZJM5Ze\nvU2mfWjl9mnU2nGmopSv0v9pZbl3ltl3MA/WoQZJtlsuc3CbEUM=\n=HHa+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d350f7f154ee3d5ec54f0ddf4395b326d48d7bf2",
          "sha": "d350f7f154ee3d5ec54f0ddf4395b326d48d7bf2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d350f7f154ee3d5ec54f0ddf4395b326d48d7bf2"
        }
      ],
      "message": "kernel: Add chainstate manager object to C header\n\nThis is the main driver class for anything validation related, so expose\nit here.\n\nCreating the chainstate manager options will currently also trigger the\ncreation of their respectively configured directories.\n\nThe chainstate manager and block manager options are consolidated into a\nsingle object. The kernel might eventually introduce a separate block\nmanager object for the purposes of being a light-weight block store\nreader.\n\nThe chainstate manager will associate with the context with which it was\ncreated for the duration of its lifetime. It is only valid if that\ncontext remains in memory too.\n\nThe tests now also create dedicated temporary directories. This is\nsimilar to the behaviour in the existing unit test framework.\n\nCo-authored-by: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:41Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-28T18:58:48Z"
      },
      "sha": "f851b732ebbc97cd78cd9c31e6d2c912c4a8017f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRlYjZkMDBiZmEwMTQ4NjE1MjdiYTk4OWQ0YmUzNmM5NjhiYWRiNzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eb6d00bfa014861527ba989d4be36c968badb73",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb6d00bfa014861527ba989d4be36c968badb73",
      "tree": {
        "sha": "aa27977eda0269e22bcf13b32482413995cc606c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa27977eda0269e22bcf13b32482413995cc606c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree aa27977eda0269e22bcf13b32482413995cc606c\nparent f851b732ebbc97cd78cd9c31e6d2c912c4a8017f\nauthor TheCharlatan <seb.kung@gmail.com> 1731861408 +0100\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152563 +0100\n\nkernel: Add chainstate manager option for setting worker threads\n\nRe-use the same pattern used for the context options. This allows users\nto set the number of threads used in the validation thread pool.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbMACgkQm3m0VpHb\nQXOvRQ//VAong3HX7caMn1GmOAVuU6QmPN/YiaFLPsxBMz8TO6ZnVlrWIFledJ3N\n8AU0JElMRAQtlGgus2bsQRWYyfroEouQj6v3OYzX7lOtbiXn6fAgWe9UkfB/Rztl\n+4dUL25PVi/Ctl93UVohK6EbPjZiMIarzbNwN17SeyqXVqq635vQzN2xY7YmjApQ\nu3hoVhCUvTw9Yzj2oITP0hSXATbM2/xRtGEWaHEip5M4vpXMYGLpy/yoMx5fZ+ka\nwrBmuw88p6mfenHtL4uJBXZMIDpFjDQALH3OH8Rx9dxWAgSdDPZbDHy/sgl6ctrM\nSi2EWMddPiW1WgD1Ai9lMh+oRgHDj9ZeTCQh3EvSzWLxD5KW3x0PZMMcoQBdImM9\nEwQ4BAgbPGX2xDNRGUZus3K8JSIWxszqGHhL8qKhMc8hEC5PjU7mFOrGM6dTcLe0\nQnPVkXR7joI6D+YHM8vb4lHkZrVGiHF/28xsQfZi0caKU3kzuPL4zzZfQRpnqpfn\nQlKLdNv1i9DfCZpNRY4ruiogcKGwNkm0zFxYeh7YW6Tvkq8GB9yYmzQHca3VFQ+R\nzoB9zZd/w2pnlRxU3GhYIQpDieaexau9rDTLdjoentTPqnhUQHQabcEh+LjNC67G\nc4YqksJ6Ny8aaDDoePWJbgDYycBu+6A394EwFGuDPprbThiirrE=\n=q/7u\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f851b732ebbc97cd78cd9c31e6d2c912c4a8017f",
          "sha": "f851b732ebbc97cd78cd9c31e6d2c912c4a8017f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f851b732ebbc97cd78cd9c31e6d2c912c4a8017f"
        }
      ],
      "message": "kernel: Add chainstate manager option for setting worker threads\n\nRe-use the same pattern used for the context options. This allows users\nto set the number of threads used in the validation thread pool.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:43Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-17T16:36:48Z"
      },
      "sha": "4eb6d00bfa014861527ba989d4be36c968badb73"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk2NDc3N2EwMzM4NDFiNmYzZTBjMGZhNDhhOWZmMWQ0NTM5MGY2YWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/964777a033841b6f3e0c0fa48a9ff1d45390f6ad",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/964777a033841b6f3e0c0fa48a9ff1d45390f6ad",
      "tree": {
        "sha": "57d811d4ebc52d2917199aa1e8e09cc98e0c4062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57d811d4ebc52d2917199aa1e8e09cc98e0c4062"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 57d811d4ebc52d2917199aa1e8e09cc98e0c4062\nparent 4eb6d00bfa014861527ba989d4be36c968badb73\nauthor TheCharlatan <seb.kung@gmail.com> 1716982085 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152564 +0100\n\nkernel: Add chainstate loading when instantiating a ChainstateManager\n\nThe library will now internally load the chainstate when a new\nChainstateManager is instantiated.\n\nOptions for controlling details of loading the chainstate will be added\nover the next few commits.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbQACgkQm3m0VpHb\nQXMK+xAAyFq/9nqsFjFB32n5D19jtJR1C1hiOWyZsxUrXlQ6hJa9xlm3mZOmr6rY\nfbHd3yrGlwSPoPPhamguTlzr/VC0S93MiJLUKM96tn4HIt9xw5eFX7G2xIF4C6k+\naJrBiCX5v3xUw2bWwDpXPibWLJFy3mDrZx2+kFV045zBofF6u/A4cV+tq5OrtAEh\nPZYqfH7w+nHaxNTJIRpTBziWp3fuLpeMS8leewHLbLQAqngCROa+LOnJwhA1Pr9p\n8gmAswyGI3irbWtXWo/DjlIHv8khLXaODK7j41qMAU/BZoCF4nNfO+Hs/1LP3hoA\nNsQSVtBeKdI4x5bLNBLPC3PLe6HP7cgwt4YRY2V2OMT5LErTsZThrwYtIsXatMl2\nOMNnhKnrpiqDLsAxOH8CzC+Cx1itDVSo7/9EPsys+RKvXWJFxRJBAAyK4Z5fcUoM\nmCRiIu8kFHKZLe2/lMv37T5BDNB1zqRyXTpGMrAbIVVRDbk1fYWOK+49j2fz/yVY\n7F1LtH3JOgegsOSGFYmJQBZ+c+jr1zHvXcer4ZIk2eQCItu/4A8L2gPJb2/1Hh26\nkj1H80AqHLgZHhPhXvv4B57lOb2woUEhVGU9rONYUK2pEaLmaWbdZRTSHBZX5Zk7\n3qNWw3MbfI2J/TY+mRIL3Bv4eb8kUCEr6LGjFaXAjGPyRVud8mA=\n=N853\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eb6d00bfa014861527ba989d4be36c968badb73",
          "sha": "4eb6d00bfa014861527ba989d4be36c968badb73",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb6d00bfa014861527ba989d4be36c968badb73"
        }
      ],
      "message": "kernel: Add chainstate loading when instantiating a ChainstateManager\n\nThe library will now internally load the chainstate when a new\nChainstateManager is instantiated.\n\nOptions for controlling details of loading the chainstate will be added\nover the next few commits.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:44Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-29T11:28:05Z"
      },
      "sha": "964777a033841b6f3e0c0fa48a9ff1d45390f6ad"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIwYzc3NzE4Njg5MDllOGQyZTE3ODA4OWRjYTFmYzc2ZTAyMjMxZTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20c7771868909e8d2e178089dca1fc76e02231e3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/20c7771868909e8d2e178089dca1fc76e02231e3",
      "tree": {
        "sha": "2e8909e552a7cd2bbce17ae0806b5dd01d8e1c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e8909e552a7cd2bbce17ae0806b5dd01d8e1c3c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2e8909e552a7cd2bbce17ae0806b5dd01d8e1c3c\nparent 964777a033841b6f3e0c0fa48a9ff1d45390f6ad\nauthor TheCharlatan <seb.kung@gmail.com> 1718657423 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152565 +0100\n\nkernel: Add block validation to C header\n\nThe added function allows the user process and validate a given block\nwith the chainstate manager. The *_process_block(...) function does some\npreliminary checks on the block before passing it to\n`ProcessNewBlock(...)`. These are similar to the checks in the\n`submitblock()` rpc.\n\nRicher processing of the block validation result will be made available\nin the following commits through the validation interface.\n\nThe commits also adds a utility for serializing a `CBlock`\n(`kernel_block_create()`) that may then be passed to the library for\nprocessing.\n\nThe tests exercise the function for both mainnet and regtest. The\ncommit also adds the data of 206 regtest blocks (some blocks also\ncontain transactions).\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbUACgkQm3m0VpHb\nQXMh+Q//WVUK5kYG3kzkpBjR4BwZy7MBsTdruIq88LS0eK/k342YkDjAJIUnXreO\nvTpUkmwEJaRQa5JYdXO2Ffu/dooGo3xPCUVkpVDxaugxkQtwTNTlisPDpfw78DyW\nPH/RnJPaqqlPetikHCd2+AvHDSLdm0Tt52DXVe1BXrWuxLks0P2fLba+jMStf7QE\nZmnFVFQV+Rz+xvUClLITHfz5uJjpyXtlL9HCb8VM4SaLZF0I9jFUfAdPnOlFagNJ\nHxkTqg/cAwvXsc5lDdJktMWQqtGa4p6hzjgNYvvh/7v1TI00EkMhRALyI3CjhLfN\n+Im6RQNRFgqrn6E9YWQ7onvck9tKfih2tl035KwzPsC8e7XJGWrhPgW02eK7NQ+p\nVAQYSYtaVr6Rt9lCb5WaIpN7nu/RXZmouG6x8EBskbAkYtcdYl0eE/7QMeM95w2Z\nTo6aMNkZFtCeuF1plhV+eK7ajCyA4NUvzLYTM5gTBvqRJ7DOtkKTRjmNGYpEWs17\ndeFvdhtsYAYw0gS+mC3VZL0Dx6ar4OLJS2PGmZrD4571VCixLlLjF9VOL2nJAoLj\noL4wQbA8ihPgRJFJgCwv+qhZpq8kqFRZjO/GzXulsXL4GLytN5d+NcegJ/xzjJVL\nyVMdzIJ1dwobfbetZWyBZJ7cHLZpwdbmT00H94pEbjcIUvV4nmg=\n=t3Ol\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/964777a033841b6f3e0c0fa48a9ff1d45390f6ad",
          "sha": "964777a033841b6f3e0c0fa48a9ff1d45390f6ad",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/964777a033841b6f3e0c0fa48a9ff1d45390f6ad"
        }
      ],
      "message": "kernel: Add block validation to C header\n\nThe added function allows the user process and validate a given block\nwith the chainstate manager. The *_process_block(...) function does some\npreliminary checks on the block before passing it to\n`ProcessNewBlock(...)`. These are similar to the checks in the\n`submitblock()` rpc.\n\nRicher processing of the block validation result will be made available\nin the following commits through the validation interface.\n\nThe commits also adds a utility for serializing a `CBlock`\n(`kernel_block_create()`) that may then be passed to the library for\nprocessing.\n\nThe tests exercise the function for both mainnet and regtest. The\ncommit also adds the data of 206 regtest blocks (some blocks also\ncontain transactions).",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:45Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-17T20:50:23Z"
      },
      "sha": "20c7771868909e8d2e178089dca1fc76e02231e3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg0ZjE1YzAzY2YwOTEyZmUzMjEzYTBiNDRhZWMyN2ZiYWQ0NjcyYzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84f15c03cf0912fe3213a0b44aec27fbad4672c9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/84f15c03cf0912fe3213a0b44aec27fbad4672c9",
      "tree": {
        "sha": "d99df40a09dcf0e16c15f14d1911a3bb7a8b82b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d99df40a09dcf0e16c15f14d1911a3bb7a8b82b6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d99df40a09dcf0e16c15f14d1911a3bb7a8b82b6\nparent 20c7771868909e8d2e178089dca1fc76e02231e3\nauthor TheCharlatan <seb.kung@gmail.com> 1718657447 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152567 +0100\n\nkernel: Add options for reindexing in C header\n\nAdds options for wiping the chainstate and block tree indexes to the\nchainstate load options. In combination and once the\n`*_import_blocks(...)` function is added in a later commit, this\ntriggers a reindex. For now, it just wipes the existing data.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbcACgkQm3m0VpHb\nQXP3iQ/9EaXu1D0D7G4p/5vxINERyPZMJiy+7XCEtH7so3sDHThZOArwyFVpQkZD\nlf+C7BvDT7MfG5RLmcmaeqR3Z33BxXtKw660o36mZAvjDBuQWxTHEyHRep2dG6gv\nze2mAD0yCDPZEhR6g0BhPjKMAJ/EvDPAhZKqPWROzUhKmVVYXtm7ARsfANWn4HdX\ngOPfTNrotdqkfAgQuad5PlrrL/NLQymR7ntCSfK0zVRFeCFxCnEnPtgycGkDXP7Y\nJ17bIAT5pnUuOid4hvDTyNOmTvPRXKeHVYCs20yYCIVoBh496Konh4UTgdFoCIp/\nybVl+aS2rzjBewtcJ3Kq+POEXwlb7mQ9yQqEeMOovwMoKnCYO7EveAYH4PiT3iU3\nOIIuVl7MCicUZFVrzhRnsbWh/cN0zbR6B3lWNY3lORhNwy7QvKlKLaBMxBP9RIkW\nErV/unZusfCgtDYw97l70FwuLz7y/QPBRbq59jBk8ei8yEUsR69BuDF0TdlNOoy5\nygXFIUH0qvQTUimHNdsL2xtfo8HA3eXogkBJjGBpCw2GIvQvpXGg1E77g3Qybv0l\nEmZEJq42aLbBwBSAjhFp0Q4jwZUlhFZ5Jnwn9+jPpKa/nkwn7R4idorjdNYyu+sS\nVJqY4YrJRsYLuiBH3XT2sW1CUWYmHBYcIbxxPXZcvuLyoJcBatg=\n=lFV3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20c7771868909e8d2e178089dca1fc76e02231e3",
          "sha": "20c7771868909e8d2e178089dca1fc76e02231e3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/20c7771868909e8d2e178089dca1fc76e02231e3"
        }
      ],
      "message": "kernel: Add options for reindexing in C header\n\nAdds options for wiping the chainstate and block tree indexes to the\nchainstate load options. In combination and once the\n`*_import_blocks(...)` function is added in a later commit, this\ntriggers a reindex. For now, it just wipes the existing data.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:47Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-17T20:50:47Z"
      },
      "sha": "84f15c03cf0912fe3213a0b44aec27fbad4672c9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMzYjU4OWUxNGViOGUwMWJlNDFmNDZkNTE1OTE3OWIwMWEzZTI1YmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3b589e14eb8e01be41f46d5159179b01a3e25bb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c3b589e14eb8e01be41f46d5159179b01a3e25bb",
      "tree": {
        "sha": "ed19350afbf200773aa9e7020c73ba64a78d5d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed19350afbf200773aa9e7020c73ba64a78d5d40"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ed19350afbf200773aa9e7020c73ba64a78d5d40\nparent 84f15c03cf0912fe3213a0b44aec27fbad4672c9\nauthor TheCharlatan <seb.kung@gmail.com> 1719083290 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152569 +0100\n\nkernel: Add chainstate load options for in-memory dbs in C header\n\nThis allows a user to run the kernel without creating on-disk files for\nthe block tree and chainstate indexes. This is potentially useful in\nscenarios where the user needs to do some ephemeral validation\noperations.\n\nOne specific use case is when linearizing the blocks on disk. The block\nfiles store blocks out of order, so a program may utilize the library\nand its header to read the blocks with one chainstate manager, and then\nwrite them back in order, and without orphans, with another chainstate\nmaanger. To save disk resources and if the indexes are not required once\ndone, it may be beneficial to keep the indexes in memory for the\nchainstate manager that writes the blocks back again.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbkACgkQm3m0VpHb\nQXOeDA/+P6PCG6slEyfExKquYZGZPOh0X3mqwvaCg1zqRIOP6feo28Wt9MuT87Od\n42glgWFK1SBPUJbH9db2uNKAP7p7ntrmFGj2QiYsKT0TpyLzN0ZgLTs7zsCmI/3a\n18V0u5S1Qte0kMeH5cwr3JcqEXRQ2qgCAYJ/t0rdB9ndRxoONm8WIUKjyhFQz91N\nbmdiL+mTbPzChABMr6xLWqiV4LiXMlTrb+167nKR++LtBZa5WrkJyhZT7FYflwCQ\nmUUSY87XlZg7CnTxffYsdFOEKsWsYp8oq/KGSuom1/JhlpM1KeIGFYk/y/Rz2rZO\nr0ju5/7ePMEozK5U9Po4xYwXIq+2D4tZJdPI/hVXch6L24uPrjqG0lu6ElI2Of5W\n8G+8KS2wQ3ZyA7cU+s1y7ZOH1aWrDIyvvsFBmhZ/F2ynMFAjSFOwMblahUQB9Sw4\nbF6SlcvcjocumM6QsvgmvdP+YQqwM672fUh4mt080klIayvHfrh5U+UU7LYNIvxM\nqVKuVPo8QwIZGXBDbM/Rt2NfkgSaflPzoRLffoxTzDW11qK/pX498vfL+Fr/Qfkf\noXz0b/2QuqCbHwlMv7lvNYJm3gqw4h1FTNq/6530AvH/OGHctnnwCFz1rXVCOIeu\n2oH4crwCShxReh89g0qkHbTO4jKR++BV1hPZaY96gJzKQvxv340=\n=naac\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84f15c03cf0912fe3213a0b44aec27fbad4672c9",
          "sha": "84f15c03cf0912fe3213a0b44aec27fbad4672c9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/84f15c03cf0912fe3213a0b44aec27fbad4672c9"
        }
      ],
      "message": "kernel: Add chainstate load options for in-memory dbs in C header\n\nThis allows a user to run the kernel without creating on-disk files for\nthe block tree and chainstate indexes. This is potentially useful in\nscenarios where the user needs to do some ephemeral validation\noperations.\n\nOne specific use case is when linearizing the blocks on disk. The block\nfiles store blocks out of order, so a program may utilize the library\nand its header to read the blocks with one chainstate manager, and then\nwrite them back in order, and without orphans, with another chainstate\nmaanger. To save disk resources and if the indexes are not required once\ndone, it may be beneficial to keep the indexes in memory for the\nchainstate manager that writes the blocks back again.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:49Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-22T19:08:10Z"
      },
      "sha": "c3b589e14eb8e01be41f46d5159179b01a3e25bb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE3MTM0MWEzODkxMTE5ZDEyOWIzZDY3ZmQyMDIzZjQyYWU5ZDExNDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a71341a3891119d129b3d67fd2023f42ae9d1142",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a71341a3891119d129b3d67fd2023f42ae9d1142",
      "tree": {
        "sha": "b3dab0311754beba1dfc1f81dc87a0c00b5fd00c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3dab0311754beba1dfc1f81dc87a0c00b5fd00c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b3dab0311754beba1dfc1f81dc87a0c00b5fd00c\nparent c3b589e14eb8e01be41f46d5159179b01a3e25bb\nauthor TheCharlatan <seb.kung@gmail.com> 1717060948 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152571 +0100\n\nkernel: Add import blocks function to C header\n\nThe `kernel_import_blocks` function is used to both trigger a reindex,\nif the indexes were previously wiped through the chainstate load\noptions, or import the block data of a single block file.\n\nThe behaviour of the import can be verified through the test logs.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbsACgkQm3m0VpHb\nQXPBgw//f/q/k5e3EICAx50p3NvaXAI87oewuNhz70ZMPPqqkEUByIh6GFCRnE8k\nYn9nw5PoovSIg0J4m2gP3CH2yo10g2790fek8J4k7zfENbA/ygxkYwU38jw6KIm0\njmyovwjJlr59DTrVA0aYcIJzXd+73umg8U2jIbMeobuRIGrUxrwHEiJIFs9mSsvf\nCY+p+B9ipBCybvAith30gE5mTo4cOHYBL6n+A1JMa2mxkZ0iSl/B5cHnHH272Dsf\n47rHd3iS3PDyaoUUYBBTfmE0tNMW9GAsVOCe8EjgmQHUtD0IR+dJ1adPeCb0jN50\nG8zHq9kUCpJrOG3ryAtBMieXzaZkW94PPcP+o0DYNJPUEKgpDw8NjqRDVOWzuS4d\nX/ZTVHIjYplvVhd2dJeACm2Sz/S8JRJzhqPCWxBECuU/IkY6yZoJMsQp6Xyxe6Bg\nfffUW7LsfRGCmv+inj9GrzQEe7qsYsMS064wpc4rPqpqtZuWtaJXKaNeNYsumtNz\nxnyOdpf2zYG6udQ9gXVZT4CIfyJ4pFwYoRjIu+vFTNxc6nApQJRIG7yds8V97Hdo\n4pWdTP8tQalsL7ZJPwOD31CJ4un6dBtC/JEmuitmgEUmy3bdNj6z5SF25xOfy5Cj\nfnQda9Z3rC0z7aBTOysxcj1CVt3tOWXNa3sUDExbYpk6EHMJwag=\n=nOSs\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3b589e14eb8e01be41f46d5159179b01a3e25bb",
          "sha": "c3b589e14eb8e01be41f46d5159179b01a3e25bb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c3b589e14eb8e01be41f46d5159179b01a3e25bb"
        }
      ],
      "message": "kernel: Add import blocks function to C header\n\nThe `kernel_import_blocks` function is used to both trigger a reindex,\nif the indexes were previously wiped through the chainstate load\noptions, or import the block data of a single block file.\n\nThe behaviour of the import can be verified through the test logs.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:51Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-30T09:22:28Z"
      },
      "sha": "a71341a3891119d129b3d67fd2023f42ae9d1142"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRlOTc5ZmI1ZDNmNmIxZjBiODczNDczZjNjYTg0ZDNkNmRhYzg2ZDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e979fb5d3f6b1f0b873473f3ca84d3d6dac86d6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4e979fb5d3f6b1f0b873473f3ca84d3d6dac86d6",
      "tree": {
        "sha": "2d340173f414ba6df69e544062127e12a34e151f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d340173f414ba6df69e544062127e12a34e151f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2d340173f414ba6df69e544062127e12a34e151f\nparent a71341a3891119d129b3d67fd2023f42ae9d1142\nauthor TheCharlatan <seb.kung@gmail.com> 1717575640 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152572 +0100\n\nkernel: Add interrupt function to C header\n\nCalling interrupt can halt long-running functions associated with\nobjects that were created through the passed-in context.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZbwACgkQm3m0VpHb\nQXMfHBAAhviHRPXMGYOTHM02MJaKvcbePGrRGs+qERmzRzmMrQB9SPBqh6tHG2O6\nnWBR+c0OqD5OfwF3DOre9WxXO+HBtymaqY6ypSdks3nuckZcKXID25n80pfPObb+\nvY04SatnWCxmbWryrWUhWfiSnWvzzgA4UFF0gJ51sWWlvuTZS27j6OBs7Y7a8spx\nU6x2xacIf2Fc7q63lwJN13OClYo+Tbm6IZ+ykeZIYIweShUw4J6TwL7ldQWem04Q\n87NAtl+UOOMQUJQE14ii4LeL/FD2R35Pae1DOetPqtA6XkBy47oyzpS+VS2jDrUw\niUCTEjWPw9v8kWILhheqxk54nO9ZqPxm5i03SP2Mg9jk7L/s9guyCEjo+4ng3U7f\new1Z0EZaWzTzRqpswtK3QNP47wWGZb0WkayMqGIcqnk+amfxApykxo3Rkog9SCnG\nc+fvpNaxSp2DYVx/XyKk2up0BaevLe3EO7vygz7X7ahJsSezYh97y61TAFVpfLbc\nphcw7ETAv0AKX3Bo4GyxpZmV6XWW3URCfNv3lBcsbrVvSApKxbfO7ozZNe55wAvE\nHxy3E2ZjZCm8JRNtERbLoV1euhrFPd4UrpnWNNOBobs7W3G+GmgD/v5BDssrJAnt\nWa8kZ9CGxp8GypHSGlNTdhiInDmmjSNdFezW4aJfVZiNq5h+buQ=\n=ct5C\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a71341a3891119d129b3d67fd2023f42ae9d1142",
          "sha": "a71341a3891119d129b3d67fd2023f42ae9d1142",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a71341a3891119d129b3d67fd2023f42ae9d1142"
        }
      ],
      "message": "kernel: Add interrupt function to C header\n\nCalling interrupt can halt long-running functions associated with\nobjects that were created through the passed-in context.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:52Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-05T08:20:40Z"
      },
      "sha": "4e979fb5d3f6b1f0b873473f3ca84d3d6dac86d6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZkMWY1N2I1YzJiZDAzMmU5ODQwMDAwNTliMTI4OWQ0MmQxNzkwZjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d1f57b5c2bd032e984000059b1289d42d1790f6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6d1f57b5c2bd032e984000059b1289d42d1790f6",
      "tree": {
        "sha": "00849c0b566c929fb3c082cb05b8b73212935138",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00849c0b566c929fb3c082cb05b8b73212935138"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 00849c0b566c929fb3c082cb05b8b73212935138\nparent 4e979fb5d3f6b1f0b873473f3ca84d3d6dac86d6\nauthor TheCharlatan <seb.kung@gmail.com> 1717102788 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152574 +0100\n\nkernel: Add validation interface to C header\n\nThis adds the infrastructure required to process validation events. For\nnow the external validation interface only has support for the\n`BlockChecked` callback, but support for the other internal validation\ninterface methods can be added in the future.\n\nThe validation interface follows an architecture for defining its\ncallbacks and ownership that is similar to the notifications.\n\nThe task runner is created internally with a context, which itself\ninternally creates a unique ValidationSignals object. When the user\ncreates a new chainstate manager the validation signals are internally\npassed to the chainstate manager through the context.\n\nThe callbacks block any further validation execution when they are\ncalled. It is up to the user to either multiplex them, or use them\notherwise in a multithreaded mechanism to make processing the validation\nevents non-blocking.\n\nA validation interface can register for validation events with a\ncontext. Internally the passed in validation interface is registerd with\nthe validation signals of a context.\n\nThe BlockChecked callback introduces a seperate type for a non-owned\nblock. Since a library-internal object owns this data, the user needs to\nbe explicitly prevented from deleting it. In a later commit a utility\nwill be added to copy its data.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZb4ACgkQm3m0VpHb\nQXMzuhAAveWGOyM6bvL7H86Eqa6zyh04NpSc7gcvs91oWF9kz4S+uyxnHYQ57N2d\nwhs642eaNSR849Tps0BKhnEesaVqLN6G62P1HqZviOOsNE+nqwUQ/XkF9w68Lrxw\nb0PfC0NeHLVUbNkHJObojFHqVZhtZ2jwCY9unRwZb+CSuQ2yfl2IFQRyADv3WLRA\nu0YzWIYoDr1k9k21gGMnzyv1GXz1ETfj7wD8/tDFuQu2dLUbG6uD1V6F6j7j/Wxg\nXcba1l04FUl6K2unqdJSoPOp0DVmpHSfa/uxDNhLj+X0Ss/JyVh+/9rpukVkcUjm\njhG7wYegJWEaH24G7tfy9cqa0QtX8pws1/9dMTh8s5ld9GvikorFO53KUSwi1LqC\no5OBGz+IBc9Lt7/0X7XyGBtjlUnp54MUXxpsXV88OiiJBnKjIq9YXQCB3ai7JxYA\nZfUAf3xSrS/mgd/dGiGmge3RHr2opk9/NaBxvpcZIvWoHujjJsJxVwOMV8JjXv69\neCrxt0b9+Fx/43QhXt1DnknIWJ04nT00EFCKnBXweDvnKNRCpHPrE8IcPniK8pnX\n03bXBiKgVQ6/PTM+i6EXjNaGrjkgqGVdxIKHE9CqvDgDfC+31+Ptx/vQ7+ifUyy+\nbSaWs9HwX/FxDEFN7RcXmQnAOYztn5cmRTY57bYUf6E4zqgsGHE=\n=fbUm\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e979fb5d3f6b1f0b873473f3ca84d3d6dac86d6",
          "sha": "4e979fb5d3f6b1f0b873473f3ca84d3d6dac86d6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4e979fb5d3f6b1f0b873473f3ca84d3d6dac86d6"
        }
      ],
      "message": "kernel: Add validation interface to C header\n\nThis adds the infrastructure required to process validation events. For\nnow the external validation interface only has support for the\n`BlockChecked` callback, but support for the other internal validation\ninterface methods can be added in the future.\n\nThe validation interface follows an architecture for defining its\ncallbacks and ownership that is similar to the notifications.\n\nThe task runner is created internally with a context, which itself\ninternally creates a unique ValidationSignals object. When the user\ncreates a new chainstate manager the validation signals are internally\npassed to the chainstate manager through the context.\n\nThe callbacks block any further validation execution when they are\ncalled. It is up to the user to either multiplex them, or use them\notherwise in a multithreaded mechanism to make processing the validation\nevents non-blocking.\n\nA validation interface can register for validation events with a\ncontext. Internally the passed in validation interface is registerd with\nthe validation signals of a context.\n\nThe BlockChecked callback introduces a seperate type for a non-owned\nblock. Since a library-internal object owns this data, the user needs to\nbe explicitly prevented from deleting it. In a later commit a utility\nwill be added to copy its data.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:54Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-30T20:59:48Z"
      },
      "sha": "6d1f57b5c2bd032e984000059b1289d42d1790f6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQyMTNhMTJlM2IwZTVjMjRjNDFmYTkyNTQ5NTgyNDQ2Y2FlODNkZjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4213a12e3b0e5c24c41fa92549582446cae83df1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4213a12e3b0e5c24c41fa92549582446cae83df1",
      "tree": {
        "sha": "d31c79a6349c90fbd83a6aab7ea56868742f76e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d31c79a6349c90fbd83a6aab7ea56868742f76e5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d31c79a6349c90fbd83a6aab7ea56868742f76e5\nparent 6d1f57b5c2bd032e984000059b1289d42d1790f6\nauthor TheCharlatan <seb.kung@gmail.com> 1717155240 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152575 +0100\n\nkernel: Add functions for the block validation state to C header\n\nThese allow for the interpretation of the data in a `BlockChecked`\nvalidation interface callback. This is useful to get richer information\nin case a block failed to validate.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZb8ACgkQm3m0VpHb\nQXO7sw//Vlac0Mn2VfF/IDu0Iy6E6/Fyl9kiY2bXsTzP4Q+yG+7Pg9YYHF6xebUE\nId2LdD86MKvzXEbwg4gVm0qy9fI0/dhFVLIEV96EcKsF8ex0P+CqWdYR1ofEsd4B\nMZortvaDBNCqvWmt9tVDUaIpzXBTcO3l6SvvEnytrWRu5fHTi6iQn4NZjqZXOAcF\nn6wFZls8F3/TSryzmFsqEvVCBZ2rly4XPYZjKrfPelf06vsiHt/I6s77rzz/Xmcr\nN5xYEFw+Ap1uIOHsXstrgTunV9SPCR8v6t0yYZBRIB4Md0W/GlJHZTOQuvWVtRfk\nXGuZlurgSIute7o91CA14AcvJrYL1c/zFmmnSuIWWnZfu9X8QTmiKwlZfpxeu3D6\npE8Qn3PfX0SQLy70PAvWvOKWK3qB43cMSkvyyNFgYWdsIGwGIHEBOzce8TIq1r2s\ne/dGi7p1zDWapmI9lM6xBSWkIwsn5HNBHX52l+fumWT8DLW+iJW8swa+FoK52yWy\nBPd4qx1yXDIsGIISGAe8rLjm5qU5ClyDJH/mX5QVNsj7i8q5xSXHSUq8AuPNBG9N\nu7MrLbQfZuS9wLzrZkeWlVQINY/h2Kp6OKjSAbsVM5UvKMptiXqOQ12esHjHPdX1\nopM6PMgKpZTo3lT99da0wf1Dyi5plZjjnG4/r/gGHaICjQ+EIf0=\n=E83s\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d1f57b5c2bd032e984000059b1289d42d1790f6",
          "sha": "6d1f57b5c2bd032e984000059b1289d42d1790f6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6d1f57b5c2bd032e984000059b1289d42d1790f6"
        }
      ],
      "message": "kernel: Add functions for the block validation state to C header\n\nThese allow for the interpretation of the data in a `BlockChecked`\nvalidation interface callback. This is useful to get richer information\nin case a block failed to validate.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:55Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-31T11:34:00Z"
      },
      "sha": "4213a12e3b0e5c24c41fa92549582446cae83df1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBhMDE2ODY5MzkwYTFjM2U5ZmFiNDEwYWIyMzczZDVmZDJmNDJkMmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a016869390a1c3e9fab410ab2373d5fd2f42d2c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0a016869390a1c3e9fab410ab2373d5fd2f42d2c",
      "tree": {
        "sha": "44a8ac14c27e1f0be5b0e820867a6463569cbb45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44a8ac14c27e1f0be5b0e820867a6463569cbb45"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 44a8ac14c27e1f0be5b0e820867a6463569cbb45\nparent 4213a12e3b0e5c24c41fa92549582446cae83df1\nauthor TheCharlatan <seb.kung@gmail.com> 1717235572 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152578 +0100\n\nkernel: Add function for copying block data to C header\n\nThis adds functions for copying serialized block data into a user-owned\nvariable-sized byte array.\n\nUse it in the tests for verifying the implementation of the validation\ninterface's `BlockChecked` method.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZcIACgkQm3m0VpHb\nQXONfBAAnHc7G+oj/0nycI7qMjH4w72HS0eVLcxu14C9reUl/O56fURZNxU46QAU\nRjH6+/JpfRCVh70z/rmxZB1L2jbO/CGPLU4Tdgnp+VbdjikJsr4eSWgvWQ3dlilp\n4F0ghc13TxTt3tnmQpga+qqYLzsQMIlIlduwQrX1b4FO4hTuKow1jg6GoD+LZ3lI\nnfbq28OvtwzNphalp0VwEv3vkHZBqKhC8lpUWmEdEjEUj1FDhlckTc0SjPuhjMKp\nz0efmUhRFsK4EeUBy00f9RmTIFJqhUsm8CEDRbYEvRaX2JIQ1fRJp1hmw2OrKQvS\npX3zFrK6bC+pcp6D52CCucI8lqsGwEUgBIU4GRG0NGLYAqWAH8IsXSpjsw4ze8LN\nSIzzIvYkwsEkH+EcuIo645lWpz3/oLbSwpTVHtSY1XUJxPAU6nyEBoQQvDZ6wjKy\nr2Dvilvhwt0MxbHQ22U9tk/I2vTE6E5DiAT1r1bOMaNcblY3q7LYKv0x/HTxoFLw\nvaKz4tzrt6hTS38TH1u8ct9e1/EL74jUs968hOKtIVEL1yJ15N9oymGCFqBMfUCo\nsE+LrQ1zX62NhC1OR3vEvmwaf8+zhZlzBTlkr0U8VR8UmJVh73rsS5iJG1/pJB2G\nEvB3mGNbihNz9U/RvxrGomtotPgPalXbXBL+FPtdizCnJGglw7w=\n=b54i\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4213a12e3b0e5c24c41fa92549582446cae83df1",
          "sha": "4213a12e3b0e5c24c41fa92549582446cae83df1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4213a12e3b0e5c24c41fa92549582446cae83df1"
        }
      ],
      "message": "kernel: Add function for copying block data to C header\n\nThis adds functions for copying serialized block data into a user-owned\nvariable-sized byte array.\n\nUse it in the tests for verifying the implementation of the validation\ninterface's `BlockChecked` method.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:58Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-01T09:52:52Z"
      },
      "sha": "0a016869390a1c3e9fab410ab2373d5fd2f42d2c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNlODk3NDViYzY0YzA3YTg1MWMyYjdhZWQ3ZWE2NjM1YTI3Y2M2OTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce89745bc64c07a851c2b7aed7ea6635a27cc692",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ce89745bc64c07a851c2b7aed7ea6635a27cc692",
      "tree": {
        "sha": "725fe5de780c06339c1b455ea32f052de39e4b6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/725fe5de780c06339c1b455ea32f052de39e4b6b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 725fe5de780c06339c1b455ea32f052de39e4b6b\nparent 0a016869390a1c3e9fab410ab2373d5fd2f42d2c\nauthor TheCharlatan <seb.kung@gmail.com> 1717239811 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152579 +0100\n\nkernel: Add functions to read block from disk to C header\n\nThis adds functions for reading a block from disk with a retrieved block\nindex entry. External services that wish to build their own index, or\nanalyze blocks can use this to retrieve block data.\n\nThe block index can now be traversed from the tip backwards. This is\nguaranteed to work, since the chainstate maintains an internal block\ntree index in memory and every block (besides the genesis) has an\nancestor.\n\nThe user can use this function to iterate through all blocks in the\nchain (starting from the tip). Once the block index entry for the\ngenesis block is reached a nullptr is returned if the user attempts to\nget the previous entry.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZcMACgkQm3m0VpHb\nQXN1eg//S3GSK5jL/p+UFzQdOuStkNbh9kElz0Wi02okObqHfpVZ3NLs04hBAeQH\ne/bCEPi4SNghd3uSaza7bdJrsqZ7ELsa3xHEBUTVZj+8sO8l10tqG0Zri0qu9EW3\nDrytepOf0KMbSt4ktimDb0R9mnDEDS5kV32qVHLXrrkTMAfVh4f5/YKvxWXqE2Fr\ns70VruFHfay/XfpDTGQZtWzt7YmsaggH2kOMuL4zpprBdLWeetPl8n+wL9Z4dcqX\nHihevwA/g5jaBvefm9lLLGhJM9FIITlpMd9nuI2AYwghYB7RlQ9dmeswsZ6rmDn6\n84jBgVRxORHtcbOgs1X6l92yQRE25cmVeuf/N6P7ufyW5P7v5M5KEhaFPe/mqB/1\n5EF5YjfgtNU7UX3w56nNwDM75l26CGgWo/Wc0iMD/hbGfMfPoR6ESRPGhCEp9JK0\nAIOZlaPz8s+bc7+S5lGqoSFuyU2c+MTHucuqzwgzuti3gwx2BU7BZH8sekhSZ6sX\nFvzW1wc3436JBdKF3qtw5i8lVTCawPGMrEp+KPT2/Qv6GdfkX0rNRkDTCquW+TVe\n2ccz2Sk8CLyUQ60jFzh7dKgAWI22ip6+5euQPLQlpo2ptlHPwYGsb1QtjiKDLXK8\nVnTqhz0Z9miA/4kuEaDIEwy0rGIFSD1WRSpoW8ynyaJXOBLBpsU=\n=GvEx\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a016869390a1c3e9fab410ab2373d5fd2f42d2c",
          "sha": "0a016869390a1c3e9fab410ab2373d5fd2f42d2c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0a016869390a1c3e9fab410ab2373d5fd2f42d2c"
        }
      ],
      "message": "kernel: Add functions to read block from disk to C header\n\nThis adds functions for reading a block from disk with a retrieved block\nindex entry. External services that wish to build their own index, or\nanalyze blocks can use this to retrieve block data.\n\nThe block index can now be traversed from the tip backwards. This is\nguaranteed to work, since the chainstate maintains an internal block\ntree index in memory and every block (besides the genesis) has an\nancestor.\n\nThe user can use this function to iterate through all blocks in the\nchain (starting from the tip). Once the block index entry for the\ngenesis block is reached a nullptr is returned if the user attempts to\nget the previous entry.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:02:59Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-01T11:03:31Z"
      },
      "sha": "ce89745bc64c07a851c2b7aed7ea6635a27cc692"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdhYzM1ZjdlMDViNzg4Njk4NjNkOTY0NzAyMjUwM2QxZDE4OWZlY2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ac35f7e05b78869863d9647022503d1d189fecd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7ac35f7e05b78869863d9647022503d1d189fecd",
      "tree": {
        "sha": "d5b7ec0443d43155e3c252098e77b55f206df26b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5b7ec0443d43155e3c252098e77b55f206df26b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d5b7ec0443d43155e3c252098e77b55f206df26b\nparent ce89745bc64c07a851c2b7aed7ea6635a27cc692\nauthor TheCharlatan <seb.kung@gmail.com> 1717246076 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152581 +0100\n\nkernel: Add function to read block undo data from disk to C header\n\nThis adds functions for reading the undo data from disk with a retrieved\nblock index entry. The undo data of a block contains all the spent\nscript pubkeys of all the transactions in a block.\n\nIn normal operations undo data is used during re-orgs. This data might\nalso be useful for building external indexes, or to scan for silent\npayment transactions.\n\nInternally the block undo data contains a vector of transaction undo\ndata which contains a vector of the spent outputs. For this reason, the\n`kernel_get_block_undo_size(...)` function is added to the header for\nretrieving the size of the transaction undo data vector, as well as the\n`kernel_get_transaction_undo_size(...) function for retrieving the size\nof each spent outputs vector contained within each transaction undo data\nentry. With these two sizes the user can iterate through the undo data\nby accessing the transaction outputs by their indeces with\n`kernel_get_undo_output_by_index`. If an invalid index is passed in, the\n`kernel_ERROR_OUT_OF_BOUNDS` error is returned again.\n\nThe returned `kernel_TransactionOutput` is entirely owned by the user\nand may be destroyed with the `kernel_transaction_output_destroy(...)`\nconvenience function.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZcUACgkQm3m0VpHb\nQXNn5w/9Ga78W6eVI4kEKKKOt0jhil1kbd3kXzOFXk4Y+416AROJ923GEL/Lz0Pt\n7ioJV25yxBv28bs+sWV26K4f7cRVEBde1L39b5qPczbmjdyeh2lyMxVRsdjtez85\nDL5VIcAs0E/Yns003uV17f4PM4zSveNdh9W3PkYZXy9m2RyZ7LkLv3sJM7AfHX8/\nu08P/oSv3WqThdgQg+Cohysas2PxC7GK0VcfwMREDElgjLR0C/sJAAJKRdGfwPfH\nlTCuWgms1YjzdUPF77PdpHfy+6BiE4E3LisPLTbkZbgKFj26qs4p/6Z0VfOGNwhf\nb8jd4syD+c3pIx1/asjbc3/zizw9w/Hn9X+88qfG7nqb45SO/aqHYEl4F47pX5AQ\nqFLsQOFdlec1TfJGudVNrPNtykKpi5chyrCFIRCjhShikqQzhG6U+K1yxmekYTGa\npQSWJRBPyvqU2HGUHs1ITqHl3JfP3tXyTh7mSvZKxAXdvVRTEzVh1bTs243Ru54J\nK/DPK5gH8wGEP3N5SS016EEgSkOMF7gjxtYRbAA4H0wwyobOAlGHMPiylUSfAs0p\ns/v2k4ERb9rjKe/w4lT2BFQ4tvCUexDT7Nu5xiNMmy70beRQUFTCF5EnM7oQEQ8r\nV8EjF+3A3DGbPshiKeRSMjD46QM2cstMJ6zN0H/zwLILqYQa6rw=\n=6P3D\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce89745bc64c07a851c2b7aed7ea6635a27cc692",
          "sha": "ce89745bc64c07a851c2b7aed7ea6635a27cc692",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ce89745bc64c07a851c2b7aed7ea6635a27cc692"
        }
      ],
      "message": "kernel: Add function to read block undo data from disk to C header\n\nThis adds functions for reading the undo data from disk with a retrieved\nblock index entry. The undo data of a block contains all the spent\nscript pubkeys of all the transactions in a block.\n\nIn normal operations undo data is used during re-orgs. This data might\nalso be useful for building external indexes, or to scan for silent\npayment transactions.\n\nInternally the block undo data contains a vector of transaction undo\ndata which contains a vector of the spent outputs. For this reason, the\n`kernel_get_block_undo_size(...)` function is added to the header for\nretrieving the size of the transaction undo data vector, as well as the\n`kernel_get_transaction_undo_size(...) function for retrieving the size\nof each spent outputs vector contained within each transaction undo data\nentry. With these two sizes the user can iterate through the undo data\nby accessing the transaction outputs by their indeces with\n`kernel_get_undo_output_by_index`. If an invalid index is passed in, the\n`kernel_ERROR_OUT_OF_BOUNDS` error is returned again.\n\nThe returned `kernel_TransactionOutput` is entirely owned by the user\nand may be destroyed with the `kernel_transaction_output_destroy(...)`\nconvenience function.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:03:01Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-01T12:47:56Z"
      },
      "sha": "7ac35f7e05b78869863d9647022503d1d189fecd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc1OTYxZmE4NTAwN2Q4ZDk1ZGUyYTcwODcxYTg4NTkwZWU2OWQ4NGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75961fa85007d8d95de2a70871a88590ee69d84d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/75961fa85007d8d95de2a70871a88590ee69d84d",
      "tree": {
        "sha": "abbd0bd28071261ccf6c55920e7c6bf589f4a9f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abbd0bd28071261ccf6c55920e7c6bf589f4a9f1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree abbd0bd28071261ccf6c55920e7c6bf589f4a9f1\nparent 7ac35f7e05b78869863d9647022503d1d189fecd\nauthor TheCharlatan <seb.kung@gmail.com> 1717617940 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152582 +0100\n\nkernel: Add block index utility functions to C header\n\nAdds further functions useful for traversing the block index and\nretrieving block information.\n\nThis includes getting the block height and hash.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZcYACgkQm3m0VpHb\nQXMW4hAArqNLCnRMuW6KHHJ8Pp1THMtShepDSTEvLB1DvEngdk88SX04lcj6DYZq\nokf+k8Z6a+EucV4e+yeqxZVRWgOS3BmZ7DLYBDNa8TiwzKkelEvzcErD2neyYF0W\nH8u+4jJ2HX7++CFZkDnNppgyJkM1KgHaJyUJyAmUegtQmPUy2dxvynTDKbw0rc/Q\nCgi/wGJHky1iZVE3KYQJZg/4262z0hlcCRlYOt62GL1DSd6M9Ic0GTLqETuWDEzV\naL0s/yc7lfcethaVwtU+CytVAxaecgFO28EkB2rgXLjILYlhKn0HyulqiWqRF+u/\nlMsyF+64z+mywGQOLwpbO0qhQ5+gn2cUbBo2IHv9WfT4Ann6YJvO/KjmmISzBQ5V\nkovy7ZPMNlgoX7e+mOKvVmFLUMTA8xYQNJYf8qfdR4GcSCz9i9S/zAyOtMPwkwov\nI1nDIYw+od8wLKAoZNFX/fTRFfPjFbwX2NZPsdwqAW3i27NBJYk9lkOSFAtXirrP\nMiE1Wh8wpcZRGN1Y/ZQhfQA7qVbTw/Fgy9e85adw9HdONCUC8322E3YDrS/9yspP\nzxxNDnbMr6Uiwub2HQRyNiqH6Mxx8RL2YwSgXAPrUu1G0FqopnfaWbL7JCicsbfC\nF4XuTd1RjUgSS2lkR1WYRabKK9oD8XmNetwbJym0+pnpqhZ8ksc=\n=K15w\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ac35f7e05b78869863d9647022503d1d189fecd",
          "sha": "7ac35f7e05b78869863d9647022503d1d189fecd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7ac35f7e05b78869863d9647022503d1d189fecd"
        }
      ],
      "message": "kernel: Add block index utility functions to C header\n\nAdds further functions useful for traversing the block index and\nretrieving block information.\n\nThis includes getting the block height and hash.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:03:02Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-05T20:05:40Z"
      },
      "sha": "75961fa85007d8d95de2a70871a88590ee69d84d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBmMGZlMzUwYWRjMTI3MGQwMjRmMTcwY2JjMjllODZkZjFlYjU1M2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f0fe350adc1270d024f170cbc29e86df1eb553f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0f0fe350adc1270d024f170cbc29e86df1eb553f",
      "tree": {
        "sha": "ae450e598ef11b825136c20ebdf2797e99779204",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae450e598ef11b825136c20ebdf2797e99779204"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ae450e598ef11b825136c20ebdf2797e99779204\nparent 75961fa85007d8d95de2a70871a88590ee69d84d\nauthor TheCharlatan <seb.kung@gmail.com> 1731852715 +0100\ncommitter TheCharlatan <seb.kung@gmail.com> 1743152584 +0100\n\nkernel: Add functions to get the block hash from a block\n\nThis is useful for a host block processing feature where having an\nidentifier for the block is needed. Without this, external users need to\nserialize the block and calculate the hash externally, which is less\nefficient.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmZcgACgkQm3m0VpHb\nQXP1eRAAgtytDBuf0cHDDq/FTTrO6gI8kkrBvxX3gIrI3KSI4dgkS041w6G4ID82\nwfs+8vnoBiIiFIfz7n/3vxOaTzQ9VoyJ/IuHR7b5EFKhgLBZRvatQlCxkBdlQCdO\nUq9x4FFnJV/IXsS7QpPX4fsTiDzjJ8lt7dzmBliYVZ76lWPEaugqArQuyxnghyeP\niDFVCIolI2EQnj+iSHtZ4CbgWhtSe3MtaldIuEiVVTCnq6PEb5ganM4sHVOfz/Js\nzyIwnnDH2BgLoVU0x17RZgLv3caG5SncBuZ+zlJJh0BZPKdTeBnKZKiR+ay4sV+L\njwlGmGmli1FVrpqNXzpXiqwCLnU0wGSjhHBC4G+LUPh7R73kz4GiWj22xV4BrURC\nLWThgs/zGjBx50UOdQlz1cSqnmtjSBydv/IwZMqR1dXLjJ2lBOixAt0ZOEbQd/m2\nv30WyWHc+oUrEQlXNOog2CdO+guS5rscofCOaBERUzGzd4r8uVF5V/z0kveKpD7O\n9YTNeX698Xhi8/S3/EdRueIDq7dQqeP7tddiUM6DCl4jHuP49cvVRlOfhekC7uQ3\n3jqH1I6V5foalqnsILiMWs6rRGdDhYugr+TrzjdHJ0iYJa91VJyhKP/oPJIhz8MS\njgEVwLI+SUTi6egihxg/0RSEFcux81RZJUgKXZtSuLksp06xG+8=\n=IyBq\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75961fa85007d8d95de2a70871a88590ee69d84d",
          "sha": "75961fa85007d8d95de2a70871a88590ee69d84d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/75961fa85007d8d95de2a70871a88590ee69d84d"
        }
      ],
      "message": "kernel: Add functions to get the block hash from a block\n\nThis is useful for a host block processing feature where having an\nidentifier for the block is needed. Without this, external users need to\nserialize the block and calculate the hash externally, which is less\nefficient.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:03:04Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-17T14:11:55Z"
      },
      "sha": "0f0fe350adc1270d024f170cbc29e86df1eb553f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQyN2QwNWU5YjcxNjY0ZDJmNjcwOGI0ZGZlNjc0ZjhjNmQ5NTNhMDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/427d05e9b71664d2f6708b4dfe674f8c6d953a00",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/427d05e9b71664d2f6708b4dfe674f8c6d953a00",
      "tree": {
        "sha": "fccd26845f0a5b66e2c273bd6761c427d89f4310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fccd26845f0a5b66e2c273bd6761c427d89f4310"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fccd26845f0a5b66e2c273bd6761c427d89f4310\nparent 0f0fe350adc1270d024f170cbc29e86df1eb553f\nauthor TheCharlatan <seb.kung@gmail.com> 1718382788 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1743154194 +0100\n\nkernel: Add pure kernel bitcoin-chainstate\n\nThis showcases a re-implementation of bitcoin-chainstate only using the\nkernel C++ API header.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmbBIACgkQm3m0VpHb\nQXO31BAAhm/OrVpzzsgaA+B1T3YaQMoALmT0O6lLOhGMhSY7eOjUukRlZAkXRNnC\nWHNyfJLQ1y60ZCHsqUtFQytxdEFqFyV82aGWo4E5AYVOB5WInJ152b+vMtZFGwaU\n2IKTL4rwIr7yovavTw+Q/KBfhhhA0MG/Sc5+pYEq26uWYWQ6xhHfF0xIUD4xOjOy\nnDodGCSkGH+i2AP75I49QeegeGR95gNP6oqlLoQRlYIqLyaiaRZllfL9Cfd+sZpO\n6/F7Yu8VNpE+OR29VIb9UKgmEohpvFLIEVQXVuqGTcAA8kXbyppmbNJwAzn7kxYN\n/t30ZKWz9S/IforFaXPg+FPwkwSsLa4gcVbJPmFaBR+gJJtq6G/b1kbDxFrdazIL\nrvpdiTof7LrPHaTbnIYvqOYA0F4xIPfNeQC2nAbRZA3nXp7uABqmjRBFfHqe8uXe\nuy1k+bUGB4Ol+MZmzq1PYStHdu3htQFRc6EF9HM+UvC4Tm5ZC2wMv2tkUL40UW4l\nPLtT9Ypyh+FkzgafalpCCbirBUlTb7GMJgjvb1qzNv1KujKZZOG5PTjaYAzCHORZ\nBsWvOPejLwa0xR60e5TJK1lVtvY781/zpCWdPF6qrge1XvgIgshnDn78V1hI1z+4\nzlUifdcN9znF6p6YMbvKn2aF0sf5+SZw/7LsfIFID7BZDTBWlGI=\n=Roxu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f0fe350adc1270d024f170cbc29e86df1eb553f",
          "sha": "0f0fe350adc1270d024f170cbc29e86df1eb553f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0f0fe350adc1270d024f170cbc29e86df1eb553f"
        }
      ],
      "message": "kernel: Add pure kernel bitcoin-chainstate\n\nThis showcases a re-implementation of bitcoin-chainstate only using the\nkernel C++ API header.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:29:54Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-14T16:33:08Z"
      },
      "sha": "427d05e9b71664d2f6708b4dfe674f8c6d953a00"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEwZDI0ZmY5YTkzMzc3NzBkYWU2NjhkN2IwZWEwYTZlNjJlZDA4NmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "tree": {
        "sha": "89e85373a83d584e45bd0f0affd524f2542e923c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89e85373a83d584e45bd0f0affd524f2542e923c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 89e85373a83d584e45bd0f0affd524f2542e923c\nparent 427d05e9b71664d2f6708b4dfe674f8c6d953a00\nauthor TheCharlatan <seb.kung@gmail.com> 1742987368 +0100\ncommitter TheCharlatan <seb.kung@gmail.com> 1743154299 +0100\n\nkernel: Add Purpose section to header documentation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmfmbHsACgkQm3m0VpHb\nQXMCag//cuhkdYKzqChNncmejmpF35oauICgG4Y0qhTb6xBPuEZ2Vgq8ez8Dus+L\nG7RnlJeFaAxIeHwwcs35ECOJI/gwq5CEzoV6yBcOvk8glEF0xpc9Y08NJMRC1aGM\nsU7FcbEuYR5EfInQ1JHSOk6FTpZXp2CWr0I1oKyUFJUc/FpK23c1NXHmbREcsfhE\nl6lmiT25K+rTBO6ECHHZVbFY0iKI2z3RU1HTS9BJsGVNbzweJDrHjw3r0NIqwfgR\nDspxHqULiqKTiiixB1UAkKK3V/R32UgCjNqiO8S4OganKspdqfwizh03u/O0xHCx\nb+aagwXiT24Weg8U+96C1O4jC5Mj7nmOCLqWSy7INlwQbkw0KvU/FJN/Mk49rq1y\nsCww5E8+LbzW542r1dBhoyuSx0Pi7bWMAEBk1OyZ585b+qHsaYgpexzbAaBnt5oG\nGwxAGJdiPNwneSeSVK0A07ABtlfeBnX0ux9r8BLB+88aw2i05yfqIoyXlN4MgdAF\nlGGrMEQJRlaDmsLBomlLekBg3Q6JYsXiIq/HqTsYRQbEnoMa6Ovul7dswt3Qcm5s\nqkOkuFtwUk2zCTzm/O4iTGJLOOdx0bRlbiHVOiipNMGX+RNmGPCtjP7E4xZ5i5+N\ntzJK4+SRzhDJlX0WrTq4Ny1eEap6tU1FdJQySkq7fvbmI/RJszc=\n=AFsJ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/427d05e9b71664d2f6708b4dfe674f8c6d953a00",
          "sha": "427d05e9b71664d2f6708b4dfe674f8c6d953a00",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/427d05e9b71664d2f6708b4dfe674f8c6d953a00"
        }
      ],
      "message": "kernel: Add Purpose section to header documentation",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-28T09:31:39Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-03-26T11:09:28Z"
      },
      "sha": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17028809067,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAP2_wFr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17028809067",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "created_at": "2025-03-28T09:40:40Z"
    },
    {
      "event": "commented",
      "id": 2760729847,
      "node_id": "IC_kwDOABII586kjWT3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2760729847",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T09:40:45Z",
      "updated_at": "2025-03-28T09:40:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 97d1edcdafe074e910ed647dcb6beedd24744b17 -> a0d24ff9a9337770dae668d7b0ea0a6e62ed086a ([kernelApi_33](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_33) -> [kernelApi_34](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_34), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_33..kernelApi_34))\r\n\r\n* Integrated the new `bitcoin-chainstate` functional tests from #32145 to demonstrate that it is still working.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2760729847",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754989437",
      "pull_request_review_id": 2297633388,
      "id": 1754989437,
      "node_id": "PRRC_kwDOABII585omwN9",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ */\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_TX_SIZE_MISMATCH, //!< The provided tx_to_len argument does not match the actual size of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_TX_DESERIALIZE, //!< The provided tx could not be de-serialized.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * A helper struct for a single transaction output.\n+ */\n+typedef struct {\n+    int64_t value;\n+    const unsigned char* script_pubkey;\n+    size_t script_pubkey_len;\n+} kernel_TransactionOutput;\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 108,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "63a83b8dad279beaa2f9f6ac2677c56c300300fe",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit / meta discussion: even though it'll make things more verbose, I think it might be worth referring to flags with their full name to make it easier for users to find them? I.e. \"If the witness flag is set\" would become \"if kernel_SCRIPT_FLAGS_VERIFY_WITNESS is set in `flags`\".\r\n\r\n",
      "created_at": "2024-09-11T15:36:58Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1754989437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754989437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757015877",
      "pull_request_review_id": 2297633388,
      "id": 1757015877,
      "node_id": "PRRC_kwDOABII585oue9F",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I like that we're using this guard. Do you see a downside to making it variadic?\r\n\r\n(Should be a pretty trivial rebase with e.g. `for i in {1..3}; do sed -i -E \"s/BITCOINKERNEL_ARG_NONNULL\\(([^)]+)\\) BITCOINKERNEL_ARG_NONNULL\\(([0-9]+)\\)/BITCOINKERNEL_ARG_NONNULL(\\1, \\2)/\" ./src/kernel/bitcoinkernel.h; done`)",
      "created_at": "2024-09-12T14:43:52Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757015877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757015877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757049107",
      "pull_request_review_id": 2297633388,
      "id": 1757049107,
      "node_id": "PRRC_kwDOABII585ounET",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 53,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there any benefit to documenting the built-in static constant kernel context in the header documentation? If I understand correctly, that's an implementation detail and not relevant to the user? If so, I think we should\r\n- only talk about the non-static context in `bitcoinkernel.h`, so that its meaning is unambiguous to the user\r\n- consistently refer to the static context as \"static context\" wherever it is documented, as to not make me question everything whenever I come across an unqualified context reference\r\n\r\nIf there is merit to documenting the static context in the header, I think it should be more of a footnote than the very first item in the documentation?",
      "created_at": "2024-09-12T14:59:08Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757049107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757049107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 46,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757065221",
      "pull_request_review_id": 2297633388,
      "id": 1757065221,
      "node_id": "PRRC_kwDOABII585ourAF",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 44,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there benefit to this stand-alone Context documentation, since we already have (and could expand on/merge with) the `kernel_Context` documentation? I think perhaps a more useful alternative would be to start the documentation with a minimal example on how to use the kernel (or a non-code \"getting started\" guide), which would inevitably include/reference the `kernel_Context`, providing users a good starting point on which documentation to read first?",
      "created_at": "2024-09-12T15:04:45Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757065221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757065221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757105125",
      "pull_request_review_id": 2297633388,
      "id": 1757105125,
      "node_id": "PRRC_kwDOABII585ou0vl",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 77,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find this phrasing a bit confusing. Is this a correct replacement?\r\n\r\n```suggestion\r\n * A function that takes pointer arguments makes no assumptions on their lifetime. Once the function\r\n * returns the user can safely de-allocate the memory owned by those pointers.\r\n```",
      "created_at": "2024-09-12T15:25:15Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757105125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757105125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 76,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757108471",
      "pull_request_review_id": 2297633388,
      "id": 1757108471,
      "node_id": "PRRC_kwDOABII585ou1j3",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 80,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1) What's \"it\"?\r\n\r\n2) I think adopting and sticking to a clear definition of MUST, MAY, SHOULD, ... would be appropriate here? E.g. in this case, I think they \"MUST\" not be de-allocated by the user, rather than \"SHOULD\"?",
      "created_at": "2024-09-12T15:27:07Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757108471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757108471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848821020",
      "pull_request_review_id": 2297633388,
      "id": 1848821020,
      "node_id": "PRRC_kwDOABII585uMsUc",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options,\n+    const kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * Destroy the chainstate manager.\n+ */\n+void kernel_chainstate_manager_destroy(kernel_ChainstateManager* chainstate_manager, const kernel_Context* context);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 746,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What's the point of the `context` parameter - it seems unused, and inconsistent with the other `_destroy` functions?",
      "created_at": "2024-11-19T18:01:27Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1848821020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848821020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 752,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848822043",
      "pull_request_review_id": 2297633388,
      "id": 1848822043,
      "node_id": "PRRC_kwDOABII585uMskb",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options,\n+    const kernel_Context* context",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 740,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this is the only place where `context` is not the first option, would be nice for consistency?",
      "created_at": "2024-11-19T18:02:22Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1848822043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848822043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 740,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848935049",
      "pull_request_review_id": 2297633388,
      "id": 1848935049,
      "node_id": "PRRC_kwDOABII585uNIKJ",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 622,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There are a few places, like here, where we expose modifier functions that are (quasi) required to be ran before initializing another object. An alternative approach would be to extend the `kernel_context_options_create` to take a (nullable) `kernel_ChainParameters*`, and remove these ~unsafe modifiers altogether? I think that would have the benefit of:\r\n- removing a whole category of bugs where users set options at the wrong time (i.e. too late), silently leading to buggy behaviour\r\n- making it easier to see which options can (should) be set, without having to first have read the entire documentation\r\n\r\nThis concern also applies to e.g.:\r\n- `kernel_context_options_set_notifications`\r\n- `kernel_validation_interface_register`",
      "created_at": "2024-11-19T19:18:01Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1848935049",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848935049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849036598",
      "pull_request_review_id": 2446622041,
      "id": 1849036598,
      "node_id": "PRRC_kwDOABII585uNg82",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options,\n+    const kernel_Context* context",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 740,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": 1848822043,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, I think it is good to get these little things right.",
      "created_at": "2024-11-19T20:47:29Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849036598",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849036598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 740,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849037936",
      "pull_request_review_id": 2446622041,
      "id": 1849037936,
      "node_id": "PRRC_kwDOABII585uNhRw",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options,\n+    const kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * Destroy the chainstate manager.\n+ */\n+void kernel_chainstate_manager_destroy(kernel_ChainstateManager* chainstate_manager, const kernel_Context* context);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 746,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": 1848821020,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Similarly to how the context is passed to the other chainman related functions, it is there to guarantee that it is still around when destroying the chainman. The reason for this is that there may be error notification callbacks issued during destruction.",
      "created_at": "2024-11-19T20:48:48Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849037936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849037936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 752,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849046061",
      "pull_request_review_id": 2446622041,
      "id": 1849046061,
      "node_id": "PRRC_kwDOABII585uNjQt",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 44,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757065221,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I did not think that much about order here, but I do think having this section on the context is a good idea. The key is that the user is not required to instantiate the context for using some parts of the library (and I think this is important enough to not just make it a footnote). The user-instantiated context is only really required when interacting with the \"stateful\" endpoints. Besides, it may be relevant to know what the library is instantiating internally in case there is some sort of conflict.\r\n\r\nThere is an exception here with the validation interface, and I've taken several attempts to come up with a nice way to tie it into the option pattern as well. I'll take a stab at it again soon.",
      "created_at": "2024-11-19T20:56:30Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849046061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849046061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849053726",
      "pull_request_review_id": 2446622041,
      "id": 1849053726,
      "node_id": "PRRC_kwDOABII585uNlIe",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 622,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": 1848935049,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is good the way it is now. The options get instantiated empty and may be populated by the user. The actual object only gets configured once by the options during its instantion. It can't be changed later on, so there is no concern that users could set something at the wrong time. Having to set options as arguments in their creation function is not a clear win in my eyes either. There are use-cases, for example using the kernel only as a data reader, where the notifications are useless. Likewise defaulting to mainnet seems sane to me too. It also does not integrate well with the \"builder pattern\" which is common in a bunch of other languages.",
      "created_at": "2024-11-19T21:04:02Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849053726",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849053726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849071009",
      "pull_request_review_id": 2446622041,
      "id": 1849071009,
      "node_id": "PRRC_kwDOABII585uNpWh",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757015877,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "When I apply this to the first commit I get:\r\n```\r\nIn file included from /home/drgrid/bitcoin/src/test/kernel/test_kernel.cpp:5:\r\n/home/drgrid/bitcoin/src/kernel/bitcoinkernel.h:201:32: error: too many arguments provided to function-like macro invocation\r\n  201 | ) BITCOINKERNEL_ARG_NONNULL(1, 3);\r\n      |                                ^\r\n/home/drgrid/bitcoin/src/kernel/bitcoinkernel.h:34:9: note: macro 'BITCOINKERNEL_ARG_NONNULL' defined here\r\n   34 | #define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\r\n      |         ^\r\n/home/drgrid/bitcoin/src/kernel/bitcoinkernel.h:201:3: error: expected function body after function declarator\r\n  201 | ) BITCOINKERNEL_ARG_NONNULL(1, 3);\r\n      |   ^\r\n```\r\nWhich makes sense, because the macro only expects one argument. I'm not sure how safe it is to make it take a string or a list instead.",
      "created_at": "2024-11-19T21:20:48Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849071009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849071009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849072061",
      "pull_request_review_id": 2446622041,
      "id": 1849072061,
      "node_id": "PRRC_kwDOABII585uNpm9",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 80,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757108471,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Improved this a bit and good point with the more precise language.",
      "created_at": "2024-11-19T21:21:51Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849072061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849072061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849072214",
      "pull_request_review_id": 2446622041,
      "id": 1849072214,
      "node_id": "PRRC_kwDOABII585uNppW",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 77,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757105125,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, taken.",
      "created_at": "2024-11-19T21:22:00Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849072214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849072214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 76,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849075583",
      "pull_request_review_id": 2446622041,
      "id": 1849075583,
      "node_id": "PRRC_kwDOABII585uNqd_",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ */\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_TX_SIZE_MISMATCH, //!< The provided tx_to_len argument does not match the actual size of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_TX_DESERIALIZE, //!< The provided tx could not be de-serialized.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * A helper struct for a single transaction output.\n+ */\n+typedef struct {\n+    int64_t value;\n+    const unsigned char* script_pubkey;\n+    size_t script_pubkey_len;\n+} kernel_TransactionOutput;\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 108,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "63a83b8dad279beaa2f9f6ac2677c56c300300fe",
      "in_reply_to_id": 1754989437,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, I added your suggestion.",
      "created_at": "2024-11-19T21:25:25Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849075583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849075583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849082933",
      "pull_request_review_id": 2446696897,
      "id": 1849082933,
      "node_id": "PRRC_kwDOABII585uNsQ1",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 53,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757049107,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See my [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849046061).",
      "created_at": "2024-11-19T21:32:31Z",
      "updated_at": "2024-11-19T21:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849082933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849082933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 46,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849132153",
      "pull_request_review_id": 2446777235,
      "id": 1849132153,
      "node_id": "PRRC_kwDOABII585uN4R5",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757015877,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, I forgot to include the diff which updates the macro (and 1 instance to show it compiles):\r\n\r\n<details>\r\n<summary>git diff on 6c9121f790</summary>\r\n\r\n```diff\r\ndiff --git a/src/kernel/bitcoinkernel.h b/src/kernel/bitcoinkernel.h\r\nindex 9e6bf127db..67248349e2 100644\r\n--- a/src/kernel/bitcoinkernel.h\r\n+++ b/src/kernel/bitcoinkernel.h\r\n@@ -31,9 +31,9 @@\r\n #define BITCOINKERNEL_WARN_UNUSED_RESULT\r\n #endif\r\n #if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\r\n-#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\r\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\r\n #else\r\n-#define BITCOINKERNEL_ARG_NONNULL(_x)\r\n+#define BITCOINKERNEL_ARG_NONNULL(...)\r\n #endif\r\n \r\n #ifdef __cplusplus\r\n@@ -522,7 +522,7 @@ bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\r\n     unsigned int input_index,\r\n     unsigned int flags,\r\n     kernel_ScriptVerifyStatus* status\r\n-) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\r\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\r\n \r\n /**\r\n  * @brief This disables the global internal logger. No log messages will be\r\n\r\n```\r\n</details>\r\n\r\nBased on https://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html, variadic macros should be standard for C99, and GCC documents accepting multiple indexes: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html",
      "created_at": "2024-11-19T22:25:32Z",
      "updated_at": "2024-11-19T22:28:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849132153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849132153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850657572",
      "pull_request_review_id": 2448664774,
      "id": 1850657572,
      "node_id": "PRRC_kwDOABII585uTssk",
      "diff_hunk": "@@ -0,0 +1,1190 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of the callback. They must not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 717,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "6c9121f7907262b2bf065a7ceeb8bca620060a7f",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: according to the `worker_threads_num`, 0 is accepted too:\r\n> Zero means no parallel verification.\r\n\r\n```suggestion\r\n *                           used for validation. The number must not be negative. When set to zero, no parallel verification is done.\r\n```",
      "created_at": "2024-11-20T16:42:13Z",
      "updated_at": "2024-11-25T21:41:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1850657572",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850657572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 718,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850697300",
      "pull_request_review_id": 2449240449,
      "id": 1850697300,
      "node_id": "PRRC_kwDOABII585uT2ZU",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757015877,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, decided to take this. I was a bit careful here, because I lifted the check from secp, which also does not use variadic args: https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1.h#L174. But thinking a bit more about it, I could not come up with a good reason not to, so took your suggestion.",
      "created_at": "2024-11-20T17:06:26Z",
      "updated_at": "2024-11-20T17:06:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1850697300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850697300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1852510169",
      "pull_request_review_id": 2448664774,
      "id": 1852510169,
      "node_id": "PRRC_kwDOABII585uaw_Z",
      "diff_hunk": "@@ -0,0 +1,1190 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of the callback. They must not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    const kernel_Context* context,\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * Destroy the chainstate manager.\n+ */\n+void kernel_chainstate_manager_destroy(kernel_ChainstateManager* chainstate_manager, const kernel_Context* context);\n+\n+/**\n+ * @brief Creates a new validation interface for consuming events issued by the\n+ * chainstate manager. The interface should be created and registered before the\n+ * chainstate manager is created to avoid missing validation events.\n+ *\n+ * @param[in] validation_interface_callbacks The callbacks used for passing validation information to the\n+ *                                           user.\n+ * @return                                   A validation interface. This should remain in memory for as\n+ *                                           long as the user expects to receive validation events.\n+ */\n+kernel_ValidationInterface* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_create(\n+    kernel_ValidationInterfaceCallbacks validation_interface_callbacks);\n+\n+/**\n+ * @brief Register a validation interface with the internal task runner\n+ * associated with this context. This also registers it with the chainstate\n+ * manager if the chainstate manager is subsequently created with this context.\n+ *\n+ * @param[in] context              Non-null, will register the validation interface with this context.\n+ * @param[in] validation_interface Non-null.\n+ * @return                         True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_register(\n+    kernel_Context* context,\n+    kernel_ValidationInterface* validation_interface\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Unregister a validation interface from the internal task runner\n+ * associated with this context. This should be done before destroying the\n+ * kernel context it was previously registered with.\n+ *\n+ * @param[in] context              Non-null, will deregister the validation interface from this context.\n+ * @param[in] validation_interface Non-null.\n+ * @return                         True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_unregister(\n+    kernel_Context* context,\n+    kernel_ValidationInterface* validation_interface\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the validation interface. This should be done after unregistering it\n+ * if the validation interface was previously registered with a chainstate\n+ * manager.\n+ */\n+void kernel_validation_interface_destroy(kernel_ValidationInterface* validation_interface);\n+\n+/**\n+ * Create options for loading the chainstate.\n+ */\n+kernel_ChainstateLoadOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_load_options_create();\n+\n+/**\n+ * @brief Sets wipe block tree db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] wipe_block_tree_db      Set wipe block tree db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_block_tree_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_block_tree_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets wipe chainstate db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] wipe_chainstate_db      Set wipe chainstate db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_chainstate_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_chainstate_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets block tree db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] block_tree_db_in_memory Set block tree db in memory.\n+ */\n+void kernel_chainstate_load_options_set_block_tree_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool block_tree_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets chainstate db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_db_in_memory Set chainstate db in memory.\n+ */\n+void kernel_chainstate_load_options_set_chainstate_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool chainstate_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate load options\n+ */\n+void kernel_chainstate_load_options_destroy(kernel_ChainstateLoadOptions* chainstate_load_options);\n+\n+/**\n+ * @brief This function must be called to initialize the chainstate manager\n+ * before doing validation tasks or interacting with its indexes.\n+ *\n+ * @param[in] context                 Non-null.\n+ * @param[in] chainstate_load_options Non-null, created by kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_manager      Non-null, will load the chainstate(s) and initialize indexes.\n+ * @return                            True on success, false on error.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_load_chainstate(\n+    const kernel_Context* context,\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief May be called after kernel_chainstate_manager_load_chainstate to\n+ * initialize the chainstate manager. Triggers the start of a reindex if the\n+ * option was previously set for the chainstate and block manager. Can also\n+ * import an array of existing block files selected by the user.\n+ *\n+ * @param[in] context              Non-null.\n+ * @param[in] chainstate_manager   Non-null.\n+ * @param[in] block_file_paths     Nullable, array of block files described by their full filesystem paths.\n+ * @param[in] block_file_paths_len Length of the block_file_paths array.\n+ * @return                         True if the import blocks call was completed successfully.\n+ */\n+bool kernel_import_blocks(const kernel_Context* context,\n+                          kernel_ChainstateManager* chainstate_manager,\n+                          const char** block_file_paths, size_t block_file_paths_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Process and validate the passed in block with the chainstate\n+ * manager. More detailed validation information in case of a failure can also\n+ * be retrieved through a registered validation interface. If the block fails\n+ * to validate the `block_checked` callback's 'BlockValidationState' will\n+ * contain details.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block              Non-null, block to be validated.\n+ * @param[out] new_block         Nullable, will be set to true if this block was not processed before, and false otherwise.\n+ * @return                       True if processing the block was successful. Will also return true for valid, but duplicate blocks.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_process_block(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager,\n+    kernel_Block* block,\n+    bool* new_block\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief Parse a serialized raw block into a new block object.\n+ *\n+ * @param[in] raw_block     Non-null, serialized block.\n+ * @param[in] raw_block_len Length of the serialized block.\n+ * @return                  The allocated block, or null on error.\n+ */\n+kernel_Block* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_create(\n+    const unsigned char* raw_block, size_t raw_block_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Calculate and return the hash of a block.\n+ *\n+ * @param[in] block Non-null.\n+ * @return    The block hash.\n+ */\n+kernel_BlockHash* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_get_hash(\n+    kernel_Block* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block.\n+ */\n+void kernel_block_destroy(kernel_Block* block);\n+\n+/**\n+ * @brief Copies block data into the returned byte array.\n+ *\n+ * @param[in] block  Non-null.\n+ * @return           Allocated byte array holding the block data, or null on error.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_block_data(\n+    kernel_Block* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies block data into the returned byte array.\n+ *\n+ * @param[in] block  Non-null.\n+ * @return           Allocated byte array holding the block data, or null on error.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_block_pointer_data(\n+    const kernel_BlockPointer* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Calculate and return the hash of a block.\n+ *\n+ * @param[in] block Non-null.\n+ * @return    The block hash.\n+ */\n+kernel_BlockHash* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_pointer_get_hash(\n+    const kernel_BlockPointer* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * A helper function for destroying an existing byte array.\n+ */\n+void kernel_byte_array_destroy(kernel_ByteArray* byte_array);\n+\n+/**\n+ * Returns the validation mode from an opaque block validation state pointer.\n+ */\n+kernel_ValidationMode kernel_get_validation_mode_from_block_validation_state(\n+    const kernel_BlockValidationState* block_validation_state\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Returns the validation result from an opaque block validation state pointer.\n+ */\n+kernel_BlockValidationResult kernel_get_block_validation_result_from_block_validation_state(\n+    const kernel_BlockValidationState* block_validation_state\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Get the block index entry of the current chain tip. Once returned,\n+ * there is no guarantee that it remains in the active chain.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The block index of the current tip.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_from_tip(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Get the block index entry of the genesis block.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The block index of the genesis block, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_from_genesis(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Retrieve a block index by its block hash.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block_hash         Non-null.\n+ * @return                       The block index of the block with the passed in hash, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_by_hash(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager,\n+    kernel_BlockHash* block_hash\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief Retrieve a block index by its height in the currently active chain.\n+ * Once retrieved there is no guarantee that it remains in the active chain.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block_height       Height in the chain of the to be retrieved block index.\n+ * @return                       The block index at a certain height in the currently active chain, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_by_height(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager,\n+    int block_height\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Return the next block index in the currently active chain, or null if\n+ * the current block index is the tip, or is not in the currently active\n+ * chain.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] block_index        Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The next block index in the currently active chain, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_next_block_index(\n+    const kernel_Context* context,\n+    kernel_BlockIndex* block_index,\n+    kernel_ChainstateManager* chainstate_manager",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 1048,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "97fe2b25af31ca612c1f8d9f3de739fa3dee3902",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: for the other `block_index` getters, `chainstate_manager` is the second argument - would keep that consistent",
      "created_at": "2024-11-21T16:51:03Z",
      "updated_at": "2024-11-25T21:41:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1852510169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1852510169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1049,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1852512769",
      "pull_request_review_id": 2448664774,
      "id": 1852512769,
      "node_id": "PRRC_kwDOABII585uaxoB",
      "diff_hunk": "@@ -0,0 +1,1190 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of the callback. They must not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    const kernel_Context* context,\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * Destroy the chainstate manager.\n+ */\n+void kernel_chainstate_manager_destroy(kernel_ChainstateManager* chainstate_manager, const kernel_Context* context);\n+\n+/**\n+ * @brief Creates a new validation interface for consuming events issued by the\n+ * chainstate manager. The interface should be created and registered before the\n+ * chainstate manager is created to avoid missing validation events.\n+ *\n+ * @param[in] validation_interface_callbacks The callbacks used for passing validation information to the\n+ *                                           user.\n+ * @return                                   A validation interface. This should remain in memory for as\n+ *                                           long as the user expects to receive validation events.\n+ */\n+kernel_ValidationInterface* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_create(\n+    kernel_ValidationInterfaceCallbacks validation_interface_callbacks);\n+\n+/**\n+ * @brief Register a validation interface with the internal task runner\n+ * associated with this context. This also registers it with the chainstate\n+ * manager if the chainstate manager is subsequently created with this context.\n+ *\n+ * @param[in] context              Non-null, will register the validation interface with this context.\n+ * @param[in] validation_interface Non-null.\n+ * @return                         True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_register(\n+    kernel_Context* context,\n+    kernel_ValidationInterface* validation_interface\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Unregister a validation interface from the internal task runner\n+ * associated with this context. This should be done before destroying the\n+ * kernel context it was previously registered with.\n+ *\n+ * @param[in] context              Non-null, will deregister the validation interface from this context.\n+ * @param[in] validation_interface Non-null.\n+ * @return                         True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_unregister(\n+    kernel_Context* context,\n+    kernel_ValidationInterface* validation_interface\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the validation interface. This should be done after unregistering it\n+ * if the validation interface was previously registered with a chainstate\n+ * manager.\n+ */\n+void kernel_validation_interface_destroy(kernel_ValidationInterface* validation_interface);\n+\n+/**\n+ * Create options for loading the chainstate.\n+ */\n+kernel_ChainstateLoadOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_load_options_create();\n+\n+/**\n+ * @brief Sets wipe block tree db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] wipe_block_tree_db      Set wipe block tree db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_block_tree_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_block_tree_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets wipe chainstate db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] wipe_chainstate_db      Set wipe chainstate db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_chainstate_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_chainstate_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets block tree db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] block_tree_db_in_memory Set block tree db in memory.\n+ */\n+void kernel_chainstate_load_options_set_block_tree_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool block_tree_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets chainstate db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_db_in_memory Set chainstate db in memory.\n+ */\n+void kernel_chainstate_load_options_set_chainstate_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool chainstate_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate load options\n+ */\n+void kernel_chainstate_load_options_destroy(kernel_ChainstateLoadOptions* chainstate_load_options);\n+\n+/**\n+ * @brief This function must be called to initialize the chainstate manager\n+ * before doing validation tasks or interacting with its indexes.\n+ *\n+ * @param[in] context                 Non-null.\n+ * @param[in] chainstate_load_options Non-null, created by kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_manager      Non-null, will load the chainstate(s) and initialize indexes.\n+ * @return                            True on success, false on error.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_load_chainstate(\n+    const kernel_Context* context,\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief May be called after kernel_chainstate_manager_load_chainstate to\n+ * initialize the chainstate manager. Triggers the start of a reindex if the\n+ * option was previously set for the chainstate and block manager. Can also\n+ * import an array of existing block files selected by the user.\n+ *\n+ * @param[in] context              Non-null.\n+ * @param[in] chainstate_manager   Non-null.\n+ * @param[in] block_file_paths     Nullable, array of block files described by their full filesystem paths.\n+ * @param[in] block_file_paths_len Length of the block_file_paths array.\n+ * @return                         True if the import blocks call was completed successfully.\n+ */\n+bool kernel_import_blocks(const kernel_Context* context,\n+                          kernel_ChainstateManager* chainstate_manager,\n+                          const char** block_file_paths, size_t block_file_paths_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Process and validate the passed in block with the chainstate\n+ * manager. More detailed validation information in case of a failure can also\n+ * be retrieved through a registered validation interface. If the block fails\n+ * to validate the `block_checked` callback's 'BlockValidationState' will\n+ * contain details.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block              Non-null, block to be validated.\n+ * @param[out] new_block         Nullable, will be set to true if this block was not processed before, and false otherwise.\n+ * @return                       True if processing the block was successful. Will also return true for valid, but duplicate blocks.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_process_block(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager,\n+    kernel_Block* block,\n+    bool* new_block\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief Parse a serialized raw block into a new block object.\n+ *\n+ * @param[in] raw_block     Non-null, serialized block.\n+ * @param[in] raw_block_len Length of the serialized block.\n+ * @return                  The allocated block, or null on error.\n+ */\n+kernel_Block* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_create(\n+    const unsigned char* raw_block, size_t raw_block_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Calculate and return the hash of a block.\n+ *\n+ * @param[in] block Non-null.\n+ * @return    The block hash.\n+ */\n+kernel_BlockHash* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_get_hash(\n+    kernel_Block* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block.\n+ */\n+void kernel_block_destroy(kernel_Block* block);\n+\n+/**\n+ * @brief Copies block data into the returned byte array.\n+ *\n+ * @param[in] block  Non-null.\n+ * @return           Allocated byte array holding the block data, or null on error.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_block_data(\n+    kernel_Block* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies block data into the returned byte array.\n+ *\n+ * @param[in] block  Non-null.\n+ * @return           Allocated byte array holding the block data, or null on error.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_block_pointer_data(\n+    const kernel_BlockPointer* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Calculate and return the hash of a block.\n+ *\n+ * @param[in] block Non-null.\n+ * @return    The block hash.\n+ */\n+kernel_BlockHash* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_pointer_get_hash(\n+    const kernel_BlockPointer* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * A helper function for destroying an existing byte array.\n+ */\n+void kernel_byte_array_destroy(kernel_ByteArray* byte_array);\n+\n+/**\n+ * Returns the validation mode from an opaque block validation state pointer.\n+ */\n+kernel_ValidationMode kernel_get_validation_mode_from_block_validation_state(\n+    const kernel_BlockValidationState* block_validation_state\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Returns the validation result from an opaque block validation state pointer.\n+ */\n+kernel_BlockValidationResult kernel_get_block_validation_result_from_block_validation_state(\n+    const kernel_BlockValidationState* block_validation_state\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Get the block index entry of the current chain tip. Once returned,\n+ * there is no guarantee that it remains in the active chain.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The block index of the current tip.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_from_tip(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Get the block index entry of the genesis block.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The block index of the genesis block, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_from_genesis(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Retrieve a block index by its block hash.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block_hash         Non-null.\n+ * @return                       The block index of the block with the passed in hash, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_by_hash(",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 1014,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "97fe2b25af31ca612c1f8d9f3de739fa3dee3902",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `from/by` naming inconsistency, I think my preference would lie with `from` (i.e. update to `kernel_get_block_index_from_hash` and `kernel_get_block_index_from_height`)\r\n\r\n(_technically_, could update `kernel_get_next_block_index` -> `kernel_get_block_index_from_previous` and `kernel_get_previous_block_index` -> `kernel_get_block_index_from_next`, but... `from_next` sounds weird?)",
      "created_at": "2024-11-21T16:52:39Z",
      "updated_at": "2024-11-25T21:41:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1852512769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1852512769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857036990",
      "pull_request_review_id": 2448664774,
      "id": 1857036990,
      "node_id": "PRRC_kwDOABII585usCK-",
      "diff_hunk": "@@ -1,10 +1,1217 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*) m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*) m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*) m_cbs.user_data, cast_kernel_warning(id), message.original.c_str());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*) m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*) m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+const KernelNotifications* cast_const_notifications(const kernel_Notifications* notifications)\n+{\n+    assert(notifications);\n+    return reinterpret_cast<const KernelNotifications*>(notifications);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManager::Options* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManager::Options*>(options);\n+}\n+\n+ChainstateManager::Options* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManager::Options*>(options);\n+}\n+\n+const node::BlockManager::Options* cast_const_block_manager_options(const kernel_BlockManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::BlockManager::Options*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+node::ChainstateLoadOptions* cast_chainstate_load_options(kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<node::ChainstateLoadOptions*>(options);\n+}\n+\n+const node::ChainstateLoadOptions* cast_const_chainstate_load_options(const kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::ChainstateLoadOptions*>(options);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+std::shared_ptr<KernelValidationInterface>* cast_validation_interface(kernel_ValidationInterface* interface)\n+{\n+    assert(interface);\n+    return reinterpret_cast<std::shared_ptr<KernelValidationInterface>*>(interface);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                         const int64_t amount_,\n+                         const kernel_Transaction* tx_to,\n+                         const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                         const unsigned int input_index,\n+                         const unsigned int flags,\n+                         kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 526,
      "original_position": 494,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it's confusing that this function can return `False` and have `status == kernel_SCRIPT_VERIFY_OK`. How about adding a `kernel_SCRIPT_VERIFY_ERROR` catch-all member for unspecified errors? Or alternatively, requiring the user to provide a nullptr and only setting it to `kernel_SCRIPT_VERIFY_OK` is that's actually so?",
      "created_at": "2024-11-25T17:38:59Z",
      "updated_at": "2024-11-25T21:41:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1857036990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857036990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857397944",
      "pull_request_review_id": 2459717939,
      "id": 1857397944,
      "node_id": "PRRC_kwDOABII585utaS4",
      "diff_hunk": "@@ -1,10 +1,1217 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*) m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*) m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*) m_cbs.user_data, cast_kernel_warning(id), message.original.c_str());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*) m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*) m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+const KernelNotifications* cast_const_notifications(const kernel_Notifications* notifications)\n+{\n+    assert(notifications);\n+    return reinterpret_cast<const KernelNotifications*>(notifications);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManager::Options* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManager::Options*>(options);\n+}\n+\n+ChainstateManager::Options* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManager::Options*>(options);\n+}\n+\n+const node::BlockManager::Options* cast_const_block_manager_options(const kernel_BlockManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::BlockManager::Options*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+node::ChainstateLoadOptions* cast_chainstate_load_options(kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<node::ChainstateLoadOptions*>(options);\n+}\n+\n+const node::ChainstateLoadOptions* cast_const_chainstate_load_options(const kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::ChainstateLoadOptions*>(options);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+std::shared_ptr<KernelValidationInterface>* cast_validation_interface(kernel_ValidationInterface* interface)\n+{\n+    assert(interface);\n+    return reinterpret_cast<std::shared_ptr<KernelValidationInterface>*>(interface);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                         const int64_t amount_,\n+                         const kernel_Transaction* tx_to,\n+                         const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                         const unsigned int input_index,\n+                         const unsigned int flags,\n+                         kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 526,
      "original_position": 494,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "in_reply_to_id": 1857036990,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We discussed during the last workshop that ideally we don't have any status codes here at all. But the problem is annoying to tackle. You'd probably want to pass this function a script verify object that has already passed through the required pre-checks. But then you have to either copy the objects into this object, or give ownership up to that object, which I don't think is desirable. The alternative to that is having a function with the same signature that you can call to check the arguments. But then you're forced to check them here again. I'm coming around to the option of replacing the status codes with log messages, but then we're sacrificing a bit of responsiveness to the developer.\r\n\r\nEdit: I also think that because this is probably going to be the most low-level verification function we expose here, populating the `ScriptError_t` enum here and returning that instead might be much more interesting. I wanted to hold off on this a bit though, so did not do that yet.",
      "created_at": "2024-11-25T21:58:46Z",
      "updated_at": "2024-11-26T08:30:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1857397944",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857397944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858149291",
      "pull_request_review_id": 2460937615,
      "id": 1858149291,
      "node_id": "PRRC_kwDOABII585uwRur",
      "diff_hunk": "@@ -1,10 +1,1217 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*) m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*) m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*) m_cbs.user_data, cast_kernel_warning(id), message.original.c_str());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*) m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*) m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+const KernelNotifications* cast_const_notifications(const kernel_Notifications* notifications)\n+{\n+    assert(notifications);\n+    return reinterpret_cast<const KernelNotifications*>(notifications);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManager::Options* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManager::Options*>(options);\n+}\n+\n+ChainstateManager::Options* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManager::Options*>(options);\n+}\n+\n+const node::BlockManager::Options* cast_const_block_manager_options(const kernel_BlockManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::BlockManager::Options*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+node::ChainstateLoadOptions* cast_chainstate_load_options(kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<node::ChainstateLoadOptions*>(options);\n+}\n+\n+const node::ChainstateLoadOptions* cast_const_chainstate_load_options(const kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::ChainstateLoadOptions*>(options);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+std::shared_ptr<KernelValidationInterface>* cast_validation_interface(kernel_ValidationInterface* interface)\n+{\n+    assert(interface);\n+    return reinterpret_cast<std::shared_ptr<KernelValidationInterface>*>(interface);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                         const int64_t amount_,\n+                         const kernel_Transaction* tx_to,\n+                         const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                         const unsigned int input_index,\n+                         const unsigned int flags,\n+                         kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 526,
      "original_position": 494,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "in_reply_to_id": 1857036990,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What do you think of doing something like this instead: https://github.com/TheCharlatan/bitcoin/commit/6323d7b072de5b13ab25aaa29e02332c44808b62",
      "created_at": "2024-11-26T09:44:35Z",
      "updated_at": "2024-11-26T09:44:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1858149291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858149291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858493399",
      "pull_request_review_id": 2461460193,
      "id": 1858493399,
      "node_id": "PRRC_kwDOABII585uxlvX",
      "diff_hunk": "@@ -1,10 +1,1217 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*) m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*) m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*) m_cbs.user_data, cast_kernel_warning(id), message.original.c_str());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*) m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*) m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+const KernelNotifications* cast_const_notifications(const kernel_Notifications* notifications)\n+{\n+    assert(notifications);\n+    return reinterpret_cast<const KernelNotifications*>(notifications);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManager::Options* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManager::Options*>(options);\n+}\n+\n+ChainstateManager::Options* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManager::Options*>(options);\n+}\n+\n+const node::BlockManager::Options* cast_const_block_manager_options(const kernel_BlockManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::BlockManager::Options*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+node::ChainstateLoadOptions* cast_chainstate_load_options(kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<node::ChainstateLoadOptions*>(options);\n+}\n+\n+const node::ChainstateLoadOptions* cast_const_chainstate_load_options(const kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::ChainstateLoadOptions*>(options);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+std::shared_ptr<KernelValidationInterface>* cast_validation_interface(kernel_ValidationInterface* interface)\n+{\n+    assert(interface);\n+    return reinterpret_cast<std::shared_ptr<KernelValidationInterface>*>(interface);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                         const int64_t amount_,\n+                         const kernel_Transaction* tx_to,\n+                         const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                         const unsigned int input_index,\n+                         const unsigned int flags,\n+                         kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 526,
      "original_position": 494,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "in_reply_to_id": 1857036990,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> You'd probably want to pass this function a script verify object that has already passed through the required pre-checks.\r\n\r\nI 100% agree with this approach. Adding extra types makes the API more cumbersome to use, but I think it does make it more safe, and the extra verbosity should be quite easy to hide in client libraries.\r\n\r\n> But then you're forced to check them here again.\r\n\r\nI think that can be avoided by having the prechecks function return a `ScriptPreChecksPassed*` (which references the object it verified, but doesn't copy it) and then requiring that as an extra argument (extra as a way to address lifetime issues) to the `kernel_verify_script` function? This doesn't prevent runtime issues (e.g. re-using `PreChecksPassed` pointers, which is easily verifiable at runtime) or segfaults, but at least it adds some compile-time checks to guide the user to using the API safely, and it can be done without any copies or changing ownership?\r\n\r\n> What do you think of doing something like this instead: https://github.com/TheCharlatan/bitcoin/commit/6323d7b072de5b13ab25aaa29e02332c44808b62\r\n\r\nI'm not convinced. I think not requiring the user to deal with status codes (or strings) is a good philosophy, but if it's optional anyway, then passing a bool to add a log entry feels like a much worse interface? And I think it's inferior to this approach:\r\n\r\n> The alternative to that is having a function with the same signature that you can call to check the arguments.",
      "created_at": "2024-11-26T12:57:00Z",
      "updated_at": "2024-11-26T12:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1858493399",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858493399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858539457",
      "pull_request_review_id": 2461535738,
      "id": 1858539457,
      "node_id": "PRRC_kwDOABII585uxw_B",
      "diff_hunk": "@@ -1,10 +1,1217 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*) m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*) m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*) m_cbs.user_data, cast_kernel_warning(id), message.original.c_str());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*) m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*) m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+const KernelNotifications* cast_const_notifications(const kernel_Notifications* notifications)\n+{\n+    assert(notifications);\n+    return reinterpret_cast<const KernelNotifications*>(notifications);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManager::Options* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManager::Options*>(options);\n+}\n+\n+ChainstateManager::Options* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManager::Options*>(options);\n+}\n+\n+const node::BlockManager::Options* cast_const_block_manager_options(const kernel_BlockManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::BlockManager::Options*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+node::ChainstateLoadOptions* cast_chainstate_load_options(kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<node::ChainstateLoadOptions*>(options);\n+}\n+\n+const node::ChainstateLoadOptions* cast_const_chainstate_load_options(const kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::ChainstateLoadOptions*>(options);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+std::shared_ptr<KernelValidationInterface>* cast_validation_interface(kernel_ValidationInterface* interface)\n+{\n+    assert(interface);\n+    return reinterpret_cast<std::shared_ptr<KernelValidationInterface>*>(interface);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                         const int64_t amount_,\n+                         const kernel_Transaction* tx_to,\n+                         const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                         const unsigned int input_index,\n+                         const unsigned int flags,\n+                         kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 526,
      "original_position": 494,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "in_reply_to_id": 1857036990,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'll propose a pre-check function and object later today then :)",
      "created_at": "2024-11-26T13:25:01Z",
      "updated_at": "2024-11-26T13:25:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1858539457",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858539457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1862247416",
      "pull_request_review_id": 2468252755,
      "id": 1862247416,
      "node_id": "PRRC_kwDOABII585u_6P4",
      "diff_hunk": "@@ -1,10 +1,1217 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*) m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*) m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*) m_cbs.user_data, cast_kernel_warning(id), message.original.c_str());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*) m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*) m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+const KernelNotifications* cast_const_notifications(const kernel_Notifications* notifications)\n+{\n+    assert(notifications);\n+    return reinterpret_cast<const KernelNotifications*>(notifications);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManager::Options* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManager::Options*>(options);\n+}\n+\n+ChainstateManager::Options* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManager::Options*>(options);\n+}\n+\n+const node::BlockManager::Options* cast_const_block_manager_options(const kernel_BlockManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::BlockManager::Options*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+node::ChainstateLoadOptions* cast_chainstate_load_options(kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<node::ChainstateLoadOptions*>(options);\n+}\n+\n+const node::ChainstateLoadOptions* cast_const_chainstate_load_options(const kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::ChainstateLoadOptions*>(options);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+std::shared_ptr<KernelValidationInterface>* cast_validation_interface(kernel_ValidationInterface* interface)\n+{\n+    assert(interface);\n+    return reinterpret_cast<std::shared_ptr<KernelValidationInterface>*>(interface);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                         const int64_t amount_,\n+                         const kernel_Transaction* tx_to,\n+                         const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                         const unsigned int input_index,\n+                         const unsigned int flags,\n+                         kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 526,
      "original_position": 494,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "in_reply_to_id": 1857036990,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, this is what I have now: https://github.com/TheCharlatan/bitcoin/compare/kernelApi_7..kernelApi_ScriptVerifyArgs , what do you think?\r\nEDIT: This also introduces the concept of a 'View' where you get a resource, but it is dependent on the lifetime of the resources it was created from.",
      "created_at": "2024-11-28T13:57:54Z",
      "updated_at": "2024-12-02T12:32:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1862247416",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1862247416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1888513807",
      "pull_request_review_id": 2508874952,
      "id": 1888513807,
      "node_id": "PRRC_kwDOABII585wkG8P",
      "diff_hunk": "@@ -0,0 +1,1142 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 264,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "9e203b460d8ab1d92949ab8714a9265c343a5eee",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A general comment on the API: i'd prefer to pass (and receive) explicit lengths for strings instead of bare `char*`s.\r\n\r\nMy experience with wrapping C APIs in rust is that it's important to have a defined memory-range for strings and arrays. Relying on NUL-termination means that the memory size is effectively unrestricted, making it impossible to do some checks safely. This is (with lesser urgency) also true for other languages like Python that represent strings as pointer+length.\r\n\r\nAs we internally use C++ strings and not C string APIs this seems straightforward to offer.",
      "created_at": "2024-12-17T13:23:56Z",
      "updated_at": "2024-12-17T13:26:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1888513807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1888513807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1888529353",
      "pull_request_review_id": 2508900589,
      "id": 1888529353,
      "node_id": "PRRC_kwDOABII585wkKvJ",
      "diff_hunk": "@@ -0,0 +1,1142 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 264,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "9e203b460d8ab1d92949ab8714a9265c343a5eee",
      "in_reply_to_id": 1888513807,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Mmh, thanks for this. It should be easy to add a length parameter here.",
      "created_at": "2024-12-17T13:34:45Z",
      "updated_at": "2024-12-17T13:34:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1888529353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1888529353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1890734754",
      "pull_request_review_id": 2512695597,
      "id": 1890734754,
      "node_id": "PRRC_kwDOABII585wslKi",
      "diff_hunk": "@@ -0,0 +1,1271 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/** @name Transaction\n+ * Functions for working with transactions.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+///@}\n+\n+/** @name ScriptPubkey\n+ * Functions for working with script pubkeys.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+///@}\n+\n+/** @name TransactionOutput\n+ * Functions for working with transaction outputs.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey of an output in the returned script pubkey\n+ * opaque object.\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The data for the output's script pubkey.\n+ */\n+kernel_ScriptPubkey* kernel_copy_script_pubkey_from_output(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Gets the amount associated with this transaction output\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The amount.\n+ */\n+int64_t kernel_get_transaction_output_amount(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+///@}\n+\n+/** @name Script\n+ * Functions for working with scripts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+///@}\n+\n+/** @name Logging\n+ * Logging-related functions.\n+ */\n+///@{\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    const void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+///@}\n+\n+/** @name ChainParameters\n+ * Functions for working with chain parameters.\n+ */\n+///@{\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+///@}\n+\n+/** @name ContextOptions\n+ * Functions for working with context options.\n+ */\n+///@{\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created by @ref kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created by @ref kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    kernel_NotificationInterfaceCallbacks notifications\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Set the validation interface callbacks for the context options. The\n+ * context created with the options will be configured for these validation\n+ * interface callbacks. The callbacks will then be triggered from validation\n+ * events issued by the chainstate manager created from the same context.\n+ *\n+ * @param[in] context_options                Non-null, previously created with kernel_context_options_create.\n+ * @param[in] validation_interface_callbacks The callbacks used for passing validation information to the\n+ *                                           user.\n+ */\n+void kernel_context_options_set_validation_interface(\n+    kernel_ContextOptions* context_options,\n+    kernel_ValidationInterfaceCallbacks validation_interface_callbacks\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+///@}\n+\n+/** @name Context\n+ * Functions for working with contexts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created by @ref kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+///@}\n+\n+/** @name ChainstateManagerOptions\n+ * Functions for working with chainstate manager options.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, path string of the directory containing the chainstate data.\n+ *                           If the directory does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory,\n+    size_t data_directory_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. When set to 0 no parallel verification is done.\n+ *                           The value range is clamped internally between 0 and 15.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+///@}\n+\n+/** @name BlockManagerOptions\n+ * Functions for working with block manager options.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, path string of the directory containing the block data. If\n+ *                             the directory does not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory,\n+    size_t blocks_directory_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+///@}\n+\n+/** @name ChainstateLoadOptions\n+ * Functions for working with chainstate load options.\n+ */\n+///@{\n+\n+/**\n+ * Create options for loading the chainstate.\n+ */\n+kernel_ChainstateLoadOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_load_options_create();\n+\n+/**\n+ * @brief Sets wipe block tree db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] wipe_block_tree_db      Set wipe block tree db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_block_tree_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_block_tree_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets wipe chainstate db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] wipe_chainstate_db      Set wipe chainstate db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_chainstate_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_chainstate_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets block tree db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] block_tree_db_in_memory Set block tree db in memory.\n+ */\n+void kernel_chainstate_load_options_set_block_tree_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool block_tree_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets chainstate db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_db_in_memory Set chainstate db in memory.\n+ */\n+void kernel_chainstate_load_options_set_chainstate_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool chainstate_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate load options\n+ */\n+void kernel_chainstate_load_options_destroy(kernel_ChainstateLoadOptions* chainstate_load_options);\n+\n+///@}\n+\n+/** @name ChainstateManager\n+ * Functions for chainstate management.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by @ref kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by @ref kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    const kernel_Context* context,\n+    const kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    const kernel_BlockManagerOptions* block_manager_options\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief This function must be called to initialize the chainstate manager\n+ * before doing validation tasks or interacting with its indexes.\n+ *\n+ * @param[in] context                 Non-null.\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_manager      Non-null, will load the chainstate(s) and initialize indexes.\n+ * @return                            True on success, false on error.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_load_chainstate(\n+    const kernel_Context* context,\n+    const kernel_ChainstateLoadOptions* chainstate_load_options,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 917,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "20eec64b5e417cac8c68100826c0adf2152a49eb",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "When this function is called more than once, kernel crashes with an assertion error:\r\n\r\n```\r\nAssertion failed: (!m_ibd_chainstate), function InitializeChainstate, file validation.cpp, line 5655.\r\n```\r\n\r\nThe solutions I see atm:\r\n1. document that this function may only be called once for each chainman\r\n1. add a field to `kernel_ChainstateManager*` to keep track of it being loaded already, return false and log an error\r\n1. rework LoadChainstate logic to handle multiple calls gracefully\r\n1. remove `kernel_chainstate_manager_load_chainstate` altogether and load chainstate during `kernel_chainstate_manager_create`.\r\n\r\nI'm not sure if we really need a separate `*_load_chainstate` function, so if that's true, then option 4. would probably be preferable? I implemented it in https://github.com/TheCharlatan/bitcoin/compare/kernelApi...stickies-v:bitcoin:kernel/remove-load-chainstate, but in practice this probably should be a rebase instead of an extra commit. Options 1. and 2. seem easy enough to implement too, 3. is probably not the most sensible.",
      "created_at": "2024-12-18T19:26:37Z",
      "updated_at": "2024-12-18T19:26:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1890734754",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1890734754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 904,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 922,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1890897105",
      "pull_request_review_id": 2512963714,
      "id": 1890897105,
      "node_id": "PRRC_kwDOABII585wtMzR",
      "diff_hunk": "@@ -0,0 +1,1271 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/** @name Transaction\n+ * Functions for working with transactions.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+///@}\n+\n+/** @name ScriptPubkey\n+ * Functions for working with script pubkeys.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+///@}\n+\n+/** @name TransactionOutput\n+ * Functions for working with transaction outputs.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey of an output in the returned script pubkey\n+ * opaque object.\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The data for the output's script pubkey.\n+ */\n+kernel_ScriptPubkey* kernel_copy_script_pubkey_from_output(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Gets the amount associated with this transaction output\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The amount.\n+ */\n+int64_t kernel_get_transaction_output_amount(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+///@}\n+\n+/** @name Script\n+ * Functions for working with scripts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+///@}\n+\n+/** @name Logging\n+ * Logging-related functions.\n+ */\n+///@{\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    const void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+///@}\n+\n+/** @name ChainParameters\n+ * Functions for working with chain parameters.\n+ */\n+///@{\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+///@}\n+\n+/** @name ContextOptions\n+ * Functions for working with context options.\n+ */\n+///@{\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created by @ref kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created by @ref kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    kernel_NotificationInterfaceCallbacks notifications\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Set the validation interface callbacks for the context options. The\n+ * context created with the options will be configured for these validation\n+ * interface callbacks. The callbacks will then be triggered from validation\n+ * events issued by the chainstate manager created from the same context.\n+ *\n+ * @param[in] context_options                Non-null, previously created with kernel_context_options_create.\n+ * @param[in] validation_interface_callbacks The callbacks used for passing validation information to the\n+ *                                           user.\n+ */\n+void kernel_context_options_set_validation_interface(\n+    kernel_ContextOptions* context_options,\n+    kernel_ValidationInterfaceCallbacks validation_interface_callbacks\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+///@}\n+\n+/** @name Context\n+ * Functions for working with contexts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created by @ref kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+///@}\n+\n+/** @name ChainstateManagerOptions\n+ * Functions for working with chainstate manager options.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, path string of the directory containing the chainstate data.\n+ *                           If the directory does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory,\n+    size_t data_directory_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. When set to 0 no parallel verification is done.\n+ *                           The value range is clamped internally between 0 and 15.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+///@}\n+\n+/** @name BlockManagerOptions\n+ * Functions for working with block manager options.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, path string of the directory containing the block data. If\n+ *                             the directory does not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory,\n+    size_t blocks_directory_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+///@}\n+\n+/** @name ChainstateLoadOptions\n+ * Functions for working with chainstate load options.\n+ */\n+///@{\n+\n+/**\n+ * Create options for loading the chainstate.\n+ */\n+kernel_ChainstateLoadOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_load_options_create();\n+\n+/**\n+ * @brief Sets wipe block tree db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] wipe_block_tree_db      Set wipe block tree db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_block_tree_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_block_tree_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets wipe chainstate db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] wipe_chainstate_db      Set wipe chainstate db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_chainstate_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_chainstate_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets block tree db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] block_tree_db_in_memory Set block tree db in memory.\n+ */\n+void kernel_chainstate_load_options_set_block_tree_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool block_tree_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets chainstate db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_db_in_memory Set chainstate db in memory.\n+ */\n+void kernel_chainstate_load_options_set_chainstate_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool chainstate_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate load options\n+ */\n+void kernel_chainstate_load_options_destroy(kernel_ChainstateLoadOptions* chainstate_load_options);\n+\n+///@}\n+\n+/** @name ChainstateManager\n+ * Functions for chainstate management.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by @ref kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by @ref kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    const kernel_Context* context,\n+    const kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    const kernel_BlockManagerOptions* block_manager_options\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief This function must be called to initialize the chainstate manager\n+ * before doing validation tasks or interacting with its indexes.\n+ *\n+ * @param[in] context                 Non-null.\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_manager      Non-null, will load the chainstate(s) and initialize indexes.\n+ * @return                            True on success, false on error.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_load_chainstate(\n+    const kernel_Context* context,\n+    const kernel_ChainstateLoadOptions* chainstate_load_options,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 917,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "20eec64b5e417cac8c68100826c0adf2152a49eb",
      "in_reply_to_id": 1890734754,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> remove kernel_chainstate_manager_load_chainstate altogether and load chainstate during kernel_chainstate_manager_create.\r\n\r\nI would like this a lot, but I wanted to keep a separate chainstate load function in case we ever land a \"blocks-only read-only\" chainstate manager, where we don't need to load any chainstates. I feel like making this a no-op could work, the simplest thing to do would probably be adding something along the lines of:\r\n```\r\nif (chainman.GetAll().size() > 0) return true;\r\n```\r\nto `kernel_chainstate_manager_load_chainstate`. But then again it would move us closer to a correct by construction setup if we'd do the constructing and loading all at once.",
      "created_at": "2024-12-18T22:10:53Z",
      "updated_at": "2024-12-18T22:10:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1890897105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1890897105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 904,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 922,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1891024389",
      "pull_request_review_id": 2513154038,
      "id": 1891024389,
      "node_id": "PRRC_kwDOABII585wtr4F",
      "diff_hunk": "@@ -0,0 +1,1271 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 424,
      "original_position": 433,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "20eec64b5e417cac8c68100826c0adf2152a49eb",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~~i was wondering; these are trivially small structures, why don't we pass and return them by value instead of by pointer? this would avoid needing a special `kernel_byte_array_destroy` call to deallocate them~~\r\n\r\nedit: never mind, of course that's still necessary to deallocate the conents",
      "created_at": "2024-12-19T01:36:11Z",
      "updated_at": "2024-12-19T01:43:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1891024389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1891024389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 424,
      "original_line": 424,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1891405387",
      "pull_request_review_id": 2513778436,
      "id": 1891405387,
      "node_id": "PRRC_kwDOABII585wvI5L",
      "diff_hunk": "@@ -0,0 +1,1271 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 424,
      "original_position": 433,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "20eec64b5e417cac8c68100826c0adf2152a49eb",
      "in_reply_to_id": 1891024389,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> of course that's still necessary to deallocate the conents\r\n\r\nYes, I try to match every call to `new` with a corresponding place to `delete`.",
      "created_at": "2024-12-19T09:11:45Z",
      "updated_at": "2024-12-19T09:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1891405387",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1891405387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 424,
      "original_line": 424,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1891993661",
      "pull_request_review_id": 2514567528,
      "id": 1891993661,
      "node_id": "PRRC_kwDOABII585wxYg9",
      "diff_hunk": "@@ -0,0 +1,1271 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/** @name Transaction\n+ * Functions for working with transactions.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+///@}\n+\n+/** @name ScriptPubkey\n+ * Functions for working with script pubkeys.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+///@}\n+\n+/** @name TransactionOutput\n+ * Functions for working with transaction outputs.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey of an output in the returned script pubkey\n+ * opaque object.\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The data for the output's script pubkey.\n+ */\n+kernel_ScriptPubkey* kernel_copy_script_pubkey_from_output(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Gets the amount associated with this transaction output\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The amount.\n+ */\n+int64_t kernel_get_transaction_output_amount(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+///@}\n+\n+/** @name Script\n+ * Functions for working with scripts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+///@}\n+\n+/** @name Logging\n+ * Logging-related functions.\n+ */\n+///@{\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    const void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+///@}\n+\n+/** @name ChainParameters\n+ * Functions for working with chain parameters.\n+ */\n+///@{\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+///@}\n+\n+/** @name ContextOptions\n+ * Functions for working with context options.\n+ */\n+///@{\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created by @ref kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created by @ref kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    kernel_NotificationInterfaceCallbacks notifications\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Set the validation interface callbacks for the context options. The\n+ * context created with the options will be configured for these validation\n+ * interface callbacks. The callbacks will then be triggered from validation\n+ * events issued by the chainstate manager created from the same context.\n+ *\n+ * @param[in] context_options                Non-null, previously created with kernel_context_options_create.\n+ * @param[in] validation_interface_callbacks The callbacks used for passing validation information to the\n+ *                                           user.\n+ */\n+void kernel_context_options_set_validation_interface(\n+    kernel_ContextOptions* context_options,\n+    kernel_ValidationInterfaceCallbacks validation_interface_callbacks\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+///@}\n+\n+/** @name Context\n+ * Functions for working with contexts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created by @ref kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+///@}\n+\n+/** @name ChainstateManagerOptions\n+ * Functions for working with chainstate manager options.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, path string of the directory containing the chainstate data.\n+ *                           If the directory does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory,\n+    size_t data_directory_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. When set to 0 no parallel verification is done.\n+ *                           The value range is clamped internally between 0 and 15.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+///@}\n+\n+/** @name BlockManagerOptions\n+ * Functions for working with block manager options.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, path string of the directory containing the block data. If\n+ *                             the directory does not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory,\n+    size_t blocks_directory_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+///@}\n+\n+/** @name ChainstateLoadOptions\n+ * Functions for working with chainstate load options.\n+ */\n+///@{\n+\n+/**\n+ * Create options for loading the chainstate.\n+ */\n+kernel_ChainstateLoadOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_load_options_create();\n+\n+/**\n+ * @brief Sets wipe block tree db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] wipe_block_tree_db      Set wipe block tree db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_block_tree_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_block_tree_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets wipe chainstate db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] wipe_chainstate_db      Set wipe chainstate db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_chainstate_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_chainstate_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets block tree db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] block_tree_db_in_memory Set block tree db in memory.\n+ */\n+void kernel_chainstate_load_options_set_block_tree_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool block_tree_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets chainstate db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_db_in_memory Set chainstate db in memory.\n+ */\n+void kernel_chainstate_load_options_set_chainstate_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool chainstate_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate load options\n+ */\n+void kernel_chainstate_load_options_destroy(kernel_ChainstateLoadOptions* chainstate_load_options);\n+\n+///@}\n+\n+/** @name ChainstateManager\n+ * Functions for chainstate management.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by @ref kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by @ref kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    const kernel_Context* context,\n+    const kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    const kernel_BlockManagerOptions* block_manager_options\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief This function must be called to initialize the chainstate manager\n+ * before doing validation tasks or interacting with its indexes.\n+ *\n+ * @param[in] context                 Non-null.\n+ * @param[in] chainstate_load_options Non-null, created by @ref kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_manager      Non-null, will load the chainstate(s) and initialize indexes.\n+ * @return                            True on success, false on error.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_load_chainstate(\n+    const kernel_Context* context,\n+    const kernel_ChainstateLoadOptions* chainstate_load_options,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 917,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "20eec64b5e417cac8c68100826c0adf2152a49eb",
      "in_reply_to_id": 1890734754,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for [updating](https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2553418201) to option 4. Just to summarize what we talked about offline: \r\n\r\n> but I wanted to keep a separate chainstate load function in case we ever land a \"blocks-only read-only\" chainstate manager\r\n\r\nThat makes sense with the current code organization, but I think we should aim to shift towards a more intuitive API over time. Operations that don't require any chainstate (such as blocks-only read-only) probably shouldn't use the chainman in the first place.\r\n\r\n> But then again it would move us closer to a correct by construction setup\r\n\r\nI think that is a worthwhile design goal for the API.",
      "created_at": "2024-12-19T13:05:15Z",
      "updated_at": "2024-12-19T13:05:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1891993661",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1891993661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 904,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 922,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1916637752",
      "pull_request_review_id": 2552730240,
      "id": 1916637752,
      "node_id": "PRRC_kwDOABII585yPZI4",
      "diff_hunk": "@@ -0,0 +1,200 @@\n+#include <kernel/bitcoinkernel_wrapper.h>\n+\n+#include <cassert>\n+#include <filesystem>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <string_view>\n+#include <sstream>\n+\n+std::vector<unsigned char> hex_string_to_char_vec(const std::string& hex)\n+{\n+    std::vector<unsigned char> bytes;\n+\n+    for (size_t i{0}; i < hex.length(); i += 2) {\n+        std::string byteString{hex.substr(i, 2)};\n+        unsigned char byte = (char)std::strtol(byteString.c_str(), nullptr, 16);",
      "path": "src/kernel/bitcoin-chainstate.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "f157b0cbc7d90075858a6522d13a7bc4f0b25a5f",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "i would really prefer not to bring back use of `strtol` in C++ code; it has some known issues with locale-dependence (especially on Linux). what about:\r\n\r\n```c++\r\n#include <charconv>\r\n...\r\nstd::vector<unsigned char> hex_string_to_char_vec(const std::string& hex)\r\n{\r\n    std::vector<unsigned char> bytes;\r\n\r\n    for (size_t i{0}; i < hex.length(); i += 2) {\r\n        unsigned int val{0};\r\n        auto [p, ec] = std::from_chars(hex.data() + i, hex.data() + i + 2, val, 16);\r\n        if (ec == std::errc{} && p == hex.data() + i + 2) {\r\n            bytes.push_back(val);\r\n        }\r\n    }\r\n\r\n    return bytes;\r\n}\r\n```\r\n`from_chars` is  guaranteed to be locale-independent so doesn't need an exception in the linter either. Same for the other use.",
      "created_at": "2025-01-15T13:18:20Z",
      "updated_at": "2025-01-15T13:23:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1916637752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1916637752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1916639299",
      "pull_request_review_id": 2552732729,
      "id": 1916639299,
      "node_id": "PRRC_kwDOABII585yPZhD",
      "diff_hunk": "@@ -0,0 +1,200 @@\n+#include <kernel/bitcoinkernel_wrapper.h>\n+\n+#include <cassert>\n+#include <filesystem>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <string_view>\n+#include <sstream>",
      "path": "src/kernel/bitcoin-chainstate.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "f157b0cbc7d90075858a6522d13a7bc4f0b25a5f",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "missing `#include <vector>`",
      "created_at": "2025-01-15T13:19:28Z",
      "updated_at": "2025-01-15T13:19:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1916639299",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1916639299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1935834281",
      "pull_request_review_id": 2584276519,
      "id": 1935834281,
      "node_id": "PRRC_kwDOABII585zYnyp",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#include <kernel/bitcoinkernel_wrapper.h>\n+\n+#include <cassert>\n+#include <charconv>\n+#include <filesystem>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+std::vector<unsigned char> hex_string_to_char_vec(std::string_view hex)\n+{\n+    std::vector<unsigned char> bytes;\n+    bytes.reserve(hex.length() / 2);\n+\n+    for (size_t i{0}; i < hex.length(); i += 2) {\n+        unsigned char byte;\n+        auto [ptr, ec] = std::from_chars(hex.data() + i, hex.data() + i + 2, byte, 16);\n+        if (ec == std::errc{} && ptr == hex.data() + i + 2) {\n+            bytes.push_back(byte);\n+        }\n+    }\n+    return bytes;\n+}\n+\n+class KernelLog\n+{\n+public:\n+    void LogMessage(std::string_view message)\n+    {\n+        std::cout << \"kernel: \" << message;\n+    }\n+};\n+\n+class TestValidationInterface : public ValidationInterface<TestValidationInterface>\n+{\n+public:\n+    TestValidationInterface() : ValidationInterface() {}\n+\n+    std::optional<std::string> m_expected_valid_block = std::nullopt;\n+\n+    void BlockChecked(const UnownedBlock block, const BlockValidationState state) override\n+    {\n+        auto mode{state.ValidationMode()};\n+        switch (mode) {\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_VALID: {\n+            std::cout << \"Valid block\" << std::endl;\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_INVALID: {\n+            std::cout << \"Invalid block: \";\n+            auto result{state.BlockValidationResult()};\n+            switch (result) {\n+            case kernel_BlockValidationResult::kernel_BLOCK_RESULT_UNSET:\n+                std::cout << \"initial value. Block has not yet been rejected\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_HEADER_LOW_WORK:\n+                std::cout << \"the block header may be on a too-little-work chain\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CONSENSUS:\n+                std::cout << \"invalid by consensus rules (excluding any below reasons)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CACHED_INVALID:\n+                std::cout << \"this block was cached as being invalid and we didn't store the reason why\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_HEADER:\n+                std::cout << \"invalid proof of work or time too old\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MUTATED:\n+                std::cout << \"the block's data didn't match the data committed to by the PoW\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MISSING_PREV:\n+                std::cout << \"We don't have the previous block the checked one is built on\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_PREV:\n+                std::cout << \"A block this one builds on is invalid\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_TIME_FUTURE:\n+                std::cout << \"block timestamp was > 2 hours in the future (or our clock is bad)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CHECKPOINT:\n+                std::cout << \"the block failed to meet one of our checkpoints\" << std::endl;\n+                break;\n+            }\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_ERROR: {\n+            std::cout << \"Internal error\" << std::endl;\n+            return;\n+        }\n+        }\n+    }\n+};\n+\n+class TestKernelNotifications : public KernelNotifications<TestKernelNotifications>\n+{\n+public:\n+    void BlockTipHandler(kernel_SynchronizationState state, const kernel_BlockIndex* index) override\n+    {\n+        std::cout << \"Block tip changed\" << std::endl;\n+    }\n+\n+    void ProgressHandler(std::string_view title, int progress_percent, bool resume_possible) override\n+    {\n+        std::cout << \"Made progress: \" << title << \" \" << progress_percent << \"%\" << std::endl;\n+    }\n+\n+    void WarningSetHandler(kernel_Warning warning, std::string_view message) override\n+    {\n+        std::cout << message << std::endl;\n+    }\n+\n+    void WarningUnsetHandler(kernel_Warning warning) override\n+    {\n+        std::cout << \"Warning unset: \" << warning << std::endl;\n+    }\n+\n+    void FlushErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+\n+    void FatalErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+};\n+\n+int main(int argc, char* argv[])\n+{\n+    // SETUP: Argument parsing and handling\n+    if (argc != 2) {\n+        std::cerr\n+            << \"Usage: \" << argv[0] << \" DATADIR\" << std::endl\n+            << \"Display DATADIR information, and process hex-encoded blocks on standard input.\" << std::endl\n+            << std::endl\n+            << \"IMPORTANT: THIS EXECUTABLE IS EXPERIMENTAL, FOR TESTING ONLY, AND EXPECTED TO\" << std::endl\n+            << \"           BREAK IN FUTURE VERSIONS. DO NOT USE ON YOUR ACTUAL DATADIR.\" << std::endl;\n+        return 1;\n+    }\n+    std::filesystem::path abs_datadir{std::filesystem::absolute(argv[1])};\n+    std::filesystem::create_directories(abs_datadir);\n+\n+    kernel_LoggingOptions logging_options = {\n+        .log_timestamps = true,\n+        .log_time_micros = false,\n+        .log_threadnames = false,\n+        .log_sourcelocations = false,\n+        .always_print_category_levels = true,\n+    };\n+\n+    Logger logger{std::make_unique<KernelLog>(KernelLog{}), logging_options};\n+\n+    ContextOptions options{};\n+    ChainParams params{kernel_ChainType::kernel_CHAIN_TYPE_REGTEST};\n+    options.SetChainParams(params);\n+\n+    TestKernelNotifications notifications{};\n+    options.SetNotifications(notifications);\n+    TestValidationInterface validation_interface{};\n+    options.SetValidationInterface(validation_interface);\n+\n+    Context context{options};\n+    assert(context);\n+\n+    ChainstateManagerOptions chainman_opts{context, abs_datadir};",
      "path": "src/kernel/bitcoin-chainstate.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "01a43b24436e0aed7b8f79d3857630a4bf6a0545",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The implicit `std::filesystem::__cxx11::path` to `const std::string&` conversion doesn't seem to cross-compile for `x86_64-w64-mingw32`:\r\n\r\n<details>\r\n\r\n```\r\n[100%] Building CXX object src/kernel/CMakeFiles/kernel-bitcoin-chainstate.dir/bitcoin-chainstate.cpp.obj\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoin-chainstate.cpp: In function ‘int main(int, char**)’:\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoin-chainstate.cpp:164:64: error: no matching function for call to ‘ChainstateManagerOptions::ChainstateManagerOptions(<brace-enclosed initializer list>)’\r\n  164 |     ChainstateManagerOptions chainman_opts{context, abs_datadir};\r\n      |                                                                ^\r\nIn file included from /home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoin-chainstate.cpp:1:\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoinkernel_wrapper.h:396:5: note: candidate: ‘ChainstateManagerOptions::ChainstateManagerOptions(const Context&, const std::string&)’\r\n  396 |     ChainstateManagerOptions(const Context& context, const std::string& data_dir) noexcept\r\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoinkernel_wrapper.h:396:73: note:   no known conversion for argument 2 from ‘std::filesystem::__cxx11::path’ to ‘const std::string&’ {aka ‘const std::__cxx11::basic_string<char>&’}\r\n  396 |     ChainstateManagerOptions(const Context& context, const std::string& data_dir) noexcept\r\n      |                                                      ~~~~~~~~~~~~~~~~~~~^~~~~~~~\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoinkernel_wrapper.h:383:7: note: candidate: ‘ChainstateManagerOptions::ChainstateManagerOptions(ChainstateManagerOptions&&)’\r\n  383 | class ChainstateManagerOptions\r\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoinkernel_wrapper.h:383:7: note:   candidate expects 1 argument, 2 provided\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoin-chainstate.cpp:167:70: error: no matching function for call to ‘BlockManagerOptions::BlockManagerOptions(<brace-enclosed initializer list>)’\r\n  167 |     BlockManagerOptions blockman_opts{context, abs_datadir / \"blocks\"};\r\n      |                                                                      ^\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoinkernel_wrapper.h:425:5: note: candidate: ‘BlockManagerOptions::BlockManagerOptions(const Context&, const std::string&)’\r\n  425 |     BlockManagerOptions(const Context& context, const std::string& data_dir) noexcept\r\n      |     ^~~~~~~~~~~~~~~~~~~\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoinkernel_wrapper.h:425:68: note:   no known conversion for argument 2 from ‘std::filesystem::__cxx11::path’ to ‘const std::string&’ {aka ‘const std::__cxx11::basic_string<char>&’}\r\n  425 |     BlockManagerOptions(const Context& context, const std::string& data_dir) noexcept\r\n      |                                                 ~~~~~~~~~~~~~~~~~~~^~~~~~~~\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoinkernel_wrapper.h:412:7: note: candidate: ‘BlockManagerOptions::BlockManagerOptions(BlockManagerOptions&&)’\r\n  412 | class BlockManagerOptions\r\n      |       ^~~~~~~~~~~~~~~~~~~\r\n/home/runner/work/py-bitcoinkernel/py-bitcoinkernel/depend/bitcoin/src/kernel/bitcoinkernel_wrapper.h:412:7: note:   candidate expects 1 argument, 2 provided\r\ngmake[5]: *** [src/kernel/CMakeFiles/kernel-bitcoin-chainstate.dir/build.make:80: src/kernel/CMakeFiles/kernel-bitcoin-chainstate.dir/bitcoin-chainstate.cpp.obj] Error 1\r\ngmake[4]: *** [CMakeFiles/Makefile2:1168: src/kernel/CMakeFiles/kernel-bitcoin-chainstate.dir/all] Error 2\r\ngmake[3]: *** [Makefile:136: all] Error 2\r\ngmake[2]: *** [CMakeFiles/bitcoin_core.dir/build.make:86: bitcoin_core-prefix/src/bitcoin_core-stamp/bitcoin_core-build] Error 2\r\ngmake[1]: *** [CMakeFiles/Makefile2:122: CMakeFiles/bitcoin_core.dir/all] Error 2\r\ngmake: *** [Makefile:136: all] Error 2\r\n```\r\n</details>\r\n\r\nRan into this in one of my py-bitcoinkernel [CI runs](https://github.com/stickies-v/py-bitcoinkernel/actions/runs/13055462943/job/36425292411?pr=20). Slightly older HEAD, but at first glance still relevant, just wanted to dump here already until I have time to investigate further - sorry if it's irrelevant.",
      "created_at": "2025-01-30T15:39:49Z",
      "updated_at": "2025-01-30T21:25:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1935834281",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1935834281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1935842536",
      "pull_request_review_id": 2584290045,
      "id": 1935842536,
      "node_id": "PRRC_kwDOABII585zYpzo",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#include <kernel/bitcoinkernel_wrapper.h>\n+\n+#include <cassert>\n+#include <charconv>\n+#include <filesystem>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+std::vector<unsigned char> hex_string_to_char_vec(std::string_view hex)\n+{\n+    std::vector<unsigned char> bytes;\n+    bytes.reserve(hex.length() / 2);\n+\n+    for (size_t i{0}; i < hex.length(); i += 2) {\n+        unsigned char byte;\n+        auto [ptr, ec] = std::from_chars(hex.data() + i, hex.data() + i + 2, byte, 16);\n+        if (ec == std::errc{} && ptr == hex.data() + i + 2) {\n+            bytes.push_back(byte);\n+        }\n+    }\n+    return bytes;\n+}\n+\n+class KernelLog\n+{\n+public:\n+    void LogMessage(std::string_view message)\n+    {\n+        std::cout << \"kernel: \" << message;\n+    }\n+};\n+\n+class TestValidationInterface : public ValidationInterface<TestValidationInterface>\n+{\n+public:\n+    TestValidationInterface() : ValidationInterface() {}\n+\n+    std::optional<std::string> m_expected_valid_block = std::nullopt;\n+\n+    void BlockChecked(const UnownedBlock block, const BlockValidationState state) override\n+    {\n+        auto mode{state.ValidationMode()};\n+        switch (mode) {\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_VALID: {\n+            std::cout << \"Valid block\" << std::endl;\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_INVALID: {\n+            std::cout << \"Invalid block: \";\n+            auto result{state.BlockValidationResult()};\n+            switch (result) {\n+            case kernel_BlockValidationResult::kernel_BLOCK_RESULT_UNSET:\n+                std::cout << \"initial value. Block has not yet been rejected\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_HEADER_LOW_WORK:\n+                std::cout << \"the block header may be on a too-little-work chain\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CONSENSUS:\n+                std::cout << \"invalid by consensus rules (excluding any below reasons)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CACHED_INVALID:\n+                std::cout << \"this block was cached as being invalid and we didn't store the reason why\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_HEADER:\n+                std::cout << \"invalid proof of work or time too old\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MUTATED:\n+                std::cout << \"the block's data didn't match the data committed to by the PoW\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MISSING_PREV:\n+                std::cout << \"We don't have the previous block the checked one is built on\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_PREV:\n+                std::cout << \"A block this one builds on is invalid\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_TIME_FUTURE:\n+                std::cout << \"block timestamp was > 2 hours in the future (or our clock is bad)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CHECKPOINT:\n+                std::cout << \"the block failed to meet one of our checkpoints\" << std::endl;\n+                break;\n+            }\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_ERROR: {\n+            std::cout << \"Internal error\" << std::endl;\n+            return;\n+        }\n+        }\n+    }\n+};\n+\n+class TestKernelNotifications : public KernelNotifications<TestKernelNotifications>\n+{\n+public:\n+    void BlockTipHandler(kernel_SynchronizationState state, const kernel_BlockIndex* index) override\n+    {\n+        std::cout << \"Block tip changed\" << std::endl;\n+    }\n+\n+    void ProgressHandler(std::string_view title, int progress_percent, bool resume_possible) override\n+    {\n+        std::cout << \"Made progress: \" << title << \" \" << progress_percent << \"%\" << std::endl;\n+    }\n+\n+    void WarningSetHandler(kernel_Warning warning, std::string_view message) override\n+    {\n+        std::cout << message << std::endl;\n+    }\n+\n+    void WarningUnsetHandler(kernel_Warning warning) override\n+    {\n+        std::cout << \"Warning unset: \" << warning << std::endl;\n+    }\n+\n+    void FlushErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+\n+    void FatalErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+};\n+\n+int main(int argc, char* argv[])\n+{\n+    // SETUP: Argument parsing and handling\n+    if (argc != 2) {\n+        std::cerr\n+            << \"Usage: \" << argv[0] << \" DATADIR\" << std::endl\n+            << \"Display DATADIR information, and process hex-encoded blocks on standard input.\" << std::endl\n+            << std::endl\n+            << \"IMPORTANT: THIS EXECUTABLE IS EXPERIMENTAL, FOR TESTING ONLY, AND EXPECTED TO\" << std::endl\n+            << \"           BREAK IN FUTURE VERSIONS. DO NOT USE ON YOUR ACTUAL DATADIR.\" << std::endl;\n+        return 1;\n+    }\n+    std::filesystem::path abs_datadir{std::filesystem::absolute(argv[1])};\n+    std::filesystem::create_directories(abs_datadir);\n+\n+    kernel_LoggingOptions logging_options = {\n+        .log_timestamps = true,\n+        .log_time_micros = false,\n+        .log_threadnames = false,\n+        .log_sourcelocations = false,\n+        .always_print_category_levels = true,\n+    };\n+\n+    Logger logger{std::make_unique<KernelLog>(KernelLog{}), logging_options};\n+\n+    ContextOptions options{};\n+    ChainParams params{kernel_ChainType::kernel_CHAIN_TYPE_REGTEST};\n+    options.SetChainParams(params);\n+\n+    TestKernelNotifications notifications{};\n+    options.SetNotifications(notifications);\n+    TestValidationInterface validation_interface{};\n+    options.SetValidationInterface(validation_interface);\n+\n+    Context context{options};\n+    assert(context);\n+\n+    ChainstateManagerOptions chainman_opts{context, abs_datadir};",
      "path": "src/kernel/bitcoin-chainstate.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "01a43b24436e0aed7b8f79d3857630a4bf6a0545",
      "in_reply_to_id": 1935834281,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good catch, I will try add the tests and chainstate binary to the CI here too.",
      "created_at": "2025-01-30T15:44:34Z",
      "updated_at": "2025-01-30T15:44:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1935842536",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1935842536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937145120",
      "pull_request_review_id": 2586451547,
      "id": 1937145120,
      "node_id": "PRRC_kwDOABII585zdn0g",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#include <kernel/bitcoinkernel_wrapper.h>\n+\n+#include <cassert>\n+#include <charconv>\n+#include <filesystem>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+std::vector<unsigned char> hex_string_to_char_vec(std::string_view hex)\n+{\n+    std::vector<unsigned char> bytes;\n+    bytes.reserve(hex.length() / 2);\n+\n+    for (size_t i{0}; i < hex.length(); i += 2) {\n+        unsigned char byte;\n+        auto [ptr, ec] = std::from_chars(hex.data() + i, hex.data() + i + 2, byte, 16);\n+        if (ec == std::errc{} && ptr == hex.data() + i + 2) {\n+            bytes.push_back(byte);\n+        }\n+    }\n+    return bytes;\n+}\n+\n+class KernelLog\n+{\n+public:\n+    void LogMessage(std::string_view message)\n+    {\n+        std::cout << \"kernel: \" << message;\n+    }\n+};\n+\n+class TestValidationInterface : public ValidationInterface<TestValidationInterface>\n+{\n+public:\n+    TestValidationInterface() : ValidationInterface() {}\n+\n+    std::optional<std::string> m_expected_valid_block = std::nullopt;\n+\n+    void BlockChecked(const UnownedBlock block, const BlockValidationState state) override\n+    {\n+        auto mode{state.ValidationMode()};\n+        switch (mode) {\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_VALID: {\n+            std::cout << \"Valid block\" << std::endl;\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_INVALID: {\n+            std::cout << \"Invalid block: \";\n+            auto result{state.BlockValidationResult()};\n+            switch (result) {\n+            case kernel_BlockValidationResult::kernel_BLOCK_RESULT_UNSET:\n+                std::cout << \"initial value. Block has not yet been rejected\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_HEADER_LOW_WORK:\n+                std::cout << \"the block header may be on a too-little-work chain\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CONSENSUS:\n+                std::cout << \"invalid by consensus rules (excluding any below reasons)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CACHED_INVALID:\n+                std::cout << \"this block was cached as being invalid and we didn't store the reason why\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_HEADER:\n+                std::cout << \"invalid proof of work or time too old\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MUTATED:\n+                std::cout << \"the block's data didn't match the data committed to by the PoW\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MISSING_PREV:\n+                std::cout << \"We don't have the previous block the checked one is built on\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_PREV:\n+                std::cout << \"A block this one builds on is invalid\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_TIME_FUTURE:\n+                std::cout << \"block timestamp was > 2 hours in the future (or our clock is bad)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CHECKPOINT:\n+                std::cout << \"the block failed to meet one of our checkpoints\" << std::endl;\n+                break;\n+            }\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_ERROR: {\n+            std::cout << \"Internal error\" << std::endl;\n+            return;\n+        }\n+        }\n+    }\n+};\n+\n+class TestKernelNotifications : public KernelNotifications<TestKernelNotifications>\n+{\n+public:\n+    void BlockTipHandler(kernel_SynchronizationState state, const kernel_BlockIndex* index) override\n+    {\n+        std::cout << \"Block tip changed\" << std::endl;\n+    }\n+\n+    void ProgressHandler(std::string_view title, int progress_percent, bool resume_possible) override\n+    {\n+        std::cout << \"Made progress: \" << title << \" \" << progress_percent << \"%\" << std::endl;\n+    }\n+\n+    void WarningSetHandler(kernel_Warning warning, std::string_view message) override\n+    {\n+        std::cout << message << std::endl;\n+    }\n+\n+    void WarningUnsetHandler(kernel_Warning warning) override\n+    {\n+        std::cout << \"Warning unset: \" << warning << std::endl;\n+    }\n+\n+    void FlushErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+\n+    void FatalErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+};\n+\n+int main(int argc, char* argv[])\n+{\n+    // SETUP: Argument parsing and handling\n+    if (argc != 2) {\n+        std::cerr\n+            << \"Usage: \" << argv[0] << \" DATADIR\" << std::endl\n+            << \"Display DATADIR information, and process hex-encoded blocks on standard input.\" << std::endl\n+            << std::endl\n+            << \"IMPORTANT: THIS EXECUTABLE IS EXPERIMENTAL, FOR TESTING ONLY, AND EXPECTED TO\" << std::endl\n+            << \"           BREAK IN FUTURE VERSIONS. DO NOT USE ON YOUR ACTUAL DATADIR.\" << std::endl;\n+        return 1;\n+    }\n+    std::filesystem::path abs_datadir{std::filesystem::absolute(argv[1])};\n+    std::filesystem::create_directories(abs_datadir);\n+\n+    kernel_LoggingOptions logging_options = {\n+        .log_timestamps = true,\n+        .log_time_micros = false,\n+        .log_threadnames = false,\n+        .log_sourcelocations = false,\n+        .always_print_category_levels = true,\n+    };\n+\n+    Logger logger{std::make_unique<KernelLog>(KernelLog{}), logging_options};\n+\n+    ContextOptions options{};\n+    ChainParams params{kernel_ChainType::kernel_CHAIN_TYPE_REGTEST};\n+    options.SetChainParams(params);\n+\n+    TestKernelNotifications notifications{};\n+    options.SetNotifications(notifications);\n+    TestValidationInterface validation_interface{};\n+    options.SetValidationInterface(validation_interface);\n+\n+    Context context{options};\n+    assert(context);\n+\n+    ChainstateManagerOptions chainman_opts{context, abs_datadir};",
      "path": "src/kernel/bitcoin-chainstate.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "01a43b24436e0aed7b8f79d3857630a4bf6a0545",
      "in_reply_to_id": 1935834281,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added it to the cross compiled windows job now, but it is going to take extra work (#31158) to add it to the native job too.",
      "created_at": "2025-01-31T12:22:01Z",
      "updated_at": "2025-01-31T12:22:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1937145120",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937145120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938274204",
      "pull_request_review_id": 2588336382,
      "id": 1938274204,
      "node_id": "PRRC_kwDOABII585zh7ec",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#include <kernel/bitcoinkernel_wrapper.h>\n+\n+#include <cassert>\n+#include <charconv>\n+#include <filesystem>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+std::vector<unsigned char> hex_string_to_char_vec(std::string_view hex)\n+{\n+    std::vector<unsigned char> bytes;\n+    bytes.reserve(hex.length() / 2);\n+\n+    for (size_t i{0}; i < hex.length(); i += 2) {\n+        unsigned char byte;\n+        auto [ptr, ec] = std::from_chars(hex.data() + i, hex.data() + i + 2, byte, 16);\n+        if (ec == std::errc{} && ptr == hex.data() + i + 2) {\n+            bytes.push_back(byte);\n+        }\n+    }\n+    return bytes;\n+}\n+\n+class KernelLog\n+{\n+public:\n+    void LogMessage(std::string_view message)\n+    {\n+        std::cout << \"kernel: \" << message;\n+    }\n+};\n+\n+class TestValidationInterface : public ValidationInterface<TestValidationInterface>\n+{\n+public:\n+    TestValidationInterface() : ValidationInterface() {}\n+\n+    std::optional<std::string> m_expected_valid_block = std::nullopt;\n+\n+    void BlockChecked(const UnownedBlock block, const BlockValidationState state) override\n+    {\n+        auto mode{state.ValidationMode()};\n+        switch (mode) {\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_VALID: {\n+            std::cout << \"Valid block\" << std::endl;\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_INVALID: {\n+            std::cout << \"Invalid block: \";\n+            auto result{state.BlockValidationResult()};\n+            switch (result) {\n+            case kernel_BlockValidationResult::kernel_BLOCK_RESULT_UNSET:\n+                std::cout << \"initial value. Block has not yet been rejected\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_HEADER_LOW_WORK:\n+                std::cout << \"the block header may be on a too-little-work chain\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CONSENSUS:\n+                std::cout << \"invalid by consensus rules (excluding any below reasons)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CACHED_INVALID:\n+                std::cout << \"this block was cached as being invalid and we didn't store the reason why\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_HEADER:\n+                std::cout << \"invalid proof of work or time too old\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MUTATED:\n+                std::cout << \"the block's data didn't match the data committed to by the PoW\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MISSING_PREV:\n+                std::cout << \"We don't have the previous block the checked one is built on\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_PREV:\n+                std::cout << \"A block this one builds on is invalid\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_TIME_FUTURE:\n+                std::cout << \"block timestamp was > 2 hours in the future (or our clock is bad)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CHECKPOINT:\n+                std::cout << \"the block failed to meet one of our checkpoints\" << std::endl;\n+                break;\n+            }\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_ERROR: {\n+            std::cout << \"Internal error\" << std::endl;\n+            return;\n+        }\n+        }\n+    }\n+};\n+\n+class TestKernelNotifications : public KernelNotifications<TestKernelNotifications>\n+{\n+public:\n+    void BlockTipHandler(kernel_SynchronizationState state, const kernel_BlockIndex* index) override\n+    {\n+        std::cout << \"Block tip changed\" << std::endl;\n+    }\n+\n+    void ProgressHandler(std::string_view title, int progress_percent, bool resume_possible) override\n+    {\n+        std::cout << \"Made progress: \" << title << \" \" << progress_percent << \"%\" << std::endl;\n+    }\n+\n+    void WarningSetHandler(kernel_Warning warning, std::string_view message) override\n+    {\n+        std::cout << message << std::endl;\n+    }\n+\n+    void WarningUnsetHandler(kernel_Warning warning) override\n+    {\n+        std::cout << \"Warning unset: \" << warning << std::endl;\n+    }\n+\n+    void FlushErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+\n+    void FatalErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+};\n+\n+int main(int argc, char* argv[])\n+{\n+    // SETUP: Argument parsing and handling\n+    if (argc != 2) {\n+        std::cerr\n+            << \"Usage: \" << argv[0] << \" DATADIR\" << std::endl\n+            << \"Display DATADIR information, and process hex-encoded blocks on standard input.\" << std::endl\n+            << std::endl\n+            << \"IMPORTANT: THIS EXECUTABLE IS EXPERIMENTAL, FOR TESTING ONLY, AND EXPECTED TO\" << std::endl\n+            << \"           BREAK IN FUTURE VERSIONS. DO NOT USE ON YOUR ACTUAL DATADIR.\" << std::endl;\n+        return 1;\n+    }\n+    std::filesystem::path abs_datadir{std::filesystem::absolute(argv[1])};\n+    std::filesystem::create_directories(abs_datadir);\n+\n+    kernel_LoggingOptions logging_options = {\n+        .log_timestamps = true,\n+        .log_time_micros = false,\n+        .log_threadnames = false,\n+        .log_sourcelocations = false,\n+        .always_print_category_levels = true,\n+    };\n+\n+    Logger logger{std::make_unique<KernelLog>(KernelLog{}), logging_options};\n+\n+    ContextOptions options{};\n+    ChainParams params{kernel_ChainType::kernel_CHAIN_TYPE_REGTEST};\n+    options.SetChainParams(params);\n+\n+    TestKernelNotifications notifications{};\n+    options.SetNotifications(notifications);\n+    TestValidationInterface validation_interface{};\n+    options.SetValidationInterface(validation_interface);\n+\n+    Context context{options};\n+    assert(context);\n+\n+    ChainstateManagerOptions chainman_opts{context, abs_datadir};",
      "path": "src/kernel/bitcoin-chainstate.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "01a43b24436e0aed7b8f79d3857630a4bf6a0545",
      "in_reply_to_id": 1935834281,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, added symbol exporting now, so we should have somewhat working windows support.",
      "created_at": "2025-02-01T13:13:59Z",
      "updated_at": "2025-02-01T13:13:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1938274204",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938274204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938285967",
      "pull_request_review_id": 2588347929,
      "id": 1938285967,
      "node_id": "PRRC_kwDOABII585zh-WP",
      "diff_hunk": "@@ -0,0 +1,203 @@\n+#include <kernel/bitcoinkernel_wrapper.h>\n+\n+#include <cassert>\n+#include <charconv>\n+#include <filesystem>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+std::vector<unsigned char> hex_string_to_char_vec(std::string_view hex)\n+{\n+    std::vector<unsigned char> bytes;\n+    bytes.reserve(hex.length() / 2);\n+\n+    for (size_t i{0}; i < hex.length(); i += 2) {\n+        unsigned char byte;\n+        auto [ptr, ec] = std::from_chars(hex.data() + i, hex.data() + i + 2, byte, 16);\n+        if (ec == std::errc{} && ptr == hex.data() + i + 2) {\n+            bytes.push_back(byte);\n+        }\n+    }\n+    return bytes;\n+}\n+\n+class KernelLog\n+{\n+public:\n+    void LogMessage(std::string_view message)\n+    {\n+        std::cout << \"kernel: \" << message;\n+    }\n+};\n+\n+class TestValidationInterface : public ValidationInterface<TestValidationInterface>\n+{\n+public:\n+    TestValidationInterface() : ValidationInterface() {}\n+\n+    std::optional<std::string> m_expected_valid_block = std::nullopt;\n+\n+    void BlockChecked(const UnownedBlock block, const BlockValidationState state) override\n+    {\n+        auto mode{state.ValidationMode()};\n+        switch (mode) {\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_VALID: {\n+            std::cout << \"Valid block\" << std::endl;\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_INVALID: {\n+            std::cout << \"Invalid block: \";\n+            auto result{state.BlockValidationResult()};\n+            switch (result) {\n+            case kernel_BlockValidationResult::kernel_BLOCK_RESULT_UNSET:\n+                std::cout << \"initial value. Block has not yet been rejected\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_HEADER_LOW_WORK:\n+                std::cout << \"the block header may be on a too-little-work chain\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CONSENSUS:\n+                std::cout << \"invalid by consensus rules (excluding any below reasons)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CACHED_INVALID:\n+                std::cout << \"this block was cached as being invalid and we didn't store the reason why\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_HEADER:\n+                std::cout << \"invalid proof of work or time too old\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MUTATED:\n+                std::cout << \"the block's data didn't match the data committed to by the PoW\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_MISSING_PREV:\n+                std::cout << \"We don't have the previous block the checked one is built on\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_INVALID_PREV:\n+                std::cout << \"A block this one builds on is invalid\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_TIME_FUTURE:\n+                std::cout << \"block timestamp was > 2 hours in the future (or our clock is bad)\" << std::endl;\n+                break;\n+            case kernel_BlockValidationResult::kernel_BLOCK_CHECKPOINT:\n+                std::cout << \"the block failed to meet one of our checkpoints\" << std::endl;\n+                break;\n+            }\n+            return;\n+        }\n+        case kernel_ValidationMode::kernel_VALIDATION_STATE_ERROR: {\n+            std::cout << \"Internal error\" << std::endl;\n+            return;\n+        }\n+        }\n+    }\n+};\n+\n+class TestKernelNotifications : public KernelNotifications<TestKernelNotifications>\n+{\n+public:\n+    void BlockTipHandler(kernel_SynchronizationState state, const kernel_BlockIndex* index) override\n+    {\n+        std::cout << \"Block tip changed\" << std::endl;\n+    }\n+\n+    void ProgressHandler(std::string_view title, int progress_percent, bool resume_possible) override\n+    {\n+        std::cout << \"Made progress: \" << title << \" \" << progress_percent << \"%\" << std::endl;\n+    }\n+\n+    void WarningSetHandler(kernel_Warning warning, std::string_view message) override\n+    {\n+        std::cout << message << std::endl;\n+    }\n+\n+    void WarningUnsetHandler(kernel_Warning warning) override\n+    {\n+        std::cout << \"Warning unset: \" << warning << std::endl;\n+    }\n+\n+    void FlushErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+\n+    void FatalErrorHandler(std::string_view error) override\n+    {\n+        std::cout << error << std::endl;\n+    }\n+};\n+\n+int main(int argc, char* argv[])\n+{\n+    // SETUP: Argument parsing and handling\n+    if (argc != 2) {\n+        std::cerr\n+            << \"Usage: \" << argv[0] << \" DATADIR\" << std::endl\n+            << \"Display DATADIR information, and process hex-encoded blocks on standard input.\" << std::endl\n+            << std::endl\n+            << \"IMPORTANT: THIS EXECUTABLE IS EXPERIMENTAL, FOR TESTING ONLY, AND EXPECTED TO\" << std::endl\n+            << \"           BREAK IN FUTURE VERSIONS. DO NOT USE ON YOUR ACTUAL DATADIR.\" << std::endl;\n+        return 1;\n+    }\n+    std::filesystem::path abs_datadir{std::filesystem::absolute(argv[1])};\n+    std::filesystem::create_directories(abs_datadir);\n+\n+    kernel_LoggingOptions logging_options = {\n+        .log_timestamps = true,\n+        .log_time_micros = false,\n+        .log_threadnames = false,\n+        .log_sourcelocations = false,\n+        .always_print_category_levels = true,\n+    };\n+\n+    Logger logger{std::make_unique<KernelLog>(KernelLog{}), logging_options};\n+\n+    ContextOptions options{};\n+    ChainParams params{kernel_ChainType::kernel_CHAIN_TYPE_REGTEST};\n+    options.SetChainParams(params);\n+\n+    TestKernelNotifications notifications{};\n+    options.SetNotifications(notifications);\n+    TestValidationInterface validation_interface{};\n+    options.SetValidationInterface(validation_interface);\n+\n+    Context context{options};\n+    assert(context);\n+\n+    ChainstateManagerOptions chainman_opts{context, abs_datadir};",
      "path": "src/kernel/bitcoin-chainstate.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "01a43b24436e0aed7b8f79d3857630a4bf6a0545",
      "in_reply_to_id": 1935834281,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice! Just to be clear: I only had issues with compiling the bitcoin-chainstate target, the bitcoinkernel library already was working fine (at least the functions covered with py-bitcoinkernel's test suite, which is not yet 100%) with the mingw32 cross-compiled binary.\r\n\r\n(But I suspect you're talking about \"somewhat working **native** windows support\", which I'm not using in my pipelines)",
      "created_at": "2025-02-01T14:39:55Z",
      "updated_at": "2025-02-01T14:39:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1938285967",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938285967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1945424649",
      "pull_request_review_id": 2599912096,
      "id": 1945424649,
      "node_id": "PRRC_kwDOABII585z9NMJ",
      "diff_hunk": "@@ -211,6 +211,10 @@ function(add_all_test_targets)\n   endforeach()\n endfunction()\n \n+if (BUILD_KERNEL_TEST)\n+  add_subdirectory(kernel)\n+endif()\n+",
      "path": "src/test/CMakeLists.txt",
      "position": null,
      "original_position": 7,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "817865d57daa822370b0f67e1e079fdd25ab3130",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure if this is the best approach. `-DBUILD_KERNEL_LIB=ON -DBUILD_KERNEL_TEST=ON` should imo build the tests even if `-DBUILD_TESTS=OFF`. I think an approach where we update `src/CMakeLists.txt` with the below makes more sense (quick sketch)?\r\n\r\n```cmake\r\nif(BUILD_KERNEL_LIB)\r\n  add_subdirectory(kernel)\r\n  if (BUILD_KERNEL_TEST)\r\n    add_subdirectory(test/kernel)\r\n  endif()\r\nendif()\r\n```",
      "created_at": "2025-02-06T20:56:12Z",
      "updated_at": "2025-02-06T20:56:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1945424649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1945424649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 214,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1957466889",
      "pull_request_review_id": 2619786584,
      "id": 1957466889,
      "node_id": "PRRC_kwDOABII5850rJMJ",
      "diff_hunk": "@@ -1,11 +1,1135 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "a604321c3e4bd50b52fa28e8567f6b068b2d2fb3",
      "in_reply_to_id": null,
      "user": {
        "login": "walterl",
        "id": 23798,
        "node_id": "MDQ6VXNlcjIzNzk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/23798?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/walterl",
        "html_url": "https://github.com/walterl",
        "followers_url": "https://api.github.com/users/walterl/followers",
        "following_url": "https://api.github.com/users/walterl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/walterl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/walterl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/walterl/subscriptions",
        "organizations_url": "https://api.github.com/users/walterl/orgs",
        "repos_url": "https://api.github.com/users/walterl/repos",
        "events_url": "https://api.github.com/users/walterl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/walterl/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't this supposed to return `kernel_UNKNOWN_NEW_RULES_ACTIVATED`?\r\n\r\n```suggestion\r\n        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\r\n```",
      "created_at": "2025-02-17T00:59:37Z",
      "updated_at": "2025-02-17T00:59:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1957466889",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1957466889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1958410398",
      "pull_request_review_id": 2621355378,
      "id": 1958410398,
      "node_id": "PRRC_kwDOABII5850uvie",
      "diff_hunk": "@@ -1,11 +1,1135 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "a604321c3e4bd50b52fa28e8567f6b068b2d2fb3",
      "in_reply_to_id": 1957466889,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed, I think I mixed this up at some point during a rebase. Thank!",
      "created_at": "2025-02-17T15:20:24Z",
      "updated_at": "2025-02-17T15:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1958410398",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1958410398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1989793614",
      "pull_request_review_id": 2675490600,
      "id": 1989793614,
      "node_id": "PRRC_kwDOABII5852mddO",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 161,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this whole block is from a previous version and should now be removed?",
      "created_at": "2025-03-11T17:20:04Z",
      "updated_at": "2025-03-13T13:35:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1989793614",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1989793614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1991230564",
      "pull_request_review_id": 2675490600,
      "id": 1991230564,
      "node_id": "PRRC_kwDOABII5852r8Rk",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/** @name Transaction\n+ * Functions for working with transactions.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+///@}\n+\n+/** @name ScriptPubkey\n+ * Functions for working with script pubkeys.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+BITCOINKERNEL_API kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+BITCOINKERNEL_API void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+///@}\n+\n+/** @name TransactionOutput\n+ * Functions for working with transaction outputs.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+BITCOINKERNEL_API kernel_TransactionOutput* kernel_transaction_output_create(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey of an output in the returned script pubkey\n+ * opaque object.\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The data for the output's script pubkey.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* kernel_copy_script_pubkey_from_output(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Gets the amount associated with this transaction output\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The amount.\n+ */\n+BITCOINKERNEL_API int64_t kernel_get_transaction_output_amount(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+///@}\n+\n+/** @name Script\n+ * Functions for working with scripts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+///@}\n+\n+/** @name Logging\n+ * Logging-related functions.\n+ */\n+///@{\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+BITCOINKERNEL_API void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    const void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+BITCOINKERNEL_API void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+///@}\n+\n+/** @name ChainParameters\n+ * Functions for working with chain parameters.\n+ */\n+///@{\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+BITCOINKERNEL_API const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+BITCOINKERNEL_API void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 641,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this shouldn't be `const`?\r\n\r\n```suggestion\r\nBITCOINKERNEL_API void kernel_chain_parameters_destroy(kernel_ChainParameters* chain_parameters);\r\n```",
      "created_at": "2025-03-12T11:06:06Z",
      "updated_at": "2025-03-13T13:35:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1991230564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1991230564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1991236489",
      "pull_request_review_id": 2675490600,
      "id": 1991236489,
      "node_id": "PRRC_kwDOABII5852r9uJ",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (options && options->m_validation_interface) {\n+            m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+            m_signals->RegisterValidationInterface(m_validation_interface.get());\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+\n+    ~Context()\n+    {\n+        m_signals->UnregisterValidationInterface(m_validation_interface.get());\n+    }\n+};\n+\n+//! Helper struct to wrap the ChainstateManager-related Options\n+struct ChainstateManagerOptions {\n+    ChainstateManager::Options m_chainman_options;\n+    node::BlockManager::Options m_blockman_options;\n+    node::ChainstateLoadOptions m_chainstate_load_options;\n+\n+    ChainstateManagerOptions(const Context* context, const fs::path& data_dir, const fs::path& blocks_dir)\n+        : m_chainman_options{ChainstateManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .datadir = data_dir,\n+              .notifications = *context->m_notifications,\n+              .signals = context->m_signals.get()}},\n+          m_blockman_options{node::BlockManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .blocks_dir = blocks_dir,\n+              .notifications = *context->m_notifications,\n+              .block_tree_db_params = DBParams{\n+                  .path = data_dir / \"blocks\" / \"index\",\n+                  .cache_bytes = kernel::CacheSizes{DEFAULT_KERNEL_CACHE}.block_tree_db,\n+              }}},\n+          m_chainstate_load_options{node::ChainstateLoadOptions{}}\n+    {\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManagerOptions* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManagerOptions* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                          const int64_t amount_,\n+                          const kernel_Transaction* tx_to,\n+                          const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                          const unsigned int input_index,\n+                          const unsigned int flags,\n+                          kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,\n+                        script_pubkey,\n+                        &tx.vin[input_index].scriptWitness,\n+                        flags,\n+                        TransactionSignatureChecker(&tx, input_index, amount, txdata, MissingDataBehavior::FAIL),\n+                        nullptr);\n+}\n+\n+bool kernel_add_log_level_category(const kernel_LogCategory category, const kernel_LogLevel level_)\n+{\n+    const auto level{log_level_to_string(level_)};\n+    if (category == kernel_LogCategory::kernel_LOG_ALL) {\n+        return LogInstance().SetLogLevel(level);\n+    }\n+\n+    return LogInstance().SetCategoryLogLevel(log_category_to_string(category), level);\n+}\n+\n+bool kernel_enable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().EnableCategory(log_category_to_string(category));\n+}\n+\n+bool kernel_disable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().DisableCategory(log_category_to_string(category));\n+}\n+\n+void kernel_disable_logging()\n+{\n+    LogInstance().DisableLogging();\n+}\n+\n+kernel_LoggingConnection* kernel_logging_connection_create(kernel_LogCallback callback,\n+                                                           const void* user_data,\n+                                                           const kernel_LoggingOptions options)\n+{\n+    LogInstance().m_log_timestamps = options.log_timestamps;\n+    LogInstance().m_log_time_micros = options.log_time_micros;\n+    LogInstance().m_log_threadnames = options.log_threadnames;\n+    LogInstance().m_log_sourcelocations = options.log_sourcelocations;\n+    LogInstance().m_always_print_category_level = options.always_print_category_levels;\n+\n+    auto connection{LogInstance().PushBackCallback([callback, user_data](const std::string& str) { callback((void*)user_data, str.c_str(), str.length()); })};\n+\n+    try {\n+        // Only start logging if we just added the connection.\n+        if (LogInstance().NumConnections() == 1 && !LogInstance().StartLogging()) {\n+            LogError(\"Logger start failed.\");\n+            LogInstance().DeleteCallback(connection);\n+            return nullptr;\n+        }\n+    } catch (std::exception&) {\n+        LogError(\"Logger start failed.\");\n+        LogInstance().DeleteCallback(connection);\n+        return nullptr;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger connected.\");\n+\n+    auto heap_connection{new std::list<std::function<void(const std::string&)>>::iterator(connection)};\n+    return reinterpret_cast<kernel_LoggingConnection*>(heap_connection);\n+}\n+\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* connection_)\n+{\n+    auto connection{reinterpret_cast<std::list<std::function<void(const std::string&)>>::iterator*>(connection_)};\n+    if (!connection) {\n+        return;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger disconnected.\");\n+    LogInstance().DeleteCallback(*connection);\n+    delete connection;\n+\n+    // We are not buffering if we have a connection, so check that it is not the\n+    // last available connection.\n+    if (!LogInstance().Enabled()) {\n+        LogInstance().DisconnectTestLogger();\n+    }\n+}\n+\n+const kernel_ChainParameters* kernel_chain_parameters_create(const kernel_ChainType chain_type)\n+{\n+    switch (chain_type) {\n+    case kernel_ChainType::kernel_CHAIN_TYPE_MAINNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::Main().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET_4: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet4().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_SIGNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::SigNet({}).release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_REGTEST: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::RegTest({}).release());\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters)\n+{\n+    if (chain_parameters) {\n+        delete cast_const_chain_params(chain_parameters);\n+    }\n+}\n+\n+kernel_ContextOptions* kernel_context_options_create()\n+{\n+    return reinterpret_cast<kernel_ContextOptions*>(new ContextOptions{});\n+}\n+\n+void kernel_context_options_set_chainparams(kernel_ContextOptions* options_, const kernel_ChainParameters* chain_parameters)\n+{\n+    auto options{cast_context_options(options_)};\n+    auto chain_params{reinterpret_cast<const CChainParams*>(chain_parameters)};\n+    // Copy the chainparams, so the caller can free it again\n+    options->m_chainparams = std::make_unique<const CChainParams>(*chain_params);\n+}\n+\n+void kernel_context_options_set_notifications(kernel_ContextOptions* options_, kernel_NotificationInterfaceCallbacks notifications)\n+{\n+    auto options{cast_context_options(options_)};\n+    // Copy the notifications, so the caller can free it again\n+    options->m_notifications = std::make_unique<const KernelNotifications>(notifications);\n+}\n+\n+void kernel_context_options_set_validation_interface(kernel_ContextOptions* options_, kernel_ValidationInterfaceCallbacks vi_cbs)\n+{\n+    auto options{cast_context_options(options_)};\n+    options->m_validation_interface = std::make_unique<KernelValidationInterface>(KernelValidationInterface(vi_cbs));\n+}\n+\n+void kernel_context_options_destroy(kernel_ContextOptions* options)\n+{\n+    if (options) {\n+        delete cast_context_options(options);\n+    }\n+}\n+\n+kernel_Context* kernel_context_create(const kernel_ContextOptions* options_)\n+{\n+    auto options{cast_const_context_options(options_)};\n+    bool sane{true};\n+    auto context{new Context{options, sane}};\n+    if (!sane) {\n+        LogError(\"Kernel context sanity check failed.\");\n+        delete context;\n+        return nullptr;\n+    }\n+    return reinterpret_cast<kernel_Context*>(context);\n+}\n+\n+bool kernel_context_interrupt(kernel_Context* context_)\n+{\n+    auto& context{*cast_context(context_)};\n+    return (*context.m_interrupt)();\n+}\n+\n+void kernel_context_destroy(kernel_Context* context)\n+{\n+    if (context) {\n+        delete cast_context(context);\n+    }\n+}\n+\n+kernel_ValidationMode kernel_get_validation_mode_from_block_validation_state(const kernel_BlockValidationState* block_validation_state_)\n+{\n+    auto& block_validation_state = *cast_block_validation_state(block_validation_state_);\n+    if (block_validation_state.IsValid()) return kernel_ValidationMode::kernel_VALIDATION_STATE_VALID;\n+    if (block_validation_state.IsInvalid()) return kernel_ValidationMode::kernel_VALIDATION_STATE_INVALID;\n+    return kernel_ValidationMode::kernel_VALIDATION_STATE_ERROR;\n+}\n+\n+kernel_BlockValidationResult kernel_get_block_validation_result_from_block_validation_state(const kernel_BlockValidationState* block_validation_state_)\n+{\n+    auto& block_validation_state = *cast_block_validation_state(block_validation_state_);\n+    switch (block_validation_state.GetResult()) {\n+    case BlockValidationResult::BLOCK_RESULT_UNSET:\n+        return kernel_BlockValidationResult::kernel_BLOCK_RESULT_UNSET;\n+    case BlockValidationResult::BLOCK_CONSENSUS:\n+        return kernel_BlockValidationResult::kernel_BLOCK_CONSENSUS;\n+    case BlockValidationResult::BLOCK_CACHED_INVALID:\n+        return kernel_BlockValidationResult::kernel_BLOCK_CACHED_INVALID;\n+    case BlockValidationResult::BLOCK_INVALID_HEADER:\n+        return kernel_BlockValidationResult::kernel_BLOCK_INVALID_HEADER;\n+    case BlockValidationResult::BLOCK_MUTATED:\n+        return kernel_BlockValidationResult::kernel_BLOCK_MUTATED;\n+    case BlockValidationResult::BLOCK_MISSING_PREV:\n+        return kernel_BlockValidationResult::kernel_BLOCK_MISSING_PREV;\n+    case BlockValidationResult::BLOCK_INVALID_PREV:\n+        return kernel_BlockValidationResult::kernel_BLOCK_INVALID_PREV;\n+    case BlockValidationResult::BLOCK_TIME_FUTURE:\n+        return kernel_BlockValidationResult::kernel_BLOCK_TIME_FUTURE;\n+    case BlockValidationResult::BLOCK_CHECKPOINT:\n+        return kernel_BlockValidationResult::kernel_BLOCK_CHECKPOINT;\n+    case BlockValidationResult::BLOCK_HEADER_LOW_WORK:\n+        return kernel_BlockValidationResult::kernel_BLOCK_HEADER_LOW_WORK;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_ChainstateManagerOptions* kernel_chainstate_manager_options_create(const kernel_Context* context_, const char* data_dir, size_t data_dir_len, const char* blocks_dir, size_t blocks_dir_len)\n+{\n+    try {\n+        fs::path abs_data_dir{fs::absolute(fs::PathFromString({data_dir, data_dir_len}))};\n+        fs::create_directories(abs_data_dir);\n+        fs::path abs_blocks_dir{fs::absolute(fs::PathFromString({blocks_dir, blocks_dir_len}))};\n+        fs::create_directories(abs_blocks_dir);\n+        auto context{cast_const_context(context_)};\n+        return reinterpret_cast<kernel_ChainstateManagerOptions*>(new ChainstateManagerOptions(context, abs_data_dir, abs_blocks_dir));\n+    } catch (const std::exception& e) {\n+        LogError(\"Failed to create chainstate manager options: %s\", e.what());\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_chainstate_manager_options_set_worker_threads_num(kernel_ChainstateManagerOptions* opts_, int worker_threads)\n+{\n+    auto opts{cast_chainstate_manager_options(opts_)};\n+    opts->m_chainman_options.worker_threads_num = worker_threads;\n+}\n+\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* options)\n+{\n+    if (options) {\n+        delete cast_const_chainstate_manager_options(options);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 738,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I don't think it makes a functional difference, but it's a bit weird using the const cast here (+ for `ChainParameters`, `BlockUndo`)?",
      "created_at": "2025-03-12T11:09:57Z",
      "updated_at": "2025-03-13T13:35:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1991236489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1991236489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1991274124",
      "pull_request_review_id": 2675490600,
      "id": 1991274124,
      "node_id": "PRRC_kwDOABII5852sG6M",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (options && options->m_validation_interface) {\n+            m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+            m_signals->RegisterValidationInterface(m_validation_interface.get());\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+\n+    ~Context()\n+    {\n+        m_signals->UnregisterValidationInterface(m_validation_interface.get());\n+    }\n+};\n+\n+//! Helper struct to wrap the ChainstateManager-related Options\n+struct ChainstateManagerOptions {\n+    ChainstateManager::Options m_chainman_options;\n+    node::BlockManager::Options m_blockman_options;\n+    node::ChainstateLoadOptions m_chainstate_load_options;\n+\n+    ChainstateManagerOptions(const Context* context, const fs::path& data_dir, const fs::path& blocks_dir)\n+        : m_chainman_options{ChainstateManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .datadir = data_dir,\n+              .notifications = *context->m_notifications,\n+              .signals = context->m_signals.get()}},\n+          m_blockman_options{node::BlockManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .blocks_dir = blocks_dir,\n+              .notifications = *context->m_notifications,\n+              .block_tree_db_params = DBParams{\n+                  .path = data_dir / \"blocks\" / \"index\",\n+                  .cache_bytes = kernel::CacheSizes{DEFAULT_KERNEL_CACHE}.block_tree_db,\n+              }}},\n+          m_chainstate_load_options{node::ChainstateLoadOptions{}}\n+    {\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManagerOptions* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManagerOptions* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                          const int64_t amount_,\n+                          const kernel_Transaction* tx_to,\n+                          const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                          const unsigned int input_index,\n+                          const unsigned int flags,\n+                          kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,\n+                        script_pubkey,\n+                        &tx.vin[input_index].scriptWitness,\n+                        flags,\n+                        TransactionSignatureChecker(&tx, input_index, amount, txdata, MissingDataBehavior::FAIL),\n+                        nullptr);\n+}\n+\n+bool kernel_add_log_level_category(const kernel_LogCategory category, const kernel_LogLevel level_)\n+{\n+    const auto level{log_level_to_string(level_)};\n+    if (category == kernel_LogCategory::kernel_LOG_ALL) {\n+        return LogInstance().SetLogLevel(level);\n+    }\n+\n+    return LogInstance().SetCategoryLogLevel(log_category_to_string(category), level);\n+}\n+\n+bool kernel_enable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().EnableCategory(log_category_to_string(category));\n+}\n+\n+bool kernel_disable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().DisableCategory(log_category_to_string(category));\n+}\n+\n+void kernel_disable_logging()\n+{\n+    LogInstance().DisableLogging();\n+}\n+\n+kernel_LoggingConnection* kernel_logging_connection_create(kernel_LogCallback callback,\n+                                                           const void* user_data,\n+                                                           const kernel_LoggingOptions options)\n+{\n+    LogInstance().m_log_timestamps = options.log_timestamps;\n+    LogInstance().m_log_time_micros = options.log_time_micros;\n+    LogInstance().m_log_threadnames = options.log_threadnames;\n+    LogInstance().m_log_sourcelocations = options.log_sourcelocations;\n+    LogInstance().m_always_print_category_level = options.always_print_category_levels;\n+\n+    auto connection{LogInstance().PushBackCallback([callback, user_data](const std::string& str) { callback((void*)user_data, str.c_str(), str.length()); })};\n+\n+    try {\n+        // Only start logging if we just added the connection.\n+        if (LogInstance().NumConnections() == 1 && !LogInstance().StartLogging()) {\n+            LogError(\"Logger start failed.\");\n+            LogInstance().DeleteCallback(connection);\n+            return nullptr;\n+        }\n+    } catch (std::exception&) {\n+        LogError(\"Logger start failed.\");\n+        LogInstance().DeleteCallback(connection);\n+        return nullptr;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger connected.\");\n+\n+    auto heap_connection{new std::list<std::function<void(const std::string&)>>::iterator(connection)};\n+    return reinterpret_cast<kernel_LoggingConnection*>(heap_connection);\n+}\n+\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* connection_)\n+{\n+    auto connection{reinterpret_cast<std::list<std::function<void(const std::string&)>>::iterator*>(connection_)};\n+    if (!connection) {\n+        return;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger disconnected.\");\n+    LogInstance().DeleteCallback(*connection);\n+    delete connection;\n+\n+    // We are not buffering if we have a connection, so check that it is not the\n+    // last available connection.\n+    if (!LogInstance().Enabled()) {\n+        LogInstance().DisconnectTestLogger();\n+    }\n+}\n+\n+const kernel_ChainParameters* kernel_chain_parameters_create(const kernel_ChainType chain_type)\n+{\n+    switch (chain_type) {\n+    case kernel_ChainType::kernel_CHAIN_TYPE_MAINNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::Main().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET_4: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet4().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_SIGNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::SigNet({}).release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_REGTEST: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::RegTest({}).release());\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters)\n+{\n+    if (chain_parameters) {\n+        delete cast_const_chain_params(chain_parameters);\n+    }\n+}\n+\n+kernel_ContextOptions* kernel_context_options_create()\n+{\n+    return reinterpret_cast<kernel_ContextOptions*>(new ContextOptions{});\n+}\n+\n+void kernel_context_options_set_chainparams(kernel_ContextOptions* options_, const kernel_ChainParameters* chain_parameters)\n+{\n+    auto options{cast_context_options(options_)};\n+    auto chain_params{reinterpret_cast<const CChainParams*>(chain_parameters)};\n+    // Copy the chainparams, so the caller can free it again\n+    options->m_chainparams = std::make_unique<const CChainParams>(*chain_params);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 652,
      "original_position": 629,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This doesn't seem thread-safe (+ for ~all other setters). Since it seems we can't use std::atomic for most of these, adding a per-struct lock might be a good alternative?\r\n\r\nI can't think of a sane scenario where someone would _want_ to call the same setter from multiple threads, but... it's probably better to offer the guarantees anyway?",
      "created_at": "2025-03-12T11:27:57Z",
      "updated_at": "2025-03-13T13:35:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1991274124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1991274124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 650,
      "original_line": 650,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1991290582",
      "pull_request_review_id": 2675490600,
      "id": 1991290582,
      "node_id": "PRRC_kwDOABII5852sK7W",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 164,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`kernel_context_destroy()` and `kernel_context_interrupt()` are the only places that take a non-`const` `kernel_Context`. I think we `kernel_Context`'s is no different to all other `*_destroy()` functions - in that they should never be called twice, regardless of the thread. And it seems to me that `kernel_context_interrupt()` is actually thread-safe. So, I think \"but functions taking...\" can be removed?\r\n\r\n(also nit: s/non-cost/non-const/)",
      "created_at": "2025-03-12T11:39:33Z",
      "updated_at": "2025-03-13T13:35:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1991290582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1991290582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995386796",
      "pull_request_review_id": 2685229851,
      "id": 1995386796,
      "node_id": "PRRC_kwDOABII58527y-s",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 91,
      "original_position": 91,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This (+ in `log_category_to_string()` leads to runtime assertion errors for interpreted languages. It also means that `add_log_level_category()`, `enable_log_category()` and `disable_log_category()` are basically `void` instead of `bool` because they can only return `true` (or crash).\r\n\r\nE.g. in python:\r\n\r\n```\r\n>>> pbk.add_log_level_category(99, 20)\r\nAssertion failed: (false), function log_level_to_string, file bitcoinkernel.cpp, line 87.\r\nzsh: abort      python\r\n```",
      "created_at": "2025-03-14T11:31:34Z",
      "updated_at": "2025-03-14T18:41:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1995386796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995386796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": 88,
      "original_start_line": 88,
      "start_side": "RIGHT",
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995405051",
      "pull_request_review_id": 2685229851,
      "id": 1995405051,
      "node_id": "PRRC_kwDOABII585273b7",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (options && options->m_validation_interface) {\n+            m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+            m_signals->RegisterValidationInterface(m_validation_interface.get());\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+\n+    ~Context()\n+    {\n+        m_signals->UnregisterValidationInterface(m_validation_interface.get());\n+    }\n+};\n+\n+//! Helper struct to wrap the ChainstateManager-related Options\n+struct ChainstateManagerOptions {\n+    ChainstateManager::Options m_chainman_options;\n+    node::BlockManager::Options m_blockman_options;\n+    node::ChainstateLoadOptions m_chainstate_load_options;\n+\n+    ChainstateManagerOptions(const Context* context, const fs::path& data_dir, const fs::path& blocks_dir)\n+        : m_chainman_options{ChainstateManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .datadir = data_dir,\n+              .notifications = *context->m_notifications,\n+              .signals = context->m_signals.get()}},\n+          m_blockman_options{node::BlockManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .blocks_dir = blocks_dir,\n+              .notifications = *context->m_notifications,\n+              .block_tree_db_params = DBParams{\n+                  .path = data_dir / \"blocks\" / \"index\",\n+                  .cache_bytes = kernel::CacheSizes{DEFAULT_KERNEL_CACHE}.block_tree_db,\n+              }}},\n+          m_chainstate_load_options{node::ChainstateLoadOptions{}}\n+    {\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManagerOptions* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManagerOptions* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                          const int64_t amount_,\n+                          const kernel_Transaction* tx_to,\n+                          const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                          const unsigned int input_index,\n+                          const unsigned int flags,\n+                          kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,\n+                        script_pubkey,\n+                        &tx.vin[input_index].scriptWitness,\n+                        flags,\n+                        TransactionSignatureChecker(&tx, input_index, amount, txdata, MissingDataBehavior::FAIL),\n+                        nullptr);\n+}\n+\n+bool kernel_add_log_level_category(const kernel_LogCategory category, const kernel_LogLevel level_)\n+{\n+    const auto level{log_level_to_string(level_)};\n+    if (category == kernel_LogCategory::kernel_LOG_ALL) {\n+        return LogInstance().SetLogLevel(level);\n+    }\n+\n+    return LogInstance().SetCategoryLogLevel(log_category_to_string(category), level);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 523,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This back-and-forth string conversion feels suboptimal. Perhaps an alternative approach would be to keep the integer values between `kernel_LogCategory` the same as `BCLog::LogFlags` and just define a kernel-specific bitfield that defines which `BCLog` flags are valid? I don't think the `kernel_LogCategory` enum values being non-continuous is a problem, since this might happen in the future anyway e.g. if certain components are moved out of kernel scope?",
      "created_at": "2025-03-14T11:43:11Z",
      "updated_at": "2025-03-14T18:41:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1995405051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995405051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 521,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995880696",
      "pull_request_review_id": 2685229851,
      "id": 1995880696,
      "node_id": "PRRC_kwDOABII58529rj4",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 350,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since log levels are ordered, would it be prudent to reserve space for intermediate levels? E.g. if we decide we do want to add WARNING/ERROR later, we'd have to change existing log levels.",
      "created_at": "2025-03-14T16:27:18Z",
      "updated_at": "2025-03-14T18:41:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1995880696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995880696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 346,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1996761714",
      "pull_request_review_id": 2687624148,
      "id": 1996761714,
      "node_id": "PRRC_kwDOABII5853BCpy",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/** @name Transaction\n+ * Functions for working with transactions.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+///@}\n+\n+/** @name ScriptPubkey\n+ * Functions for working with script pubkeys.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+BITCOINKERNEL_API kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+BITCOINKERNEL_API void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+///@}\n+\n+/** @name TransactionOutput\n+ * Functions for working with transaction outputs.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+BITCOINKERNEL_API kernel_TransactionOutput* kernel_transaction_output_create(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey of an output in the returned script pubkey\n+ * opaque object.\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The data for the output's script pubkey.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* kernel_copy_script_pubkey_from_output(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Gets the amount associated with this transaction output\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The amount.\n+ */\n+BITCOINKERNEL_API int64_t kernel_get_transaction_output_amount(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+///@}\n+\n+/** @name Script\n+ * Functions for working with scripts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+///@}\n+\n+/** @name Logging\n+ * Logging-related functions.\n+ */\n+///@{\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+BITCOINKERNEL_API void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    const void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+BITCOINKERNEL_API void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+///@}\n+\n+/** @name ChainParameters\n+ * Functions for working with chain parameters.\n+ */\n+///@{\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+BITCOINKERNEL_API const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+BITCOINKERNEL_API void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 641,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1991230564,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It shouldn't be, but annoyingly this is not trivial to change. Since the functions constructing the params in our code only return const types, we have to carry that const into our API. I think the only alternative is copying the params, which I will push shortly.",
      "created_at": "2025-03-15T10:51:45Z",
      "updated_at": "2025-03-15T10:51:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1996761714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1996761714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1996815658",
      "pull_request_review_id": 2687686722,
      "id": 1996815658,
      "node_id": "PRRC_kwDOABII5853BP0q",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 91,
      "original_position": 91,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1995386796,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> This (+ in log_category_to_string() leads to runtime assertion errors for interpreted languages\r\n\r\nI think the problem here is that the C enums are weakly typed, and if you use them in weakly typed languages you run into these problems. I think the function signature should already give enough of a hint on what the range of allowed values is. That said, I'll change this to instead return `std::nullopt` and then return false from there.\r\n\r\nEDIT: Changed my mind, rather added a function to the logger so we can always use the enums and don't need stringy \"types\".",
      "created_at": "2025-03-15T12:31:30Z",
      "updated_at": "2025-03-15T16:59:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1996815658",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1996815658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": 88,
      "original_start_line": 88,
      "start_side": "RIGHT",
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1996842801",
      "pull_request_review_id": 2687725971,
      "id": 1996842801,
      "node_id": "PRRC_kwDOABII5853BWcx",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 350,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1995880696,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think we need to rely on the order inside the enumeration here. That said, it could also just mirror the values in the `BCLog::Level`. I left out `Warning` and `Error` because you can't really control those right now.",
      "created_at": "2025-03-15T12:55:33Z",
      "updated_at": "2025-03-15T12:55:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1996842801",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1996842801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 346,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1997117045",
      "pull_request_review_id": 2688107110,
      "id": 1997117045,
      "node_id": "PRRC_kwDOABII5853CZZ1",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (options && options->m_validation_interface) {\n+            m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+            m_signals->RegisterValidationInterface(m_validation_interface.get());\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+\n+    ~Context()\n+    {\n+        m_signals->UnregisterValidationInterface(m_validation_interface.get());\n+    }\n+};\n+\n+//! Helper struct to wrap the ChainstateManager-related Options\n+struct ChainstateManagerOptions {\n+    ChainstateManager::Options m_chainman_options;\n+    node::BlockManager::Options m_blockman_options;\n+    node::ChainstateLoadOptions m_chainstate_load_options;\n+\n+    ChainstateManagerOptions(const Context* context, const fs::path& data_dir, const fs::path& blocks_dir)\n+        : m_chainman_options{ChainstateManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .datadir = data_dir,\n+              .notifications = *context->m_notifications,\n+              .signals = context->m_signals.get()}},\n+          m_blockman_options{node::BlockManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .blocks_dir = blocks_dir,\n+              .notifications = *context->m_notifications,\n+              .block_tree_db_params = DBParams{\n+                  .path = data_dir / \"blocks\" / \"index\",\n+                  .cache_bytes = kernel::CacheSizes{DEFAULT_KERNEL_CACHE}.block_tree_db,\n+              }}},\n+          m_chainstate_load_options{node::ChainstateLoadOptions{}}\n+    {\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManagerOptions* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManagerOptions* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                          const int64_t amount_,\n+                          const kernel_Transaction* tx_to,\n+                          const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                          const unsigned int input_index,\n+                          const unsigned int flags,\n+                          kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,\n+                        script_pubkey,\n+                        &tx.vin[input_index].scriptWitness,\n+                        flags,\n+                        TransactionSignatureChecker(&tx, input_index, amount, txdata, MissingDataBehavior::FAIL),\n+                        nullptr);\n+}\n+\n+bool kernel_add_log_level_category(const kernel_LogCategory category, const kernel_LogLevel level_)\n+{\n+    const auto level{log_level_to_string(level_)};\n+    if (category == kernel_LogCategory::kernel_LOG_ALL) {\n+        return LogInstance().SetLogLevel(level);\n+    }\n+\n+    return LogInstance().SetCategoryLogLevel(log_category_to_string(category), level);\n+}\n+\n+bool kernel_enable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().EnableCategory(log_category_to_string(category));\n+}\n+\n+bool kernel_disable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().DisableCategory(log_category_to_string(category));\n+}\n+\n+void kernel_disable_logging()\n+{\n+    LogInstance().DisableLogging();\n+}\n+\n+kernel_LoggingConnection* kernel_logging_connection_create(kernel_LogCallback callback,\n+                                                           const void* user_data,\n+                                                           const kernel_LoggingOptions options)\n+{\n+    LogInstance().m_log_timestamps = options.log_timestamps;\n+    LogInstance().m_log_time_micros = options.log_time_micros;\n+    LogInstance().m_log_threadnames = options.log_threadnames;\n+    LogInstance().m_log_sourcelocations = options.log_sourcelocations;\n+    LogInstance().m_always_print_category_level = options.always_print_category_levels;\n+\n+    auto connection{LogInstance().PushBackCallback([callback, user_data](const std::string& str) { callback((void*)user_data, str.c_str(), str.length()); })};\n+\n+    try {\n+        // Only start logging if we just added the connection.\n+        if (LogInstance().NumConnections() == 1 && !LogInstance().StartLogging()) {\n+            LogError(\"Logger start failed.\");\n+            LogInstance().DeleteCallback(connection);\n+            return nullptr;\n+        }\n+    } catch (std::exception&) {\n+        LogError(\"Logger start failed.\");\n+        LogInstance().DeleteCallback(connection);\n+        return nullptr;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger connected.\");\n+\n+    auto heap_connection{new std::list<std::function<void(const std::string&)>>::iterator(connection)};\n+    return reinterpret_cast<kernel_LoggingConnection*>(heap_connection);\n+}\n+\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* connection_)\n+{\n+    auto connection{reinterpret_cast<std::list<std::function<void(const std::string&)>>::iterator*>(connection_)};\n+    if (!connection) {\n+        return;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger disconnected.\");\n+    LogInstance().DeleteCallback(*connection);\n+    delete connection;\n+\n+    // We are not buffering if we have a connection, so check that it is not the\n+    // last available connection.\n+    if (!LogInstance().Enabled()) {\n+        LogInstance().DisconnectTestLogger();\n+    }\n+}\n+\n+const kernel_ChainParameters* kernel_chain_parameters_create(const kernel_ChainType chain_type)\n+{\n+    switch (chain_type) {\n+    case kernel_ChainType::kernel_CHAIN_TYPE_MAINNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::Main().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET_4: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet4().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_SIGNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::SigNet({}).release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_REGTEST: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::RegTest({}).release());\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters)\n+{\n+    if (chain_parameters) {\n+        delete cast_const_chain_params(chain_parameters);\n+    }\n+}\n+\n+kernel_ContextOptions* kernel_context_options_create()\n+{\n+    return reinterpret_cast<kernel_ContextOptions*>(new ContextOptions{});\n+}\n+\n+void kernel_context_options_set_chainparams(kernel_ContextOptions* options_, const kernel_ChainParameters* chain_parameters)\n+{\n+    auto options{cast_context_options(options_)};\n+    auto chain_params{reinterpret_cast<const CChainParams*>(chain_parameters)};\n+    // Copy the chainparams, so the caller can free it again\n+    options->m_chainparams = std::make_unique<const CChainParams>(*chain_params);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 652,
      "original_position": 629,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1991274124,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just noticed that the same is also true for the logger, but unlike the options, I can actually see multiple threads accessing it. I don't think we should fix that now though, to me it feels more important to have non-global logging objects first.",
      "created_at": "2025-03-15T17:35:45Z",
      "updated_at": "2025-03-17T17:20:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1997117045",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1997117045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 650,
      "original_line": 650,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1997340094",
      "pull_request_review_id": 2688353493,
      "id": 1997340094,
      "node_id": "PRRC_kwDOABII5853DP2-",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (options && options->m_validation_interface) {\n+            m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+            m_signals->RegisterValidationInterface(m_validation_interface.get());\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+\n+    ~Context()\n+    {\n+        m_signals->UnregisterValidationInterface(m_validation_interface.get());\n+    }\n+};\n+\n+//! Helper struct to wrap the ChainstateManager-related Options\n+struct ChainstateManagerOptions {\n+    ChainstateManager::Options m_chainman_options;\n+    node::BlockManager::Options m_blockman_options;\n+    node::ChainstateLoadOptions m_chainstate_load_options;\n+\n+    ChainstateManagerOptions(const Context* context, const fs::path& data_dir, const fs::path& blocks_dir)\n+        : m_chainman_options{ChainstateManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .datadir = data_dir,\n+              .notifications = *context->m_notifications,\n+              .signals = context->m_signals.get()}},\n+          m_blockman_options{node::BlockManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .blocks_dir = blocks_dir,\n+              .notifications = *context->m_notifications,\n+              .block_tree_db_params = DBParams{\n+                  .path = data_dir / \"blocks\" / \"index\",\n+                  .cache_bytes = kernel::CacheSizes{DEFAULT_KERNEL_CACHE}.block_tree_db,\n+              }}},\n+          m_chainstate_load_options{node::ChainstateLoadOptions{}}\n+    {\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManagerOptions* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManagerOptions* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                          const int64_t amount_,\n+                          const kernel_Transaction* tx_to,\n+                          const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                          const unsigned int input_index,\n+                          const unsigned int flags,\n+                          kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,\n+                        script_pubkey,\n+                        &tx.vin[input_index].scriptWitness,\n+                        flags,\n+                        TransactionSignatureChecker(&tx, input_index, amount, txdata, MissingDataBehavior::FAIL),\n+                        nullptr);\n+}\n+\n+bool kernel_add_log_level_category(const kernel_LogCategory category, const kernel_LogLevel level_)\n+{\n+    const auto level{log_level_to_string(level_)};\n+    if (category == kernel_LogCategory::kernel_LOG_ALL) {\n+        return LogInstance().SetLogLevel(level);\n+    }\n+\n+    return LogInstance().SetCategoryLogLevel(log_category_to_string(category), level);\n+}\n+\n+bool kernel_enable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().EnableCategory(log_category_to_string(category));\n+}\n+\n+bool kernel_disable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().DisableCategory(log_category_to_string(category));\n+}\n+\n+void kernel_disable_logging()\n+{\n+    LogInstance().DisableLogging();\n+}\n+\n+kernel_LoggingConnection* kernel_logging_connection_create(kernel_LogCallback callback,\n+                                                           const void* user_data,\n+                                                           const kernel_LoggingOptions options)\n+{\n+    LogInstance().m_log_timestamps = options.log_timestamps;\n+    LogInstance().m_log_time_micros = options.log_time_micros;\n+    LogInstance().m_log_threadnames = options.log_threadnames;\n+    LogInstance().m_log_sourcelocations = options.log_sourcelocations;\n+    LogInstance().m_always_print_category_level = options.always_print_category_levels;\n+\n+    auto connection{LogInstance().PushBackCallback([callback, user_data](const std::string& str) { callback((void*)user_data, str.c_str(), str.length()); })};\n+\n+    try {\n+        // Only start logging if we just added the connection.\n+        if (LogInstance().NumConnections() == 1 && !LogInstance().StartLogging()) {\n+            LogError(\"Logger start failed.\");\n+            LogInstance().DeleteCallback(connection);\n+            return nullptr;\n+        }\n+    } catch (std::exception&) {\n+        LogError(\"Logger start failed.\");\n+        LogInstance().DeleteCallback(connection);\n+        return nullptr;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger connected.\");\n+\n+    auto heap_connection{new std::list<std::function<void(const std::string&)>>::iterator(connection)};\n+    return reinterpret_cast<kernel_LoggingConnection*>(heap_connection);\n+}\n+\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* connection_)\n+{\n+    auto connection{reinterpret_cast<std::list<std::function<void(const std::string&)>>::iterator*>(connection_)};\n+    if (!connection) {\n+        return;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger disconnected.\");\n+    LogInstance().DeleteCallback(*connection);\n+    delete connection;\n+\n+    // We are not buffering if we have a connection, so check that it is not the\n+    // last available connection.\n+    if (!LogInstance().Enabled()) {\n+        LogInstance().DisconnectTestLogger();\n+    }\n+}\n+\n+const kernel_ChainParameters* kernel_chain_parameters_create(const kernel_ChainType chain_type)\n+{\n+    switch (chain_type) {\n+    case kernel_ChainType::kernel_CHAIN_TYPE_MAINNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::Main().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET_4: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet4().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_SIGNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::SigNet({}).release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_REGTEST: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::RegTest({}).release());\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters)\n+{\n+    if (chain_parameters) {\n+        delete cast_const_chain_params(chain_parameters);\n+    }\n+}\n+\n+kernel_ContextOptions* kernel_context_options_create()\n+{\n+    return reinterpret_cast<kernel_ContextOptions*>(new ContextOptions{});\n+}\n+\n+void kernel_context_options_set_chainparams(kernel_ContextOptions* options_, const kernel_ChainParameters* chain_parameters)\n+{\n+    auto options{cast_context_options(options_)};\n+    auto chain_params{reinterpret_cast<const CChainParams*>(chain_parameters)};\n+    // Copy the chainparams, so the caller can free it again\n+    options->m_chainparams = std::make_unique<const CChainParams>(*chain_params);\n+}\n+\n+void kernel_context_options_set_notifications(kernel_ContextOptions* options_, kernel_NotificationInterfaceCallbacks notifications)\n+{\n+    auto options{cast_context_options(options_)};\n+    // Copy the notifications, so the caller can free it again\n+    options->m_notifications = std::make_unique<const KernelNotifications>(notifications);\n+}\n+\n+void kernel_context_options_set_validation_interface(kernel_ContextOptions* options_, kernel_ValidationInterfaceCallbacks vi_cbs)\n+{\n+    auto options{cast_context_options(options_)};\n+    options->m_validation_interface = std::make_unique<KernelValidationInterface>(KernelValidationInterface(vi_cbs));\n+}\n+\n+void kernel_context_options_destroy(kernel_ContextOptions* options)\n+{\n+    if (options) {\n+        delete cast_context_options(options);\n+    }\n+}\n+\n+kernel_Context* kernel_context_create(const kernel_ContextOptions* options_)\n+{\n+    auto options{cast_const_context_options(options_)};\n+    bool sane{true};\n+    auto context{new Context{options, sane}};\n+    if (!sane) {\n+        LogError(\"Kernel context sanity check failed.\");\n+        delete context;\n+        return nullptr;\n+    }\n+    return reinterpret_cast<kernel_Context*>(context);\n+}\n+\n+bool kernel_context_interrupt(kernel_Context* context_)\n+{\n+    auto& context{*cast_context(context_)};\n+    return (*context.m_interrupt)();\n+}\n+\n+void kernel_context_destroy(kernel_Context* context)\n+{\n+    if (context) {\n+        delete cast_context(context);\n+    }\n+}\n+\n+kernel_ValidationMode kernel_get_validation_mode_from_block_validation_state(const kernel_BlockValidationState* block_validation_state_)\n+{\n+    auto& block_validation_state = *cast_block_validation_state(block_validation_state_);\n+    if (block_validation_state.IsValid()) return kernel_ValidationMode::kernel_VALIDATION_STATE_VALID;\n+    if (block_validation_state.IsInvalid()) return kernel_ValidationMode::kernel_VALIDATION_STATE_INVALID;\n+    return kernel_ValidationMode::kernel_VALIDATION_STATE_ERROR;\n+}\n+\n+kernel_BlockValidationResult kernel_get_block_validation_result_from_block_validation_state(const kernel_BlockValidationState* block_validation_state_)\n+{\n+    auto& block_validation_state = *cast_block_validation_state(block_validation_state_);\n+    switch (block_validation_state.GetResult()) {\n+    case BlockValidationResult::BLOCK_RESULT_UNSET:\n+        return kernel_BlockValidationResult::kernel_BLOCK_RESULT_UNSET;\n+    case BlockValidationResult::BLOCK_CONSENSUS:\n+        return kernel_BlockValidationResult::kernel_BLOCK_CONSENSUS;\n+    case BlockValidationResult::BLOCK_CACHED_INVALID:\n+        return kernel_BlockValidationResult::kernel_BLOCK_CACHED_INVALID;\n+    case BlockValidationResult::BLOCK_INVALID_HEADER:\n+        return kernel_BlockValidationResult::kernel_BLOCK_INVALID_HEADER;\n+    case BlockValidationResult::BLOCK_MUTATED:\n+        return kernel_BlockValidationResult::kernel_BLOCK_MUTATED;\n+    case BlockValidationResult::BLOCK_MISSING_PREV:\n+        return kernel_BlockValidationResult::kernel_BLOCK_MISSING_PREV;\n+    case BlockValidationResult::BLOCK_INVALID_PREV:\n+        return kernel_BlockValidationResult::kernel_BLOCK_INVALID_PREV;\n+    case BlockValidationResult::BLOCK_TIME_FUTURE:\n+        return kernel_BlockValidationResult::kernel_BLOCK_TIME_FUTURE;\n+    case BlockValidationResult::BLOCK_CHECKPOINT:\n+        return kernel_BlockValidationResult::kernel_BLOCK_CHECKPOINT;\n+    case BlockValidationResult::BLOCK_HEADER_LOW_WORK:\n+        return kernel_BlockValidationResult::kernel_BLOCK_HEADER_LOW_WORK;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_ChainstateManagerOptions* kernel_chainstate_manager_options_create(const kernel_Context* context_, const char* data_dir, size_t data_dir_len, const char* blocks_dir, size_t blocks_dir_len)\n+{\n+    try {\n+        fs::path abs_data_dir{fs::absolute(fs::PathFromString({data_dir, data_dir_len}))};\n+        fs::create_directories(abs_data_dir);\n+        fs::path abs_blocks_dir{fs::absolute(fs::PathFromString({blocks_dir, blocks_dir_len}))};\n+        fs::create_directories(abs_blocks_dir);\n+        auto context{cast_const_context(context_)};\n+        return reinterpret_cast<kernel_ChainstateManagerOptions*>(new ChainstateManagerOptions(context, abs_data_dir, abs_blocks_dir));\n+    } catch (const std::exception& e) {\n+        LogError(\"Failed to create chainstate manager options: %s\", e.what());\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_chainstate_manager_options_set_worker_threads_num(kernel_ChainstateManagerOptions* opts_, int worker_threads)\n+{\n+    auto opts{cast_chainstate_manager_options(opts_)};\n+    opts->m_chainman_options.worker_threads_num = worker_threads;\n+}\n+\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* options)\n+{\n+    if (options) {\n+        delete cast_const_chainstate_manager_options(options);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 738,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1991236489,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-03-15T21:46:41Z",
      "updated_at": "2025-03-15T21:46:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1997340094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1997340094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 734,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1997340229",
      "pull_request_review_id": 2688353623,
      "id": 1997340229,
      "node_id": "PRRC_kwDOABII5853DP5F",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (options && options->m_validation_interface) {\n+            m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+            m_signals->RegisterValidationInterface(m_validation_interface.get());\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+\n+    ~Context()\n+    {\n+        m_signals->UnregisterValidationInterface(m_validation_interface.get());\n+    }\n+};\n+\n+//! Helper struct to wrap the ChainstateManager-related Options\n+struct ChainstateManagerOptions {\n+    ChainstateManager::Options m_chainman_options;\n+    node::BlockManager::Options m_blockman_options;\n+    node::ChainstateLoadOptions m_chainstate_load_options;\n+\n+    ChainstateManagerOptions(const Context* context, const fs::path& data_dir, const fs::path& blocks_dir)\n+        : m_chainman_options{ChainstateManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .datadir = data_dir,\n+              .notifications = *context->m_notifications,\n+              .signals = context->m_signals.get()}},\n+          m_blockman_options{node::BlockManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .blocks_dir = blocks_dir,\n+              .notifications = *context->m_notifications,\n+              .block_tree_db_params = DBParams{\n+                  .path = data_dir / \"blocks\" / \"index\",\n+                  .cache_bytes = kernel::CacheSizes{DEFAULT_KERNEL_CACHE}.block_tree_db,\n+              }}},\n+          m_chainstate_load_options{node::ChainstateLoadOptions{}}\n+    {\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManagerOptions* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManagerOptions* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                          const int64_t amount_,\n+                          const kernel_Transaction* tx_to,\n+                          const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                          const unsigned int input_index,\n+                          const unsigned int flags,\n+                          kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,\n+                        script_pubkey,\n+                        &tx.vin[input_index].scriptWitness,\n+                        flags,\n+                        TransactionSignatureChecker(&tx, input_index, amount, txdata, MissingDataBehavior::FAIL),\n+                        nullptr);\n+}\n+\n+bool kernel_add_log_level_category(const kernel_LogCategory category, const kernel_LogLevel level_)\n+{\n+    const auto level{log_level_to_string(level_)};\n+    if (category == kernel_LogCategory::kernel_LOG_ALL) {\n+        return LogInstance().SetLogLevel(level);\n+    }\n+\n+    return LogInstance().SetCategoryLogLevel(log_category_to_string(category), level);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 523,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1995405051,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not quite sure what you meant with \"Perhaps an alternative approach would be to keep the integer values between kernel_LogCategory the same as BCLog::LogFlags and just define a kernel-specific bitfield that defines which BCLog flags are valid\". Does the current approach work for you?",
      "created_at": "2025-03-15T21:47:36Z",
      "updated_at": "2025-03-15T21:47:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1997340229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1997340229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 521,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1998587491",
      "pull_request_review_id": 2690213857,
      "id": 1998587491,
      "node_id": "PRRC_kwDOABII5853IAZj",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (options && options->m_validation_interface) {\n+            m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+            m_signals->RegisterValidationInterface(m_validation_interface.get());\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+\n+    ~Context()\n+    {\n+        m_signals->UnregisterValidationInterface(m_validation_interface.get());\n+    }\n+};\n+\n+//! Helper struct to wrap the ChainstateManager-related Options\n+struct ChainstateManagerOptions {\n+    ChainstateManager::Options m_chainman_options;\n+    node::BlockManager::Options m_blockman_options;\n+    node::ChainstateLoadOptions m_chainstate_load_options;\n+\n+    ChainstateManagerOptions(const Context* context, const fs::path& data_dir, const fs::path& blocks_dir)\n+        : m_chainman_options{ChainstateManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .datadir = data_dir,\n+              .notifications = *context->m_notifications,\n+              .signals = context->m_signals.get()}},\n+          m_blockman_options{node::BlockManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .blocks_dir = blocks_dir,\n+              .notifications = *context->m_notifications,\n+              .block_tree_db_params = DBParams{\n+                  .path = data_dir / \"blocks\" / \"index\",\n+                  .cache_bytes = kernel::CacheSizes{DEFAULT_KERNEL_CACHE}.block_tree_db,\n+              }}},\n+          m_chainstate_load_options{node::ChainstateLoadOptions{}}\n+    {\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManagerOptions* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManagerOptions* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                          const int64_t amount_,\n+                          const kernel_Transaction* tx_to,\n+                          const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                          const unsigned int input_index,\n+                          const unsigned int flags,\n+                          kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,\n+                        script_pubkey,\n+                        &tx.vin[input_index].scriptWitness,\n+                        flags,\n+                        TransactionSignatureChecker(&tx, input_index, amount, txdata, MissingDataBehavior::FAIL),\n+                        nullptr);\n+}\n+\n+bool kernel_add_log_level_category(const kernel_LogCategory category, const kernel_LogLevel level_)\n+{\n+    const auto level{log_level_to_string(level_)};\n+    if (category == kernel_LogCategory::kernel_LOG_ALL) {\n+        return LogInstance().SetLogLevel(level);\n+    }\n+\n+    return LogInstance().SetCategoryLogLevel(log_category_to_string(category), level);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 523,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1995405051,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I meant have `kernel_LogCategory` be a subset of `BCLog::LogFlags`, instead of having to remap them. But I didn't realize that that would either require including logging.h in bitcoinkernel.h (impossible), or manually ensuring the enums are synced (bad).\r\n\r\nMy main gripe was the string re-conversion, which is now gone - so yes, current approach resolves my concern, thanks!",
      "created_at": "2025-03-17T12:05:29Z",
      "updated_at": "2025-03-17T12:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1998587491",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1998587491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 521,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1999116127",
      "pull_request_review_id": 2691176535,
      "id": 1999116127,
      "node_id": "PRRC_kwDOABII5853KBdf",
      "diff_hunk": "@@ -1,11 +1,1134 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (options && options->m_validation_interface) {\n+            m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+            m_signals->RegisterValidationInterface(m_validation_interface.get());\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+\n+    ~Context()\n+    {\n+        m_signals->UnregisterValidationInterface(m_validation_interface.get());\n+    }\n+};\n+\n+//! Helper struct to wrap the ChainstateManager-related Options\n+struct ChainstateManagerOptions {\n+    ChainstateManager::Options m_chainman_options;\n+    node::BlockManager::Options m_blockman_options;\n+    node::ChainstateLoadOptions m_chainstate_load_options;\n+\n+    ChainstateManagerOptions(const Context* context, const fs::path& data_dir, const fs::path& blocks_dir)\n+        : m_chainman_options{ChainstateManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .datadir = data_dir,\n+              .notifications = *context->m_notifications,\n+              .signals = context->m_signals.get()}},\n+          m_blockman_options{node::BlockManager::Options{\n+              .chainparams = *context->m_chainparams,\n+              .blocks_dir = blocks_dir,\n+              .notifications = *context->m_notifications,\n+              .block_tree_db_params = DBParams{\n+                  .path = data_dir / \"blocks\" / \"index\",\n+                  .cache_bytes = kernel::CacheSizes{DEFAULT_KERNEL_CACHE}.block_tree_db,\n+              }}},\n+          m_chainstate_load_options{node::ChainstateLoadOptions{}}\n+    {\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManagerOptions* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManagerOptions* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManagerOptions*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                          const int64_t amount_,\n+                          const kernel_Transaction* tx_to,\n+                          const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                          const unsigned int input_index,\n+                          const unsigned int flags,\n+                          kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,\n+                        script_pubkey,\n+                        &tx.vin[input_index].scriptWitness,\n+                        flags,\n+                        TransactionSignatureChecker(&tx, input_index, amount, txdata, MissingDataBehavior::FAIL),\n+                        nullptr);\n+}\n+\n+bool kernel_add_log_level_category(const kernel_LogCategory category, const kernel_LogLevel level_)\n+{\n+    const auto level{log_level_to_string(level_)};\n+    if (category == kernel_LogCategory::kernel_LOG_ALL) {\n+        return LogInstance().SetLogLevel(level);\n+    }\n+\n+    return LogInstance().SetCategoryLogLevel(log_category_to_string(category), level);\n+}\n+\n+bool kernel_enable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().EnableCategory(log_category_to_string(category));\n+}\n+\n+bool kernel_disable_log_category(const kernel_LogCategory category)\n+{\n+    return LogInstance().DisableCategory(log_category_to_string(category));\n+}\n+\n+void kernel_disable_logging()\n+{\n+    LogInstance().DisableLogging();\n+}\n+\n+kernel_LoggingConnection* kernel_logging_connection_create(kernel_LogCallback callback,\n+                                                           const void* user_data,\n+                                                           const kernel_LoggingOptions options)\n+{\n+    LogInstance().m_log_timestamps = options.log_timestamps;\n+    LogInstance().m_log_time_micros = options.log_time_micros;\n+    LogInstance().m_log_threadnames = options.log_threadnames;\n+    LogInstance().m_log_sourcelocations = options.log_sourcelocations;\n+    LogInstance().m_always_print_category_level = options.always_print_category_levels;\n+\n+    auto connection{LogInstance().PushBackCallback([callback, user_data](const std::string& str) { callback((void*)user_data, str.c_str(), str.length()); })};\n+\n+    try {\n+        // Only start logging if we just added the connection.\n+        if (LogInstance().NumConnections() == 1 && !LogInstance().StartLogging()) {\n+            LogError(\"Logger start failed.\");\n+            LogInstance().DeleteCallback(connection);\n+            return nullptr;\n+        }\n+    } catch (std::exception&) {\n+        LogError(\"Logger start failed.\");\n+        LogInstance().DeleteCallback(connection);\n+        return nullptr;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger connected.\");\n+\n+    auto heap_connection{new std::list<std::function<void(const std::string&)>>::iterator(connection)};\n+    return reinterpret_cast<kernel_LoggingConnection*>(heap_connection);\n+}\n+\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* connection_)\n+{\n+    auto connection{reinterpret_cast<std::list<std::function<void(const std::string&)>>::iterator*>(connection_)};\n+    if (!connection) {\n+        return;\n+    }\n+\n+    LogDebug(BCLog::KERNEL, \"Logger disconnected.\");\n+    LogInstance().DeleteCallback(*connection);\n+    delete connection;\n+\n+    // We are not buffering if we have a connection, so check that it is not the\n+    // last available connection.\n+    if (!LogInstance().Enabled()) {\n+        LogInstance().DisconnectTestLogger();\n+    }\n+}\n+\n+const kernel_ChainParameters* kernel_chain_parameters_create(const kernel_ChainType chain_type)\n+{\n+    switch (chain_type) {\n+    case kernel_ChainType::kernel_CHAIN_TYPE_MAINNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::Main().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_TESTNET_4: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::TestNet4().release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_SIGNET: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::SigNet({}).release());\n+    }\n+    case kernel_ChainType::kernel_CHAIN_TYPE_REGTEST: {\n+        return reinterpret_cast<const kernel_ChainParameters*>(CChainParams::RegTest({}).release());\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters)\n+{\n+    if (chain_parameters) {\n+        delete cast_const_chain_params(chain_parameters);\n+    }\n+}\n+\n+kernel_ContextOptions* kernel_context_options_create()\n+{\n+    return reinterpret_cast<kernel_ContextOptions*>(new ContextOptions{});\n+}\n+\n+void kernel_context_options_set_chainparams(kernel_ContextOptions* options_, const kernel_ChainParameters* chain_parameters)\n+{\n+    auto options{cast_context_options(options_)};\n+    auto chain_params{reinterpret_cast<const CChainParams*>(chain_parameters)};\n+    // Copy the chainparams, so the caller can free it again\n+    options->m_chainparams = std::make_unique<const CChainParams>(*chain_params);",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 652,
      "original_position": 629,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1991274124,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> to me it feels more important to have non-global logging objects first.\r\n\r\nAgreed. Updating the docs to reflect this might be good though, e.g.:\r\n\r\n>   * Not thread-safe. Logging is global. Multiple calls are allowed but\r\n> * must be synchronized and will override previous settings for all\r\n> * existing `kernel_LoggingConnection` instances.",
      "created_at": "2025-03-17T16:08:11Z",
      "updated_at": "2025-03-17T16:08:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1999116127",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1999116127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 650,
      "original_line": 650,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2000864918",
      "pull_request_review_id": 2694197292,
      "id": 2000864918,
      "node_id": "PRRC_kwDOABII5853QsaW",
      "diff_hunk": "@@ -0,0 +1,1197 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging(). Functions changing the logging settings are global\n+ * (and not thread safe) and change the settings for all existing\n+ * kernel_LoggingConnection instances.\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task runner\n+ * owned by the context. It passes events through the registered validation\n+ * interface callbacks.\n+ *\n+ * A constructed context can be safely used from multiple threads.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_TRACE = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_INFO,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/** @name Transaction\n+ * Functions for working with transactions.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+///@}\n+\n+/** @name ScriptPubkey\n+ * Functions for working with script pubkeys.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+BITCOINKERNEL_API kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+BITCOINKERNEL_API void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+///@}\n+\n+/** @name TransactionOutput\n+ * Functions for working with transaction outputs.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+BITCOINKERNEL_API kernel_TransactionOutput* kernel_transaction_output_create(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey of an output in the returned script pubkey\n+ * opaque object.\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The data for the output's script pubkey.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* kernel_copy_script_pubkey_from_output(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Gets the amount associated with this transaction output\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The amount.\n+ */\n+BITCOINKERNEL_API int64_t kernel_get_transaction_output_amount(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+///@}\n+\n+/** @name Script\n+ * Functions for working with scripts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+///@}\n+\n+/** @name Logging\n+ * Logging-related functions.\n+ */\n+///@{\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once and is not thread or re-entry safe.\n+ * Log messages will be buffered until this function is called, or a logging\n+ * connection is created.\n+ */\n+BITCOINKERNEL_API void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not\n+ * enable the selected categories. Use `kernel_enable_log_category` to start\n+ * logging from a specific, or all categories. This function is not thread\n+ * safe. Mutiple calls from different threads are allowed but must be\n+ * synchronized. This changes a global setting and will override settings for\n+ * all existing `kernelLoggingConnection instances.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 574,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "2dc27e2860b97c2bffa5f18706917b21858e5594",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "typo nit (+ in 2 other log functions)\r\n```suggestion\r\n * all existing `kernel_LoggingConnection instances.\r\n```",
      "created_at": "2025-03-18T11:47:08Z",
      "updated_at": "2025-03-20T19:03:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r2000864918",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2000864918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006272875",
      "pull_request_review_id": 2694197292,
      "id": 2006272875,
      "node_id": "PRRC_kwDOABII5853lUtr",
      "diff_hunk": "@@ -1,11 +1,1158 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+BCLog::Level get_bclog_level(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return BCLog::Level::Info;\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return BCLog::Level::Debug;\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return BCLog::Level::Trace;\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+BCLog::LogFlags get_bclog_flag(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return BCLog::LogFlags::BENCH;\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return BCLog::LogFlags::BLOCKSTORAGE;\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return BCLog::LogFlags::COINDB;\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return BCLog::LogFlags::LEVELDB;\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return BCLog::LogFlags::MEMPOOL;\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return BCLog::LogFlags::PRUNE;\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return BCLog::LogFlags::RAND;\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return BCLog::LogFlags::REINDEX;\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return BCLog::LogFlags::VALIDATION;\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return BCLog::LogFlags::KERNEL;\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return BCLog::LogFlags::ALL;\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    mutable Mutex m_mutex;\n+    std::unique_ptr<const CChainParams> m_chainparams GUARDED_BY(m_mutex);\n+    std::unique_ptr<const KernelNotifications> m_notifications GUARDED_BY(m_mutex);\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface GUARDED_BY(m_mutex);\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (!options) {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+            m_chainparams = CChainParams::Main();\n+        } else {\n+            LOCK(options->m_mutex);\n+            if (options->m_chainparams) {\n+                m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+            }\n+            if (options->m_notifications) {\n+                m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+            }\n+            if (options->m_validation_interface) {\n+                m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+                m_signals->RegisterValidationInterface(m_validation_interface.get());\n+            }\n+\n+        }",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 262,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "2dc27e2860b97c2bffa5f18706917b21858e5594",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The [latest force-push](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_29..kernelApi_30) broke this logic by leaving `m_chainparams` and `m_notifications` uninitialized if `options` is non-nullptr, but the respective options members are nullptr.\r\n\r\nSuggested fix:\r\n\r\n<details>\r\n<summary>git diff on 2dc27e2860</summary>\r\n\r\n```diff\r\ndiff --git a/src/kernel/bitcoinkernel.cpp b/src/kernel/bitcoinkernel.cpp\r\nindex 0cb2d69cec..1e6c582357 100644\r\n--- a/src/kernel/bitcoinkernel.cpp\r\n+++ b/src/kernel/bitcoinkernel.cpp\r\n@@ -240,11 +240,7 @@ public:\r\n           m_interrupt{std::make_unique<util::SignalInterrupt>()},\r\n           m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\r\n     {\r\n-        if (!options) {\r\n-            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\r\n-                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\r\n-            m_chainparams = CChainParams::Main();\r\n-        } else {\r\n+        if (options) {\r\n             LOCK(options->m_mutex);\r\n             if (options->m_chainparams) {\r\n                 m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\r\n@@ -256,7 +252,13 @@ public:\r\n                 m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\r\n                 m_signals->RegisterValidationInterface(m_validation_interface.get());\r\n             }\r\n-\r\n+        }\r\n+        if (!m_notifications) {\r\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\r\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\r\n+        }\r\n+        if (!m_chainparams) {\r\n+            m_chainparams = CChainParams::Main();\r\n         }\r\n \r\n         if (!kernel::SanityChecks(*m_context)) {\r\n\r\n```\r\n</details>\r\n\r\nThis did not fail/break `test_kernel.cpp` because the test explicitly sets the options in `create_context()`:\r\n\r\n```cpp\r\n    options.SetChainParams(params);\r\n    options.SetNotifications(notifications);\r\n```\r\n\r\n`py-bitcoinkernel` does not automatically do that, which is causing segfaults for `kernel_chainstate_manager_create` in the test suite there.",
      "created_at": "2025-03-20T18:57:44Z",
      "updated_at": "2025-03-20T19:03:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r2006272875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006272875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 243,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006290487",
      "pull_request_review_id": 2703841630,
      "id": 2006290487,
      "node_id": "PRRC_kwDOABII5853lZA3",
      "diff_hunk": "@@ -0,0 +1,1197 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging(). Functions changing the logging settings are global\n+ * (and not thread safe) and change the settings for all existing\n+ * kernel_LoggingConnection instances.\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task runner\n+ * owned by the context. It passes events through the registered validation\n+ * interface callbacks.\n+ *\n+ * A constructed context can be safely used from multiple threads.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_TRACE = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_INFO,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/** @name Transaction\n+ * Functions for working with transactions.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+///@}\n+\n+/** @name ScriptPubkey\n+ * Functions for working with script pubkeys.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+BITCOINKERNEL_API kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+BITCOINKERNEL_API void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+///@}\n+\n+/** @name TransactionOutput\n+ * Functions for working with transaction outputs.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+BITCOINKERNEL_API kernel_TransactionOutput* kernel_transaction_output_create(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey of an output in the returned script pubkey\n+ * opaque object.\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The data for the output's script pubkey.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* kernel_copy_script_pubkey_from_output(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Gets the amount associated with this transaction output\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The amount.\n+ */\n+BITCOINKERNEL_API int64_t kernel_get_transaction_output_amount(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+///@}\n+\n+/** @name Script\n+ * Functions for working with scripts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+///@}\n+\n+/** @name Logging\n+ * Logging-related functions.\n+ */\n+///@{\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once and is not thread or re-entry safe.\n+ * Log messages will be buffered until this function is called, or a logging\n+ * connection is created.\n+ */\n+BITCOINKERNEL_API void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not\n+ * enable the selected categories. Use `kernel_enable_log_category` to start\n+ * logging from a specific, or all categories. This function is not thread\n+ * safe. Mutiple calls from different threads are allowed but must be\n+ * synchronized. This changes a global setting and will override settings for\n+ * all existing `kernelLoggingConnection instances.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ */\n+BITCOINKERNEL_API void kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 589,
      "original_position": 581,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "2dc27e2860b97c2bffa5f18706917b21858e5594",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is the rationale behind requiring to first add, and then {enable,disable} the category? An alternative would be a single `kernel_set_log_level_category`, which immediately \"enables\" (I think it's a strange term anyway) the category at the given level. \"Disabling\" would be achieved by calling `kernel_set_log_level_category` again with a higher (i.e. less granular) level, again taking effect immediately.\r\n\r\nI can't think of any use cases that require separating this in 3 functions? I think it would simultaneously be more intuitive and ergonomic, and probably also less code?",
      "created_at": "2025-03-20T19:10:59Z",
      "updated_at": "2025-03-20T19:10:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r2006290487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006290487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 589,
      "original_line": 589,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006309594",
      "pull_request_review_id": 2703873713,
      "id": 2006309594,
      "node_id": "PRRC_kwDOABII5853ldra",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 350,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "29513955891e40e78466f2c666dfa13e9c1b2914",
      "in_reply_to_id": 1995880696,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't think we need to rely on the order inside the enumeration here\r\n\r\nI don't think it's required, but it is slightly convenient when they are? E.g. when implementing `py-bitcoinkernel`'s logging, being able to rely on the order of `kernel_LogLevel` helps the implementation a bit (and it is also how these level enums are usually implemented in most logging libraries, I think). As one example, I think using the same values as the python `logging` library could be sensible: https://docs.python.org/3/library/logging.html#logging-levels (with e.g. 5 for TRACE)\r\n\r\n> That said, it could also just mirror the values in the BCLog::Level\r\n\r\nThere is benefit in exposing them all, yes. It'll be essential if/when we updated the logging callback to expose a `kernel_Log` struct instead of a string (as per my comment [here](https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2685229851)), and a nice-to-have even for string-parsing as it helps inform which categories could appear in the log output (even if the enums don't encode their string representation).\r\n\r\nNone of this is crucial, just sharing my thoughts.\r\n",
      "created_at": "2025-03-20T19:23:54Z",
      "updated_at": "2025-03-20T19:23:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r2006309594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006309594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 346,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006471733",
      "pull_request_review_id": 2704140654,
      "id": 2006471733,
      "node_id": "PRRC_kwDOABII5853mFQ1",
      "diff_hunk": "@@ -1,11 +1,1158 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define BITCOINKERNEL_BUILD\n+\n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/caches.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n #include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const TranslateFn G_TRANSLATION_FUN{nullptr};\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+BCLog::Level get_bclog_level(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return BCLog::Level::Info;\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return BCLog::Level::Debug;\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return BCLog::Level::Trace;\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+BCLog::LogFlags get_bclog_flag(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return BCLog::LogFlags::BENCH;\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return BCLog::LogFlags::BLOCKSTORAGE;\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return BCLog::LogFlags::COINDB;\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return BCLog::LogFlags::LEVELDB;\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return BCLog::LogFlags::MEMPOOL;\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return BCLog::LogFlags::PRUNE;\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return BCLog::LogFlags::RAND;\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return BCLog::LogFlags::REINDEX;\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return BCLog::LogFlags::VALIDATION;\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return BCLog::LogFlags::KERNEL;\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return BCLog::LogFlags::ALL;\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_UNKNOWN_NEW_RULES_ACTIVATED;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*)m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*)m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void progress(const bilingual_str& title, int progress_percent, bool resume_possible) override\n+    {\n+        if (m_cbs.progress) m_cbs.progress((void*)m_cbs.user_data, title.original.c_str(), title.original.length(), progress_percent, resume_possible);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*)m_cbs.user_data, cast_kernel_warning(id), message.original.c_str(), message.original.length());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*)m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*)m_cbs.user_data, message.original.c_str(), message.original.length());\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*)m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+struct ContextOptions {\n+    mutable Mutex m_mutex;\n+    std::unique_ptr<const CChainParams> m_chainparams GUARDED_BY(m_mutex);\n+    std::unique_ptr<const KernelNotifications> m_notifications GUARDED_BY(m_mutex);\n+    std::unique_ptr<const KernelValidationInterface> m_validation_interface GUARDED_BY(m_mutex);\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    std::unique_ptr<KernelValidationInterface> m_validation_interface;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (!options) {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+            m_chainparams = CChainParams::Main();\n+        } else {\n+            LOCK(options->m_mutex);\n+            if (options->m_chainparams) {\n+                m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+            }\n+            if (options->m_notifications) {\n+                m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+            }\n+            if (options->m_validation_interface) {\n+                m_validation_interface = std::make_unique<KernelValidationInterface>(*options->m_validation_interface);\n+                m_signals->RegisterValidationInterface(m_validation_interface.get());\n+            }\n+\n+        }",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": null,
      "original_position": 262,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "2dc27e2860b97c2bffa5f18706917b21858e5594",
      "in_reply_to_id": 2006272875,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! I also added a regression test. Sorry for not catching this earlier!",
      "created_at": "2025-03-20T21:20:43Z",
      "updated_at": "2025-03-20T21:20:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r2006471733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006471733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 243,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006477122",
      "pull_request_review_id": 2704152293,
      "id": 2006477122,
      "node_id": "PRRC_kwDOABII5853mGlC",
      "diff_hunk": "@@ -0,0 +1,1197 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+#ifndef BITCOINKERNEL_API\n+#if defined(_WIN32)\n+#ifdef BITCOINKERNEL_BUILD\n+#define BITCOINKERNEL_API __declspec(dllexport)\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 4) && defined(BITCOINKERNEL_BUILD)\n+#define BITCOINKERNEL_API __attribute__((visibility(\"default\")))\n+#else\n+#define BITCOINKERNEL_API\n+#endif\n+#endif\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(...)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * @page remarks Remarks\n+ *\n+ * @section context Context\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * @section error Error handling\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * @section pointer Pointer and argument conventions\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid\n+ * for the duration of the callback. They are always marked as `const` and must\n+ * not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging(). Functions changing the logging settings are global\n+ * (and not thread safe) and change the settings for all existing\n+ * kernel_LoggingConnection instances.\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task runner\n+ * owned by the context. It passes events through the registered validation\n+ * interface callbacks.\n+ *\n+ * A constructed context can be safely used from multiple threads.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, const kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, size_t title_len, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message, size_t message_len);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message, size_t message_len);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    const void* user_data;                                //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    const void* user_data;                   //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_TRACE = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_INFO,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/** @name Transaction\n+ * Functions for working with transactions.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+///@}\n+\n+/** @name ScriptPubkey\n+ * Functions for working with script pubkeys.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+BITCOINKERNEL_API kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+BITCOINKERNEL_API void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+///@}\n+\n+/** @name TransactionOutput\n+ * Functions for working with transaction outputs.\n+ */\n+///@{\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+BITCOINKERNEL_API kernel_TransactionOutput* kernel_transaction_output_create(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey of an output in the returned script pubkey\n+ * opaque object.\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The data for the output's script pubkey.\n+ */\n+BITCOINKERNEL_API kernel_ScriptPubkey* kernel_copy_script_pubkey_from_output(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Gets the amount associated with this transaction output\n+ *\n+ * @param[in] transaction_output Non-null.\n+ * @return                       The amount.\n+ */\n+BITCOINKERNEL_API int64_t kernel_get_transaction_output_amount(kernel_TransactionOutput* transaction_output\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+BITCOINKERNEL_API void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+///@}\n+\n+/** @name Script\n+ * Functions for working with scripts.\n+ */\n+///@{\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+BITCOINKERNEL_API bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+///@}\n+\n+/** @name Logging\n+ * Logging-related functions.\n+ */\n+///@{\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once and is not thread or re-entry safe.\n+ * Log messages will be buffered until this function is called, or a logging\n+ * connection is created.\n+ */\n+BITCOINKERNEL_API void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not\n+ * enable the selected categories. Use `kernel_enable_log_category` to start\n+ * logging from a specific, or all categories. This function is not thread\n+ * safe. Mutiple calls from different threads are allowed but must be\n+ * synchronized. This changes a global setting and will override settings for\n+ * all existing `kernelLoggingConnection instances.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ */\n+BITCOINKERNEL_API void kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 589,
      "original_position": 581,
      "commit_id": "a0d24ff9a9337770dae668d7b0ea0a6e62ed086a",
      "original_commit_id": "2dc27e2860b97c2bffa5f18706917b21858e5594",
      "in_reply_to_id": 2006290487,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This should just mirror the internal code at the moment, but I agree that it is not really useful to split this up. Will see if I can consolidate this.",
      "created_at": "2025-03-20T21:25:30Z",
      "updated_at": "2025-03-20T21:25:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r2006477122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2006477122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 589,
      "original_line": 589,
      "side": "RIGHT"
    }
  ]
}