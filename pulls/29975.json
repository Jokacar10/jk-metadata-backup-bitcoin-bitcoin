{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975",
    "id": 1843531702,
    "node_id": "PR_kwDOABII585t4g-2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29975",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29975.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29975.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/e41667b720372dae8438ea86e9819027e62b54e0",
    "number": 29975,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "blockstorage: Separate reindexing from saving new blocks",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "`SaveBlockToDisk` / `FindBlockPos` are used for two purposes, depending on whether they are called during reindexing (`dbp` set,  `fKnown = true`) or in the \"normal\" case when adding new blocks (`dbp == nullptr`,  `fKnown = false`).\r\nThe actual tasks are quite different\r\n- In normal mode, preparations for saving a new block are made, which is then saved: find the correct position on disk (maybe skipping to a new blk file), check for available disk space, update the blockfile info db, save the block.\r\n- during reindex, most of this is not necessary (the block is already on disk after all), only the blockfile info needs to rebuilt because reindex wiped the leveldb it's saved in.\r\n\r\nUsing one function with many conditional statements for this leads to code that is hard to read / understand and bug-prone:\r\n- many code paths in `FindBlockPos` are conditional on `fKnown` or `!fKnown`\r\n- It's not really clear what actually needs to be done during reindex (we don't need to \"save a block to disk\" or \"find a block pos\" as the function names suggest)\r\n- logic that should be applied to only one of the two modes is sometimes applied to both (see first commit, or #27039)\r\n\r\n#24858 and #27039 were recent bugs directly related to the differences between reindexing and normal mode, and in both cases the simple fix took a long time to be reviewed and merged.\r\n\r\nThis PR proposes to clean this code up by splitting out the reindex logic into a separate function (`UpdateBlockInfo`) which will be called directly from validation. As a result, `SaveBlockToDisk` and `FindBlockPos` only need to cover the non-reindex logic. ",
    "labels": [
      {
        "id": 219890555,
        "node_id": "MDU6TGFiZWwyMTk4OTA1NTU=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage",
        "name": "Block storage",
        "color": "000000",
        "default": false
      }
    ],
    "created_at": "2024-04-26T21:30:16Z",
    "updated_at": "2025-05-17T06:08:10Z",
    "closed_at": "2024-05-16T15:16:17Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-05-16T15:16:17Z",
    "merged_by": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "2f53f2273da020d7fabd7c65a1bc7e69a31249b2",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "mzumsande:202404_blockstorage_split_reindex",
      "ref": "202404_blockstorage_split_reindex",
      "sha": "e41667b720372dae8438ea86e9819027e62b54e0",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 187673073,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODc2NzMwNzM=",
        "name": "bitcoin",
        "full_name": "mzumsande/bitcoin",
        "owner": {
          "login": "mzumsande",
          "id": 48763452,
          "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
          "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mzumsande",
          "html_url": "https://github.com/mzumsande",
          "followers_url": "https://api.github.com/users/mzumsande/followers",
          "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
          "organizations_url": "https://api.github.com/users/mzumsande/orgs",
          "repos_url": "https://api.github.com/users/mzumsande/repos",
          "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/mzumsande/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/mzumsande/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/mzumsande/bitcoin",
        "archive_url": "https://api.github.com/repos/mzumsande/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/mzumsande/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/mzumsande/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/mzumsande/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/mzumsande/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/mzumsande/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/mzumsande/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/mzumsande/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/mzumsande/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/mzumsande/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/mzumsande/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/mzumsande/bitcoin/events",
        "forks_url": "https://api.github.com/repos/mzumsande/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/mzumsande/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/mzumsande/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/mzumsande/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/mzumsande/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/mzumsande/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/mzumsande/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/mzumsande/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/mzumsande/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/mzumsande/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/mzumsande/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/mzumsande/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/mzumsande/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:mzumsande/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/mzumsande/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/mzumsande/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/mzumsande/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/mzumsande/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/mzumsande/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/mzumsande/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/mzumsande/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/mzumsande/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/mzumsande/bitcoin/hooks",
        "svn_url": "https://github.com/mzumsande/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 260460,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-14T13:33:53Z",
        "created_at": "2019-05-20T16:03:10Z",
        "updated_at": "2025-04-24T18:53:18Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "dbb3113082a75035b14d20021036d2166171976e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37236,
        "stargazers_count": 83619,
        "watchers_count": 83619,
        "size": 282081,
        "default_branch": "master",
        "open_issues_count": 729,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-16T20:28:48Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-05-17T06:18:04Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 143,
    "deletions": 105,
    "changed_files": 5,
    "commits": 6,
    "review_comments": 65,
    "comments": 10
  },
  "events": [
    {
      "event": "commented",
      "id": 2080140998,
      "node_id": "IC_kwDOABII5857_G7G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080140998",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:30:19Z",
      "updated_at": "2024-05-16T14:55:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29975).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [paplorinc](https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2111128757), [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2057650383), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2061065588) |\n| Concept ACK | [furszy](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026654546), [BrandonOdiwuor](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2028283852) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29700](https://github.com/bitcoin/bitcoin/pull/29700) (kernel, refactor: return error status on all fatal errors by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080140998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "labeled",
      "id": 12628633537,
      "node_id": "LE_lADOABII586HGINjzwAAAALwuafB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628633537",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:30:21Z",
      "label": {
        "name": "Block storage",
        "color": "000000"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12628712674,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAALwutzi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628712674",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "created_at": "2024-04-26T21:42:29Z"
    },
    {
      "event": "commented",
      "id": 2080156364,
      "node_id": "IC_kwDOABII5857_KrM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080156364",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:42:34Z",
      "updated_at": "2024-04-26T21:42:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24317664317</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080156364",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "labeled",
      "id": 12628713229,
      "node_id": "LE_lADOABII586HGINjzwAAAALwut8N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628713229",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:42:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2080168836,
      "node_id": "IC_kwDOABII5857_NuE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080168836",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:57:07Z",
      "updated_at": "2024-04-26T21:57:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080168836",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "unlabeled",
      "id": 12629852704,
      "node_id": "UNLE_lADOABII586HGINjzwAAAALwzEIg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12629852704",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-27T02:46:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2026623423,
      "node_id": "PRR_kwDOABII5854y9G_",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Recreated the change to understand it better, commented on what I've noticed.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026623423",
      "submitted_at": "2024-04-27T12:59:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "reviewed",
      "id": 2026654546,
      "node_id": "PRR_kwDOABII5854zEtS",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026654546",
      "submitted_at": "2024-04-27T14:04:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "reviewed",
      "id": 2028283852,
      "node_id": "PRR_kwDOABII58545SfM",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n",
      "user": {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2028283852",
      "submitted_at": "2024-04-29T11:50:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12648121455,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAALx4wRv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12648121455",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "194e84accced947ef63c6db389bc62a2b58cffa3",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/194e84accced947ef63c6db389bc62a2b58cffa3",
      "created_at": "2024-04-29T19:32:21Z"
    },
    {
      "event": "commented",
      "id": 2083526332,
      "node_id": "IC_kwDOABII5858MBa8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2083526332",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T19:42:12Z",
      "updated_at": "2024-04-29T19:42:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "[39ad8d8 ](https://github.com/bitcoin/bitcoin/commit/39ad8d825e35b7326ad0ea25c37d3fe12ded64c9)to [194e84a](https://github.com/bitcoin/bitcoin/commit/194e84accced947ef63c6db389bc62a2b58cffa3): Addressed review feedback by @paplorinc, thanks!",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2083526332",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "mentioned",
      "id": 12648230656,
      "node_id": "MEE_lADOABII586HGINjzwAAAALx5K8A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12648230656",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T19:42:13Z"
    },
    {
      "event": "subscribed",
      "id": 12648230671,
      "node_id": "SE_lADOABII586HGINjzwAAAALx5K8P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12648230671",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T19:42:13Z"
    },
    {
      "event": "reviewed",
      "id": 2041313158,
      "node_id": "PRR_kwDOABII5855q_eG",
      "url": null,
      "actor": null,
      "commit_id": "194e84accced947ef63c6db389bc62a2b58cffa3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 194e84accced947ef63c6db389bc62a2b58cffa3. I left a lot of comments, but everything looks right here and the code is a lot nicer than before.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2041313158",
      "submitted_at": "2024-05-07T18:02:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "review_requested",
      "id": 12733376280,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL29-cY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12733376280",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T18:03:02Z",
      "requested_reviewer": {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12733376472,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL29-fY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12733376472",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T18:03:03Z",
      "requested_reviewer": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12733376669,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL29-id",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12733376669",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T18:03:04Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2099086073,
      "node_id": "IC_kwDOABII5859HYL5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2099086073",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T18:45:33Z",
      "updated_at": "2024-05-09T16:16:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "With 194e84accced947ef63c6db389bc62a2b58cffa3, since reindexing regenerates undo data, and undo data shouldn't be added until all existing blocks are, it seems like there is no reason for the `AddToBlockFileInfo` function to worry about resetting the `BlockfileCursor::undo_file` field ~~or even accessing the block storage cursors at all. So I think the following simplification would make sense:~~ \\[ **EDIT**: This is wrong and the cursors do need to be updated to record the max file number. The diff below is wrong and a better change would be https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1595669798 ]\r\n\r\n```diff\r\n--- a/src/node/blockstorage.cpp\r\n+++ b/src/node/blockstorage.cpp\r\n@@ -941,22 +941,11 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\r\n void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\r\n {\r\n     LOCK(cs_LastBlockFile);\r\n-\r\n     const unsigned int added_size = ::GetSerializeSize(TX_WITH_WITNESS(block));\r\n-    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\r\n-    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\r\n-    Assume(chain_type == BlockfileType::NORMAL);\r\n-\r\n     const int nFile = pos.nFile;\r\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\r\n         m_blockfile_info.resize(nFile + 1);\r\n     }\r\n-\r\n-    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\r\n-    if (nFile != last_blockfile) {\r\n-        // No undo data yet in the new file, so reset our undo-height tracking.\r\n-        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\r\n-    }\r\n     m_blockfile_info[nFile].AddBlock(nHeight, block.GetBlockTime());\r\n     m_blockfile_info[nFile].nSize = std::max(pos.nPos + added_size, m_blockfile_info[nFile].nSize);\r\n     m_dirty_fileinfo.insert(nFile);\r\n```\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2099086073",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBkMTE0ZTNjYjIwY2I5ZTAzZmM5YmE4ZGFmM2QwMzQzNmI0OTE3NDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d114e3cb20cb9e03fc9ba8daf3d03436b491742",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0d114e3cb20cb9e03fc9ba8daf3d03436b491742",
      "tree": {
        "sha": "6eeb9f065c3e3a3b2a12571b08d2afd5fe5071ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eeb9f065c3e3a3b2a12571b08d2afd5fe5071ed"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7973a670915632b75a6aa16f24f98b936865c48f",
          "sha": "7973a670915632b75a6aa16f24f98b936865c48f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7973a670915632b75a6aa16f24f98b936865c48f"
        }
      ],
      "message": "blockstorage: Add Assume for fKnown / snapshot chainstate\n\nfKnown is true during reindex (and only then), which deletes\nany existing snapshot chainstate. As a result, this function can never\nbe called wth fKnown set and a snapshot chainstate.\nAdd an Assume for this, and make the code initializing a blockfile cursor\nfor the snapshot conditional on !fKnown.\n\nThis is a preparation for splitting the reindex logic out of\nFindBlockPos in the following commits.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-08T22:19:47Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-03-20T19:08:40Z"
      },
      "sha": "0d114e3cb20cb9e03fc9ba8daf3d03436b491742"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12750316961,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAAL3-mWh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12750316961",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/6a22eede2083616ecc7558a16d8189c22b46403d",
      "created_at": "2024-05-08T22:22:26Z"
    },
    {
      "event": "commented",
      "id": 2101607833,
      "node_id": "IC_kwDOABII5859Q_2Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2101607833",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T22:32:08Z",
      "updated_at": "2024-05-08T22:32:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the detailed review @ryanofsky! \r\nWith the latest push, I addressed the feedback partially, see in particular https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594531344. I will address the remaining comments soon.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2101607833",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "mentioned",
      "id": 12750375913,
      "node_id": "MEE_lADOABII586HGINjzwAAAAL3-0vp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12750375913",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T22:32:09Z"
    },
    {
      "event": "subscribed",
      "id": 12750375923,
      "node_id": "SE_lADOABII586HGINjzwAAAAL3-0vz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12750375923",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T22:32:09Z"
    },
    {
      "event": "reviewed",
      "id": 2048211642,
      "node_id": "PRR_kwDOABII5856FTq6",
      "url": null,
      "actor": null,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 6a22eede2083616ecc7558a16d8189c22b46403d. Just some suggested changes were made since the last review: adding more Assume checks, renaming a function, and moving a declaration. Everything still looks good.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2048211642",
      "submitted_at": "2024-05-09T15:33:27Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "reviewed",
      "id": 2048324457,
      "node_id": "PRR_kwDOABII5856FvNp",
      "url": null,
      "actor": null,
      "commit_id": "2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2048324457",
      "submitted_at": "2024-05-09T16:11:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12774128017,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAAL5ZbmR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12774128017",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ff2ef7d33b0f94f522b84965bdef0cf45e89ed62",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/ff2ef7d33b0f94f522b84965bdef0cf45e89ed62",
      "created_at": "2024-05-10T21:15:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12774144050,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAAL5Zfgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12774144050",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9cf475ffffb869cd55c2b2f3be84d7c90b199521",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/9cf475ffffb869cd55c2b2f3be84d7c90b199521",
      "created_at": "2024-05-10T21:18:27Z"
    },
    {
      "event": "commented",
      "id": 2105283462,
      "node_id": "IC_kwDOABII5859fBOG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2105283462",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T21:18:32Z",
      "updated_at": "2024-05-10T21:18:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24838737665</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2105283462",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "labeled",
      "id": 12774144433,
      "node_id": "LE_lADOABII586HGINjzwAAAAL5Zfmx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12774144433",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T21:18:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2105289929,
      "node_id": "IC_kwDOABII5859fCzJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2105289929",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T21:25:21Z",
      "updated_at": "2024-05-10T21:25:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "[6a22eed ](https://github.com/bitcoin/bitcoin/commit/6a22eede2083616ecc7558a16d8189c22b46403d)to [9cf475f](https://github.com/bitcoin/bitcoin/commit/9cf475ffffb869cd55c2b2f3be84d7c90b199521):\r\n\r\nI think I addressed all feedback now. Added 2 additional commits (one for renaming / updating FindNextBlockPos, one for not moving the cursor backwards in UpdateBlockInfo) and reorganized the other commit slightly by having a doc-only commit at the beginning.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2105289929",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "unlabeled",
      "id": 12774536009,
      "node_id": "UNLE_lADOABII586HGINjzwAAAAL5a_NJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12774536009",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T22:32:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2051255096,
      "node_id": "PRR_kwDOABII5856Q6s4",
      "url": null,
      "actor": null,
      "commit_id": "9cf475ffffb869cd55c2b2f3be84d7c90b199521",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 9cf475ffffb869cd55c2b2f3be84d7c90b199521\r\n\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2051255096",
      "submitted_at": "2024-05-11T20:38:12Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "review_requested",
      "id": 12777161279,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL5lAI_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12777161279",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-11T20:38:16Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2051341978,
      "node_id": "PRR_kwDOABII5856RP6a",
      "url": null,
      "actor": null,
      "commit_id": "9cf475ffffb869cd55c2b2f3be84d7c90b199521",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Nice, only left a few nit comments",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2051341978",
      "submitted_at": "2024-05-12T09:59:01Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "reviewed",
      "id": 2052927360,
      "node_id": "PRR_kwDOABII5856XS-A",
      "url": null,
      "actor": null,
      "commit_id": "9cf475ffffb869cd55c2b2f3be84d7c90b199521",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 9cf475ffffb869cd55c2b2f3be84d7c90b199521. I left some suggestions to clean up comments in intermediate commits, but everything looks good in the end.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2052927360",
      "submitted_at": "2024-05-13T15:44:46Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZkYWU2MzhlODM1MjJjMjhhMTIyMmU2NWM0M2QxY2JjYTNlMzRjYmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdae638e83522c28a1222e65c43d1cbca3e34cba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fdae638e83522c28a1222e65c43d1cbca3e34cba",
      "tree": {
        "sha": "16bac32cf7de82dfd8a2f46ddd67bf282bde96a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16bac32cf7de82dfd8a2f46ddd67bf282bde96a8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d114e3cb20cb9e03fc9ba8daf3d03436b491742",
          "sha": "0d114e3cb20cb9e03fc9ba8daf3d03436b491742",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0d114e3cb20cb9e03fc9ba8daf3d03436b491742"
        }
      ],
      "message": "doc: Improve doc for functions involved in saving blocks to disk\n\nIn particular, document the flat file positions expected and\nreturned by functions better.\n\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-14T17:49:34Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-10T20:46:35Z"
      },
      "sha": "fdae638e83522c28a1222e65c43d1cbca3e34cba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA2NDg1OWJiYWQ2OTg0YTZlYzg1Yzc0NDA2NGFiZGY3NTc4MDdjNTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/064859bbad6984a6ec85c744064abdf757807c58",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/064859bbad6984a6ec85c744064abdf757807c58",
      "tree": {
        "sha": "929e949971ec70058d4b465ed7f4b5ca346df29c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/929e949971ec70058d4b465ed7f4b5ca346df29c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdae638e83522c28a1222e65c43d1cbca3e34cba",
          "sha": "fdae638e83522c28a1222e65c43d1cbca3e34cba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fdae638e83522c28a1222e65c43d1cbca3e34cba"
        }
      ],
      "message": "blockstorage: split up FindBlockPos function\n\nFindBlockPos does different things depending on whether the block is known\nor not, as shown by the fact that much of the existing code is conditional on fKnown set or not.\n\nIf the block position is known (during reindex) the function only updates the block info\nstatistics. It doesn't actually find a block position in this case.\n\nThis commit removes fKnown and splits up these two code paths by introducing a separate function\nfor the reindex case when the block position is known.\nIt doesn't change behavior.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-14T18:54:26Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-03-20T19:05:08Z"
      },
      "sha": "064859bbad6984a6ec85c744064abdf757807c58"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ5ZTQ3N2M0ZGMzOWQ5NjIzZWQ2NmMzNWMwNmUyOGY5NGFlNjJhZDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9e477c4dc39d9623ed66c35c06e28f94ae62ad5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e477c4dc39d9623ed66c35c06e28f94ae62ad5",
      "tree": {
        "sha": "ffdf694d028624320b245aa3745414f9771529b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffdf694d028624320b245aa3745414f9771529b2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/064859bbad6984a6ec85c744064abdf757807c58",
          "sha": "064859bbad6984a6ec85c744064abdf757807c58",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/064859bbad6984a6ec85c744064abdf757807c58"
        }
      ],
      "message": "validation, blockstorage: Separate code paths for reindex and saving new blocks\n\nBy calling SaveBlockToDisk only when we actually want to save a new\nblock to disk. In the reindex case, we now call UpdateBlockInfo\ndirectly from validation.\n\nThis commit doesn't change behavior.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-14T18:54:27Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T19:06:55Z"
      },
      "sha": "d9e477c4dc39d9623ed66c35c06e28f94ae62ad5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE3MTAzNjM3YzZmYTJkZmNmNTM3NGViYjBjZDcxNWU1NDBkZDRjZTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17103637c6fa2dfcf5374ebb0cd715e540dd4ce1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/17103637c6fa2dfcf5374ebb0cd715e540dd4ce1",
      "tree": {
        "sha": "29b59ca264f0eb704784290400439011bd274a10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29b59ca264f0eb704784290400439011bd274a10"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9e477c4dc39d9623ed66c35c06e28f94ae62ad5",
          "sha": "d9e477c4dc39d9623ed66c35c06e28f94ae62ad5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e477c4dc39d9623ed66c35c06e28f94ae62ad5"
        }
      ],
      "message": "blockstorage: Rename FindBlockPos and have it return a FlatFilePos\n\nThe new name reflects that it is no longer called with existing blocks\nfor which the position is already known.\n\nReturning a FlatFilePos directly simplifies the interface.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-14T18:54:27Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-10T19:08:55Z"
      },
      "sha": "17103637c6fa2dfcf5374ebb0cd715e540dd4ce1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU0MTY2N2I3MjAzNzJkYWU4NDM4ZWE4NmU5ODE5MDI3ZTYyYjU0ZTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e41667b720372dae8438ea86e9819027e62b54e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e41667b720372dae8438ea86e9819027e62b54e0",
      "tree": {
        "sha": "dab85a50e65941b36af6fb97653a3a0bf3053a24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dab85a50e65941b36af6fb97653a3a0bf3053a24"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17103637c6fa2dfcf5374ebb0cd715e540dd4ce1",
          "sha": "17103637c6fa2dfcf5374ebb0cd715e540dd4ce1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/17103637c6fa2dfcf5374ebb0cd715e540dd4ce1"
        }
      ],
      "message": "blockstorage: Don't move cursor backwards in UpdateBlockInfo\n\nPreviously, it was possible to move the cursor back to an older file\nduring reindex if blocks are enocuntered out of order during reindex.\nThis would mean that MaxBlockfileNum() would be incorrect, and\na wrong DB_LAST_BLOCK could be written to disk.\n\nThis improves the logic by only ever moving the cursor forward (if possible)\nbut not backwards.\n\nCo-authored-by: Martin Zumsande <mzumsande@gmail.com>",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-14T18:54:27Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-05-09T22:34:14Z"
      },
      "sha": "e41667b720372dae8438ea86e9819027e62b54e0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12806861942,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAAL7WTR2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12806861942",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "commit_url": "https://api.github.com/repos/mzumsande/bitcoin/commits/e41667b720372dae8438ea86e9819027e62b54e0",
      "created_at": "2024-05-14T18:54:55Z"
    },
    {
      "event": "commented",
      "id": 2110943056,
      "node_id": "IC_kwDOABII58590m9Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2110943056",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T19:01:05Z",
      "updated_at": "2024-05-14T19:01:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "[9cf475f ](https://github.com/bitcoin/bitcoin/commit/9cf475ffffb869cd55c2b2f3be84d7c90b199521)to [e41667b](https://github.com/bitcoin/bitcoin/commit/e41667b720372dae8438ea86e9819027e62b54e0):\r\nAddressed review feedback.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2110943056",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "commented",
      "id": 2111128757,
      "node_id": "IC_kwDOABII58591US1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2111128757",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T20:58:28Z",
      "updated_at": "2024-05-14T20:58:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK e41667b720372dae8438ea86e9819027e62b54e0\r\nGreat job, love the results of these untangling tasks!",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2111128757",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "review_requested",
      "id": 12808216931,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL7beFj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12808216931",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T20:58:33Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12808217069,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL7beHt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12808217069",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T20:58:34Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2057650383,
      "node_id": "PRR_kwDOABII5856pUDP",
      "url": null,
      "actor": null,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Re-ACK e41667b720372dae8438ea86e9819027e62b54e0",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2057650383",
      "submitted_at": "2024-05-15T11:05:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "reviewed",
      "id": 2061065588,
      "node_id": "PRR_kwDOABII58562V10",
      "url": null,
      "actor": null,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK e41667b720372dae8438ea86e9819027e62b54e0. Just improvements to comments since last review.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2061065588",
      "submitted_at": "2024-05-16T14:55:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "merged",
      "id": 12835747926,
      "node_id": "ME_lADOABII586HGINjzwAAAAL9EfhW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12835747926",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2f53f2273da020d7fabd7c65a1bc7e69a31249b2",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f53f2273da020d7fabd7c65a1bc7e69a31249b2",
      "created_at": "2024-05-16T15:16:17Z"
    },
    {
      "event": "closed",
      "id": 12835747972,
      "node_id": "CE_lADOABII586HGINjzwAAAAL9EfiE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12835747972",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-16T15:16:17Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 12852103112,
      "node_id": "HRDE_lADOABII586HGINjzwAAAAL-C4fI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12852103112",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T18:30:50Z"
    },
    {
      "event": "locked",
      "id": 17697522964,
      "node_id": "LOE_lADOABII586HGINjzwAAAAQe2sUU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17697522964",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-17T06:08:10Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581784723",
      "pull_request_review_id": 2026623423,
      "id": 1581784723,
      "node_id": "PRRC_kwDOABII585eSB6T",
      "diff_hunk": "@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n     // to block 2 location.\n     CBlockFileInfo* block_data = blockman.GetBlockFileInfo(0);\n     BOOST_CHECK_EQUAL(block_data->nBlocks, 2);\n-    BOOST_CHECK(blockman.SaveBlockToDisk(block3, /*nHeight=*/3, /*dbp=*/&pos2) == pos2);\n+    blockman.AddToBlockFileInfo(block3, /*nHeight=*/3, /*pos=*/pos2);",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "seems to me the related comments needs to be updated in this file (e.g line 184 and 199)",
      "created_at": "2024-04-27T10:00:24Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581784723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581784723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581822649",
      "pull_request_review_id": 2026623423,
      "id": 1581822649,
      "node_id": "PRRC_kwDOABII585eSLK5",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: is the naming style deliberate here? When is it camel and when snake?",
      "created_at": "2024-04-27T12:28:32Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581822649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581822649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 945,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581824896",
      "pull_request_review_id": 2026623423,
      "id": 1581824896,
      "node_id": "PRRC_kwDOABII585eSLuA",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;",
      "path": "src/node/blockstorage.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does this reassignment still make sense?",
      "created_at": "2024-04-27T12:41:59Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581824896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581824896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 866,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825021",
      "pull_request_review_id": 2026623423,
      "id": 1581825021,
      "node_id": "PRRC_kwDOABII585eSLv9",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n+    const int nFile = pos.nFile;\n+\n+    if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+        m_blockfile_info.resize(nFile + 1);\n+    }\n+    if (nFile != last_blockfile) {\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should we keep the original comment here?",
      "created_at": "2024-04-27T12:42:44Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825604",
      "pull_request_review_id": 2026623423,
      "id": 1581825604,
      "node_id": "PRRC_kwDOABII585eSL5E",
      "diff_hunk": "@@ -155,7 +155,13 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Locates the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     */\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 11,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does the comment on line 215 need any update after the change?",
      "created_at": "2024-04-27T12:46:50Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825870",
      "pull_request_review_id": 2026623423,
      "id": 1581825870,
      "node_id": "PRRC_kwDOABII585eSL9O",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;\n+            m_blockman.AddToBlockFileInfo(block, pindex->nHeight, *dbp);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we might as well use `blockPos` here\r\n```C++\r\nm_blockman.AddToBlockFileInfo(block, pindex->nHeight, blockPos);\r\n```",
      "created_at": "2024-04-27T12:48:47Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825870",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581826711",
      "pull_request_review_id": 2026623423,
      "id": 1581826711,
      "node_id": "PRRC_kwDOABII585eSMKX",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could move this closer to the usage",
      "created_at": "2024-04-27T12:55:01Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581826711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581826711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581827125",
      "pull_request_review_id": 2026623423,
      "id": 1581827125,
      "node_id": "PRRC_kwDOABII585eSMQ1",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is the reason why\r\n```C++\r\nif (!m_blockfile_cursors[chain_type]) {\r\n    // If a snapshot is loaded during runtime, we may not have initialized this cursor yet.\r\n    assert(chain_type == BlockfileType::ASSUMED);\r\n    const auto new_cursor = BlockfileCursor{this->MaxBlockfileNum() + 1};\r\n    m_blockfile_cursors[chain_type] = new_cursor;\r\n    LogPrint(BCLog::BLOCKSTORAGE, \"[%s] initializing blockfile cursor to %s\\n\", chain_type, new_cursor);\r\n}\r\n```\r\n is not applicable here, right?\r\n Would it make sense to also assume `m_blockfile_cursors[chain_type]`?",
      "created_at": "2024-04-27T12:57:38Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581827125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581827125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583635647",
      "pull_request_review_id": 2029424460,
      "id": 1583635647,
      "node_id": "PRRC_kwDOABII585eZFy_",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n+    const int nFile = pos.nFile;\n+\n+    if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+        m_blockfile_info.resize(nFile + 1);\n+    }\n+    if (nFile != last_blockfile) {\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581825021,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2024-04-29T19:35:07Z",
      "updated_at": "2024-04-29T19:35:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583635647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583635647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583636377",
      "pull_request_review_id": 2029425696,
      "id": 1583636377,
      "node_id": "PRRC_kwDOABII585eZF-Z",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;",
      "path": "src/node/blockstorage.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581824896,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I think so. We later may increase nFile and then compare it to `last_blockfile` (line  `if (nFile != last_blockfile)`)",
      "created_at": "2024-04-29T19:35:51Z",
      "updated_at": "2024-04-29T19:35:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583636377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583636377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 866,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583637879",
      "pull_request_review_id": 2029428884,
      "id": 1583637879,
      "node_id": "PRRC_kwDOABII585eZGV3",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581822649,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I took both from FindBlockPos, snake case is correct, but for historical reasons camel case is still used in lots of places.\r\nBut since this is arguably new code I renamed `nAddSize` to `added_size` ",
      "created_at": "2024-04-29T19:36:48Z",
      "updated_at": "2024-04-29T19:36:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583637879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583637879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 945,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583638770",
      "pull_request_review_id": 2029430446,
      "id": 1583638770,
      "node_id": "PRRC_kwDOABII585eZGjy",
      "diff_hunk": "@@ -155,7 +155,13 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Locates the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     */\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 11,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581825604,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You mean the comment \"The ASSUMED state is initialized, when necessary, in FindBlockPos().\"?\r\nThat behavior is unchanged, it's part of the normal usage of `FindBlockPos` and wasn't happening during reindex anyway (see first commit), so I don't think it needs to be updated.",
      "created_at": "2024-04-29T19:37:51Z",
      "updated_at": "2024-04-29T19:37:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583638770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583638770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583638866",
      "pull_request_review_id": 2029430636,
      "id": 1583638866,
      "node_id": "PRRC_kwDOABII585eZGlS",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;\n+            m_blockman.AddToBlockFileInfo(block, pindex->nHeight, *dbp);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581825870,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-04-29T19:37:59Z",
      "updated_at": "2024-04-29T19:37:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583638866",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583638866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583639069",
      "pull_request_review_id": 2029430977,
      "id": 1583639069,
      "node_id": "PRRC_kwDOABII585eZGod",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": 1581826711,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-04-29T19:38:14Z",
      "updated_at": "2024-04-29T19:38:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583639069",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583639069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583640596",
      "pull_request_review_id": 2029433363,
      "id": 1583640596,
      "node_id": "PRRC_kwDOABII585eZHAU",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": 1581827125,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": " Yes. I added this in the first commit, so that the second commit doesn't change behavior.\r\n \r\nAs for your second q: Well, it'd be undefined behavior if `m_blockfile_cursors` didn't haven an element for `BlockfileType::NORMAL`. On the other hand, `m_blockfile_cursors[...]` is used all over the place, I'm not sure if we want to have an assert for each occurence. Other opinions?",
      "created_at": "2024-04-29T19:39:46Z",
      "updated_at": "2024-04-29T19:39:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583640596",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583640596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583642139",
      "pull_request_review_id": 2029436933,
      "id": 1583642139,
      "node_id": "PRRC_kwDOABII585eZHYb",
      "diff_hunk": "@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n     // to block 2 location.\n     CBlockFileInfo* block_data = blockman.GetBlockFileInfo(0);\n     BOOST_CHECK_EQUAL(block_data->nBlocks, 2);\n-    BOOST_CHECK(blockman.SaveBlockToDisk(block3, /*nHeight=*/3, /*dbp=*/&pos2) == pos2);\n+    blockman.AddToBlockFileInfo(block3, /*nHeight=*/3, /*pos=*/pos2);",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581784723,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I updated some comments. The entire test setup probably makes a bit less sense after the refactor, users unfamiliar\r\nwith the history might ask themselves why someone could think that `Reindex` / `AddToBlockFileInfo` would change the block files so that we'd require a test making sure it doesn't.",
      "created_at": "2024-04-29T19:40:39Z",
      "updated_at": "2024-04-29T19:41:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583642139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583642139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591338361",
      "pull_request_review_id": 2041313158,
      "id": 1591338361,
      "node_id": "PRRC_kwDOABII585e2eV5",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;",
      "path": "src/validation.cpp",
      "position": 10,
      "original_position": 10,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a17eacab1f8790afc5f89ba2ee3e34da4c9369e1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"validation, blockstorage: Separate code paths for reindex and saving new blocks\" (a17eacab1f8790afc5f89ba2ee3e34da4c9369e1)\r\n\r\nIt looks like previously there would have been an error here if `dbp->IsNull()` was true, and now there will not be an error. This is probably a good change, since AcceptBlock should not be looking at block positions, just passing them on.",
      "created_at": "2024-05-06T17:32:15Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591338361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591338361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4347,
      "original_line": 4347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591461829",
      "pull_request_review_id": 2041313158,
      "id": 1591461829,
      "node_id": "PRRC_kwDOABII585e28fF",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    if (fKnown) Assume(chain_type == BlockfileType::NORMAL);\n \n-    if (!m_blockfile_cursors[chain_type]) {\n+    if (!fKnown && !m_blockfile_cursors[chain_type]) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: Add Assume for fKnown / snapshot chainstate\" (d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5)\r\n\r\nI don't think changing this `if` statement is good.\r\n\r\nAdding the Assume call above seems good, since it provides information about the context this code is called in and could potentially catch bugs if the code is run in an unanticipated state.\r\n\r\nBut It's less clear what benefit there is to adding the  `!fKnown &&` condition to this if statement. It just makes the logic more complicated without providing any extra explanation. And if outside code were changed such that `fKnown` was false while the cursor was null, undefined behavior would now happen on line 866 below.\r\n\r\nI think this commit would be a clearer if it avoided changing any existing logic and instead just added two Assume statements:\r\n\r\n```c++\r\n// Check that chain type is NORMAL if fKnown is true, because fKnown is only\r\n// true during reindexing, and reindexing deletes snapshot chainstates, so\r\n// chain_type will not be SNAPSHOT. Also check that cursor exists, because\r\n// the normal cursor should never be null.\r\nif (fKnown) {\r\n    Assume(chain_type == BlockfileType::NORMAL);\r\n    Assume(m_blockfile_cursors[chain_type]);    \r\n}\r\n```",
      "created_at": "2024-05-06T19:28:06Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591461829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591461829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591463595",
      "pull_request_review_id": 2041313158,
      "id": 1591463595,
      "node_id": "PRRC_kwDOABII585e286r",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: Add Assume for fKnown / snapshot chainstate\" (d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5)\r\n\r\nThis comment seems really disconnected from the statement below it, because the statement does not mention reindexing or the snapshot chainstate at all. I left a suggestion to improve the comment below (https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591461829).",
      "created_at": "2024-05-06T19:29:58Z",
      "updated_at": "2024-05-07T18:03:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591463595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591463595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591477885",
      "pull_request_review_id": 2041313158,
      "id": 1591477885,
      "node_id": "PRRC_kwDOABII585e3AZ9",
      "diff_hunk": "@@ -865,90 +863,105 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 116,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nWould be helpful to clarify with meaning of `true` with `/*fFinalize*/=true`",
      "created_at": "2024-05-06T19:45:17Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591477885",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591477885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591485559",
      "pull_request_review_id": 2041313158,
      "id": 1591485559,
      "node_id": "PRRC_kwDOABII585e3CR3",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": 1581827125,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583640596\r\n\r\n> I'm not sure if we want to have an assert for each occurence. Other opinions?\r\n\r\nNot sure about other places, but it seems worth asserting here to avoid undefined behavior on line 955 and to be able to document assumptions this code is making. I suggested a comment in the previous commit that explains both assumptions and could be reused here (https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591461829).",
      "created_at": "2024-05-06T19:53:29Z",
      "updated_at": "2024-05-07T18:04:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591485559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591485559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592707738",
      "pull_request_review_id": 2041313158,
      "id": 1592707738,
      "node_id": "PRRC_kwDOABII585e7sqa",
      "diff_hunk": "@@ -848,15 +848,13 @@ fs::path BlockManager::GetBlockPosFilename(const FlatFilePos& pos) const\n     return BlockFileSeq().FileName(pos);\n }\n \n-bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown)\n+bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nTwo suggestions, maybe for later commits or a followup PR:\r\n\r\nNow that `pos` is an output parameter instead of being an in/out parameter, it would be better to just drop it entirely and make `FindBlockPos` return `FlatFilePos` like `SaveBlockToDisk`, instead of returning `bool`. This would make it more obvious what the function inputs and outputs are, and also make sure the output value is consistently initialized.\r\n\r\nAlso, I think it would make sense to rename `FindBlockPos` to `FindNextBlockPos` to be clear this function is only called to find the position where the next block should be written, and no longer has anything to do with positions of existing blocks.",
      "created_at": "2024-05-07T15:45:11Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592707738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592707738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592739006",
      "pull_request_review_id": 2041313158,
      "id": 1592739006,
      "node_id": "PRRC_kwDOABII585e70S-",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.\n+     *\n+     * @param[in]  block        the block being processed\n+     * @param[in]  nHeight      the height of the block\n+     * @param[in]  pos          the position of the block on disk. This must point *after* the\n+     *                          8 byte serialization header, at the beginning of the actual block data.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 11,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nI think this description is technically accurate, but I got confused by it and thought it was wrong because \"the 8 byte serialization header\" sounds like something that is part of `CBlock` serialization, when actually it is referring to separator fields written by `WriteBlockToDisk` *before* the serialized `CBlock`.\r\n\r\nWould suggest changing comment to \"pos: the position of the serialized CBlock on disk. This is the position returned by WriteBlockToDisk pointing at the CBlock, not the separator fields before it.\"\r\n\r\nI would also suggesting adding two more comments to this commit to make it clear what it happening at this stage of the PR.\r\n\r\nIn `WriteBlockToDisk` documentation, \"// The pos argument passed to this function is modified by this call. Before this call, it should point to an unused file location where separator fields will be written followed by the serialized CBlock data. After this call, it will point to the beginning of the serialized CBlock data, after the separator fields\"\r\n\r\nIn `FindBlockPos` documentation, \"// The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of separator fields which are written before it by WriteBlockToDisk (BLOCK_SERIALIZATION_HEADER_SIZE).",
      "created_at": "2024-05-07T16:08:30Z",
      "updated_at": "2024-05-07T18:04:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592739006",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592739006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592824870",
      "pull_request_review_id": 2041313158,
      "id": 1592824870,
      "node_id": "PRRC_kwDOABII585e8JQm",
      "diff_hunk": "@@ -1139,17 +1152,17 @@ FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, cons\n     const auto position_known {dbp != nullptr};\n     if (position_known) {\n         blockPos = *dbp;\n+        // During reindex, no blocks need to be written, only the blockfile info database needs to be rebuilt",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 189,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nI think this comment is a little confusing, because it isn't obvious that `position_known` can only be true during reindexing. Could potentially clarify this, though not necessary since this code will be deleted in the next commit.",
      "created_at": "2024-05-07T17:16:04Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592824870",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592824870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592833124",
      "pull_request_review_id": 2041313158,
      "id": 1592833124,
      "node_id": "PRRC_kwDOABII585e8LRk",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.\n+     *\n+     * @param[in]  block        the block being processed\n+     * @param[in]  nHeight      the height of the block\n+     * @param[in]  pos          the position of the block on disk. This must point *after* the\n+     *                          8 byte serialization header, at the beginning of the actual block data.\n+     */\n+    void AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos);",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 13,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nI think `SaveBlockPos` would be a less ambiguous name for this function than `AddToBlockFileInfo`. It would also be consistent with `FindBlockPos` and I think make the `AcceptBlock` code more obvious (like `if (dbp) SaveBlockPos(...) else SaveBlockToDisk(...)`)\r\n\r\nEDIT: `SaveBlockInfo` or `UpdateBlockInfo` might be a better name than `SaveBlockPos` since block position isn't really what is updated here, other information is just updated based on the position.",
      "created_at": "2024-05-07T17:23:50Z",
      "updated_at": "2024-05-08T14:01:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592833124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592833124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592841734",
      "pull_request_review_id": 2041313158,
      "id": 1592841734,
      "node_id": "PRRC_kwDOABII585e8NYG",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 6,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nInstead of adding this method and comment in the private section of the class this commit, and then moving it to the public section of the class in the next commit, and I think it would be better just to add it to the public section initially to make the PR easier to review, since it already makes sense as part of public interface.",
      "created_at": "2024-05-07T17:31:42Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592841734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592841734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592848815",
      "pull_request_review_id": 2041313158,
      "id": 1592848815,
      "node_id": "PRRC_kwDOABII585e8PGv",
      "diff_hunk": "@@ -181,22 +180,19 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n         BOOST_CHECK_EQUAL(read_block.nVersion, 2);\n     }\n \n-    // When FlatFilePos* dbp is given, SaveBlockToDisk() will not write or\n-    // overwrite anything to the flat file block storage. It will, however,\n-    // update the blockfile metadata. This is to facilitate reindexing\n-    // when the user has the blocks on disk but the metadata is being rebuilt.\n+    // During reindex, the flat file block storage will not be written do.",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a17eacab1f8790afc5f89ba2ee3e34da4c9369e1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"validation, blockstorage: Separate code paths for reindex and saving new blocks\" (a17eacab1f8790afc5f89ba2ee3e34da4c9369e1)\r\n\r\ns/do/to/",
      "created_at": "2024-05-07T17:38:28Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592848815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592848815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594531344",
      "pull_request_review_id": 2046482540,
      "id": 1594531344,
      "node_id": "PRRC_kwDOABII585fCp4Q",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    if (fKnown) Assume(chain_type == BlockfileType::NORMAL);\n \n-    if (!m_blockfile_cursors[chain_type]) {\n+    if (!fKnown && !m_blockfile_cursors[chain_type]) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": 1591461829,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The reason I added it was to make the following commit, in which every line of code that can be reached with `fKnown==true` is moved into its own function, a mechanical refactor that is easier to review: Lines dependent on `fKnown` move, lines dependent on `!fKnown` stay, independent lines go into both. \r\nWithout it, there would be the question why this block of code does not make it into `AddToBlockFileInfo`.\r\nSo the reason was to move the potential behavior change (which would only be an actual one if our assumptions about reindexing were incorrect) into its own commit.\r\n\r\nHappy to add the suggestion though.",
      "created_at": "2024-05-08T19:28:30Z",
      "updated_at": "2024-05-08T19:29:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594531344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594531344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594573095",
      "pull_request_review_id": 2046551869,
      "id": 1594573095,
      "node_id": "PRRC_kwDOABII585fC0En",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;",
      "path": "src/validation.cpp",
      "position": 10,
      "original_position": 10,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a17eacab1f8790afc5f89ba2ee3e34da4c9369e1",
      "in_reply_to_id": 1591338361,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, in the reindex case; In this case the passed dbp isn't changed (it's now a const arg to `AddToBlockFileInfo`). If a dpb was passed to AcceptBlock for which `dbp->IsNull()`, the error message (\"Failed to find position to write new block to disk\") would have been very confusing anyway, because we don't write a block to disk during reindex anyway.",
      "created_at": "2024-05-08T20:11:40Z",
      "updated_at": "2024-05-08T20:11:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594573095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594573095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4347,
      "original_line": 4347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594766043",
      "pull_request_review_id": 2046861072,
      "id": 1594766043,
      "node_id": "PRRC_kwDOABII585fDjLb",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": 1591463595,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I extended the comment according to the suggestion above.",
      "created_at": "2024-05-08T22:23:10Z",
      "updated_at": "2024-05-08T22:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594766043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594766043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594766203",
      "pull_request_review_id": 2046861307,
      "id": 1594766203,
      "node_id": "PRRC_kwDOABII585fDjN7",
      "diff_hunk": "@@ -865,90 +863,105 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 116,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1591477885,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-05-08T22:23:26Z",
      "updated_at": "2024-05-08T22:23:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594766203",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594766203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594767022",
      "pull_request_review_id": 2046862476,
      "id": 1594767022,
      "node_id": "PRRC_kwDOABII585fDjau",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": 1581827125,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added the assumptions.",
      "created_at": "2024-05-08T22:24:47Z",
      "updated_at": "2024-05-08T22:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594767022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594767022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594767896",
      "pull_request_review_id": 2046863837,
      "id": 1594767896,
      "node_id": "PRRC_kwDOABII585fDjoY",
      "diff_hunk": "@@ -1139,17 +1152,17 @@ FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, cons\n     const auto position_known {dbp != nullptr};\n     if (position_known) {\n         blockPos = *dbp;\n+        // During reindex, no blocks need to be written, only the blockfile info database needs to be rebuilt",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 189,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1592824870,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added a clarification.",
      "created_at": "2024-05-08T22:26:03Z",
      "updated_at": "2024-05-08T22:26:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594767896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594767896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594768464",
      "pull_request_review_id": 2046864594,
      "id": 1594768464,
      "node_id": "PRRC_kwDOABII585fDjxQ",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.\n+     *\n+     * @param[in]  block        the block being processed\n+     * @param[in]  nHeight      the height of the block\n+     * @param[in]  pos          the position of the block on disk. This must point *after* the\n+     *                          8 byte serialization header, at the beginning of the actual block data.\n+     */\n+    void AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos);",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 13,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1592833124,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Renamed to `UpdateBlockInfo`",
      "created_at": "2024-05-08T22:26:55Z",
      "updated_at": "2024-05-08T22:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594768464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594768464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594768654",
      "pull_request_review_id": 2046864927,
      "id": 1594768654,
      "node_id": "PRRC_kwDOABII585fDj0O",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 6,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1592841734,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-08T22:27:13Z",
      "updated_at": "2024-05-08T22:27:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594768654",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594768654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594769886",
      "pull_request_review_id": 2046866826,
      "id": 1594769886,
      "node_id": "PRRC_kwDOABII585fDkHe",
      "diff_hunk": "@@ -181,22 +180,19 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n         BOOST_CHECK_EQUAL(read_block.nVersion, 2);\n     }\n \n-    // When FlatFilePos* dbp is given, SaveBlockToDisk() will not write or\n-    // overwrite anything to the flat file block storage. It will, however,\n-    // update the blockfile metadata. This is to facilitate reindexing\n-    // when the user has the blocks on disk but the metadata is being rebuilt.\n+    // During reindex, the flat file block storage will not be written do.",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a17eacab1f8790afc5f89ba2ee3e34da4c9369e1",
      "in_reply_to_id": 1592848815,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-05-08T22:29:18Z",
      "updated_at": "2024-05-08T22:29:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594769886",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594769886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595600259",
      "pull_request_review_id": 2048211642,
      "id": 1595600259,
      "node_id": "PRRC_kwDOABII585fGu2D",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    if (fKnown) Assume(chain_type == BlockfileType::NORMAL);\n \n-    if (!m_blockfile_cursors[chain_type]) {\n+    if (!fKnown && !m_blockfile_cursors[chain_type]) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": 1591461829,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594531344\r\n\r\nThat makes sense. I didn't realize that. I can see how it makes the next commit more straightforward, at the cost of introducing a slightly mysterious change to this commit and adding a little more churn to the PR as a whole. Could be a good thing, as the next commit is the most complicated one, so either approach seems fine.\r\n",
      "created_at": "2024-05-09T15:22:47Z",
      "updated_at": "2024-05-09T15:33:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1595600259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595600259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595669798",
      "pull_request_review_id": 2048324457,
      "id": 1595669798,
      "node_id": "PRRC_kwDOABII585fG_0m",
      "diff_hunk": "@@ -871,90 +863,108 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, /*fFinalize=*/true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::UpdateBlockInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    const unsigned int added_size = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // Check that chain type is NORMAL, because this function is only\n+    // called during reindexing, and reindexing deletes snapshot chainstates, so\n+    // chain_type will not be SNAPSHOT. Also check that cursor exists, because\n+    // the normal cursor should never be null.\n+    Assume(chain_type == BlockfileType::NORMAL);\n+    Assume(m_blockfile_cursors[chain_type]);\n+    const int nFile = pos.nFile;\n+    if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+        m_blockfile_info.resize(nFile + 1);\n+    }\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n+    if (nFile != last_blockfile) {\n+        // No undo data yet in the new file, so reset our undo-height tracking.",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 183,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd)\r\n\r\nI think this comment is not really accurate in this context. There should be no need to reset `BlockfileCursor::undo_height` here, only to set a new `BlockfileCursor::file_num` value so `MaxBlockfileNum()` returns the right thing. So the comment could be changed to something like \"update the cursor so it points to the last file\".\r\n\r\nMaybe it would also make sense to make this a little more robust so doesn't move the cursor backwards if `UpdateBlockInfo` calls are made out of order. We are already doing this for blocks within the file by using std::max to set the file size below. Generalizing this would also allow dropping the `Assume()` checks:\r\n\r\n```diff\r\n--- a/src/node/blockstorage.cpp\r\n+++ b/src/node/blockstorage.cpp\r\n@@ -942,24 +942,19 @@ void BlockManager::UpdateBlockInfo(const CBlock& block, unsigned int nHeight, co\r\n {\r\n     LOCK(cs_LastBlockFile);\r\n \r\n+    // Update the cursor so it points to the last file.\r\n+    const BlockfileType chain_type{BlockfileTypeForHeight(nHeight)};\r\n+    auto& cursor{m_blockfile_cursors[chain_type]};\r\n+    if (!cursor || cursor->file_num < pos.nFile) {\r\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{pos.nFile};\r\n+    }\r\n+\r\n+    // Update the file information so it points to the last block.\r\n     const unsigned int added_size = ::GetSerializeSize(TX_WITH_WITNESS(block));\r\n-    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\r\n-    // Check that chain type is NORMAL, because this function is only\r\n-    // called during reindexing, and reindexing deletes snapshot chainstates, so\r\n-    // chain_type will not be SNAPSHOT. Also check that cursor exists, because\r\n-    // the normal cursor should never be null.\r\n-    Assume(chain_type == BlockfileType::NORMAL);\r\n-    Assume(m_blockfile_cursors[chain_type]);\r\n     const int nFile = pos.nFile;\r\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\r\n         m_blockfile_info.resize(nFile + 1);\r\n     }\r\n-\r\n-    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\r\n-    if (nFile != last_blockfile) {\r\n-        // No undo data yet in the new file, so reset our undo-height tracking.\r\n-        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\r\n-    }\r\n     m_blockfile_info[nFile].AddBlock(nHeight, block.GetBlockTime());\r\n     m_blockfile_info[nFile].nSize = std::max(pos.nPos + added_size, m_blockfile_info[nFile].nSize);\r\n     m_dirty_fileinfo.insert(nFile);\r\n```\r\n",
      "created_at": "2024-05-09T16:11:43Z",
      "updated_at": "2024-05-09T16:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1595669798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595669798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596018428",
      "pull_request_review_id": 2048889711,
      "id": 1596018428,
      "node_id": "PRRC_kwDOABII585fIU78",
      "diff_hunk": "@@ -871,90 +863,108 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, /*fFinalize=*/true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::UpdateBlockInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    const unsigned int added_size = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // Check that chain type is NORMAL, because this function is only\n+    // called during reindexing, and reindexing deletes snapshot chainstates, so\n+    // chain_type will not be SNAPSHOT. Also check that cursor exists, because\n+    // the normal cursor should never be null.\n+    Assume(chain_type == BlockfileType::NORMAL);\n+    Assume(m_blockfile_cursors[chain_type]);\n+    const int nFile = pos.nFile;\n+    if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+        m_blockfile_info.resize(nFile + 1);\n+    }\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n+    if (nFile != last_blockfile) {\n+        // No undo data yet in the new file, so reset our undo-height tracking.",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 183,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd",
      "in_reply_to_id": 1595669798,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The current logic seems really brittle to me, I suspected that there might be a bug hiding somewhere, but it barely works out in all scenarios I could think of.\r\nWith blocks being save on disk out of order, it is possible that at the end of a reindex, the cursor points to an older block file. Yet, it appears that nothing really bad happens as a result: When a new blocks arrives, `FindBlockPos` will still find the correct position in [this while loop](https://github.com/bitcoin/bitcoin/blob/24572cf768167c0e82a688e7eaef865a5cbc4ffd/src/node/blockstorage.cpp#L885-L900), skipping ahead.\r\nIn a similar way, `MaxBlockfileNum()` being incorrect can result in an incorrect `DB_LAST_BLOCK` being written to disk on shutdown.  However, we also recover from that because at next startup, `LoadBlockIndexDB` uses `DB_LAST_BLOCK` basically only for logging but doesn't trust it's actually pointing to the last block, searching for more db entries [here](https://github.com/bitcoin/bitcoin/blob/24572cf768167c0e82a688e7eaef865a5cbc4ffd/src/node/blockstorage.cpp#L513-L520), so only the log messages on startup will be wrong.\r\n\r\nThis seems really fragile to me, so I think that your suggestion is a good idea, and I'll add a commit for it!",
      "created_at": "2024-05-09T21:44:06Z",
      "updated_at": "2024-05-09T21:44:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1596018428",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596018428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597235280",
      "pull_request_review_id": 2050884404,
      "id": 1597235280,
      "node_id": "PRRC_kwDOABII585fM-BQ",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.\n+     *\n+     * @param[in]  block        the block being processed\n+     * @param[in]  nHeight      the height of the block\n+     * @param[in]  pos          the position of the block on disk. This must point *after* the\n+     *                          8 byte serialization header, at the beginning of the actual block data.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 11,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1592739006,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have done that, but bundled most of the doc changes to a doc-only commit at the beginning in order to not have unrelated things in the \"blockstorage: split up FindBlockPos function\" commit.",
      "created_at": "2024-05-10T21:13:16Z",
      "updated_at": "2024-05-10T21:13:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597235280",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597235280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597235497",
      "pull_request_review_id": 2050884784,
      "id": 1597235497,
      "node_id": "PRRC_kwDOABII585fM-Ep",
      "diff_hunk": "@@ -848,15 +848,13 @@ fs::path BlockManager::GetBlockPosFilename(const FlatFilePos& pos) const\n     return BlockFileSeq().FileName(pos);\n }\n \n-bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown)\n+bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1592707738,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done as an extra commit at the end.",
      "created_at": "2024-05-10T21:13:41Z",
      "updated_at": "2024-05-10T21:13:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597235497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597235497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597236294",
      "pull_request_review_id": 2050886073,
      "id": 1597236294,
      "node_id": "PRRC_kwDOABII585fM-RG",
      "diff_hunk": "@@ -871,90 +863,108 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, /*fFinalize=*/true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::UpdateBlockInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    const unsigned int added_size = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // Check that chain type is NORMAL, because this function is only\n+    // called during reindexing, and reindexing deletes snapshot chainstates, so\n+    // chain_type will not be SNAPSHOT. Also check that cursor exists, because\n+    // the normal cursor should never be null.\n+    Assume(chain_type == BlockfileType::NORMAL);\n+    Assume(m_blockfile_cursors[chain_type]);\n+    const int nFile = pos.nFile;\n+    if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+        m_blockfile_info.resize(nFile + 1);\n+    }\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n+    if (nFile != last_blockfile) {\n+        // No undo data yet in the new file, so reset our undo-height tracking.",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 183,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd",
      "in_reply_to_id": 1595669798,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have added this with the latest push. Changed the `// Update the file information so it points to the last block.` comment slightly because the file information doesn't really point to anything.",
      "created_at": "2024-05-10T21:14:59Z",
      "updated_at": "2024-05-10T21:14:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597236294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597236294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597503981",
      "pull_request_review_id": 2051255096,
      "id": 1597503981,
      "node_id": "PRRC_kwDOABII585fN_nt",
      "diff_hunk": "@@ -155,7 +155,16 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Returns the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     *\n+     * The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 11,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "9cf475ffffb869cd55c2b2f3be84d7c90b199521",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: s/the also/also the/",
      "created_at": "2024-05-11T20:33:53Z",
      "updated_at": "2024-05-11T20:38:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597503981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597503981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597600395",
      "pull_request_review_id": 2051341978,
      "id": 1597600395,
      "node_id": "PRRC_kwDOABII585fOXKL",
      "diff_hunk": "@@ -312,7 +322,17 @@ class BlockManager\n     bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& state, CBlockIndex& block)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n-    /** Store block on disk. If dbp is not nullptr, then it provides the known position of the block within a block file on disk. */\n+    /** Store block on disk and update block file statistics.\n+     *  During reindex, only the block file statistics is updated.\n+     *  In that case, dbp is not nullptr and provides the known position of the block within a block file on disk.\n+     *\n+     * @param[in]  block        the block to be stored\n+     * @param[in]  nHeight      the height of the block\n+     *\n+     * @returns in case of success, the position to which the block was written to\n+     *          in case of an error, an empty FlatFilePos\n+     */\n+",
      "path": "src/node/blockstorage.h",
      "position": 55,
      "original_position": 39,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "f90098e57dd8dc77a9788f5af7a529b32ca37df6",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: extra line",
      "created_at": "2024-05-12T09:45:18Z",
      "updated_at": "2024-05-12T09:59:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597600395",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597600395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 339,
      "original_line": 339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597600777",
      "pull_request_review_id": 2051341978,
      "id": 1597600777,
      "node_id": "PRRC_kwDOABII585fOXQJ",
      "diff_hunk": "@@ -164,6 +168,12 @@ class BlockManager\n \n     AutoFile OpenUndoFile(const FlatFilePos& pos, bool fReadOnly = false) const;\n \n+    /**\n+     * Write a block to disk. The pos argument passed to this function is modified by this call. Before this call, it should\n+     * point to an unused file location where separator fields will be written followed by the serialized CBlock data.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 17,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "f90098e57dd8dc77a9788f5af7a529b32ca37df6",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n     * point to an unused file location where separator fields will be written, followed by the serialized CBlock data.\r\n```",
      "created_at": "2024-05-12T09:47:44Z",
      "updated_at": "2024-05-12T09:59:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597600777",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597600777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597601015",
      "pull_request_review_id": 2051341978,
      "id": 1597601015,
      "node_id": "PRRC_kwDOABII585fOXT3",
      "diff_hunk": "@@ -312,7 +322,17 @@ class BlockManager\n     bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& state, CBlockIndex& block)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n-    /** Store block on disk. If dbp is not nullptr, then it provides the known position of the block within a block file on disk. */\n+    /** Store block on disk and update block file statistics.\n+     *  During reindex, only the block file statistics is updated.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 30,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "f90098e57dd8dc77a9788f5af7a529b32ca37df6",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n     *  During reindex, only the block file statistics are updated.\r\n```",
      "created_at": "2024-05-12T09:49:18Z",
      "updated_at": "2024-05-12T09:59:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597601015",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597601015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597601611",
      "pull_request_review_id": 2051341978,
      "id": 1597601611,
      "node_id": "PRRC_kwDOABII585fOXdL",
      "diff_hunk": "@@ -1148,28 +1148,20 @@ bool BlockManager::ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatF\n     return true;\n }\n \n-FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, const FlatFilePos* dbp)\n+FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n     FlatFilePos blockPos;\n-    const auto position_known {dbp != nullptr};\n-    if (position_known) {\n-        blockPos = *dbp;\n-        // position_known is set iff performing a reindex. In this case, no blocks need to be written, only the blockfile info database needs to be rebuilt.\n-        UpdateBlockInfo(block, nHeight, *dbp);\n-    } else {\n-        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n-        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n-        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n-        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);\n-        if (!FindBlockPos(blockPos, nBlockSize, nHeight, block.GetBlockTime())) {\n-            LogError(\"%s: FindBlockPos failed\\n\", __func__);\n-            return FlatFilePos();\n-        }\n-        if (!WriteBlockToDisk(block, blockPos)) {\n-            m_opts.notifications.fatalError(_(\"Failed to write block.\"));\n-            return FlatFilePos();\n-        }\n+    // Must also account for the serialization header\n+    // (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE)",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "2a355dd2fb9a2e54495448f20eee83377fe8773e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    // Account for the 4 magic message start bytes + the 4 length bytes (8 bytes total, defined as BLOCK_SERIALIZATION_HEADER_SIZE).\r\n\r\n```",
      "created_at": "2024-05-12T09:53:39Z",
      "updated_at": "2024-05-12T09:59:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597601611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597601611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597601896",
      "pull_request_review_id": 2051341978,
      "id": 1597601896,
      "node_id": "PRRC_kwDOABII585fOXho",
      "diff_hunk": "@@ -156,10 +156,15 @@ class BlockManager\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n     /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Returns the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     *\n      * The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of\n      * separator fields which are written before it by WriteBlockToDisk (BLOCK_SERIALIZATION_HEADER_SIZE).\n      */\n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    [[nodiscard]] FlatFilePos FindNextBlockPos(unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": 14,
      "original_position": 13,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "does `[[nodiscard]]` still make sense now?",
      "created_at": "2024-05-12T09:55:08Z",
      "updated_at": "2024-05-12T09:59:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597601896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597601896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597601920",
      "pull_request_review_id": 2051341978,
      "id": 1597601920,
      "node_id": "PRRC_kwDOABII585fOXiA",
      "diff_hunk": "@@ -848,7 +848,7 @@ fs::path BlockManager::GetBlockPosFilename(const FlatFilePos& pos) const\n     return BlockFileSeq().FileName(pos);\n }\n \n-bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)\n+FlatFilePos BlockManager::FindNextBlockPos(unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)",
      "path": "src/node/blockstorage.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "+1",
      "created_at": "2024-05-12T09:55:14Z",
      "updated_at": "2024-05-12T09:59:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597601920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597601920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 851,
      "original_line": 851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597602370",
      "pull_request_review_id": 2051341978,
      "id": 1597602370,
      "node_id": "PRRC_kwDOABII585fOXpC",
      "diff_hunk": "@@ -943,24 +943,19 @@ void BlockManager::UpdateBlockInfo(const CBlock& block, unsigned int nHeight, co\n {\n     LOCK(cs_LastBlockFile);\n \n+    // Update the cursor so it points to the last file.",
      "path": "src/node/blockstorage.cpp",
      "position": 152,
      "original_position": 4,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "9cf475ffffb869cd55c2b2f3be84d7c90b199521",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit (in commit message):\r\n```\r\nThis would means that MaxBlockfileNum\r\n```\r\nvs\r\n```\r\nThis would mean that MaxBlockfileNum\r\n```",
      "created_at": "2024-05-12T09:58:04Z",
      "updated_at": "2024-05-12T09:59:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597602370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597602370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 945,
      "original_line": 945,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598604063",
      "pull_request_review_id": 2052927360,
      "id": 1598604063,
      "node_id": "PRRC_kwDOABII585fSMMf",
      "diff_hunk": "@@ -155,6 +155,10 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n+    /**\n+     * The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 5,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "f90098e57dd8dc77a9788f5af7a529b32ca37df6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"doc: Improve doc for functions involved in saving blocks to disk\" (f90098e57dd8dc77a9788f5af7a529b32ca37df6)\r\n\r\nThis comment is wrong at this point in the PR. The way FindBlockPos works right now, you only pass it the size of the serialized CBlock plus the size of the separator fields when fKnown is false. When fKnown is true, you are supposed to pass it just the size of serialized CBlock, without the size of the separator fields.",
      "created_at": "2024-05-13T14:44:38Z",
      "updated_at": "2024-05-13T15:44:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1598604063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598604063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598626879",
      "pull_request_review_id": 2052927360,
      "id": 1598626879,
      "node_id": "PRRC_kwDOABII585fSRw_",
      "diff_hunk": "@@ -312,7 +322,17 @@ class BlockManager\n     bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& state, CBlockIndex& block)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n-    /** Store block on disk. If dbp is not nullptr, then it provides the known position of the block within a block file on disk. */\n+    /** Store block on disk and update block file statistics.\n+     *  During reindex, only the block file statistics is updated.\n+     *  In that case, dbp is not nullptr and provides the known position of the block within a block file on disk.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 31,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "f90098e57dd8dc77a9788f5af7a529b32ca37df6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"doc: Improve doc for functions involved in saving blocks to disk\" (f90098e57dd8dc77a9788f5af7a529b32ca37df6)\r\n\r\nI think it is confusing that this says \"during reindex, only the statistics are updated\" instead of \"If the block is already stored, only the statistics are updated.\" It is true that this function is only called with already-stored blocks during reindexing, but that doesn't seem obvious, and you wouldn't know it without checking every code path that calls this function.\r\n\r\nWould suggest changing to something like \"If dbp is non-null, it means the block data is already stored, and dbp contains the file position. In this case, the block data will not be written, only the block file statistics will be updated. This case should only happen during reindexing\"",
      "created_at": "2024-05-13T14:59:53Z",
      "updated_at": "2024-05-13T15:44:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1598626879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598626879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598649938",
      "pull_request_review_id": 2052927360,
      "id": 1598649938,
      "node_id": "PRRC_kwDOABII585fSXZS",
      "diff_hunk": "@@ -156,10 +156,15 @@ class BlockManager\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n     /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Returns the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     *\n      * The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of\n      * separator fields which are written before it by WriteBlockToDisk (BLOCK_SERIALIZATION_HEADER_SIZE).\n      */\n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    [[nodiscard]] FlatFilePos FindNextBlockPos(unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": 14,
      "original_position": 13,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": 1597601896,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1597601896\r\n\r\n> does `[[nodiscard]]` still make sense now?\r\n\r\nI think it does make sense, since the function can still fail and checking the return value is the only way to know.",
      "created_at": "2024-05-13T15:15:04Z",
      "updated_at": "2024-05-13T15:44:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1598649938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598649938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598677559",
      "pull_request_review_id": 2052927360,
      "id": 1598677559,
      "node_id": "PRRC_kwDOABII585fSeI3",
      "diff_hunk": "@@ -156,10 +156,15 @@ class BlockManager\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n     /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Returns the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     *",
      "path": "src/node/blockstorage.h",
      "position": 10,
      "original_position": 8,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: Rename FindBlockPos and have it return a FlatFilePos\" (d5904bd250f41b935d6ec776373d05b42d71b04f)\r\n\r\nSeems like it would be good to add this comment in earlier commit \"doc: Improve doc for functions involved in saving blocks to disk\" (f90098e57dd8dc77a9788f5af7a529b32ca37df6), since the information does apply there, so the comment is not changing unnecessarily here.",
      "created_at": "2024-05-13T15:35:10Z",
      "updated_at": "2024-05-13T15:44:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1598677559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598677559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": 159,
      "original_start_line": 159,
      "start_side": "RIGHT",
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600509299",
      "pull_request_review_id": 2056177505,
      "id": 1600509299,
      "node_id": "PRRC_kwDOABII585fZdVz",
      "diff_hunk": "@@ -1148,28 +1148,20 @@ bool BlockManager::ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatF\n     return true;\n }\n \n-FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, const FlatFilePos* dbp)\n+FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n     FlatFilePos blockPos;\n-    const auto position_known {dbp != nullptr};\n-    if (position_known) {\n-        blockPos = *dbp;\n-        // position_known is set iff performing a reindex. In this case, no blocks need to be written, only the blockfile info database needs to be rebuilt.\n-        UpdateBlockInfo(block, nHeight, *dbp);\n-    } else {\n-        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n-        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n-        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n-        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);\n-        if (!FindBlockPos(blockPos, nBlockSize, nHeight, block.GetBlockTime())) {\n-            LogError(\"%s: FindBlockPos failed\\n\", __func__);\n-            return FlatFilePos();\n-        }\n-        if (!WriteBlockToDisk(block, blockPos)) {\n-            m_opts.notifications.fatalError(_(\"Failed to write block.\"));\n-            return FlatFilePos();\n-        }\n+    // Must also account for the serialization header\n+    // (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE)",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "2a355dd2fb9a2e54495448f20eee83377fe8773e",
      "in_reply_to_id": 1597601611,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-14T18:55:54Z",
      "updated_at": "2024-05-14T18:55:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600509299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600509299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600510097",
      "pull_request_review_id": 2056178824,
      "id": 1600510097,
      "node_id": "PRRC_kwDOABII585fZdiR",
      "diff_hunk": "@@ -156,10 +156,15 @@ class BlockManager\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n     /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Returns the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     *\n      * The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of\n      * separator fields which are written before it by WriteBlockToDisk (BLOCK_SERIALIZATION_HEADER_SIZE).\n      */\n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    [[nodiscard]] FlatFilePos FindNextBlockPos(unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": 14,
      "original_position": 13,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": 1597601896,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree. Not only for error-checking, we'd also expect callers to do something with the `FlatFilePos` that `FindNextBlockPos` now returns.",
      "created_at": "2024-05-14T18:56:35Z",
      "updated_at": "2024-05-14T19:01:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600510097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600510097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600512963",
      "pull_request_review_id": 2056183160,
      "id": 1600512963,
      "node_id": "PRRC_kwDOABII585fZePD",
      "diff_hunk": "@@ -848,7 +848,7 @@ fs::path BlockManager::GetBlockPosFilename(const FlatFilePos& pos) const\n     return BlockFileSeq().FileName(pos);\n }\n \n-bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)\n+FlatFilePos BlockManager::FindNextBlockPos(unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)",
      "path": "src/node/blockstorage.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": 1597601920,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, missing the context here, is this suggesting a change?",
      "created_at": "2024-05-14T18:58:52Z",
      "updated_at": "2024-05-14T18:58:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600512963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600512963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 851,
      "original_line": 851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600513102",
      "pull_request_review_id": 2056183414,
      "id": 1600513102,
      "node_id": "PRRC_kwDOABII585fZeRO",
      "diff_hunk": "@@ -943,24 +943,19 @@ void BlockManager::UpdateBlockInfo(const CBlock& block, unsigned int nHeight, co\n {\n     LOCK(cs_LastBlockFile);\n \n+    // Update the cursor so it points to the last file.",
      "path": "src/node/blockstorage.cpp",
      "position": 152,
      "original_position": 4,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "9cf475ffffb869cd55c2b2f3be84d7c90b199521",
      "in_reply_to_id": 1597602370,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-05-14T18:59:01Z",
      "updated_at": "2024-05-14T18:59:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600513102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600513102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 945,
      "original_line": 945,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600513951",
      "pull_request_review_id": 2056184768,
      "id": 1600513951,
      "node_id": "PRRC_kwDOABII585fZeef",
      "diff_hunk": "@@ -155,6 +155,10 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n+    /**\n+     * The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 5,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "f90098e57dd8dc77a9788f5af7a529b32ca37df6",
      "in_reply_to_id": 1598604063,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Expanded the comment with the `fKnown` behavior.",
      "created_at": "2024-05-14T18:59:50Z",
      "updated_at": "2024-05-14T18:59:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600513951",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600513951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600514427",
      "pull_request_review_id": 2056185441,
      "id": 1600514427,
      "node_id": "PRRC_kwDOABII585fZel7",
      "diff_hunk": "@@ -312,7 +322,17 @@ class BlockManager\n     bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& state, CBlockIndex& block)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n-    /** Store block on disk. If dbp is not nullptr, then it provides the known position of the block within a block file on disk. */\n+    /** Store block on disk and update block file statistics.\n+     *  During reindex, only the block file statistics is updated.\n+     *  In that case, dbp is not nullptr and provides the known position of the block within a block file on disk.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 31,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "f90098e57dd8dc77a9788f5af7a529b32ca37df6",
      "in_reply_to_id": 1598626879,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done as suggested.",
      "created_at": "2024-05-14T19:00:15Z",
      "updated_at": "2024-05-14T19:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600514427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600514427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600514845",
      "pull_request_review_id": 2056186123,
      "id": 1600514845,
      "node_id": "PRRC_kwDOABII585fZesd",
      "diff_hunk": "@@ -156,10 +156,15 @@ class BlockManager\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n     /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Returns the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     *",
      "path": "src/node/blockstorage.h",
      "position": 10,
      "original_position": 8,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": 1598677559,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "moved to the doc commit.",
      "created_at": "2024-05-14T19:00:38Z",
      "updated_at": "2024-05-14T19:00:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600514845",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600514845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": 159,
      "original_start_line": 159,
      "start_side": "RIGHT",
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600629260",
      "pull_request_review_id": 2056445445,
      "id": 1600629260,
      "node_id": "PRRC_kwDOABII585fZ6oM",
      "diff_hunk": "@@ -156,10 +156,15 @@ class BlockManager\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n     /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Returns the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     *\n      * The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of\n      * separator fields which are written before it by WriteBlockToDisk (BLOCK_SERIALIZATION_HEADER_SIZE).\n      */\n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    [[nodiscard]] FlatFilePos FindNextBlockPos(unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": 14,
      "original_position": 13,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": 1597601896,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would it still make sense to call this method and discard the returned value, like before, when the output param was mutated?",
      "created_at": "2024-05-14T20:52:14Z",
      "updated_at": "2024-05-14T20:55:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600629260",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600629260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600629456",
      "pull_request_review_id": 2056445701,
      "id": 1600629456,
      "node_id": "PRRC_kwDOABII585fZ6rQ",
      "diff_hunk": "@@ -848,7 +848,7 @@ fs::path BlockManager::GetBlockPosFilename(const FlatFilePos& pos) const\n     return BlockFileSeq().FileName(pos);\n }\n \n-bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)\n+FlatFilePos BlockManager::FindNextBlockPos(unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)",
      "path": "src/node/blockstorage.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": 1597601920,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, no, I just like this change",
      "created_at": "2024-05-14T20:52:25Z",
      "updated_at": "2024-05-14T20:52:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600629456",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600629456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 851,
      "original_line": 851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600675693",
      "pull_request_review_id": 2056501894,
      "id": 1600675693,
      "node_id": "PRRC_kwDOABII585faF9t",
      "diff_hunk": "@@ -156,10 +156,15 @@ class BlockManager\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n     /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Returns the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     *\n      * The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of\n      * separator fields which are written before it by WriteBlockToDisk (BLOCK_SERIALIZATION_HEADER_SIZE).\n      */\n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    [[nodiscard]] FlatFilePos FindNextBlockPos(unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": 14,
      "original_position": 13,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "d5904bd250f41b935d6ec776373d05b42d71b04f",
      "in_reply_to_id": 1597601896,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think so, with the way the function is now only called if we don't know the BlockPos already it seems logical for callers to do something with the result. Of course, if someone comes up with such a use case in the future, they can just remove the `[[nodiscard]]` - after all its point is just to prevent future programming errors.",
      "created_at": "2024-05-14T21:33:32Z",
      "updated_at": "2024-05-14T21:33:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1600675693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600675693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603529683",
      "pull_request_review_id": 2061065588,
      "id": 1603529683,
      "node_id": "PRRC_kwDOABII585fk-vT",
      "diff_hunk": "@@ -871,90 +863,107 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, /*fFinalize=*/true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+void BlockManager::UpdateBlockInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    const unsigned int added_size = ::GetSerializeSize(TX_WITH_WITNESS(block));",
      "path": "src/node/blockstorage.cpp",
      "position": 160,
      "original_position": 167,
      "commit_id": "e41667b720372dae8438ea86e9819027e62b54e0",
      "original_commit_id": "064859bbad6984a6ec85c744064abdf757807c58",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (064859bbad6984a6ec85c744064abdf757807c58)\r\n\r\nnote: At this point in the PR, GetSerializeSize is already called by the SaveBlockToDisk function calling it, so calling it again here is a bit inefficient. But this is resolved by the next commit moving the the UpdateBlockInfo call\r\n",
      "created_at": "2024-05-16T14:54:26Z",
      "updated_at": "2024-05-16T14:55:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1603529683",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603529683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 953,
      "original_line": 944,
      "side": "RIGHT"
    }
  ]
}