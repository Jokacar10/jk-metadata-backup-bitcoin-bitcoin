{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708",
    "id": 2035561350,
    "node_id": "PR_kwDOABII5855VDOG",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30708",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30708.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30708.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
    "number": 30708,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "rpc: add getdescriptoractivity",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The RPC command `scanblocks` provides a useful way to get a set of blockhashes that have activity relevant to a set of descriptors (`relevant_blocks`). However actually extracting the activity from those blocks is left as an exercise to the end user. \r\n\r\nThis process involves not only generating the (potentially ranged) set of scripts for the descriptor set on the client side (maybe via `deriveaddresses`), but then the user must retrieve each block's contents one-by-one using `getblock <hash>`, which is transmitted over a network link. And that's all before they perform the actual search over block content. There's even more work required to incorporate unconfirmed transactions.\r\n\r\nThis PR introduces an RPC `getdescriptoractivity` that [dovetails](https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2024-08-16#1046393;) with `scanblocks` output, handling the process described above. Users specify the blockhashes (perhaps from `relevant_blocks`) and a set of descriptors; they are then given all spend/receive activity in that set of blocks.\r\n\r\nThis is a very useful tool when implementing lightweight wallets that want neither to require a third-party indexer like electrs, nor the overhead of creating and managing watch-only wallets in Core. This allows Core to be more easily used in a \"stateless\" manner by wallets, with potentially many nodes interchangeably acting as backends.\r\n\r\n### Example usage\r\n\r\n```\r\n% ./src/bitcoin-cli scanblocks start \\\r\n    '[\"addr(bc1p0cp0vyag6snlta2l7c4am3rue7eef9f72l7uhx52m4v27vfydx9s8tfs7t)\"]' \\\r\n    857263\r\n{\r\n  \"from_height\": 857263,\r\n  \"to_height\": 858263,\r\n  \"relevant_blocks\": [\r\n    \"00000000000000000002bc5cc78f5b0913a5230a8f4b0d5060bc9a60900a5a88\",\r\n    \"00000000000000000001c5291ed6a40c06d3db5c8fb738567654b24a14b24ecb\"\r\n  ],\r\n  \"completed\": true\r\n}\r\n\r\n\r\n% ./src/bitcoin-cli getdescriptoractivity \\\r\n    '[\"00000000000000000002bc5cc78f5b0913a5230a8f4b0d5060bc9a60900a5a88\", \"00000000000000000001c5291ed6a40c06d3db5c8fb738567654b24a14b24ecb\"]' \\\r\n    '[\"addr(bc1p0cp0vyag6snlta2l7c4am3rue7eef9f72l7uhx52m4v27vfydx9s8tfs7t)\"]'\r\n{\r\n  \"activity\": [\r\n    {\r\n      \"type\": \"receive\",\r\n      \"amount\": 0.00002900,\r\n      \"blockhash\": \"00000000000000000002bc5cc78f5b0913a5230a8f4b0d5060bc9a60900a5a88\",\r\n      \"height\": 857907,\r\n      \"txid\": \"c9d34f202c1f66d80cae76f305350f5fdde910b97cf6ae6bf79f5bcf2a337d06\",\r\n      \"vout\": 254,\r\n      \"output_spk\": {\r\n        \"asm\": \"1 7e02f613a8d427f5f55ff62bddc47ccfb394953e57fdcb9a8add58af3124698b\",\r\n        \"desc\": \"rawtr(7e02f613a8d427f5f55ff62bddc47ccfb394953e57fdcb9a8add58af3124698b)#yewcd80j\",\r\n        \"hex\": \"51207e02f613a8d427f5f55ff62bddc47ccfb394953e57fdcb9a8add58af3124698b\",\r\n        \"address\": \"bc1p0cp0vyag6snlta2l7c4am3rue7eef9f72l7uhx52m4v27vfydx9s8tfs7t\",\r\n        \"type\": \"witness_v1_taproot\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00002900,\r\n      \"blockhash\": \"00000000000000000001c5291ed6a40c06d3db5c8fb738567654b24a14b24ecb\",\r\n      \"height\": 858260,\r\n      \"spend_txid\": \"7f61d1b248d4ee46376f9c6df272f63fbb0c17039381fb23ca5d90473b823c36\",\r\n      \"spend_vin\": 0,\r\n      \"prevout_txid\": \"c9d34f202c1f66d80cae76f305350f5fdde910b97cf6ae6bf79f5bcf2a337d06\",\r\n      \"prevout_vout\": 254,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"1 7e02f613a8d427f5f55ff62bddc47ccfb394953e57fdcb9a8add58af3124698b\",\r\n        \"desc\": \"rawtr(7e02f613a8d427f5f55ff62bddc47ccfb394953e57fdcb9a8add58af3124698b)#yewcd80j\",\r\n        \"hex\": \"51207e02f613a8d427f5f55ff62bddc47ccfb394953e57fdcb9a8add58af3124698b\",\r\n        \"address\": \"bc1p0cp0vyag6snlta2l7c4am3rue7eef9f72l7uhx52m4v27vfydx9s8tfs7t\",\r\n        \"type\": \"witness_v1_taproot\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2024-08-24T16:25:59Z",
    "updated_at": "2025-04-03T12:26:32Z",
    "closed_at": "2024-11-27T17:23:54Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-11-27T17:23:54Z",
    "merged_by": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "b2af068825c02af4016a833ce361a7b5a7428eb2",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "jamesob:2024-08-getdescriptoractivity",
      "ref": "2024-08-getdescriptoractivity",
      "sha": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 42077031,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MjA3NzAzMQ==",
        "name": "bitcoin",
        "full_name": "jamesob/bitcoin",
        "owner": {
          "login": "jamesob",
          "id": 73197,
          "node_id": "MDQ6VXNlcjczMTk3",
          "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jamesob",
          "html_url": "https://github.com/jamesob",
          "followers_url": "https://api.github.com/users/jamesob/followers",
          "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
          "organizations_url": "https://api.github.com/users/jamesob/orgs",
          "repos_url": "https://api.github.com/users/jamesob/repos",
          "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jamesob/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/jamesob/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jamesob/bitcoin",
        "archive_url": "https://api.github.com/repos/jamesob/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jamesob/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jamesob/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jamesob/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jamesob/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jamesob/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jamesob/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jamesob/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jamesob/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jamesob/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jamesob/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jamesob/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jamesob/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jamesob/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jamesob/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jamesob/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jamesob/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jamesob/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jamesob/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jamesob/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jamesob/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jamesob/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jamesob/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jamesob/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jamesob/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jamesob/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jamesob/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jamesob/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jamesob/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jamesob/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jamesob/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jamesob/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jamesob/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jamesob/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jamesob/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jamesob/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jamesob/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jamesob/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jamesob/bitcoin/hooks",
        "svn_url": "https://github.com/jamesob/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 306849,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-26T14:44:00Z",
        "created_at": "2015-09-07T22:18:03Z",
        "updated_at": "2024-12-12T00:23:11Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "70e20ea024ce4f39abc4022e1ba19d5a6db2a207",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36997,
        "stargazers_count": 82747,
        "watchers_count": 82747,
        "size": 279385,
        "default_branch": "master",
        "open_issues_count": 695,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-03T10:54:34Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-04-03T10:54:40Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 486,
    "deletions": 11,
    "changed_files": 11,
    "commits": 4,
    "review_comments": 87,
    "comments": 19
  },
  "events": [
    {
      "event": "commented",
      "id": 2308447341,
      "node_id": "IC_kwDOABII586JmBxt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308447341",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T16:26:03Z",
      "updated_at": "2024-11-27T17:22:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30708.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [tdb3](https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2463413227), [instagibbs](https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2504021426), [achow101](https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2504381025), [rkrux](https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2465616436) |\n| Concept ACK | [danielabrozzoni](https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2269094650), [pablomartin4btc](https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2278000353) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2308447341",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "labeled",
      "id": 14001772317,
      "node_id": "LE_lADOABII586UGZ_mzwAAAANCkhcd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14001772317",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T16:26:05Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 2258846712,
      "node_id": "PRR_kwDOABII586Go0P4",
      "url": null,
      "actor": null,
      "commit_id": "d7fe20d068dc9d37381a45b66206ad58f5ca7e53",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThank you.  This seems to be a great way to simplify the chain of RPC commands needed to obtain targeted transaction history.\r\n\r\nThought about a potential alternative that updates/enhances `scanblocks` instead of adding a new RPC (with the advantage of not needing to provide block hashes). Adding `getdescriptoractivity` seems like a better solution, since it avoids breaking RPC compatibility. Carrying block hashes from `scanblocks` to `getdescriptoractivity` seems like a reasonably price to pay for compatibility.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2258846712",
      "submitted_at": "2024-08-24T18:26:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "labeled",
      "id": 14002055569,
      "node_id": "LE_lADOABII586UGZ_mzwAAAANClmmR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14002055569",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T18:47:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2308493309,
      "node_id": "IC_kwDOABII586JmM_9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308493309",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T18:47:39Z",
      "updated_at": "2024-08-24T18:47:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/29204025345</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2308493309",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "commented",
      "id": 2308521018,
      "node_id": "IC_kwDOABII586JmTw6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308521018",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T19:58:13Z",
      "updated_at": "2024-08-24T19:58:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Thought about a potential alternative that updates/enhances `scanblocks` instead of adding a new RPC (with the advantage of not needing to provide block hashes). Adding `getdescriptoractivity` seems like a better solution, since it avoids breaking RPC compatibility. Carrying block hashes from `scanblocks` to `getdescriptoractivity` seems like a reasonably price to pay for compatibility.\r\n\r\nI thought about this initially and I think it's probably worth doing at some point via an additional `with_activity` parameter or something. The code here could be factored out and reused. But ultimately I think it's good to have a separate RPC command. \r\n\r\nOne possibility (that is probably more valuable) is to add an incremental `relevant_blocks` key to `scanblocks status` output, so that the client can begin calling `getdescriptoractivity` progressively as results roll in but before the entire scan is finished.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2308521018",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14002247294,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAANCmVZ-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14002247294",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c3cdf11a576fd9549a9cc3326dc93cd84e47db39",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/c3cdf11a576fd9549a9cc3326dc93cd84e47db39",
      "created_at": "2024-08-24T20:11:41Z"
    },
    {
      "event": "reviewed",
      "id": 2258968029,
      "node_id": "PRR_kwDOABII586GpR3d",
      "url": null,
      "actor": null,
      "commit_id": "c3cdf11a576fd9549a9cc3326dc93cd84e47db39",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2258968029",
      "submitted_at": "2024-08-24T21:15:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14003038763,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAANCpWor",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14003038763",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1ecb10fe0acc871ec39da85e3f9c29eface47118",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/1ecb10fe0acc871ec39da85e3f9c29eface47118",
      "created_at": "2024-08-25T03:08:56Z"
    },
    {
      "event": "commented",
      "id": 2308842097,
      "node_id": "IC_kwDOABII586JniJx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308842097",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-25T13:30:58Z",
      "updated_at": "2024-08-25T13:30:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> One possibility (that is probably more valuable) is to add an incremental `relevant_blocks` key to `scanblocks status` output, so that the client can begin calling `getdescriptoractivity` progressively as results roll in but before the entire scan is finished.\r\n\r\nGreat idea.  Created an initial draft PR #30713\r\n",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2308842097",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14016603515,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAANDdGV7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14016603515",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/c660db98672b9d82a1d5bfdcf36894d24365195e",
      "created_at": "2024-08-26T17:23:17Z"
    },
    {
      "event": "unlabeled",
      "id": 14017409805,
      "node_id": "UNLE_lADOABII586UGZ_mzwAAAANDgLMN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14017409805",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-26T18:34:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2269094650,
      "node_id": "PRR_kwDOABII586HP6L6",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThis would greatly simplify the `scanblock` UX and allow for scanning activity in the mempool.\r\n\r\nI think either a `with_activity` parameter in `scanblocks` or a new `getdescriptoractivity` RPC command would be a good solution. I prefer the former, as the user would only have to wait for one (potentially slow) RPC call instead of two. However, if we go with it, it would be useful to add either a `include_mempool` parameter to `scanblocks`, or add a `scanmempool` command.",
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2269094650",
      "submitted_at": "2024-08-29T15:01:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "commented",
      "id": 2318375038,
      "node_id": "IC_kwDOABII586KL5h-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2318375038",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T16:56:43Z",
      "updated_at": "2024-08-29T16:57:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think either a `with_activity` parameter in `scanblocks` or a new `getdescriptoractivity` RPC command would be a good solution. I prefer the former, as the user would only have to wait for one (potentially slow) RPC call instead of two.\r\n\r\nThis change in conjunction with https://github.com/bitcoin/bitcoin/pull/30713 will actually allow the most rapid report of descriptor activity, since this call over just a few blockhashes is actually very fast. Results can be scanned progressively as they appear; I don't think we could get the same responsiveness using a `scanblocks [with_activity]` approach even though that would be simpler for the caller.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2318375038",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2273389568,
      "node_id": "PRR_kwDOABII586HgSwA",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "One downside of this approach compared to `scanblocks [with_activity]` is the re-parsing and re-derivation of the descriptor on each `getdescriptoractivity` call. E.g. for a ranged descriptor with default values, each command call would involve deriving 1,000 keys and generating their corresponding matching scripts, which are then added to the filter elements set to perform the membership test.\r\n\r\nOrthogonal topic:\r\nRegardless of how this is implemented, it seems we could skip the repeated work by providing the encoded elements set directly.\r\nCuriously, I implemented a command to retrieve the wallet elements set two years ago and have gathered the commits here: https://github.com/furszy/bitcoin-core/tree/2024_wallet_retrieve_needle_set. One drawback of this idea is the inability to expand the descriptor range beyond the pre-established limits during the scanning procedure (it will not expand the limit once it finds a matching script), but this may or may not be an issue depending on the external wallet architecture.\r\n     - Could move forward with it on another PR if there are some conceptual acks too -",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2273389568",
      "submitted_at": "2024-08-30T19:43:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "commented",
      "id": 2323108926,
      "node_id": "IC_kwDOABII586Kd9Q-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2323108926",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-01T01:41:56Z",
      "updated_at": "2024-09-01T01:43:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> One downside of this approach compared to scanblocks [with_activity] is the re-parsing and re-derivation of the descriptor on each getdescriptoractivity call. E.g. for a ranged descriptor with default values, each command call would involve deriving 1,000 keys and generating their corresponding matching scripts, which are then added to the filter elements set to perform the membership test.\r\n\r\nHow slow is this actually, though? Some kind of bounded cache would probably fix this pretty easily if it wound up taking non-negligible time relative to the other operations for these calls, which I would expect to swamp a non-IO computation like descriptor derivation.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2323108926",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "commented",
      "id": 2323782834,
      "node_id": "IC_kwDOABII586Kghyy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2323782834",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T04:18:17Z",
      "updated_at": "2024-09-02T04:47:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "A quick data point.  On mainnet, getting activity for 39C7fxSzEACPjM78Z7xdPxhf7mKxJwvfMJ over 200 block hashes was pretty fast.  About 2.5s (on a Zen 2 CPU and a pedestrian DRAM-less SSD).\r\n\r\n```\r\ntime src/bitcoin-cli getdescriptoractivity '[\"00000000000000000000c58c91c455930e9ebd8d463529e1f0f833a16e132a51\",\"000000000000000000014ffca17b9ec566e98e28b655cc835a0f933564b526ba\",...]' '[\"addr(39C7fxSzEACPjM78Z7xdPxhf7mKxJwvfMJ)\"]'\r\n...\r\nreal    0m2.513s\r\nuser    0m0.003s\r\nsys     0m0.006s \r\n```",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2323782834",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2275714079,
      "node_id": "PRR_kwDOABII586HpKQf",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> How slow is this actually, though? Some kind of bounded cache would probably fix this pretty easily if it wound up taking non-negligible time relative to the other operations for these calls, which I would expect to swamp a non-IO computation like descriptor derivation.\r\n\r\nThat was also my initial expectation but then faced stuff like https://github.com/bitcoin/bitcoin/issues/30632#issuecomment-2310966130, which takes ~4 seconds to parse + derive. And it could get worse if the user adds some templating to it (#22838).\r\n\r\nHowever, yeah.. I'm probably over-thinking this for a command that will mostly be used on standard descriptors where the parsing + derivation time is negligible.\r\n\r\nStill, for the sake of playing with it; the ~4 seconds descriptor example with some templating:\r\n```\r\n\"wsh(andor(multi(2,[a0d3c79c/48'/1'/83'/2']tpubDFGoZLGBUQDBPzYHppiNcmX8hg2BkJvaanhUUyQHQCvkbjmqvb5akMW5AQKdYxSHbkaYPZR4JMMSMF7qSW3iERxPoVKSjdttnmEvwhpDAC7/0/*,[ea2484f9/48'/1'/83'/2']tpubDEzGdYvznBEvmWDgo8aJznu74ZRcQct2d2k6VEVtcgKJvCjCVitPVTtxgAfM2Hd5QVscv2jN8AjN6Ch69NhXYiceZ7eR8Sth2Sq6UND18So/<1;2;3;4>/*,[93f245d7/48'/1'/83'/2']tpubDFhRvp2M93SFsVPyp4bMbbgRMMtAs8iW7pMAFyLoZ1tcQF7RGfHUs8xmmC7EgXcE1K5TAQwZdYC8qRGCrp4xFGgv52LmHXPi1Axq3Tzx8vB/0/*),or_i(and_v(v:pkh([61cdf766/48'/1'/83'/2']tpubDECwF5HxsawRWjXiFK5M5aEXXa5suC4bKC3d3FH1N29FxZBTsfwFP6T5MEprZT3ztQMWKVqntYVsayo5EMRDY6o583aVXHeb15wz8goBBd9/0/*),after(1753574400)),thresh(2,pk([621f3bec/48'/1'/0'/2']tpubDEXD6B4sX85AyA3WJv1rB3NnADe8EvujnudmLTY8dmdgVKyUst3R65KQqAVyxY5q5USsMh9iqgGkDMtMzfV7zvRtUhV8timsH3H37P5C4Nt/0/*),s:pk([8275bddc/48'/1'/0'/2']tpubDEfYUTvUb7XpvzxGBXxTjQd7gq6yxHaoHj14igUiQtvf8GKmNLjwwLGib5Pojn2uaYzMQzFbJm9iEcW8QWgD6EfijJYssK6gEgnBZ3DZkVu/0/*),s:pk([d715111c/48'/1'/0'/2']tpubDEzThyvXPmkRAYSJryTPfVwHTEY2hjR8oH957Nk43wGtuvpTVLMKz3hYHe5rNyXXUCy3PSYHKfv3wRnupypT2YzkaCL9yPa4ELvTSKX1GuN/0/*),snl:after(1740182400))),and_v(v:thresh(2,pkh([621f3bec/48'/1'/0'/2']tpubDEXD6B4sX85AyA3WJv1rB3NnADe8EvujnudmLTY8dmdgVKyUst3R65KQqAVyxY5q5USsMh9iqgGkDMtMzfV7zvRtUhV8timsH3H37P5C4Nt/2/*),a:pkh([8275bddc/48'/1'/0'/2']tpubDEfYUTvUb7XpvzxGBXxTjQd7gq6yxHaoHj14igUiQtvf8GKmNLjwwLGib5Pojn2uaYzMQzFbJm9iEcW8QWgD6EfijJYssK6gEgnBZ3DZkVu/2/*),a:pkh([d715111c/48'/1'/0'/2']tpubDEzThyvXPmkRAYSJryTPfVwHTEY2hjR8oH957Nk43wGtuvpTVLMKz3hYHe5rNyXXUCy3PSYHKfv3wRnupypT2YzkaCL9yPa4ELvTSKX1GuN/2/*)),after(1757462400))))\"\r\n```\r\n\r\nInformational update: this descriptor (without the templating part) comes from https://github.com/Blockstream/miniscript-templates/blob/main/mint-005.md.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2275714079",
      "submitted_at": "2024-09-02T13:49:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2278000353,
      "node_id": "PRR_kwDOABII586Hx4bh",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nPerformed some light testing with the given examples from the top description.\r\n\r\nFor more complex cases/ non standard descriptors, as mentioned by @furszy, perhaps it's worth it to analyze them later at some point.",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2278000353",
      "submitted_at": "2024-09-03T17:00:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "commented",
      "id": 2334181480,
      "node_id": "IC_kwDOABII586LIMho",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2334181480",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T14:25:58Z",
      "updated_at": "2024-09-06T14:25:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think this is ready for \"actual\" review, in case anyone was wondering.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2334181480",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2286432258,
      "node_id": "PRR_kwDOABII586ISDAC",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nThanks for the useful RPC.  Love that for some use cases it enables the option to avoid ancillary software (e.g. electrum server).\r\n\r\nLeft some initial comments for now (mainly for tests).  Planning to circle back.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2286432258",
      "submitted_at": "2024-09-06T15:53:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "labeled",
      "id": 14171034750,
      "node_id": "LE_lADOABII586UGZ_mzwAAAANMqNR-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14171034750",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-07T15:46:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2288595901,
      "node_id": "PRR_kwDOABII586IaTO9",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Left a couple more comments.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2288595901",
      "submitted_at": "2024-09-08T23:05:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "unlabeled",
      "id": 14178933492,
      "node_id": "UNLE_lADOABII586UGZ_mzwAAAANNIVr0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14178933492",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T08:09:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2297650009,
      "node_id": "PRR_kwDOABII586I81tZ",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2297650009",
      "submitted_at": "2024-09-11T15:45:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14259579769,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAANR7-t5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14259579769",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "created_at": "2024-09-14T15:45:26Z"
    },
    {
      "event": "reviewed",
      "id": 2304336437,
      "node_id": "PRR_kwDOABII586JWWI1",
      "url": null,
      "actor": null,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I've pushed an update addressing feedback and adding release notes. Thanks for all review so far.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2304336437",
      "submitted_at": "2024-09-14T15:46:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2314225218,
      "node_id": "PRR_kwDOABII586J8EZC",
      "url": null,
      "actor": null,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330\r\n\r\nThis is a value-add that I hope gets more traction/review.\r\nLeft a few more minor nits.\r\nPerformed light local testing with regtest (sendtoaddress, unconfirmed and confirmed txs). As time allows, I may exercise additional descriptors.\r\n\r\nMight also not be a bad idea to mark as experimental in help: \r\n`EXPERIMENTAL warning: this call may be changed in future releases.`",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2314225218",
      "submitted_at": "2024-09-19T02:23:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "review_requested",
      "id": 14316806585,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAANVWSG5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14316806585",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-19T02:23:40Z",
      "requested_reviewer": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 14316806645,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAANVWSH1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14316806645",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-19T02:23:40Z",
      "requested_reviewer": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "subscribed",
      "id": 14732165978,
      "node_id": "SE_lADOABII586UGZ_mzwAAAANuGwNa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14732165978",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-19T10:42:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14901391609,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAAN4MTD5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14901391609",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "created_at": "2024-10-26T12:03:01Z"
    },
    {
      "event": "commented",
      "id": 2439552457,
      "node_id": "IC_kwDOABII586RaJ3J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2439552457",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T12:03:23Z",
      "updated_at": "2024-10-26T12:03:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2439552457",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2397262411,
      "node_id": "PRR_kwDOABII586O41JL",
      "url": null,
      "actor": null,
      "commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re ACK f383db76ec3aaa9391509c1d9cca763d11b6fe00\r\n\r\nChanges include updating `scriptpubkey_hex` result type to `STR_HEX`, cleaner `Coin` usage, and adding a test for unconfirmed tx.\r\n\r\n<details>\r\n<summary>git range-diff d79ea809d28197b1b4e3748aa1715272b53601d0..1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330 25dacae9c7feb31308271e2fd5a127c1fc230c2f..f383db76ec3aaa9391509c1d9cca763d11b6fe00</summary>\r\n\r\n```diff\r\n1:  1365ee8e9c7 ! 1:  f383db76ec3 rpc: add getdescriptoractivity\r\n    @@ src/rpc/blockchain.cpp: static RPCHelpMan scanblocks()\r\n     +                    {RPCResult::Type::OBJ, \"\", \"\", {\r\n     +                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\r\n     +                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\r\n    -+                        {RPCResult::Type::STR, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},\r\n    ++                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},\r\n     +                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\r\n     +                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\r\n     +                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\r\n    @@ src/rpc/blockchain.cpp: static RPCHelpMan scanblocks()\r\n     +                    {RPCResult::Type::OBJ, \"\", \"\", {\r\n     +                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\r\n     +                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\r\n    -+                        {RPCResult::Type::STR, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey receiving value\"},\r\n    ++                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey receiving value\"},\r\n     +                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\r\n     +                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\r\n     +                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\r\n    @@ src/rpc/blockchain.cpp: static RPCHelpMan scanblocks()\r\n     +\r\n     +            for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\r\n     +                const auto& txin = tx->vin.at(vinIdx);\r\n    -+                Coin coin;\r\n    ++                std::optional<Coin> coin = coins_view.GetCoin(txin.prevout);\r\n     +\r\n     +                // Check if the previous output is in the chain\r\n    -+                if (!coins_view.GetCoin(txin.prevout, coin)) {\r\n    ++                if (!coin) {\r\n     +                    // If not found in the chain, check the mempool. Likely, a child\r\n     +                    // transaction in the mempool has spent the coin.\r\n     +                    CTransactionRef prev_tx = CHECK_NONFATAL(mempool.get(txin.prevout.hash));\r\n    @@ src/rpc/blockchain.cpp: static RPCHelpMan scanblocks()\r\n     +                    value = out.nValue;\r\n     +                } else {\r\n     +                    // Coin found in the chain\r\n    -+                    const CTxOut& out = coin.out;\r\n    ++                    const CTxOut& out = coin->out;\r\n     +                    scriptPubKey = out.scriptPubKey;\r\n     +                    value = out.nValue;\r\n     +                }\r\n    @@ test/functional/rpc_getdescriptoractivity.py (new)\r\n     +        assert confirmed['txid'] == txid_1\r\n     +        assert confirmed['height'] == node.getblockchaininfo()['blocks']\r\n     +\r\n    ++        [unconfirmed] = [a for a in activity if not a['blockhash']]\r\n    ++        assert unconfirmed['blockhash'] == \"\"\r\n    ++        assert unconfirmed['height'] == -1\r\n    ++\r\n     +        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\r\n     +\r\n     +    def test_receive_then_spend(self, node, wallet):\r\n```\r\n</details>\r\n\r\n\r\n\r\n<details>\r\n<summary>light test with tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg on Signet successful</summary>\r\n\r\n```\r\n[dev@dev01 bitcoin]$ build/src/bitcoin-cli scanblocks start '[\"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)\"]'\r\n{\r\n  \"from_height\": 0,\r\n  \"to_height\": 219195,\r\n  \"relevant_blocks\": [\r\n    \"000000ddbaa40d82c7ae3e3188347dd77858f37e57aae0e51d0045518c642c1b\",\r\n    \"00000044e825e2222f52f863782dd673c9398eabc37b8cc7c189d38327f3ac7a\",\r\n    \"0000009f95729225fbf95de5ab6e08d810e349d55730e37b17f372b5c3ed389f\",\r\n    \"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\",\r\n    \"0000006dca0c315c5d8a8c35900c81eb5b57e7a8be503ab1360eeb3de6935578\",\r\n    \"00000050fe68a263c94c8c530c8218322fe1e3aec1f58c8285bb71d6ddf7acf2\",\r\n    \"000000ab21e84253349e71d2105fb941c3e7809dcd32cedb33a6eb8c1c47c965\",\r\n    \"0000003da13f4a3315722f6573958d858dc48cabc64a4753025bf4ba9b67f137\",\r\n    \"000000d576a443feec7971548ab43b7274d4ab562a9d7e3d16e25cc9c56b0c47\",\r\n    \"000000dee489ccfa856274907bb9b37d8b211d748b2b1bad81a9be4b4e1a1255\",\r\n    \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n    \"000000806d2ecac41f893a7517b02cf64ac6313bb55e211738322abe4e150575\",\r\n    \"000000b9b5dcecbbf8538795501491d29f41a05c4d7be3d792adcd21af072c6c\",\r\n    \"00000132e7d605b22aa29ecb8255360dd724348fb49d8ae96fbc3163533723f5\",\r\n    \"0000002725309643dc9ec3612ccf9308e80f9e4720756c400dbc7d458a556fdd\"\r\n  ],\r\n  \"completed\": true\r\n}\r\n[dev@dev01 bitcoin]$ build/src/bitcoin-cli getdescriptoractivity '[\"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\", \"0000003da13f4a3\r\n315722f6573958d858dc48cabc64a4753025bf4ba9b67f137\", \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\"]' '[\"addr(tb1qr6u5sukpxq7pzh54gv\r\nmtgk0cg47u7dxnp7hzdg)\"]'\r\n{\r\n  \"activity\": [\r\n    {\r\n      \"type\": \"receive\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001688,\r\n      \"blockhash\": \"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\",\r\n      \"height\": 219028,\r\n      \"txid\": \"c151b50870dedb98d73dd1b11d1bb2a9a88f30c67f2dc66472e2e4a30249f4fd\",\r\n      \"vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"receive\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00002532,\r\n      \"blockhash\": \"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\",\r\n      \"height\": 219028,\r\n      \"txid\": \"3e0e93d4034ab6d4785502b68c1217b255e4fe9eca64f71f4d7eb8d139c8e231\",\r\n      \"vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"receive\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001376,\r\n      \"blockhash\": \"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\",\r\n      \"height\": 219028,\r\n      \"txid\": \"64e633f12206972a398cd0e22b1ddfad394a30cdd41ec89aa5f1a7cda0aa6c62\",\r\n      \"vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"receive\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001220,\r\n      \"blockhash\": \"0000003da13f4a3315722f6573958d858dc48cabc64a4753025bf4ba9b67f137\",\r\n      \"height\": 219053,\r\n      \"txid\": \"5402894413a9e5a2a99f1b4b636b408f94f2f9e2c554880324e32906a963572e\",\r\n      \"vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001688,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 0,\r\n      \"prevout_txid\": \"08d56bc381b037220ff2a5f626681d4dbd8feb535c19b1901c16cf25e8bbd38a\",\r\n      \"prevout_vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001786,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 1,\r\n      \"prevout_txid\": \"425170c50211af2d39169c71954ca92d9954b5ef594d5c767642e9f183f871b7\",\r\n      \"prevout_vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00009776,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 2,\r\n      \"prevout_txid\": \"450ce8bbb5859589ca71c2a4fb90b3e5be3ef2961ba9c7f57f5b2dcc83e258a8\",\r\n      \"prevout_vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00023844,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 3,\r\n      \"prevout_txid\": \"4536d6d7af2a2ac194a6394891abb6ce67051b79e3cdcc9c1bac4d285130dfd0\",\r\n      \"prevout_vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001532,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 4,\r\n      \"prevout_txid\": \"47119e71a6ec9e212d677265213c19ef84c718099f1b3bad5b7a54fdc94965c1\",\r\n      \"prevout_vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001220,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 5,\r\n      \"prevout_txid\": \"5402894413a9e5a2a99f1b4b636b408f94f2f9e2c554880324e32906a963572e\",\r\n      \"prevout_vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001376,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 6,\r\n      \"prevout_txid\": \"74628abfe2d51ac73407bf93e024450b1401cea158a0ac990f0d6d607ecca3b5\",\r\n      \"prevout_vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00001844,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 7,\r\n      \"prevout_txid\": \"764d136486c9752b39bdc0778d28de2e6f08846bc813f125d0daf6fd766aac59\",\r\n      \"prevout_vout\": 0\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n      \"scriptpubkey_hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n      \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n      \"amount\": 0.00031688,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 8,\r\n      \"prevout_txid\": \"dc37b9f15692ffb7d88ae1b2f6ee4ebc64d7d4144aa5e89b514f2ab2dc3b8cdd\",\r\n      \"prevout_vout\": 0\r\n    }\r\n  ]\r\n}\r\n```\r\n</details>",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2397262411",
      "submitted_at": "2024-10-26T14:20:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2412908865,
      "node_id": "PRR_kwDOABII586P0hFB",
      "url": null,
      "actor": null,
      "commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK f383db76ec3aaa9391509c1d9cca763d11b6fe00\r\n\r\nSuccessful make and functional tests. Left couple nits. I believe this is a good addition as explained in the PR description.\r\n\r\nI tested this RPC in `testnet4` and verified the response for the first 3 relevant blocks.\r\n```\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclitest scanblocks start \\\r\n> '[\"addr(tb1p9nqshur7c07cnt96l7jlfcq92mvkg89yxguqkk4yx79twanzasus2kz7lg)\"]'\r\n\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclitest getdescriptoractivity \\\r\n'[\"00000000003589f8627742f8cc7713dddb3dacc76218a49a1385014e94062a92\",\"0000000000b216b0baaa06ac27bcc4f4260cd11527305df50124e019f30bb7eb\",\"0000000000000006072f4b37e52f54cb5d2a07830d728a659c422f89d0bfa816\"]' \\\r\n'[\"addr(tb1p9nqshur7c07cnt96l7jlfcq92mvkg89yxguqkk4yx79twanzasus2kz7lg)\"]'\r\n```\r\n\r\nFor the mainnet, I run a pruned node and manually passed in the latest blockhashes I intended to search in because the `blockfilterindex` needed for `scanblocks` doesn't work with a pruned node. Received a correct error when my node was not synced.\r\n```\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclimain getdescriptoractivity \\\r\n> '[\"0000000000000000000123c142e45945484da3ea07e3729b4341b322dd0d94c5\",\"00000000000000000001464570897b86bdf7ba2c234d06514b9fb73de93e46e4\",\"00000000000000000002a2fda23944657a333083afc5980b29ac123df1cbf5a6\"]' \\\r\n> '[\"addr(bc1pdmgetk4ptdz3zaux7gxtfzgjqm3srxfhmk9fp0zreyfvxjk42rjqj5fat9)\"]'\r\n\r\nerror code: -8\r\nerror message:\r\nBlock is not in main chain\r\n```\r\n\r\nWhen I passed in a blockhash that was older than the current `pruneheight`, it correctly threw an error.\r\n```\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclimain getdescriptoractivity \\\r\n'[\"00000000000000000002a2fda23944657a333083afc5980b29ac123df1cbf5a6\"]' \\\r\n'[\"addr(bc1pdmgetk4ptdz3zaux7gxtfzgjqm3srxfhmk9fp0zreyfvxjk42rjqj5fat9)\"]'\r\nerror code: -1\r\nerror message:\r\nBlock not available (pruned data)\r\n```\r\n\r\nVerified the response for a `spend` transaction.\r\n```\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclimain getdescriptoractivity \\\r\n'[\"000000000000000000017da01cd2da3d567ac8939be7c260195517167a119dd5\"]' \\\r\n'[\"addr(bc1qwfwhgkjjm8psacmldx97s389lt320vw2uktqlp)\"]'\r\n{\r\n  \"activity\": [\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"bc1qwfwhgkjjm8psacmldx97s389lt320vw2uktqlp\",\r\n      \"scriptpubkey_hex\": \"0014725d745a52d9c30ee37f698be844e5fae2a7b1ca\",\r\n      \"desc\": \"addr(bc1qwfwhgkjjm8psacmldx97s389lt320vw2uktqlp)#6m3j4j5q\",\r\n      \"amount\": 0.01802567,\r\n      \"blockhash\": \"000000000000000000017da01cd2da3d567ac8939be7c260195517167a119dd5\",\r\n      \"height\": 863925,\r\n      \"spend_txid\": \"36b4d999c3410524f6c5de229598b766fa90a025c437ab717e72671a51196df0\",\r\n      \"spend_vin\": 4,\r\n      \"prevout_txid\": \"363605a5936225e59b252bedc96150b92ee06dc5e4b4b6f648dc3e5bb01d4305\",\r\n      \"prevout_vout\": 0\r\n    }\r\n  ]\r\n}\r\n```",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2412908865",
      "submitted_at": "2024-11-04T14:11:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2438909837,
      "node_id": "PRR_kwDOABII586RXs-N",
      "url": null,
      "actor": null,
      "commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "feature seems to make sense, think the modular approach is best, mostly reviewed tests to get myself familiar with the interface",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2438909837",
      "submitted_at": "2024-11-15T16:23:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2439139302,
      "node_id": "PRR_kwDOABII586RYk_m",
      "url": null,
      "actor": null,
      "commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2439139302",
      "submitted_at": "2024-11-15T16:43:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2439150272,
      "node_id": "PRR_kwDOABII586RYnrA",
      "url": null,
      "actor": null,
      "commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2439150272",
      "submitted_at": "2024-11-15T16:49:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI1ZmUwODdkZTU5ZTk2N2NlOTY4ZDM1ZWQ3NzEzODMyNWViOWE5ZmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25fe087de59e967ce968d35ed77138325eb9a9fa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/25fe087de59e967ce968d35ed77138325eb9a9fa",
      "tree": {
        "sha": "0830bd1c915e3b6cdae082d5cc81efdbda2359d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0830bd1c915e3b6cdae082d5cc81efdbda2359d5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25dacae9c7feb31308271e2fd5a127c1fc230c2f",
          "sha": "25dacae9c7feb31308271e2fd5a127c1fc230c2f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/25dacae9c7feb31308271e2fd5a127c1fc230c2f"
        }
      ],
      "message": "rpc: move-only: move ScriptPubKeyDoc to utils",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-11-18T20:22:44Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-11-15T18:58:53Z"
      },
      "sha": "25fe087de59e967ce968d35ed77138325eb9a9fa"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15340056773,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAAOSVrDF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15340056773",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "created_at": "2024-11-18T20:41:23Z"
    },
    {
      "event": "reviewed",
      "id": 2443598792,
      "node_id": "PRR_kwDOABII586RplvI",
      "url": null,
      "actor": null,
      "commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I've pushed changes addressing all outstanding feedback. I've slightly changed the return schema [as discussed on IRC](https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2024-11-15), moving all `scriptPubKey` related information into `output_spk`/`prevout_spk`, which matches the schema used in `getrawtransaction 2`.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2443598792",
      "submitted_at": "2024-11-18T20:42:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "commented",
      "id": 2484428814,
      "node_id": "IC_kwDOABII586UFWAO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2484428814",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T00:07:22Z",
      "updated_at": "2024-11-19T00:07:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Can someone rerun the windows job? Now that I'm not a member of the org, I can't kick CI Jobs.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2484428814",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "commented",
      "id": 2485441127,
      "node_id": "IC_kwDOABII586UJNJn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2485441127",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T11:21:31Z",
      "updated_at": "2024-11-19T11:21:31Z",
      "author_association": "MEMBER",
      "body": "> Can someone rerun the windows job?\r\n\r\nKicked it now that the fix is in.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2485441127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "comment_deleted",
      "id": 15350088347,
      "node_id": "CDE_lADOABII586UGZ_mzwAAAAOS78Kb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15350088347",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T14:04:58Z"
    },
    {
      "event": "comment_deleted",
      "id": 15350140899,
      "node_id": "CDE_lADOABII586UGZ_mzwAAAAOS8I_j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15350140899",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T14:08:28Z"
    },
    {
      "event": "comment_deleted",
      "id": 15350143235,
      "node_id": "CDE_lADOABII586UGZ_mzwAAAAOS8JkD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15350143235",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T14:08:36Z"
    },
    {
      "event": "commented",
      "id": 2485845484,
      "node_id": "IC_kwDOABII586UKv3s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2485845484",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T14:18:11Z",
      "updated_at": "2024-11-19T14:18:11Z",
      "author_association": "MEMBER",
      "body": "light review Ack 878b6c85466366c4ae5f454ec49b5a5f561e0ed2\r\n\r\nReviewed tests and interface mostly",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2485845484",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "commented",
      "id": 2489948972,
      "node_id": "IC_kwDOABII586UaZss",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2489948972",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T02:41:20Z",
      "updated_at": "2024-11-21T02:41:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ready for a re-review when you're ready, @tdb3 @rkrux.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2489948972",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "mentioned",
      "id": 15375051794,
      "node_id": "MEE_lADOABII586UGZ_mzwAAAAOUbKwS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15375051794",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T02:41:21Z"
    },
    {
      "event": "subscribed",
      "id": 15375051802,
      "node_id": "SE_lADOABII586UGZ_mzwAAAAOUbKwa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15375051802",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T02:41:22Z"
    },
    {
      "event": "mentioned",
      "id": 15375051805,
      "node_id": "MEE_lADOABII586UGZ_mzwAAAAOUbKwd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15375051805",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T02:41:22Z"
    },
    {
      "event": "subscribed",
      "id": 15375051811,
      "node_id": "SE_lADOABII586UGZ_mzwAAAAOUbKwj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15375051811",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T02:41:22Z"
    },
    {
      "event": "reviewed",
      "id": 2450158177,
      "node_id": "PRR_kwDOABII586SCnJh",
      "url": null,
      "actor": null,
      "commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review and test ACK 878b6c85466366c4ae5f454ec49b5a5f561e0ed2\r\n\r\nReally liking how this turned out.\r\nLeft a couple of minor things. None blocking.\r\n\r\n<details>\r\n<summary>quick retest with tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg (signet)</summary>\r\n\r\n```\r\n$ build/src/bitcoin-cli scanblocks start '[\"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)\"]'                    \r\n{\r\n  \"from_height\": 0,\r\n  \"to_height\": 222935,\r\n  \"relevant_blocks\": [\r\n    \"000000ddbaa40d82c7ae3e3188347dd77858f37e57aae0e51d0045518c642c1b\",\r\n    \"00000044e825e2222f52f863782dd673c9398eabc37b8cc7c189d38327f3ac7a\",\r\n    \"0000009f95729225fbf95de5ab6e08d810e349d55730e37b17f372b5c3ed389f\",\r\n    \"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\",\r\n    \"0000006dca0c315c5d8a8c35900c81eb5b57e7a8be503ab1360eeb3de6935578\",\r\n    \"00000050fe68a263c94c8c530c8218322fe1e3aec1f58c8285bb71d6ddf7acf2\",\r\n    \"000000ab21e84253349e71d2105fb941c3e7809dcd32cedb33a6eb8c1c47c965\",\r\n    \"0000003da13f4a3315722f6573958d858dc48cabc64a4753025bf4ba9b67f137\",\r\n    \"000000d576a443feec7971548ab43b7274d4ab562a9d7e3d16e25cc9c56b0c47\",\r\n    \"000000dee489ccfa856274907bb9b37d8b211d748b2b1bad81a9be4b4e1a1255\",\r\n    \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n    \"000000806d2ecac41f893a7517b02cf64ac6313bb55e211738322abe4e150575\",\r\n    \"000000b9b5dcecbbf8538795501491d29f41a05c4d7be3d792adcd21af072c6c\",\r\n    \"00000132e7d605b22aa29ecb8255360dd724348fb49d8ae96fbc3163533723f5\",\r\n    \"0000002725309643dc9ec3612ccf9308e80f9e4720756c400dbc7d458a556fdd\",\r\n    \"0000003a70069a50819c79db5aa6ccf1c9816d010acf0023f2fef215a74b2cae\",\r\n    \"000001495e69fc1c9b89bda912304b117520be2ceca0e816ca0413e3c9f38689\",\r\n    \"000000fd27727531370f04b149d720efaed65a4fdc9edab808d564fcd4b08b60\",\r\n    \"000000e3cbf3670babfe5a9cf5a4a030866a3bdd55b94ee882992e9b6cc1341e\",\r\n    \"00000079e9453d130d83811aec42e64c2208c144e05f23a06dc5348f69a4d683\",\r\n    \"000001410a993190c1bf6c781116ad5375f17501db637804ab5287dae2e4ae04\",\r\n    \"000000d5a0211c72bf9273178bb5a6c91959633a4452ef06fa7f29e4a9c306ac\",\r\n    \"0000006adff987a338db4ac8db74badb9b1b62ecfd244087374d722997919302\",\r\n    \"000000b1f17918e39fa98dc724ff072661985bc81e9f38be8dce72a8538d7639\",\r\n    \"00000119abd3bec20bce8059c3ed1e4feefe948f0650a24b055fb54e83ba55cb\",\r\n    \"00000093c560375959a1264a07b4887001a9d3e022be3fbe0398798fcb067df7\",\r\n    \"000000430e1d404b43777290bec34e0ad1a5ee861a2b6861ebcc02d278915e04\",\r\n    \"000000d85ca9ea66eeba3315d3d41cccca947de1090f5e558ea3a6c371584adb\",\r\n    \"000000ffa900fa98f455711b71e1111766843356d975121f339e0e3861ae0379\",\r\n    \"0000001b3eac9da4a952d575a7f6c5b52b6673f8d2a155ae2865d0577f3408c1\",\r\n    \"0000010cef852109fc17d29a6c0e5a89d2f5393cf4695af93a4794b187163d31\",\r\n    \"0000002a172f4d781bca964dde69363a17848df4fa54541123e03382ea4d3777\",\r\n    \"00000088546b935b77c014ef3271d430e624e8b5bd506a7e455ced2684ddbb6b\"\r\n  ],\r\n  \"completed\": true\r\n}\r\n$ build/src/bitcoin-cli getdescriptoractivity '[\"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\", \"0000003da13f4a3315722f6573958d858dc48cabc64a4753025bf4ba9b67f137\", \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\"]' '[\"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)\"]'\r\n{\r\n  \"activity\": [\r\n    {\r\n      \"type\": \"receive\",\r\n      \"amount\": 0.00001688,\r\n      \"blockhash\": \"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\",\r\n      \"height\": 219028,\r\n      \"txid\": \"c151b50870dedb98d73dd1b11d1bb2a9a88f30c67f2dc66472e2e4a30249f4fd\",\r\n      \"vout\": 0,\r\n      \"output_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"receive\",\r\n      \"amount\": 0.00002532,\r\n      \"blockhash\": \"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\",\r\n      \"height\": 219028,\r\n      \"txid\": \"3e0e93d4034ab6d4785502b68c1217b255e4fe9eca64f71f4d7eb8d139c8e231\",\r\n      \"vout\": 0,\r\n      \"output_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"receive\",\r\n      \"amount\": 0.00001376,\r\n      \"blockhash\": \"0000005df3c6ee21d95acab8132ffa712a489547b921d048b4c5bf059ebeae32\",\r\n      \"height\": 219028,\r\n      \"txid\": \"64e633f12206972a398cd0e22b1ddfad394a30cdd41ec89aa5f1a7cda0aa6c62\",\r\n      \"vout\": 0,\r\n      \"output_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"receive\",\r\n      \"amount\": 0.00001220,\r\n      \"blockhash\": \"0000003da13f4a3315722f6573958d858dc48cabc64a4753025bf4ba9b67f137\",\r\n      \"height\": 219053,\r\n      \"txid\": \"5402894413a9e5a2a99f1b4b636b408f94f2f9e2c554880324e32906a963572e\",\r\n      \"vout\": 0,\r\n      \"output_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00001688,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 0,\r\n      \"prevout_txid\": \"08d56bc381b037220ff2a5f626681d4dbd8feb535c19b1901c16cf25e8bbd38a\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00001786,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 1,\r\n      \"prevout_txid\": \"425170c50211af2d39169c71954ca92d9954b5ef594d5c767642e9f183f871b7\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00009776,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 2,\r\n      \"prevout_txid\": \"450ce8bbb5859589ca71c2a4fb90b3e5be3ef2961ba9c7f57f5b2dcc83e258a8\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00023844,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 3,\r\n      \"prevout_txid\": \"4536d6d7af2a2ac194a6394891abb6ce67051b79e3cdcc9c1bac4d285130dfd0\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00001532,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 4,\r\n      \"prevout_txid\": \"47119e71a6ec9e212d677265213c19ef84c718099f1b3bad5b7a54fdc94965c1\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00001220,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 5,\r\n      \"prevout_txid\": \"5402894413a9e5a2a99f1b4b636b408f94f2f9e2c554880324e32906a963572e\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00001376,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 6,\r\n      \"prevout_txid\": \"74628abfe2d51ac73407bf93e024450b1401cea158a0ac990f0d6d607ecca3b5\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00001844,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 7,\r\n      \"prevout_txid\": \"764d136486c9752b39bdc0778d28de2e6f08846bc813f125d0daf6fd766aac59\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"amount\": 0.00031688,\r\n      \"blockhash\": \"000000ce427e4e24c0866b474f318dc20cb429af214ad3c8cf5f748a7f36c43e\",\r\n      \"height\": 219156,\r\n      \"spend_txid\": \"5ac1df04b23250d40bd7fa01cea1ee6afd4354df25c3b97a0c0cf84e83a16db2\",\r\n      \"spend_vin\": 8,\r\n      \"prevout_txid\": \"dc37b9f15692ffb7d88ae1b2f6ee4ebc64d7d4144aa5e89b514f2ab2dc3b8cdd\",\r\n      \"prevout_vout\": 0,\r\n      \"prevout_spk\": {\r\n        \"asm\": \"0 1eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"desc\": \"addr(tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg)#fwegejqh\",\r\n        \"hex\": \"00141eb94872c1303c115e954336b459f8457dcf34d3\",\r\n        \"address\": \"tb1qr6u5sukpxq7pzh54gvmtgk0cg47u7dxnp7hzdg\",\r\n        \"type\": \"witness_v0_keyhash\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n</details>",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2450158177",
      "submitted_at": "2024-11-21T04:35:09Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "review_requested",
      "id": 15375737147,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAAOUdyE7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15375737147",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T04:35:13Z",
      "requested_reviewer": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2450922162,
      "node_id": "PRR_kwDOABII586SFhqy",
      "url": null,
      "actor": null,
      "commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK 878b6c85466366c4ae5f454ec49b5a5f561e0ed2\r\n\r\nSuccessful make, unit and functional tests. Definitely a value-add, I like how the problem a user faces has been described in the PR description, and then how this feature solves it.\r\n\r\nI reviewed the range diff along with reviewing again the PR as whole.\r\n```\r\ngit range-diff f383db7...878b6c8\r\n```\r\n\r\nI tested it on mainnet on a quite active address `bc1qryhgpmfv03qjhhp2dj8nw8g4ewg08jzmgy3cyx` for blocks `870930` and `870931`. Sharing an observation below that I found to be interesting.\r\n\r\nOn a pruned node that was not fully synced, the RPC took [1min and 19sec](https://github.com/rkrux/bitcoincore_prnotes/blob/main/30708-getdescriptoractivity/not-fully-synced-pruned-node.txt) and I assume it didn't return unconfirmed transactions. Whereas, when the node was fully synced, it took just [0.5sec](https://github.com/rkrux/bitcoincore_prnotes/blob/main/30708-getdescriptoractivity/fully-synced-pruned-node.txt) & returned unconfirmed transactions as well.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2450922162",
      "submitted_at": "2024-11-21T12:18:13Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2453006642,
      "node_id": "PRR_kwDOABII586SNeky",
      "url": null,
      "actor": null,
      "commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2453006642",
      "submitted_at": "2024-11-22T00:11:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15397775010,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAAOVx2ai",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15397775010",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a8e6f2cdc17ae1a8ef7f6dd0831046ebae93ee41",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/a8e6f2cdc17ae1a8ef7f6dd0831046ebae93ee41",
      "created_at": "2024-11-22T13:46:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15397839249,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAAOVyGGR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15397839249",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c067c9f8f9f08d0dfd31ef10e2072a8063ccffcd",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/c067c9f8f9f08d0dfd31ef10e2072a8063ccffcd",
      "created_at": "2024-11-22T13:51:47Z"
    },
    {
      "event": "commented",
      "id": 2493818714,
      "node_id": "IC_kwDOABII586UpKda",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2493818714",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T13:51:53Z",
      "updated_at": "2024-11-22T13:51:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33383517836</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2493818714",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "labeled",
      "id": 15397840334,
      "node_id": "LE_lADOABII586UGZ_mzwAAAAOVyGXO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15397840334",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T13:51:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15397889441,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAAOVySWh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15397889441",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3",
      "created_at": "2024-11-22T13:56:08Z"
    },
    {
      "event": "reviewed",
      "id": 2454451702,
      "node_id": "PRR_kwDOABII586SS_X2",
      "url": null,
      "actor": null,
      "commit_id": "1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Feedback addressed. Thanks for all review.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2454451702",
      "submitted_at": "2024-11-22T14:09:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "unlabeled",
      "id": 15398829636,
      "node_id": "UNLE_lADOABII586UGZ_mzwAAAAOV135E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15398829636",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T15:10:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2494412531,
      "node_id": "IC_kwDOABII586Urbbz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2494412531",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T17:46:16Z",
      "updated_at": "2024-11-22T17:46:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tests passing, ready for re-review. I think we're close on this one.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2494412531",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2456458800,
      "node_id": "PRR_kwDOABII586SapYw",
      "url": null,
      "actor": null,
      "commit_id": "1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "code review and test re ACK 1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3\r\n\r\nRepeated test in https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2450158177",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2456458800",
      "submitted_at": "2024-11-23T18:26:13Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "review_requested",
      "id": 15408354899,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAAOWaNZT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15408354899",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-23T18:26:18Z",
      "requested_reviewer": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2457786528,
      "node_id": "PRR_kwDOABII586Sftig",
      "url": null,
      "actor": null,
      "commit_id": "1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3\r\n\r\nSuccessful make and tests. I reviewed the range diff.\r\n\r\n```\r\ngit range-diff 878b6c8...1ca5f7b\r\n```\r\n",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2457786528",
      "submitted_at": "2024-11-25T09:18:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "review_requested",
      "id": 15422397332,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAAOXPxuU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15422397332",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T15:16:52Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 15422398423,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAAOXPx_X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15422398423",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T15:16:56Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2458872127,
      "node_id": "PRR_kwDOABII586Sj2k_",
      "url": null,
      "actor": null,
      "commit_id": "1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "light re-ACK 1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3 ~878b6c85466366c4ae5f454ec49b5a5f561e0ed2~ oops\r\n\r\nHeight returned is now optional, some doc cleanups, removal of duplicate heights check, use of `GetBlockChecked`",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2458872127",
      "submitted_at": "2024-11-25T16:02:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "review_requested",
      "id": 15423073705,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAAOXSW2p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15423073705",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T16:02:39Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2501448936,
      "node_id": "IC_kwDOABII586VGRTo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2501448936",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T17:01:43Z",
      "updated_at": "2024-11-26T17:01:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "@achow101 ready for merge?",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2501448936",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "mentioned",
      "id": 15439629141,
      "node_id": "MEE_lADOABII586UGZ_mzwAAAAOYRgtV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15439629141",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T17:01:45Z"
    },
    {
      "event": "subscribed",
      "id": 15439629178,
      "node_id": "SE_lADOABII586UGZ_mzwAAAAOYRgt6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15439629178",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T17:01:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15444385950,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAAOYjqCe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15444385950",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0667ee2e5bbaba1d2965ab95644bdb27f881ffa1",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/0667ee2e5bbaba1d2965ab95644bdb27f881ffa1",
      "created_at": "2024-11-27T01:08:18Z"
    },
    {
      "event": "commented",
      "id": 2502387159,
      "node_id": "IC_kwDOABII586VJ2XX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2502387159",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T01:09:11Z",
      "updated_at": "2024-11-27T01:09:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pushed a [small fix](https://github.com/bitcoin/bitcoin/compare/1ca5f7b998c14c44b6afd5e362fc4c007d8eebd3..0667ee2e5bbaba1d2965ab95644bdb27f881ffa1) addressing `blockhash` nullability.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2502387159",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgxMWY3NmYzYTUxMWQyMDc1MDA0NjMxOWIzOTBlMjI1YTExNTFjYWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/811f76f3a511d20750046319b390e225a1151caa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/811f76f3a511d20750046319b390e225a1151caa",
      "tree": {
        "sha": "cd4ab2005c87c73ec6fe25bfbb4239a6640d8284",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd4ab2005c87c73ec6fe25bfbb4239a6640d8284"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25fe087de59e967ce968d35ed77138325eb9a9fa",
          "sha": "25fe087de59e967ce968d35ed77138325eb9a9fa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/25fe087de59e967ce968d35ed77138325eb9a9fa"
        }
      ],
      "message": "rpc: add getdescriptoractivity",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-11-27T01:47:08Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-08-21T08:23:40Z"
      },
      "sha": "811f76f3a511d20750046319b390e225a1151caa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVlM2NlNmE0ZjRkMzVhZmU3ZmNhYjE2ZWZmNDE5YTY3ODhiMDIxNzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee3ce6a4f4d35afe7fcab16eff419a6788b02170",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ee3ce6a4f4d35afe7fcab16eff419a6788b02170",
      "tree": {
        "sha": "4aeddea8a401690be39875898b120439e2e5c008",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4aeddea8a401690be39875898b120439e2e5c008"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/811f76f3a511d20750046319b390e225a1151caa",
          "sha": "811f76f3a511d20750046319b390e225a1151caa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/811f76f3a511d20750046319b390e225a1151caa"
        }
      ],
      "message": "test: rpc: add no address case for getdescriptoractivity\n\nCo-authored-by: Greg Sanders <gsanders87@gmail.com>",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-11-27T01:47:11Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-11-18T20:32:52Z"
      },
      "sha": "ee3ce6a4f4d35afe7fcab16eff419a6788b02170"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM3YTVjNWQ4MzY2NGMzMWQ4M2ZjNjQ5ZDNjOGM4NThiZDVmMTBmMjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "tree": {
        "sha": "936c3c787abb8c55b73144f85026c736348658c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/936c3c787abb8c55b73144f85026c736348658c5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee3ce6a4f4d35afe7fcab16eff419a6788b02170",
          "sha": "ee3ce6a4f4d35afe7fcab16eff419a6788b02170",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ee3ce6a4f4d35afe7fcab16eff419a6788b02170"
        }
      ],
      "message": "doc: update descriptors.md for getdescriptoractivity",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-11-27T01:47:11Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-11-18T20:38:01Z"
      },
      "sha": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15445020476,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAAOYmE88",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15445020476",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "created_at": "2024-11-27T01:48:13Z"
    },
    {
      "event": "reviewed",
      "id": 2463413227,
      "node_id": "PRR_kwDOABII586S1LPr",
      "url": null,
      "actor": null,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review and light retest ACK 37a5c5d83664c31d83fc649d3c8c858bd5f10f21\r\n\r\nThe changes are very scoped to address the comment. Nice use of `get()`.\r\n\r\nRepeated test in https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2450158177 for sanity.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2463413227",
      "submitted_at": "2024-11-27T01:58:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "review_requested",
      "id": 15445108835,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAAOYmahj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15445108835",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T01:58:40Z",
      "requested_reviewer": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2504021426,
      "node_id": "IC_kwDOABII586VQFWy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2504021426",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T14:28:30Z",
      "updated_at": "2024-11-27T14:28:30Z",
      "author_association": "MEMBER",
      "body": "reACK 37a5c5d83664c31d83fc649d3c8c858bd5f10f21\r\n\r\n\r\nblockhash is now an optional return\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2504021426",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "commented",
      "id": 2504381025,
      "node_id": "IC_kwDOABII586VRdJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2504381025",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T17:04:56Z",
      "updated_at": "2024-11-27T17:04:56Z",
      "author_association": "MEMBER",
      "body": "ACK 37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2504381025",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2465616436,
      "node_id": "PRR_kwDOABII586S9lI0",
      "url": null,
      "actor": null,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2465616436",
      "submitted_at": "2024-11-27T17:21:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "merged",
      "id": 15455777386,
      "node_id": "ME_lADOABII586UGZ_mzwAAAAOZPHJq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15455777386",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b2af068825c02af4016a833ce361a7b5a7428eb2",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2af068825c02af4016a833ce361a7b5a7428eb2",
      "created_at": "2024-11-27T17:23:54Z"
    },
    {
      "event": "closed",
      "id": 15455777407,
      "node_id": "CE_lADOABII586UGZ_mzwAAAAOZPHJ_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15455777407",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T17:23:54Z"
    },
    {
      "event": "referenced",
      "id": 15516927608,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAOc4YZ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15516927608",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bd64a555d75326aee7002ab3ce97503a17281bb0",
      "commit_url": "https://api.github.com/repos/TheCharlatan/rust-bitcoinkernel/commits/bd64a555d75326aee7002ab3ce97503a17281bb0",
      "created_at": "2024-12-03T22:38:51Z"
    },
    {
      "event": "referenced",
      "id": 15523028894,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAOdPp-e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15523028894",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "15319cfcd57474ae7537a6c775e892e6c6ddbe63",
      "commit_url": "https://api.github.com/repos/TheCharlatan/rust-bitcoinkernel/commits/15319cfcd57474ae7537a6c775e892e6c6ddbe63",
      "created_at": "2024-12-04T10:19:45Z"
    },
    {
      "event": "referenced",
      "id": 15707084373,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAOoNxZV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707084373",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f6b6da793526f008ecd5a53359063eeeaffded95",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/f6b6da793526f008ecd5a53359063eeeaffded95",
      "created_at": "2024-12-18T17:59:38Z"
    },
    {
      "event": "referenced",
      "id": 15707491784,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAOoPU3I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707491784",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6816a65596b2a69747dd789bb0e776146604a181",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/6816a65596b2a69747dd789bb0e776146604a181",
      "created_at": "2024-12-18T18:39:49Z"
    },
    {
      "event": "referenced",
      "id": 15707821912,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAOoQldY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15707821912",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "de777e8ed646f0af101691ff31a075fcc3303eb7",
      "commit_url": "https://api.github.com/repos/stickies-v/py-bitcoinkernel/commits/de777e8ed646f0af101691ff31a075fcc3303eb7",
      "created_at": "2024-12-18T19:12:28Z"
    },
    {
      "event": "referenced",
      "id": 16410710628,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAPSJ5Jk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16410710628",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a055d305bcbafc8617308541045a8728f56cdf33",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/a055d305bcbafc8617308541045a8728f56cdf33",
      "created_at": "2025-02-22T03:32:35Z"
    },
    {
      "event": "referenced",
      "id": 16410710633,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAPSJ5Jp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16410710633",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5343de23c46a08005163e30d0a47143c30c90a62",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/5343de23c46a08005163e30d0a47143c30c90a62",
      "created_at": "2025-02-22T03:32:35Z"
    },
    {
      "event": "referenced",
      "id": 16410710634,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAPSJ5Jq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16410710634",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fc43ba2fbefacedbe3dfd652d2c91c2f29f86e1c",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/fc43ba2fbefacedbe3dfd652d2c91c2f29f86e1c",
      "created_at": "2025-02-22T03:32:35Z"
    },
    {
      "event": "referenced",
      "id": 16410710635,
      "node_id": "REFE_lADOABII586UGZ_mzwAAAAPSJ5Jr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16410710635",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "264f964cd835e0a5c2a5848f5c68a8d5c076064a",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/264f964cd835e0a5c2a5848f5c68a8d5c076064a",
      "created_at": "2025-02-22T03:32:35Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1730137103",
      "pull_request_review_id": 2258968029,
      "id": 1730137103,
      "node_id": "PRRC_kwDOABII585nH8wP",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c3cdf11a576fd9549a9cc3326dc93cd84e47db39",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the new test file needs to be added to the runner.\r\n\r\n```diff\r\n--- a/test/functional/test_runner.py\r\n+++ b/test/functional/test_runner.py\r\n@@ -396,6 +396,7 @@ BASE_SCRIPTS = [\r\n     'feature_config_args.py',\r\n     'feature_presegwit_node_upgrade.py',\r\n     'feature_settings.py',\r\n+    'rpc_getdescriptoractivity.py',\r\n     'rpc_getdescriptorinfo.py',\r\n     'rpc_mempool_info.py',\r\n     'rpc_help.py',\r\n```\r\n",
      "created_at": "2024-08-24T21:15:26Z",
      "updated_at": "2024-08-24T21:15:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1730137103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1730137103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747223007",
      "pull_request_review_id": 2286432258,
      "id": 1747223007,
      "node_id": "PRRC_kwDOABII585oJIHf",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 21,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Rather than generate 101 new blocks, maybe the test could take advantage of the pre-mined test framework chain here (since `setup_clean_chain` defaults to `False`, with 200 blocks generated)?\r\n\r\nFrom test_framework/wallet.py:\r\n```\r\n# When the pre-mined test framework chain is used, it contains coinbase\r\n# outputs to the MiniWallet's default address in blocks 76-100\r\n```\r\n\r\nProbably not an exciting speed increase, but every bit counts.",
      "created_at": "2024-09-06T14:31:34Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747223007",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747223007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747224502",
      "pull_request_review_id": 2286432258,
      "id": 1747224502,
      "node_id": "PRRC_kwDOABII585oJIe2",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        try:\n+            node.getdescriptoractivity([invalid_blockhash], [f\"addr({addr_1})\"], True)\n+            raise AssertionError(\"RPC call should have failed\")\n+        except Exception:\n+            pass",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 100,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could use `assert_raises_rpc_error` here instead of the try/except.\r\nSomething similar to:\r\n```python\r\nassert_raises_rpc_error(-5, \"Block not found\", node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\r\n```",
      "created_at": "2024-09-06T14:32:36Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747224502",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747224502"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 96,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747235621",
      "pull_request_review_id": 2286432258,
      "id": 1747235621,
      "node_id": "PRRC_kwDOABII585oJLMl",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 121,
      "original_position": 94,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:  `0000...` is astronomically unlikely to hit, but not sure it is invalid.  Maybe could use `invalid_blockhash = \"ffff...\"` instead, which seems appears to be above the powLimit for regtest.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/bbf95c0cc57147827b9f4577c641b12dd4170e78/src/kernel/chainparams.cpp#L541\r\n\r\nI could be mistaken, and feel free to disregard",
      "created_at": "2024-09-06T14:41:11Z",
      "updated_at": "2024-09-08T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747235621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747235621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747277470",
      "pull_request_review_id": 2286432258,
      "id": 1747277470,
      "node_id": "PRRC_kwDOABII585oJVae",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 29,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This would be a great test to include.  Seeing `test_framework.authproxy.JSONRPCException: mandatory-script-verify-flag-failed (Witness program hash mismatch) (-26)` when uncommented.",
      "created_at": "2024-09-06T15:08:19Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747277470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747277470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747291150",
      "pull_request_review_id": 2286432258,
      "id": 1747291150,
      "node_id": "PRRC_kwDOABII585oJYwO",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        try:\n+            node.getdescriptoractivity([invalid_blockhash], [f\"addr({addr_1})\"], True)\n+            raise AssertionError(\"RPC call should have failed\")\n+        except Exception:\n+            pass\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        # Test getdescriptoractivity with both confirmed and unconfirmed transactions\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries (1 confirmed, 1 unconfirmed)\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        sent = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        rawtx_1 = sent['tx']\n+        txid_1 = sent['txid']\n+\n+        blockhash_1 = self.generate(node, 1)[0]\n+        [vout_idx] = [i for i, o in enumerate(rawtx_1.vout) if o.nValue == 1.0 * COIN]\n+\n+        inputs = [{'txid': txid_1, 'vout': vout_idx}]\n+        outputs = {addr_1: 0.9999}\n+        rawtx_2 = node.createrawtransaction(inputs, outputs)\n+        signed = CTransaction()\n+        signed.deserialize(BytesIO(bytes.fromhex(rawtx_2)))\n+        wallet.sign_tx(signed)\n+        txid_2 = wallet.sendrawtransaction(\n+            from_node=node, tx_hex=signed.serialize().hex())\n+\n+        blockhash_2 = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash_1, blockhash_2], [f\"addr({addr_1})\"], True)\n+\n+        # Expecting two activities: one 'receive' in blockhash_1, one 'spend' in blockhash_2\n+        assert_equal(len(result['activity']), 2)\n+\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid_1\n+        assert result['activity'][0]['blockhash'] == blockhash_1\n+        assert result['activity'][0]['address'] == addr_1\n+        assert result['activity'][0]['value'] == 1.0",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 160,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n- assert result['activity'][0]['value'] == 1.0\r\n+ assert result['activity'][0]['amount'] == 1.0\r\n```",
      "created_at": "2024-09-06T15:17:47Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747291150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747291150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747291778",
      "pull_request_review_id": 2286432258,
      "id": 1747291778,
      "node_id": "PRRC_kwDOABII585oJY6C",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        try:\n+            node.getdescriptoractivity([invalid_blockhash], [f\"addr({addr_1})\"], True)\n+            raise AssertionError(\"RPC call should have failed\")\n+        except Exception:\n+            pass\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        # Test getdescriptoractivity with both confirmed and unconfirmed transactions\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries (1 confirmed, 1 unconfirmed)\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        sent = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        rawtx_1 = sent['tx']\n+        txid_1 = sent['txid']\n+\n+        blockhash_1 = self.generate(node, 1)[0]\n+        [vout_idx] = [i for i, o in enumerate(rawtx_1.vout) if o.nValue == 1.0 * COIN]\n+\n+        inputs = [{'txid': txid_1, 'vout': vout_idx}]\n+        outputs = {addr_1: 0.9999}\n+        rawtx_2 = node.createrawtransaction(inputs, outputs)\n+        signed = CTransaction()\n+        signed.deserialize(BytesIO(bytes.fromhex(rawtx_2)))\n+        wallet.sign_tx(signed)\n+        txid_2 = wallet.sendrawtransaction(\n+            from_node=node, tx_hex=signed.serialize().hex())\n+\n+        blockhash_2 = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash_1, blockhash_2], [f\"addr({addr_1})\"], True)\n+\n+        # Expecting two activities: one 'receive' in blockhash_1, one 'spend' in blockhash_2\n+        assert_equal(len(result['activity']), 2)\n+\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid_1\n+        assert result['activity'][0]['blockhash'] == blockhash_1\n+        assert result['activity'][0]['address'] == addr_1\n+        assert result['activity'][0]['value'] == 1.0\n+\n+        assert result['activity'][1]['type'] == 'spend'\n+        assert result['activity'][1]['spend_txid'] == txid_2\n+        assert result['activity'][1]['prevout_txid'] == txid_1\n+        assert result['activity'][1]['blockhash'] == blockhash_2\n+        assert result['activity'][0]['address'] == addr_1\n+        assert result['activity'][0]['value'] == 0.9999",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 167,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n- assert result['activity'][0]['value'] == 0.9999\r\n+ assert result['activity'][0]['amount'] == 0.9999\r\n```",
      "created_at": "2024-09-06T15:18:15Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747291778",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747291778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747344172",
      "pull_request_review_id": 2286432258,
      "id": 1747344172,
      "node_id": "PRRC_kwDOABII585oJlss",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        try:\n+            node.getdescriptoractivity([invalid_blockhash], [f\"addr({addr_1})\"], True)\n+            raise AssertionError(\"RPC call should have failed\")\n+        except Exception:\n+            pass\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        # Test getdescriptoractivity with both confirmed and unconfirmed transactions\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries (1 confirmed, 1 unconfirmed)\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        sent = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        rawtx_1 = sent['tx']\n+        txid_1 = sent['txid']\n+\n+        blockhash_1 = self.generate(node, 1)[0]\n+        [vout_idx] = [i for i, o in enumerate(rawtx_1.vout) if o.nValue == 1.0 * COIN]\n+\n+        inputs = [{'txid': txid_1, 'vout': vout_idx}]\n+        outputs = {addr_1: 0.9999}\n+        rawtx_2 = node.createrawtransaction(inputs, outputs)\n+        signed = CTransaction()\n+        signed.deserialize(BytesIO(bytes.fromhex(rawtx_2)))",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 144,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could use `test_framework/messages.py:tx_from_hex()` here, e.g.:\r\n\r\n```diff\r\n-        signed = CTransaction()\r\n-        signed.deserialize(BytesIO(bytes.fromhex(rawtx_2)))\r\n+        signed = tx_from_hex(rawtx_2)\r\n```",
      "created_at": "2024-09-06T15:47:46Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747344172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747344172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 143,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749344034",
      "pull_request_review_id": 2288595901,
      "id": 1749344034,
      "node_id": "PRRC_kwDOABII585oRN8i",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: instead of making this an empty string if there is no address, could make the \"address\" key optional and omit it if nullopt.",
      "created_at": "2024-09-08T20:05:37Z",
      "updated_at": "2024-09-08T23:05:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1749344034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749344034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749385219",
      "pull_request_review_id": 2288595901,
      "id": 1749385219,
      "node_id": "PRRC_kwDOABII585oRYAD",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");",
      "path": "src/rpc/blockchain.cpp",
      "position": 84,
      "original_position": 67,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A test could be added for this error condition (or could be added in a follow-up PR).  Here's a rough idea (https://github.com/tdb3/bitcoin/commit/43301b2019e5b2ceb347641cdb8eb18aa7fa8879)\r\n\r\n",
      "created_at": "2024-09-08T22:54:04Z",
      "updated_at": "2024-09-09T12:38:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1749385219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749385219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2658,
      "original_line": 2658,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755002681",
      "pull_request_review_id": 2297650009,
      "id": 1755002681,
      "node_id": "PRRC_kwDOABII585omzc5",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think emitting the address here is confusing. In all of Bitcoin Core's RPC interface, addresses are seen as receive-only entities, through which a wallet receives coins, but the resulting balance then belongs to the wallet. This notion of a \"from address\" you're using here only makes sense in an \"address balance\" situation, which doesn't match the model of rest of the RPC interface. E.g. the wallet's `listtransactions` does list an address for both send and receive, but for sending it's the address being sent to, not the \"spent from\" address.\r\n\r\nWhat would you think about having a hex-encoded `scriptPubKey` in both \"spend\" and \"receive\" entries here instead? That would be unambiguous, and also more general (doesn't rely on the scriptPubKey having a well-defined address encoding).\r\n\r\n",
      "created_at": "2024-09-11T15:41:04Z",
      "updated_at": "2024-09-11T15:45:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1755002681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755002681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755015149",
      "pull_request_review_id": 2297650009,
      "id": 1755015149,
      "node_id": "PRRC_kwDOABII585om2ft",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a really roundabout way of generating specialized descriptors, but there doesn't seem to be a better way unfortunately.",
      "created_at": "2024-09-11T15:44:57Z",
      "updated_at": "2024-09-11T15:45:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1755015149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755015149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2669,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759630564",
      "pull_request_review_id": 2304336437,
      "id": 1759630564,
      "node_id": "PRRC_kwDOABII585o4dTk",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm in favor of leaving this in as a convenience to the end user, although I think the suggestion to include a hex-encoded sPK is a good one and I'll add that. Many wallets will ultimately want to show which address is being spent from, e.g. \r\n\r\n![image](https://github.com/user-attachments/assets/06e68014-4a25-4949-90b9-0ead9918f2d5)\r\n\r\nIf we can inexpensively determine that here, I think it's a nice option for the end user.\r\n\r\nIn terms of a blank string vs. omitted key, I think it's better to have a consistent return schema than it is to avoid a blank string, so I'm going to leave that as-is. If there's some way in our horribly confusing RPC machinery to make the value nullable, that would probably be my preference.",
      "created_at": "2024-09-14T00:51:20Z",
      "updated_at": "2024-09-14T15:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1759630564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759630564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759630712",
      "pull_request_review_id": 2304336437,
      "id": 1759630712,
      "node_id": "PRRC_kwDOABII585o4dV4",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 21,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1747223007,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed this generate() call.",
      "created_at": "2024-09-14T00:52:28Z",
      "updated_at": "2024-09-14T15:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1759630712",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759630712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759640764",
      "pull_request_review_id": 2304336437,
      "id": 1759640764,
      "node_id": "PRRC_kwDOABII585o4fy8",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 121,
      "original_position": 94,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1747235621,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This value is used as an invalid hash elsewhere (https://github.com/bitcoin/bitcoin/blob/master/test/functional/wallet_listsinceblock.py#L95) so I'm going to leave this as is.",
      "created_at": "2024-09-14T01:59:05Z",
      "updated_at": "2024-09-14T15:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1759640764",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759640764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759642418",
      "pull_request_review_id": 2304336437,
      "id": 1759642418,
      "node_id": "PRRC_kwDOABII585o4gMy",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");",
      "path": "src/rpc/blockchain.cpp",
      "position": 84,
      "original_position": 67,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749385219,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I cherry-picked this, but it adds significant runtime to the test for what is a very basic check. I'd suggest filing a follow-up if you're still interested in testing this.",
      "created_at": "2024-09-14T02:09:59Z",
      "updated_at": "2024-09-14T15:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1759642418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759642418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2658,
      "original_line": 2658,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766035266",
      "pull_request_review_id": 2314225218,
      "id": 1766035266,
      "node_id": "PRRC_kwDOABII585pQ49C",
      "diff_hunk": "@@ -2561,6 +2561,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: if another update occurs, may want to use `STR_HEX` for `scriptpubkey_hex`",
      "created_at": "2024-09-19T01:55:59Z",
      "updated_at": "2024-09-19T02:23:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1766035266",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766035266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2583,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766056564",
      "pull_request_review_id": 2314225218,
      "id": 1766056564,
      "node_id": "PRRC_kwDOABII585pQ-J0",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 130,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If this is touched again, could add asserts to check that the unconfirmed tx has blank blockhash and -1 height. Could be left for a follow-up PR.",
      "created_at": "2024-09-19T02:19:06Z",
      "updated_at": "2024-09-19T02:24:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1766056564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766056564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766950748",
      "pull_request_review_id": 2315742724,
      "id": 1766950748,
      "node_id": "PRRC_kwDOABII585pUYdc",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Many wallets will ultimately want to show which address is being spent from, e.g.\r\n\r\nThe fact that people want to do dumb things is not a reason to support it. I blame blockchain explorers for instituting, and perpetuating, the misunderstanding that Bitcoin wallet balances can be assessed by observing their receive addresses' balances.\r\n\r\nBitcoin Core has never followed the notion that addresses have their own individual balance or can be spent \"from\" (it's not wrong or inconsistent to see things this way, but it contributes to the misunderstanding). I don't think this PR should change that.",
      "created_at": "2024-09-19T14:32:12Z",
      "updated_at": "2024-09-19T14:32:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1766950748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766950748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1797273429",
      "pull_request_review_id": 2363324640,
      "id": 1797273429,
      "node_id": "PRRC_kwDOABII585rIDdV",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think calling it a \"dumb thing\" that people want to do is a little bit of a simplification. Nearly every indexing API [offers this information](https://electrum.readthedocs.io/en/latest/protocol.html#blockchain-address-subscribe), and commercial end users make use of the address for various things. You can imagine a wallet that is programmed not to reuse addresses but still wants to display the address when a spend is detected. If we can easily generate this information (sPK -> address) and attach this information (as we can), it removes the need for the wallet to duplicate the implementation of that mapping.",
      "created_at": "2024-10-11T17:59:04Z",
      "updated_at": "2024-10-11T17:59:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1797273429",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1797273429"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817839632",
      "pull_request_review_id": 2397235032,
      "id": 1817839632,
      "node_id": "PRRC_kwDOABII585sWggQ",
      "diff_hunk": "@@ -2561,6 +2561,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "in_reply_to_id": 1766035266,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed, thanks.",
      "created_at": "2024-10-26T12:03:13Z",
      "updated_at": "2024-10-26T12:03:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1817839632",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817839632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2583,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817839644",
      "pull_request_review_id": 2397235041,
      "id": 1817839644,
      "node_id": "PRRC_kwDOABII585sWggc",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 130,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "in_reply_to_id": 1766056564,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-10-26T12:03:17Z",
      "updated_at": "2024-10-26T12:03:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1817839644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817839644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827637623",
      "pull_request_review_id": 2412908865,
      "id": 1827637623,
      "node_id": "PRRC_kwDOABII585s74l3",
      "diff_hunk": "@@ -2585,6 +2585,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash that this receive is in. Empty if in mempool\"},\r\n```\r\n\r\nA receive can also be in mempool as I checked.\r\n```\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclitest getdescriptoractivity '[]' \\\r\n'[\"addr(tb1qf2xsp2fqyqfauj9elghz6jx7r3fuj07eu2xtgz)\"]'\r\n{\r\n  \"activity\": [\r\n    {\r\n      \"type\": \"receive\",\r\n      \"address\": \"tb1qf2xsp2fqyqfauj9elghz6jx7r3fuj07eu2xtgz\",\r\n      \"scriptpubkey_hex\": \"00144a8d00a9202013de48b9fa2e2d48de1c53c93fd9\",\r\n      \"desc\": \"addr(tb1qf2xsp2fqyqfauj9elghz6jx7r3fuj07eu2xtgz)#wga5hye9\",\r\n      \"amount\": 0.00991959,\r\n      \"blockhash\": \"\",\r\n      \"height\": -1,\r\n      \"txid\": \"a3e71a792f8bab57e21b8031c55397c468e916240730228c94ebc8bf0a4138a6\",\r\n      \"vout\": 0\r\n    }\r\n  ]\r\n}\r\n```",
      "created_at": "2024-11-04T12:14:05Z",
      "updated_at": "2024-11-04T14:11:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1827637623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827637623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2620,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827645682",
      "pull_request_review_id": 2412908865,
      "id": 1827645682,
      "node_id": "PRRC_kwDOABII585s76jy",
      "diff_hunk": "@@ -2585,6 +2585,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: Would be easier on the eyes to have a similar wording as in the spend object above.",
      "created_at": "2024-11-04T12:20:53Z",
      "updated_at": "2024-11-04T14:11:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1827645682",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827645682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2625,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827683398",
      "pull_request_review_id": 2412908865,
      "id": 1827683398,
      "node_id": "PRRC_kwDOABII585s8DxG",
      "diff_hunk": "@@ -2585,6 +2585,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "+1 on the different naming here. Took me a second to realise the need for the difference that is based on the usages later.",
      "created_at": "2024-11-04T12:51:13Z",
      "updated_at": "2024-11-04T14:11:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1827683398",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827683398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2659,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2660,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827750028",
      "pull_request_review_id": 2412908865,
      "id": 1827750028,
      "node_id": "PRRC_kwDOABII585s8UCM",
      "diff_hunk": "@@ -0,0 +1,6 @@\n+New RPCs",
      "path": "doc/release-notes-30708.md",
      "position": 1,
      "original_position": 1,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should the \"**Support for Output Descriptors in Bitcoin Core**\" section in this doc also be updated?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md",
      "created_at": "2024-11-04T13:39:55Z",
      "updated_at": "2024-11-04T14:11:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1827750028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827750028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829677516",
      "pull_request_review_id": 2416164379,
      "id": 1829677516,
      "node_id": "PRRC_kwDOABII585tDqnM",
      "diff_hunk": "@@ -0,0 +1,6 @@\n+New RPCs",
      "path": "doc/release-notes-30708.md",
      "position": 1,
      "original_position": 1,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1827750028,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good catch. I'll make that modification if I need to retouch otherwise, but I think it'd be fine as a followup.",
      "created_at": "2024-11-05T16:39:56Z",
      "updated_at": "2024-11-05T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1829677516",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829677516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844010301",
      "pull_request_review_id": 2438909837,
      "id": 1844010301,
      "node_id": "PRRC_kwDOABII585t6V09",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 115,
      "original_position": 98,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should also test invalid descriptors",
      "created_at": "2024-11-15T15:24:03Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844010301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844010301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844026636",
      "pull_request_review_id": 2438909837,
      "id": 1844026636,
      "node_id": "PRRC_kwDOABII585t6Z0M",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");",
      "path": "src/rpc/blockchain.cpp",
      "position": 84,
      "original_position": 67,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749385219,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it deserves the coverage",
      "created_at": "2024-11-15T15:28:07Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844026636",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844026636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2658,
      "original_line": 2658,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844043247",
      "pull_request_review_id": 2438909837,
      "id": 1844043247,
      "node_id": "PRRC_kwDOABII585t6d3v",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the lift for downstream wallets to encode spk to address is trivial, so I'd rather no expose \"send from\" type addresses, but I don't feel super strongly about it.\r\n\r\nIf not, making the address field an optional return as @tdb3 says is my ask. Makes it a little more clear conceptually what's being exposed.\r\n\r\nregardless of the result here, there should be test coverage for an output with no address type and the delta from the other test case `test_multiple_addresses` kind of demonstrates why we shouldn't be relying on addresses.\r\n\r\n```\r\ndiff --git a/test/functional/rpc_getdescriptoractivity.py b/test/functional/rpc_getdescriptoractivity.py\r\nindex e1c4be84e0..3a309261e3 100755\r\n--- a/test/functional/rpc_getdescriptoractivity.py\r\n+++ b/test/functional/rpc_getdescriptoractivity.py\r\n@@ -6,12 +6,11 @@\r\n from decimal import Decimal\r\n \r\n from test_framework.test_framework import BitcoinTestFramework\r\n from test_framework.util import assert_equal, assert_raises_rpc_error\r\n from test_framework.messages import COIN\r\n-from test_framework.wallet import MiniWallet, getnewdestination\r\n-\r\n+from test_framework.wallet import MiniWallet, MiniWalletMode, getnewdestination\r\n \r\n class GetBlocksActivityTest(BitcoinTestFramework):\r\n     def set_test_params(self):\r\n         self.num_nodes = 1\r\n         self.setup_clean_chain = True\r\n@@ -25,10 +24,11 @@ class GetBlocksActivityTest(BitcoinTestFramework):\r\n         self.test_no_activity(node)\r\n         self.test_activity_in_block(node, wallet)\r\n         self.test_no_mempool_inclusion(node, wallet)\r\n         self.test_multiple_addresses(node, wallet)\r\n         self.test_invalid_blockhash(node, wallet)\r\n+        self.test_no_address(node, wallet)\r\n         self.test_confirmed_and_unconfirmed(node, wallet)\r\n         self.test_receive_then_spend(node, wallet)\r\n \r\n     def test_no_activity(self, node):\r\n         _, spk_1, addr_1 = getnewdestination()\r\n@@ -93,10 +93,37 @@ class GetBlocksActivityTest(BitcoinTestFramework):\r\n         assert a1['amount'] == 1.0\r\n \r\n         assert a2['blockhash'] == blockhash\r\n         assert a2['amount'] == 2.0\r\n \r\n+    def test_no_address(self, node, wallet):\r\n+        raw_wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\r\n+        raw_wallet.generate(100, invalid_call=False)\r\n+\r\n+        no_addr_tx = raw_wallet.send_self_transfer(from_node=node)\r\n+        raw_desc = raw_wallet.get_descriptor()\r\n+\r\n+        blockhash = self.generate(node, 1)[0]\r\n+\r\n+        result = node.getdescriptoractivity([blockhash], [raw_desc], False)\r\n+\r\n+        assert_equal(len(result['activity']), 2)\r\n+\r\n+        a1 = result['activity'][0]\r\n+        a2 = result['activity'][1]\r\n+\r\n+        assert a1['type'] == \"spend\"\r\n+        assert a1['blockhash'] == blockhash\r\n+        assert a1['address'] == \"\"\r\n+        assert a1['amount'] == no_addr_tx[\"fee\"] + Decimal(no_addr_tx[\"tx\"].vout[0].nValue) / COIN\r\n+\r\n+        assert a2['type'] == \"receive\"\r\n+        assert a2['blockhash'] == blockhash\r\n+        assert a2['address'] == \"\"\r\n+        assert a2['amount'] == Decimal(no_addr_tx[\"tx\"].vout[0].nValue) / COIN\r\n+\r\n+\r\n     def test_invalid_blockhash(self, node, wallet):\r\n         self.generate(node, 20) # Generate to get more fees\r\n \r\n         _, spk_1, addr_1 = getnewdestination()\r\n         wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\r\n```",
      "created_at": "2024-11-15T15:34:05Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844043247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844043247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844113097",
      "pull_request_review_id": 2438909837,
      "id": 1844113097,
      "node_id": "PRRC_kwDOABII585t6u7J",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 163,
      "original_position": 138,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "note: this is also a key test of multiple blockhashes",
      "created_at": "2024-11-15T16:07:56Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844113097",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844113097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844115700",
      "pull_request_review_id": 2438909837,
      "id": 1844115700,
      "node_id": "PRRC_kwDOABII585t6vj0",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        sent1 = wallet.send_self_transfer(from_node=node)\n+        utxo = sent1['new_utxo']\n+        blockhash_1 = self.generate(node, 1)[0]\n+\n+        sent2 = wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo)\n+        blockhash_2 = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash_1, blockhash_2], [wallet.get_descriptor()], True)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 175,
      "original_position": 149,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "block order matters, run this case twice, once with blocks in reverse history order?",
      "created_at": "2024-11-15T16:10:00Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844115700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844115700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844117146",
      "pull_request_review_id": 2438909837,
      "id": 1844117146,
      "node_id": "PRRC_kwDOABII585t6v6a",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        sent1 = wallet.send_self_transfer(from_node=node)\n+        utxo = sent1['new_utxo']\n+        blockhash_1 = self.generate(node, 1)[0]\n+\n+        sent2 = wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo)\n+        blockhash_2 = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash_1, blockhash_2], [wallet.get_descriptor()], True)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 175,
      "original_position": 149,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844115700,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should also test that repeated blockhashes is acceptable(AFAICT it just repeats the event)",
      "created_at": "2024-11-15T16:11:07Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844117146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844117146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844118607",
      "pull_request_review_id": 2438909837,
      "id": 1844118607,
      "node_id": "PRRC_kwDOABII585t6wRP",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 121,
      "original_position": 94,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1747235621,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "testing that this is results in the call getting rejected even if it's f.e. the second blockhash in a list is also a good idea",
      "created_at": "2024-11-15T16:12:25Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844118607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844118607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844122547",
      "pull_request_review_id": 2438909837,
      "id": 1844122547,
      "node_id": "PRRC_kwDOABII585t6xOz",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 91,
      "original_position": 85,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would be great if there was a case showing flipping descriptor ordering doesn't change result ordering",
      "created_at": "2024-11-15T16:15:31Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844122547",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844122547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844126187",
      "pull_request_review_id": 2438909837,
      "id": 1844126187,
      "node_id": "PRRC_kwDOABII585t6yHr",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 91,
      "original_position": 85,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844122547,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "another nice case would be demonstrating the order of activity results intra-block (order in block seems to be respected)\r\n\r\ncan either set fees differentially, or explicitly construct a block via `node.rpc.generateblock` to be quick about it",
      "created_at": "2024-11-15T16:18:27Z",
      "updated_at": "2024-11-15T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844126187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844126187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844161051",
      "pull_request_review_id": 2439139302,
      "id": 1844161051,
      "node_id": "PRRC_kwDOABII585t66ob",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        sent1 = wallet.send_self_transfer(from_node=node)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 167,
      "original_position": 141,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "micro-nit: less important but a case that would be nice is showing multi-utxo spending txs show up as multiple spends as well as multi-outputs in one tx\r\n\r\n```\r\n    def test_multiple_inputs_outputs(self, node, wallet):\r\n        self.generate(node, 1)\r\n        assert_equal(node.getrawmempool(), [])\r\n\r\n        # Two inputs, two outputs, one tx\r\n        utxos = [wallet.get_utxo(), wallet.get_utxo()]\r\n        wallet.send_self_transfer_multi(from_node=node, num_outputs=2, utxos_to_spend=utxos)\r\n\r\n        blockhash = self.generate(node, 1)[0]\r\n\r\n        result = node.getdescriptoractivity([blockhash], [wallet.get_descriptor()], True)\r\n\r\n        assert_equal(len(result['activity']), 4)\r\n\r\n        # Assertions go here\r\n\r\n``",
      "created_at": "2024-11-15T16:43:32Z",
      "updated_at": "2024-11-15T16:44:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844161051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844161051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844164966",
      "pull_request_review_id": 2439145674,
      "id": 1844164966,
      "node_id": "PRRC_kwDOABII585t67lm",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        sent1 = wallet.send_self_transfer(from_node=node)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 167,
      "original_position": 141,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844161051,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "last test nit: for test cleanliness it'd be nice if we knew that the mempool was empty each sub-case",
      "created_at": "2024-11-15T16:46:56Z",
      "updated_at": "2024-11-15T16:46:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844164966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844164966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844167729",
      "pull_request_review_id": 2439150272,
      "id": 1844167729,
      "node_id": "PRRC_kwDOABII585t68Qx",
      "diff_hunk": "@@ -2585,6 +2585,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n                        {RPCResult::Type::STR, \"address\", \"The address being spent from, empty string if none\"},\r\n```",
      "created_at": "2024-11-15T16:49:26Z",
      "updated_at": "2024-11-15T16:49:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844167729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844167729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2606,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844172214",
      "pull_request_review_id": 2439157698,
      "id": 1844172214,
      "node_id": "PRRC_kwDOABII585t69W2",
      "diff_hunk": "@@ -2585,6 +2585,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1827637623,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Well you can have blockhashes *and* search mempool, so I'm -1 on this suggestion. \"Can be empty for mempool-only results\"?",
      "created_at": "2024-11-15T16:52:02Z",
      "updated_at": "2024-11-15T16:52:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1844172214",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844172214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2620,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846482350",
      "pull_request_review_id": 2442451348,
      "id": 1846482350,
      "node_id": "PRRC_kwDOABII585uDxWu",
      "diff_hunk": "@@ -2585,6 +2585,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1827637623,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't quite understand this^. \r\n\r\nFrom what I understood:\r\nIf `include_mempool` is true, then the `blockhash` can be empty if the transaction is in mempool.\r\nIf `include_mempool` is false, then the `blockhash` can't be empty because there is no other way for the transaction to appear in the result here besides being in a block.\r\n\r\nAm I missing something?",
      "created_at": "2024-11-18T12:13:04Z",
      "updated_at": "2024-11-18T12:13:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1846482350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846482350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2620,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846689340",
      "pull_request_review_id": 2442794717,
      "id": 1846689340,
      "node_id": "PRRC_kwDOABII585uEj48",
      "diff_hunk": "@@ -2585,6 +2585,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1827637623,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My point was it doesn't have to be empty if searching in mempool, as your suggestion sounds to me. ",
      "created_at": "2024-11-18T14:31:22Z",
      "updated_at": "2024-11-18T14:31:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1846689340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846689340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2620,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847188474",
      "pull_request_review_id": 2443598792,
      "id": 1847188474,
      "node_id": "PRRC_kwDOABII585uGdv6",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 91,
      "original_position": 85,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844122547,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added testcases flipping both descriptor order and blockhash order to ensure results don't change.",
      "created_at": "2024-11-18T20:04:11Z",
      "updated_at": "2024-11-18T20:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1847188474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847188474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847193982",
      "pull_request_review_id": 2443598792,
      "id": 1847193982,
      "node_id": "PRRC_kwDOABII585uGfF-",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 115,
      "original_position": 98,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844010301,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added.",
      "created_at": "2024-11-18T20:06:15Z",
      "updated_at": "2024-11-18T20:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1847193982",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847193982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847218317",
      "pull_request_review_id": 2443598792,
      "id": 1847218317,
      "node_id": "PRRC_kwDOABII585uGlCN",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        sent1 = wallet.send_self_transfer(from_node=node)\n+        utxo = sent1['new_utxo']\n+        blockhash_1 = self.generate(node, 1)[0]\n+\n+        sent2 = wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo)\n+        blockhash_2 = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash_1, blockhash_2], [wallet.get_descriptor()], True)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 175,
      "original_position": 149,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844115700,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added tests including duplicate and reversal.",
      "created_at": "2024-11-18T20:20:00Z",
      "updated_at": "2024-11-18T20:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1847218317",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847218317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847219113",
      "pull_request_review_id": 2443598792,
      "id": 1847219113,
      "node_id": "PRRC_kwDOABII585uGlOp",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 163,
      "original_position": 138,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844113097,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment to this effect.",
      "created_at": "2024-11-18T20:20:54Z",
      "updated_at": "2024-11-18T20:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1847219113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847219113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847234154",
      "pull_request_review_id": 2443598792,
      "id": 1847234154,
      "node_id": "PRRC_kwDOABII585uGo5q",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As discussed [on IRC](https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2024-11-15), I've moved all sPK-specific info into a substructure that matches the one used in `getrawtransaction 2`. I've added @instagibbs' test under a commit with him as co-author.",
      "created_at": "2024-11-18T20:34:59Z",
      "updated_at": "2024-11-18T20:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1847234154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847234154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847250753",
      "pull_request_review_id": 2443694253,
      "id": 1847250753,
      "node_id": "PRRC_kwDOABII585uGs9B",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        sent1 = wallet.send_self_transfer(from_node=node)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 167,
      "original_position": 141,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844161051,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe could come as a follow-up?",
      "created_at": "2024-11-18T20:42:45Z",
      "updated_at": "2024-11-18T20:42:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1847250753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847250753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848424503",
      "pull_request_review_id": 2445572953,
      "id": 1848424503,
      "node_id": "PRRC_kwDOABII585uLLg3",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        [unconfirmed] = [a for a in activity if not a['blockhash']]\n+        assert unconfirmed['blockhash'] == \"\"\n+        assert unconfirmed['height'] == -1\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        sent1 = wallet.send_self_transfer(from_node=node)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 167,
      "original_position": 141,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "f383db76ec3aaa9391509c1d9cca763d11b6fe00",
      "in_reply_to_id": 1844161051,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yep feel free to not do this one for now (I just ran into it writing my own test case)",
      "created_at": "2024-11-19T14:03:21Z",
      "updated_at": "2024-11-19T14:03:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1848424503",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848424503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851274367",
      "pull_request_review_id": 2450158177,
      "id": 1851274367,
      "node_id": "PRRC_kwDOABII585uWDR_",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, MiniWalletMode, getnewdestination",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 11,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "non-blocking pico nit\r\n\r\nIf needing to touch this file again:\r\n\r\n> If more than one name from a module is needed, use lexicographically sorted multi-line imports in order to reduce the possibility of potential merge conflicts\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/test/functional/README.md#style-guidelines",
      "created_at": "2024-11-21T03:47:40Z",
      "updated_at": "2024-11-21T04:39:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1851274367",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851274367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851301558",
      "pull_request_review_id": 2450158177,
      "id": 1851301558,
      "node_id": "PRRC_kwDOABII585uWJ62",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, MiniWalletMode, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+        self.test_no_address(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 41,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For a follow-up (if any, or if touching this file again before merge):\r\n\r\nCould explicitly use `getnewdestination(address_type='bech32m')` instead of relying on the default.\r\n\r\nLater in the function, the `output_spk` of the returned activity assumes p2tr. This currently works because bech32m is the default `address_type` argument of `getnewdestination()` (currently creates a p2tr addr). Being explicit prevents future changes from causing the test to fail.",
      "created_at": "2024-11-21T04:17:17Z",
      "updated_at": "2024-11-21T04:38:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1851301558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851301558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851772090",
      "pull_request_review_id": 2450922162,
      "id": 1851772090,
      "node_id": "PRRC_kwDOABII585uX8y6",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, MiniWalletMode, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+        self.test_no_address(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+        assert_equal(list(result.keys()), ['activity'])\n+        [activity] = result['activity']\n+\n+        for k, v in {\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'height': 201,\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            assert_equal(activity[k], v)\n+\n+        outspk = activity['output_spk']\n+\n+        assert_equal(outspk['asm'][:2], '1 ')\n+        assert_equal(outspk['desc'].split('(')[0], 'rawtr')\n+        assert_is_hex_string(outspk['hex'])\n+        assert_equal(outspk['address'], addr_1)\n+        assert_equal(outspk['type'], 'witness_v1_taproot')\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 91,
      "original_position": 91,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can also test here for duplicated addresses at the end of `test_multiple_addresses`.\r\n\r\n```python\r\n        # Duplicated descriptors do not return duplicated results\r\n        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_1})\"], True)\r\n        assert_equal(len(result['activity']), 1)\r\n```",
      "created_at": "2024-11-21T10:19:59Z",
      "updated_at": "2024-11-21T12:18:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1851772090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851772090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851782089",
      "pull_request_review_id": 2450922162,
      "id": 1851782089,
      "node_id": "PRRC_kwDOABII585uX_PJ",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, MiniWalletMode, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+        self.test_no_address(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+        assert_equal(list(result.keys()), ['activity'])\n+        [activity] = result['activity']\n+\n+        for k, v in {\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'height': 201,\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            assert_equal(activity[k], v)\n+\n+        outspk = activity['output_spk']\n+\n+        assert_equal(outspk['asm'][:2], '1 ')\n+        assert_equal(outspk['desc'].split('(')[0], 'rawtr')",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 63,
      "original_position": 63,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nesting `outspk` worked out well, I was not a fan of the special check for `desc` in the loop above earlier but at that moment seemed unavoidable.",
      "created_at": "2024-11-21T10:25:38Z",
      "updated_at": "2024-11-21T12:18:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1851782089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851782089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851787388",
      "pull_request_review_id": 2450922162,
      "id": 1851787388,
      "node_id": "PRRC_kwDOABII585uYAh8",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, MiniWalletMode, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+        self.test_no_address(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+        assert_equal(list(result.keys()), ['activity'])\n+        [activity] = result['activity']\n+\n+        for k, v in {\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'height': 201,",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 53,
      "original_position": 53,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: Although only one usage right now, but making `201` dependent on `200` above in the setup seems more forward facing: https://github.com/bitcoin/bitcoin/pull/30708/files#diff-dfe8598636b25e8bef111dc785f4cfc330e936191d9adb95b66add813a926839R23.\r\n\r\n```python\r\nGENERATED_BLOCKS = 200\r\n...\r\n...\r\n'height': GENERATED_BLOCKS + 1,\r\n```\r\n",
      "created_at": "2024-11-21T10:29:03Z",
      "updated_at": "2024-11-21T12:18:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1851787388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851787388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851877237",
      "pull_request_review_id": 2450922162,
      "id": 1851877237,
      "node_id": "PRRC_kwDOABII585uYWd1",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thinking out loud, not necessary to be a change atm: The crux of these 4 lines is to return a `CBlock` given `chainman.m_blockman, *blockindex` . `block_data` and `block_stream` are not used beyond these 4 lines and seem internal to this intent, a sign these can be encapsulated in a function if we anticipate this pattern to be replicated.\r\n",
      "created_at": "2024-11-21T11:26:01Z",
      "updated_at": "2024-11-21T12:18:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1851877237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851877237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2730,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853082380",
      "pull_request_review_id": 2453006642,
      "id": 1853082380,
      "node_id": "PRRC_kwDOABII585uc8sM",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nThis check seems superfluous as it isn't possible to have two different block hashes at the same height if both are in the main chain.",
      "created_at": "2024-11-21T23:33:30Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853082380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853082380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2662,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2664,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853085989",
      "pull_request_review_id": 2453006642,
      "id": 1853085989,
      "node_id": "PRRC_kwDOABII585uc9kl",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nI would prefer to omit these fields entirely rather than placing dummy values for unconfirmed transactions. This is what the wallet does in `gettransaction`.\r\n\r\nSame below for receive.",
      "created_at": "2024-11-21T23:39:17Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853085989",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853085989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2609,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853087454",
      "pull_request_review_id": 2453006642,
      "id": 1853087454,
      "node_id": "PRRC_kwDOABII585uc97e",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nWhy not `GetBlockChecked`?\r\n\r\nAdditionally, both functions will throw if the block was not found on disk, i.e. pruned. However, since multiple blocks may be passed in, perhaps it should continue with scanning the blocks it can find? Although in that case, it should have a way to report to the user which blocks were skipped.",
      "created_at": "2024-11-21T23:41:33Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853087454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853087454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2730,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853091630",
      "pull_request_review_id": 2453006642,
      "id": 1853091630,
      "node_id": "PRRC_kwDOABII585uc-8u",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 166,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nnit: `tx->IsCoinbase()` is more readable.\r\n\r\n```suggestion\r\n            if (!tx->IsCoinbase()) {\r\n```",
      "created_at": "2024-11-21T23:48:15Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853091630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853091630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2740,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853092768",
      "pull_request_review_id": 2453006642,
      "id": 1853092768,
      "node_id": "PRRC_kwDOABII585uc_Og",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 170,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nnit: snake_case\r\n\r\n```suggestion\r\n                for (size_t vin_idx = 0; vin_idx < tx->vin.size(); ++vin_idx) {\r\n```",
      "created_at": "2024-11-21T23:50:00Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853092768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853092768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2744,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853095376",
      "pull_request_review_id": 2453006642,
      "id": 1853095376,
      "node_id": "PRRC_kwDOABII585uc_3Q",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                    const auto& coin = txundo.vprevout.at(vinIdx);\n+                    const auto& txin = tx->vin.at(vinIdx);\n+                    if (scripts_to_watch.find(coin.out.scriptPubKey) != scripts_to_watch.end()) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 173,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nnit: `.contains()` is more readable\r\n\r\nSame below for vouts\r\n\r\n```suggestion\r\n                    if (scripts_to_watch.contains(coin.out.scriptPubKey)) {\r\n```",
      "created_at": "2024-11-21T23:52:18Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853095376",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853095376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2747,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853099223",
      "pull_request_review_id": 2453006642,
      "id": 1853099223,
      "node_id": "PRRC_kwDOABII585udAzX",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                    const auto& coin = txundo.vprevout.at(vinIdx);\n+                    const auto& txin = tx->vin.at(vinIdx);\n+                    if (scripts_to_watch.find(coin.out.scriptPubKey) != scripts_to_watch.end()) {\n+                        activity.push_back(AddSpend(\n+                                    coin.out.scriptPubKey, coin.out.nValue, tx, vinIdx, txin, blockindex));\n+                    }\n+                }\n+            }\n+\n+            for (size_t voutIdx = 0; voutIdx < tx->vout.size(); ++voutIdx) {\n+                const auto& vout = tx->vout.at(voutIdx);\n+                if (scripts_to_watch.find(vout.scriptPubKey) != scripts_to_watch.end()) {\n+                    activity.push_back(AddReceive(vout, blockindex, voutIdx, tx));\n+                }\n+            }\n+        }\n+    }\n+\n+    bool search_mempool = true;\n+    if (!request.params[2].isNull())\n+        search_mempool = request.params[2].get_bool();\n+\n+    if (search_mempool) {\n+        const CTxMemPool& mempool = EnsureMemPool(node);\n+        LOCK(::cs_main);\n+        LOCK(mempool.cs);\n+        for (const CTxMemPoolEntry& e : mempool.entryAll()) {\n+            const auto& tx = e.GetSharedTx();\n+\n+            const CCoinsViewCache& coins_view = &active_chainstate.CoinsTip();\n+            CScript scriptPubKey;\n+            CAmount value;\n+\n+            for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                const auto& txin = tx->vin.at(vinIdx);\n+                std::optional<Coin> coin = coins_view.GetCoin(txin.prevout);\n+\n+                // Check if the previous output is in the chain\n+                if (!coin) {\n+                    // If not found in the chain, check the mempool. Likely, a child\n+                    // transaction in the mempool has spent the coin.",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nThis comment doesn't make sense to me. It suggests that a different child transaction has spent the coin. But what actually happens in this case is that this transaction (which is already in the mempool) is the child of a transaction that is also in the mempool.",
      "created_at": "2024-11-21T23:58:16Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853099223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853099223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2784,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853099606",
      "pull_request_review_id": 2453006642,
      "id": 1853099606,
      "node_id": "PRRC_kwDOABII585udA5W",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                    const auto& coin = txundo.vprevout.at(vinIdx);\n+                    const auto& txin = tx->vin.at(vinIdx);\n+                    if (scripts_to_watch.find(coin.out.scriptPubKey) != scripts_to_watch.end()) {\n+                        activity.push_back(AddSpend(\n+                                    coin.out.scriptPubKey, coin.out.nValue, tx, vinIdx, txin, blockindex));\n+                    }\n+                }\n+            }\n+\n+            for (size_t voutIdx = 0; voutIdx < tx->vout.size(); ++voutIdx) {\n+                const auto& vout = tx->vout.at(voutIdx);\n+                if (scripts_to_watch.find(vout.scriptPubKey) != scripts_to_watch.end()) {\n+                    activity.push_back(AddReceive(vout, blockindex, voutIdx, tx));\n+                }\n+            }\n+        }\n+    }\n+\n+    bool search_mempool = true;\n+    if (!request.params[2].isNull())\n+        search_mempool = request.params[2].get_bool();\n+\n+    if (search_mempool) {\n+        const CTxMemPool& mempool = EnsureMemPool(node);\n+        LOCK(::cs_main);\n+        LOCK(mempool.cs);\n+        for (const CTxMemPoolEntry& e : mempool.entryAll()) {\n+            const auto& tx = e.GetSharedTx();\n+\n+            const CCoinsViewCache& coins_view = &active_chainstate.CoinsTip();\n+            CScript scriptPubKey;\n+            CAmount value;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 202,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nThese should be scoped in the loop iterating the inputs.",
      "created_at": "2024-11-21T23:58:54Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853099606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853099606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2775,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2776,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853100524",
      "pull_request_review_id": 2453006642,
      "id": 1853100524,
      "node_id": "PRRC_kwDOABII585udBHs",
      "diff_hunk": "@@ -46,5 +47,6 @@ std::string EncodeHexTx(const CTransaction& tx);\n std::string SighashToStr(unsigned char sighash_type);\n void ScriptToUniv(const CScript& script, UniValue& out, bool include_hex = true, bool include_address = false, const SigningProvider* provider = nullptr);\n void TxToUniv(const CTransaction& tx, const uint256& block_hash, UniValue& entry, bool include_hex = true, const CTxUndo* txundo = nullptr, TxVerbosity verbosity = TxVerbosity::SHOW_DETAILS);\n+std::optional<std::string> ScriptToAddress(const CScript& script);",
      "path": "src/core_io.h",
      "position": null,
      "original_position": 12,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nThis function appears to be unused.",
      "created_at": "2024-11-22T00:00:22Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853100524",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853100524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853101842",
      "pull_request_review_id": 2453006642,
      "id": 1853101842,
      "node_id": "PRRC_kwDOABII585udBcS",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 35,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\n`spk_1` is unused.",
      "created_at": "2024-11-22T00:02:35Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853101842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853101842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853104599",
      "pull_request_review_id": 2453006642,
      "id": 1853104599,
      "node_id": "PRRC_kwDOABII585udCHX",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+        assert_equal(list(result.keys()), ['activity'])\n+        [activity] = result['activity']\n+\n+        for k, v in {\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'height': 201,\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            assert_equal(activity[k], v)\n+\n+        outspk = activity['output_spk']\n+\n+        assert_equal(outspk['asm'][:2], '1 ')\n+        assert_equal(outspk['desc'].split('(')[0], 'rawtr')\n+        assert_is_hex_string(outspk['hex'])",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 63,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nThe scriptPubKey bytes are known, so this can directly check they are the same:\r\n\r\n```suggestion\r\n        assert_equal(outspk['hex'], spk_1.hex())\r\n```",
      "created_at": "2024-11-22T00:07:05Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853104599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853104599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853106044",
      "pull_request_review_id": 2453006642,
      "id": 1853106044,
      "node_id": "PRRC_kwDOABII585udCd8",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+        assert_equal(list(result.keys()), ['activity'])\n+        [activity] = result['activity']\n+\n+        for k, v in {\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'height': 201,\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            assert_equal(activity[k], v)\n+\n+        outspk = activity['output_spk']\n+\n+        assert_equal(outspk['asm'][:2], '1 ')\n+        assert_equal(outspk['desc'].split('(')[0], 'rawtr')",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 63,
      "original_position": 62,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In dd19d076c528a075d02fa66aaf906f96fa314450 \"rpc: add getdescriptoractivity\"\r\n\r\nI feel like this check is not meaningfully helpful as `type` is already checked, and the address (and spk too, if my suggestion is tagken) is already directly checked. Furthermore, as the address type is not explicitly specified, I'm not sure that it even makes sense to validate address type when the more important thing is that the correct scriptPubKey and address were found.",
      "created_at": "2024-11-22T00:08:57Z",
      "updated_at": "2024-11-22T00:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853106044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853106044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": 62,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853320033",
      "pull_request_review_id": 2453377158,
      "id": 1853320033,
      "node_id": "PRRC_kwDOABII585ud2th",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                    const auto& coin = txundo.vprevout.at(vinIdx);\n+                    const auto& txin = tx->vin.at(vinIdx);\n+                    if (scripts_to_watch.find(coin.out.scriptPubKey) != scripts_to_watch.end()) {\n+                        activity.push_back(AddSpend(\n+                                    coin.out.scriptPubKey, coin.out.nValue, tx, vinIdx, txin, blockindex));\n+                    }\n+                }\n+            }\n+\n+            for (size_t voutIdx = 0; voutIdx < tx->vout.size(); ++voutIdx) {\n+                const auto& vout = tx->vout.at(voutIdx);\n+                if (scripts_to_watch.find(vout.scriptPubKey) != scripts_to_watch.end()) {\n+                    activity.push_back(AddReceive(vout, blockindex, voutIdx, tx));\n+                }\n+            }\n+        }\n+    }\n+\n+    bool search_mempool = true;\n+    if (!request.params[2].isNull())\n+        search_mempool = request.params[2].get_bool();\n+\n+    if (search_mempool) {\n+        const CTxMemPool& mempool = EnsureMemPool(node);\n+        LOCK(::cs_main);\n+        LOCK(mempool.cs);\n+        for (const CTxMemPoolEntry& e : mempool.entryAll()) {\n+            const auto& tx = e.GetSharedTx();\n+\n+            const CCoinsViewCache& coins_view = &active_chainstate.CoinsTip();\n+            CScript scriptPubKey;\n+            CAmount value;\n+\n+            for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                const auto& txin = tx->vin.at(vinIdx);\n+                std::optional<Coin> coin = coins_view.GetCoin(txin.prevout);\n+\n+                // Check if the previous output is in the chain\n+                if (!coin) {\n+                    // If not found in the chain, check the mempool. Likely, a child\n+                    // transaction in the mempool has spent the coin.",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853099223,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree, I had understood the *essence* of this comment within the context it lies, now that I re-read the comment it seems confusing in the first glance and can be improved. ",
      "created_at": "2024-11-22T05:47:36Z",
      "updated_at": "2024-11-22T05:47:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853320033",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853320033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2784,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853349616",
      "pull_request_review_id": 2453422797,
      "id": 1853349616,
      "node_id": "PRRC_kwDOABII585ud97w",
      "diff_hunk": "@@ -46,5 +47,6 @@ std::string EncodeHexTx(const CTransaction& tx);\n std::string SighashToStr(unsigned char sighash_type);\n void ScriptToUniv(const CScript& script, UniValue& out, bool include_hex = true, bool include_address = false, const SigningProvider* provider = nullptr);\n void TxToUniv(const CTransaction& tx, const uint256& block_hash, UniValue& entry, bool include_hex = true, const CTxUndo* txundo = nullptr, TxVerbosity verbosity = TxVerbosity::SHOW_DETAILS);\n+std::optional<std::string> ScriptToAddress(const CScript& script);",
      "path": "src/core_io.h",
      "position": null,
      "original_position": 12,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853100524,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Probably a remnant of the previous commits now that `ScriptToUniv` is used that essentially contains this functionality but this `ScriptToAddress` function still seems generic enough to be added but in a different commit (or PR because this PR doesn't use it). Though, I doubt adding a function without an usage would be accepted.",
      "created_at": "2024-11-22T06:29:33Z",
      "updated_at": "2024-11-22T06:29:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853349616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853349616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853366459",
      "pull_request_review_id": 2453449037,
      "id": 1853366459,
      "node_id": "PRRC_kwDOABII585ueCC7",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853087454,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Interesting edge case, agree it would be nice to show results for the blocks that can be found. Right now, passing in 1 available block and 1 pruned block in a pruned node results in an error.\r\n\r\nEdit: From a practical standpoint, the usage of this RPC is dependent on the output of the `scannblocks` output, so hitting this case might be relatively rare but it would still be nice to make this RPC more \"_response-friendly\"._\r\n\r\n```\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclimain getblockchaininfo\r\n{\r\n  \"chain\": \"main\",\r\n  \"blocks\": 871458,\r\n  \"headers\": 871458,\r\n  \"bestblockhash\": \"00000000000000000000f8ee686deb34ddfd6d888279a7f0b42f623f938745ea\",\r\n  \"difficulty\": 102289407543323.8,\r\n  ...\r\n  \"pruned\": true,\r\n  \"pruneheight\": 870990,\r\n  \"automatic_pruning\": true,\r\n  \"prune_target_size\": 1073741824,\r\n   ...\r\n}\r\n```\r\n\r\n```\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclimain getdescriptoractivity \\\r\n'[\"00000000000000000001dca75f6da4a2ed1c24547e85e5a89fe75701726fb268\",\"00000000000000000000e7b7e55b630178d7e001e0ed5aace4cb18f26ef5a2d9\"]' \\\r\n'[\"addr(bc1qryhgpmfv03qjhhp2dj8nw8g4ewg08jzmgy3cyx)\"]'\r\nerror code: -1\r\nerror message:\r\nBlock not available (pruned data)\r\n```",
      "created_at": "2024-11-22T06:51:27Z",
      "updated_at": "2024-11-22T07:04:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853366459",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853366459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2730,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853375325",
      "pull_request_review_id": 2453461667,
      "id": 1853375325,
      "node_id": "PRRC_kwDOABII585ueENd",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853087454,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If this behaviour is incorporated, then a test testing with a present block and a pruned block would be nice as well.\r\n\r\nAnd on similar lines, this test `test_invalid_blockhash` can also be updated wherein an invalid block hash and a valid one are passed but result is still returned for the valid one instead of the RPC throwing an error like it does atm. Below the first block is invalid, the second valid.\r\n\r\n```\r\n➜  bitcoin git:(2024-08-getdescriptoractivity) ✗ bitcoinclimain getdescriptoractivity \\\r\n'[\"00000000000000000001dca75f6da4a2ed1c24547e85e5a89fe75701726fb26a\",\"00000000000000000000e7b7e55b630178d7e001e0ed5aace4cb18f26ef5a2d9\"]' \\\r\n'[\"addr(bc1qryhgpmfv03qjhhp2dj8nw8g4ewg08jzmgy3cyx)\"]'\r\nerror code: -5\r\nerror message:\r\nBlock not found\r\n```",
      "created_at": "2024-11-22T07:01:38Z",
      "updated_at": "2024-11-22T07:01:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853375325",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853375325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2730,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853914047",
      "pull_request_review_id": 2454451702,
      "id": 1853914047,
      "node_id": "PRRC_kwDOABII585ugHu_",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                    const auto& coin = txundo.vprevout.at(vinIdx);\n+                    const auto& txin = tx->vin.at(vinIdx);\n+                    if (scripts_to_watch.find(coin.out.scriptPubKey) != scripts_to_watch.end()) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 173,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853095376,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-11-22T13:27:05Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853914047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853914047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2747,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853914205",
      "pull_request_review_id": 2454451702,
      "id": 1853914205,
      "node_id": "PRRC_kwDOABII585ugHxd",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 170,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853092768,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2024-11-22T13:27:13Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853914205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853914205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2744,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853916616",
      "pull_request_review_id": 2454451702,
      "id": 1853916616,
      "node_id": "PRRC_kwDOABII585ugIXI",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853087454,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm going to leave this as-is.\r\n\r\nI think partial results would be weird. I like the current behavior that it will succeed if possible but fail if results would be missing; I think any kind of requirement about running pruned or not would impair cases for which the descriptors the user cares about are on the \"right side\" of the prune cliff.",
      "created_at": "2024-11-22T13:29:14Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853916616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853916616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2730,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853917629",
      "pull_request_review_id": 2454451702,
      "id": 1853917629,
      "node_id": "PRRC_kwDOABII585ugIm9",
      "diff_hunk": "@@ -46,5 +47,6 @@ std::string EncodeHexTx(const CTransaction& tx);\n std::string SighashToStr(unsigned char sighash_type);\n void ScriptToUniv(const CScript& script, UniValue& out, bool include_hex = true, bool include_address = false, const SigningProvider* provider = nullptr);\n void TxToUniv(const CTransaction& tx, const uint256& block_hash, UniValue& entry, bool include_hex = true, const CTxUndo* txundo = nullptr, TxVerbosity verbosity = TxVerbosity::SHOW_DETAILS);\n+std::optional<std::string> ScriptToAddress(const CScript& script);",
      "path": "src/core_io.h",
      "position": null,
      "original_position": 12,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853100524,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed.",
      "created_at": "2024-11-22T13:29:59Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853917629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853917629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853917742",
      "pull_request_review_id": 2454451702,
      "id": 1853917742,
      "node_id": "PRRC_kwDOABII585ugIou",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853085989,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-11-22T13:30:05Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853917742",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853917742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2609,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853918927",
      "pull_request_review_id": 2454451702,
      "id": 1853918927,
      "node_id": "PRRC_kwDOABII585ugI7P",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853082380,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, removed. I forgot that I had a main-chain check in there. I debated about whether this call would be useful for checking balances on orphaned tips, but probably better to just restrict usage to the main chain to avoid confusion.",
      "created_at": "2024-11-22T13:30:57Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853918927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853918927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2662,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2664,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853919432",
      "pull_request_review_id": 2454451702,
      "id": 1853919432,
      "node_id": "PRRC_kwDOABII585ugJDI",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 166,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853091630,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-11-22T13:31:18Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853919432",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853919432"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2740,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853924116",
      "pull_request_review_id": 2454451702,
      "id": 1853924116,
      "node_id": "PRRC_kwDOABII585ugKMU",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                    const auto& coin = txundo.vprevout.at(vinIdx);\n+                    const auto& txin = tx->vin.at(vinIdx);\n+                    if (scripts_to_watch.find(coin.out.scriptPubKey) != scripts_to_watch.end()) {\n+                        activity.push_back(AddSpend(\n+                                    coin.out.scriptPubKey, coin.out.nValue, tx, vinIdx, txin, blockindex));\n+                    }\n+                }\n+            }\n+\n+            for (size_t voutIdx = 0; voutIdx < tx->vout.size(); ++voutIdx) {\n+                const auto& vout = tx->vout.at(voutIdx);\n+                if (scripts_to_watch.find(vout.scriptPubKey) != scripts_to_watch.end()) {\n+                    activity.push_back(AddReceive(vout, blockindex, voutIdx, tx));\n+                }\n+            }\n+        }\n+    }\n+\n+    bool search_mempool = true;\n+    if (!request.params[2].isNull())\n+        search_mempool = request.params[2].get_bool();\n+\n+    if (search_mempool) {\n+        const CTxMemPool& mempool = EnsureMemPool(node);\n+        LOCK(::cs_main);\n+        LOCK(mempool.cs);\n+        for (const CTxMemPoolEntry& e : mempool.entryAll()) {\n+            const auto& tx = e.GetSharedTx();\n+\n+            const CCoinsViewCache& coins_view = &active_chainstate.CoinsTip();\n+            CScript scriptPubKey;\n+            CAmount value;",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 202,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853099606,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-11-22T13:34:02Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853924116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853924116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2775,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2776,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853926722",
      "pull_request_review_id": 2454451702,
      "id": 1853926722,
      "node_id": "PRRC_kwDOABII585ugK1C",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                        {RPCResult::Type::OBJ, \"prevout_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"The height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout of the receiving output\"},\n+                        {RPCResult::Type::OBJ, \"output_spk\", \"\", ScriptPubKeyDoc()},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+\n+    struct CompareByHeightAscending {\n+        bool operator()(const CBlockIndex* a, const CBlockIndex* b) const {\n+            return a->nHeight < b->nHeight;\n+        }\n+    };\n+\n+    std::set<const CBlockIndex*, CompareByHeightAscending> blockindexes_sorted;\n+    std::set<int> heights_seen;\n+\n+    {\n+        // Validate all given blockhashes, and ensure blocks are along a single chain.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            if (blockindexes_sorted.insert(pindex).second) {\n+                if (!heights_seen.insert(pindex->nHeight).second) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Duplicate heights found; blockhashes must be along a single chain\");\n+                }\n+            }\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+\n+    // Determine scripts to watch.\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(spk, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"amount\", ValueFromAmount(val));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"spend_txid\", tx->GetHash().ToString());\n+        event.pushKV(\"spend_vin\", vin);\n+        event.pushKV(\"prevout_txid\", txin.prevout.hash.ToString());\n+        event.pushKV(\"prevout_vout\", txin.prevout.n);\n+        event.pushKV(\"prevout_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    const auto AddReceive = [&](const CTxOut& txout, const CBlockIndex* index, int vout, const CTransactionRef& tx) {\n+        UniValue event(UniValue::VOBJ);\n+        UniValue spkUv(UniValue::VOBJ);\n+        ScriptToUniv(txout.scriptPubKey, /*out=*/spkUv, /*include_hex=*/true, /*include_address=*/true);\n+\n+        event.pushKV(\"type\", \"receive\");\n+        event.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n+        event.pushKV(\"blockhash\", index ? index->GetBlockHash().ToString() : \"\");\n+        event.pushKV(\"height\", index ? index->nHeight : -1);\n+        event.pushKV(\"txid\", tx->GetHash().ToString());\n+        event.pushKV(\"vout\", vout);\n+        event.pushKV(\"output_spk\", spkUv);\n+\n+        return event;\n+    };\n+\n+    BlockManager* blockman;\n+    Chainstate& active_chainstate = chainman.ActiveChainstate();\n+    {\n+        LOCK(::cs_main);\n+        blockman = CHECK_NONFATAL(&active_chainstate.m_blockman);\n+    }\n+\n+    for (const CBlockIndex* blockindex : blockindexes_sorted) {\n+        const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *blockindex)};\n+        DataStream block_stream{block_data};\n+        CBlock block{};\n+        block_stream >> TX_WITH_WITNESS(block);\n+\n+        const CBlockUndo block_undo{GetUndoChecked(*blockman, *blockindex)};\n+\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            if (i > 0) {\n+                // skip coinbase; spends can't happen there.\n+                const auto& txundo = block_undo.vtxundo.at(i - 1);\n+\n+                for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                    const auto& coin = txundo.vprevout.at(vinIdx);\n+                    const auto& txin = tx->vin.at(vinIdx);\n+                    if (scripts_to_watch.find(coin.out.scriptPubKey) != scripts_to_watch.end()) {\n+                        activity.push_back(AddSpend(\n+                                    coin.out.scriptPubKey, coin.out.nValue, tx, vinIdx, txin, blockindex));\n+                    }\n+                }\n+            }\n+\n+            for (size_t voutIdx = 0; voutIdx < tx->vout.size(); ++voutIdx) {\n+                const auto& vout = tx->vout.at(voutIdx);\n+                if (scripts_to_watch.find(vout.scriptPubKey) != scripts_to_watch.end()) {\n+                    activity.push_back(AddReceive(vout, blockindex, voutIdx, tx));\n+                }\n+            }\n+        }\n+    }\n+\n+    bool search_mempool = true;\n+    if (!request.params[2].isNull())\n+        search_mempool = request.params[2].get_bool();\n+\n+    if (search_mempool) {\n+        const CTxMemPool& mempool = EnsureMemPool(node);\n+        LOCK(::cs_main);\n+        LOCK(mempool.cs);\n+        for (const CTxMemPoolEntry& e : mempool.entryAll()) {\n+            const auto& tx = e.GetSharedTx();\n+\n+            const CCoinsViewCache& coins_view = &active_chainstate.CoinsTip();\n+            CScript scriptPubKey;\n+            CAmount value;\n+\n+            for (size_t vinIdx = 0; vinIdx < tx->vin.size(); ++vinIdx) {\n+                const auto& txin = tx->vin.at(vinIdx);\n+                std::optional<Coin> coin = coins_view.GetCoin(txin.prevout);\n+\n+                // Check if the previous output is in the chain\n+                if (!coin) {\n+                    // If not found in the chain, check the mempool. Likely, a child\n+                    // transaction in the mempool has spent the coin.",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853099223,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2024-11-22T13:35:36Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853926722",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853926722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2784,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853927484",
      "pull_request_review_id": 2454451702,
      "id": 1853927484,
      "node_id": "PRRC_kwDOABII585ugLA8",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 35,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853101842,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2024-11-22T13:36:07Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853927484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853927484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853928443",
      "pull_request_review_id": 2454451702,
      "id": 1853928443,
      "node_id": "PRRC_kwDOABII585ugLP7",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, MiniWalletMode, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+        self.test_no_address(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 41,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "in_reply_to_id": 1851301558,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-11-22T13:36:50Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853928443",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853928443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853933331",
      "pull_request_review_id": 2454451702,
      "id": 1853933331,
      "node_id": "PRRC_kwDOABII585ugMcT",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+        assert_equal(list(result.keys()), ['activity'])\n+        [activity] = result['activity']\n+\n+        for k, v in {\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'height': 201,\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            assert_equal(activity[k], v)\n+\n+        outspk = activity['output_spk']\n+\n+        assert_equal(outspk['asm'][:2], '1 ')\n+        assert_equal(outspk['desc'].split('(')[0], 'rawtr')",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 63,
      "original_position": 62,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853106044,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IMO it's fine to sort of overconstrain here; if these results change, we should know about it. I've specified the address type as @tdb3 suggested above.",
      "created_at": "2024-11-22T13:40:19Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853933331",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853933331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": 62,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853935972",
      "pull_request_review_id": 2454451702,
      "id": 1853935972,
      "node_id": "PRRC_kwDOABII585ugNFk",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+        assert_equal(list(result.keys()), ['activity'])\n+        [activity] = result['activity']\n+\n+        for k, v in {\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'height': 201,\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            assert_equal(activity[k], v)\n+\n+        outspk = activity['output_spk']\n+\n+        assert_equal(outspk['asm'][:2], '1 ')\n+        assert_equal(outspk['desc'].split('(')[0], 'rawtr')\n+        assert_is_hex_string(outspk['hex'])",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 63,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853104599,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2024-11-22T13:42:11Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853935972",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853935972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853938164",
      "pull_request_review_id": 2454451702,
      "id": 1853938164,
      "node_id": "PRRC_kwDOABII585ugNn0",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, assert_is_hex_string\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, MiniWalletMode, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_invalid_descriptor(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+        self.test_no_address(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+        assert_equal(list(result.keys()), ['activity'])\n+        [activity] = result['activity']\n+\n+        for k, v in {\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'height': 201,\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            assert_equal(activity[k], v)\n+\n+        outspk = activity['output_spk']\n+\n+        assert_equal(outspk['asm'][:2], '1 ')\n+        assert_equal(outspk['desc'].split('(')[0], 'rawtr')\n+        assert_is_hex_string(outspk['hex'])\n+        assert_equal(outspk['address'], addr_1)\n+        assert_equal(outspk['type'], 'witness_v1_taproot')\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 91,
      "original_position": 91,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "878b6c85466366c4ae5f454ec49b5a5f561e0ed2",
      "in_reply_to_id": 1851772090,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added.",
      "created_at": "2024-11-22T13:43:51Z",
      "updated_at": "2024-11-22T14:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1853938164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1853938164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859024481",
      "pull_request_review_id": 2462352207,
      "id": 1859024481,
      "node_id": "PRRC_kwDOABII585uznZh",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853085989,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`blockhash` should be omitted too.",
      "created_at": "2024-11-26T18:04:16Z",
      "updated_at": "2024-11-26T18:04:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1859024481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859024481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2609,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859531317",
      "pull_request_review_id": 2463208140,
      "id": 1859531317,
      "node_id": "PRRC_kwDOABII585u1jI1",
      "diff_hunk": "@@ -2585,6 +2587,239 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity. Order doesn't matter.\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "37a5c5d83664c31d83fc649d3c8c858bd5f10f21",
      "original_commit_id": "dd19d076c528a075d02fa66aaf906f96fa314450",
      "in_reply_to_id": 1853085989,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2024-11-27T01:09:44Z",
      "updated_at": "2024-11-27T01:09:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1859531317",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859531317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 2609,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2610,
      "side": "RIGHT"
    }
  ]
}